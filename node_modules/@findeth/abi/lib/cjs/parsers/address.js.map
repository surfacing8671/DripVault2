{"version":3,"sources":["../../../src/parsers/address.ts"],"names":["address","isDynamic","encode","buffer","value","addressBuffer","padStart","decode","slice"],"mappings":";;;;;;;AACA;;AAEO,MAAMA,OAAuB,GAAG;AACrCC,EAAAA,SAAS,EAAE,KAD0B;;AAGrCC,EAAAA,MAAM,CAAC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAD,EAAgC;AACpC,UAAMC,aAAa,GAAG,oBAAQ,wBAAYD,KAAZ,EAAmBE,QAAnB,CAA4B,EAA5B,EAAgC,GAAhC,CAAR,CAAtB;AAEA,WAAO,mBAAO,CAACH,MAAD,EAASE,aAAT,CAAP,CAAP;AACD,GAPoC;;AASrCE,EAAAA,MAAM,CAAC;AAAEH,IAAAA;AAAF,GAAD,EAAgC;AACpC,WAAQ,KAAI,kBAAMA,KAAK,CAACI,KAAN,CAAY,EAAZ,EAAgB,EAAhB,CAAN,CAA2B,EAAvC;AACD;;AAXoC,CAAhC","sourcesContent":["import { DecodeArgs, Parser } from '../types';\nimport { concat, fromHex, stripPrefix, toHex } from '../utils';\n\nexport const address: Parser<string> = {\n  isDynamic: false,\n\n  encode({ buffer, value }): Uint8Array {\n    const addressBuffer = fromHex(stripPrefix(value).padStart(64, '0'));\n\n    return concat([buffer, addressBuffer]);\n  },\n\n  decode({ value }: DecodeArgs): string {\n    return `0x${toHex(value.slice(12, 32))}`;\n  }\n};\n"],"file":"address.js"}