{"version":3,"sources":["../../../src/parsers/address.ts"],"names":["concat","fromHex","stripPrefix","toHex","address","isDynamic","encode","buffer","value","addressBuffer","padStart","decode","slice"],"mappings":"AACA,SAASA,MAAT,EAAiBC,OAAjB,EAA0BC,WAA1B,EAAuCC,KAAvC,QAAoD,UAApD;AAEA,OAAO,MAAMC,OAAuB,GAAG;AACrCC,EAAAA,SAAS,EAAE,KAD0B;;AAGrCC,EAAAA,MAAM,CAAC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAD,EAAgC;AACpC,UAAMC,aAAa,GAAGR,OAAO,CAACC,WAAW,CAACM,KAAD,CAAX,CAAmBE,QAAnB,CAA4B,EAA5B,EAAgC,GAAhC,CAAD,CAA7B;AAEA,WAAOV,MAAM,CAAC,CAACO,MAAD,EAASE,aAAT,CAAD,CAAb;AACD,GAPoC;;AASrCE,EAAAA,MAAM,CAAC;AAAEH,IAAAA;AAAF,GAAD,EAAgC;AACpC,WAAQ,KAAIL,KAAK,CAACK,KAAK,CAACI,KAAN,CAAY,EAAZ,EAAgB,EAAhB,CAAD,CAAsB,EAAvC;AACD;;AAXoC,CAAhC","sourcesContent":["import { DecodeArgs, Parser } from '../types';\nimport { concat, fromHex, stripPrefix, toHex } from '../utils';\n\nexport const address: Parser<string> = {\n  isDynamic: false,\n\n  encode({ buffer, value }): Uint8Array {\n    const addressBuffer = fromHex(stripPrefix(value).padStart(64, '0'));\n\n    return concat([buffer, addressBuffer]);\n  },\n\n  decode({ value }: DecodeArgs): string {\n    return `0x${toHex(value.slice(12, 32))}`;\n  }\n};\n"],"file":"address.js"}