{"version":3,"sources":["../../../src/parsers/bool.ts"],"names":["number","getBooleanValue","value","bool","isDynamic","encode","buffer","booleanValue","type","decode","args"],"mappings":"AACA,SAASA,MAAT,QAAuB,UAAvB;AAQA,OAAO,MAAMC,eAAe,GAAIC,KAAD,IAAgC;AAC7D,MAAIA,KAAK,KAAK,IAAV,IAAmB,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,MAA1D,IAAqEA,KAAK,KAAK,KAAnF,EAA0F;AACxF,WAAO,EAAP;AACD;;AAED,SAAO,EAAP;AACD,CANM;AAQP,OAAO,MAAMC,IAAkC,GAAG;AAChDC,EAAAA,SAAS,EAAE,KADqC;;AAGhDC,EAAAA,MAAM,CAAC;AAAEC,IAAAA,MAAF;AAAUJ,IAAAA;AAAV,GAAD,EAAyD;AAC7D,UAAMK,YAAY,GAAGN,eAAe,CAACC,KAAD,CAApC;AACA,WAAOF,MAAM,CAACK,MAAP,CAAc;AAAEG,MAAAA,IAAI,EAAE,SAAR;AAAmBF,MAAAA,MAAnB;AAA2BJ,MAAAA,KAAK,EAAEK;AAAlC,KAAd,CAAP;AACD,GAN+C;;AAQhDE,EAAAA,MAAM,CAACC,IAAD,EAA4B;AAChC,WAAOV,MAAM,CAACS,MAAP,CAAc,EAAE,GAAGC,IAAL;AAAWF,MAAAA,IAAI,EAAE;AAAjB,KAAd,MAAgD,EAAvD;AACD;;AAV+C,CAA3C","sourcesContent":["import { BooleanLike, DecodeArgs, EncodeArgs, Parser } from '../types';\nimport { number } from './number';\n\n/**\n * Get a number for a boolean-like value (e.g., strings).\n *\n * @param value The value to get a boolean for.\n * @return The parsed boolean value. This is 1n for truthy values, or 0n for falsy values.\n */\nexport const getBooleanValue = (value: BooleanLike): bigint => {\n  if (value === true || (typeof value === 'string' && value === 'true') || value === 'yes') {\n    return 1n;\n  }\n\n  return 0n;\n};\n\nexport const bool: Parser<BooleanLike, boolean> = {\n  isDynamic: false,\n\n  encode({ buffer, value }: EncodeArgs<BooleanLike>): Uint8Array {\n    const booleanValue = getBooleanValue(value);\n    return number.encode({ type: 'uint256', buffer, value: booleanValue });\n  },\n\n  decode(args: DecodeArgs): boolean {\n    return number.decode({ ...args, type: 'uint256' }) === 1n;\n  }\n};\n"],"file":"bool.js"}