{"version":3,"sources":["../../src/abi.ts"],"names":["pack","unpack","encode","types","values","Uint8Array","decode","buffer"],"mappings":"AAAA,SAASA,IAAT,EAAeC,MAAf,QAA6B,UAA7B;AAUA,OAAO,MAAMC,MAAM,GAAG,CACpBC,KADoB,EAEpBC,MAFoB,KAGL;AACf,SAAOJ,IAAI,CAACG,KAAD,EAAQC,MAAR,EAAgB,IAAIC,UAAJ,EAAhB,CAAX;AACD,CALM;AAcP,OAAO,MAAMC,MAAM,GAAG,CAAiCH,KAAjC,EAAmDI,MAAnD,KAAyF;AAC7G,SAAON,MAAM,CAACE,KAAD,EAAQI,MAAR,CAAb;AACD,CAFM","sourcesContent":["import { pack, unpack } from './packer';\nimport { InputTypeMap, Narrow, Type, TypeMapper } from './types';\n\n/**\n * Encode the data with the provided types.\n *\n * @param types The types to encode.\n * @param values The values to encode. This array must have the same length as the types array.\n * @return The ABI encoded buffer.\n */\nexport const encode = <T extends Array<Type | string>>(\n  types: Narrow<T>,\n  values: TypeMapper<T, InputTypeMap>\n): Uint8Array => {\n  return pack(types, values, new Uint8Array());\n};\n\n/**\n * Decode an ABI encoded buffer with the specified types.\n *\n * @param types The types to decode the buffer with.\n * @param buffer The buffer to decode.\n * @return The decoded values as array.\n */\nexport const decode = <T extends Array<Type | string>>(types: Narrow<T>, buffer: Uint8Array): TypeMapper<T> => {\n  return unpack(types, buffer) as TypeMapper<T>;\n};\n"],"file":"abi.js"}