{
	"id": "9a1a2ab3cae77965bc557e1f4b2dc9d3",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.4",
	"solcLongVersion": "0.7.4+commit.3f05b770",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/DiamodSafe.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.4;\n\nimport \"./Address.sol\";\nimport \"./SafeMath.sol\";\nimport \"./SafeERC20.sol\";\n\nimport \"./IERC20.sol\";\n\nimport \"./Ownable.sol\";\nimport \"./IERC721.sol\";\nimport \"./ReentrancyGuard.sol\";\n\ncontract DiamondSafe is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint;\n\n    // Import the BEP20 token interface\n    IERC20 public stakingToken;\n    \n    /*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n    $$$CONFIGURABLES AND VARIABLES$$$\n    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/\n    //NFT amount to hold for immunity\n    uint256 public requiredBalance;\n\n    // Store the token address and the reserve address as well as the NFTs\n    address public tokenAddress;\n    address payable public bnbReceiver;\n    IERC721[] public jpeg;\n    // Store the number of unique users and total Tx's\n    uint public users;\n    uint public totalTxs;\n\n    // Store the starting time & block number and the last payout time\n    uint public lastPayout; // What time was the last payout (timestamp)?\n\n    // Store the details of total deposits & claims\n    uint public totalClaims;\n    uint public totalDeposits;\n\n    // Store the total drip pool balance and rate\n    uint public dripPoolBalance;\n    uint8 public dripRate;\n\n    // 10% fee on deposit and withdrawal\n    uint8 internal constant divsFee = 0;\n    uint256 internal constant magnitude = 2 ** 64;\n\n    // How many portions of the fees does each receiver get?\n    uint public forPool;\n    uint public forDivs;\n\n    // Rebase and payout frequency\n    uint256 public constant rebaseFrequency = 2 seconds;\n    uint256 public constant payoutFrequency = 2 seconds;\n\n    // Timestamp of last rebase\n    uint256 public lastRebaseTime;\n\n    // Current total tokens staked, and profit per share\n    uint256 private currentTotalStaked;\n    uint256 private profitPerShare_;\n\n    /*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n    $$ MODIFIERS                    $$\n    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/\n\n    // Only holders - Caller must have funds in the vault\n    modifier onlyHolders() {\n        require(myTokens() > 0);\n        _;\n    }\n\n    // Only earners - Caller must have some earnings\n    modifier onlyEarners() {\n        require(myEarnings() > 0);\n        _;\n    }\n\n    /*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n     $$ ACCOUNT STRUCT                 $$\n     $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/\n\n    struct Account {\n        uint deposited;\n        uint withdrawn;\n        uint compounded;\n        uint rewarded;\n        uint contributed;\n        uint transferredShares;\n        uint receivedShares;\n        uint xInvested;\n        uint xCompounded;\n        uint xRewarded;\n        uint xContributed;\n        uint xWithdrawn;\n        uint xTransferredShares;\n        uint xReceivedShares;\n    }\n\n    /*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n    $$ MAPPINGS                       $$\n    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/\n\n    mapping(address => int256) payoutsOf_;\n    mapping(address => uint256) balanceOf_;\n    mapping(address => Account) accountOf_;\n\n    /*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n    $$ EVENTS                         $$\n    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/\n\n    event onDeposit(\n        address indexed _user,\n        uint256 _deposited,\n        uint256 tokensMinted,\n        uint timestamp\n    );\n    event onWithdraw(\n        address indexed _user,\n        uint256 _liquidated,\n        uint256 tokensEarned,\n        uint timestamp\n    );\n    event onCompound(\n        address indexed _user,\n        uint256 _compounded,\n        uint256 tokensMinted,\n        uint timestamp\n    );\n    event onWithdraw(address indexed _user, uint256 _withdrawn, uint timestamp);\n    event onTransfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens,\n        uint timestamp\n    );\n    event onUpdate(\n        address indexed _user,\n        uint256 invested,\n        uint256 tokens,\n        uint256 soldTokens,\n        uint timestamp\n    );\n\n    event onRebase(uint256 balance, uint256 timestamp);\n\n    event onDonate(address indexed from, uint256 _contributed, uint timestamp);\n    event onDonateBNB(address indexed from, uint256 amount, uint timestamp);\n\n    event onSetFeeSplit(uint _pool, uint _divs, uint256 timestamp);\n    event onSetImmunityToken(\n        address indexed _caller,\n        IERC721 []oldOne,\n        IERC721 []newOne,\n        uint256 timestamp\n    );\n\n    /*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n    $$ CONSTRUCTOR                    $$\n    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/\n\n    constructor(address _tokenAddress, uint8 _dripRate) Ownable() {\n        require(\n            _tokenAddress != address(0) && Address.isContract(_tokenAddress),\n            \"INVALID_ADDRESS\"\n        );\n\n        tokenAddress = _tokenAddress;\n        stakingToken = IERC20(_tokenAddress);\n\n        bnbReceiver = msg.sender;\n\n        // Set Drip Rate and last payout date (first time around)...\n        dripRate = _dripRate;\n        lastPayout = (block.timestamp);\n\n        // Fee portions\n        forPool = 2;\n        forDivs = 1;\n\n        requiredBalance = 1;\n    }\n\n    /*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n    $$ FALLBACK                       $$\n    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/\n\n    receive() external payable {\n        Address.sendValue(bnbReceiver, msg.value);\n        emit onDonateBNB(msg.sender, msg.value, block.timestamp);\n    }\n\n    /*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n    $$ WRITE FUNCTIONS                $$\n    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/\n\n    // Donate\n    function donate(uint _amount) public returns (uint256) {\n        // Move the tokens from the caller's wallet to this contract.\n        require(stakingToken.transferFrom(msg.sender, address(this), _amount));\n\n        // Add the tokens to the drip pool balance\n        dripPoolBalance += _amount;\n        accountOf_[msg.sender].xContributed += 1;\n        accountOf_[msg.sender].contributed += _amount;\n\n        // Tell the network, successful function - how much in the pool now?\n        emit onDonate(msg.sender, _amount, block.timestamp);\n        return dripPoolBalance;\n    }\n\n    // Deposit\n    function deposit(uint _amount) public returns (uint256) {\n        return depositTo(msg.sender, _amount);\n    }\n\n    // DepositTo\n    function depositTo(address _user, uint _amount) public returns (uint256) {\n        // Move the tokens from the caller's wallet to this contract.\n        require(stakingToken.transferFrom(msg.sender, address(this), _amount));\n\n        // Add the deposit to the totalDeposits...\n        totalDeposits += _amount;\n\n        // Then actually call the deposit method...\n        uint amount = _depositTokens(_user, _amount);\n\n        // Update the leaderboard...\n        emit onUpdate(\n            _user,\n            accountOf_[_user].deposited,\n            balanceOf_[_user],\n            accountOf_[_user].withdrawn,\n            block.timestamp\n        );\n\n        // Then trigger a distribution for everyone, kind soul!\n        distribute();\n\n        // Successful function - how many 'shares' (tokens) are the result?\n        return amount;\n    }\n\n    // Compound\n    function compound() public onlyEarners {\n        _compoundTokens();\n    }\n\n    // Harvest\n    function harvest() public onlyEarners {\n        address _user = msg.sender;\n        uint256 _dividends = myEarnings();\n\n        // Calculate the payout, add it to the user's total paid out accounting...\n        payoutsOf_[_user] += (int256)(_dividends * magnitude);\n\n        // Pay the user their tokens to their wallet\n        stakingToken.transfer(_user, _dividends);\n\n        // Update accounting for user/total withdrawal stats...\n        accountOf_[_user].withdrawn = SafeMath.add(\n            accountOf_[_user].withdrawn,\n            _dividends\n        );\n        accountOf_[_user].xWithdrawn += 1;\n\n        // Update total Tx's and claims stats\n        totalTxs += 1;\n        totalClaims += _dividends;\n\n        // Tell the network...\n        emit onWithdraw(_user, _dividends, block.timestamp);\n\n        // Trigger a distribution for everyone, kind soul!\n        distribute();\n    }\n\n    // Withdraw\n    function withdraw(uint256 _amount) public onlyHolders {\n        address _user = msg.sender;\n        require(_amount <= balanceOf_[_user]);\n         uint256 _undividedDividends = SafeMath.mul(_amount, divsFee) / 100;\n                \n       // bool isImmune = checkImmunity(msg.sender);\n        //Checks immunity\n       // if (isImmune) {\n            //Sets amount of tokens to be taxed to 0 of immune\n           _undividedDividends = 0;  \n          // } \n         // Calculate dividends and 'shares' (tokens)\n        uint256  _taxedTokens = SafeMath.sub(_amount, _undividedDividends);\n        currentTotalStaked = SafeMath.sub(currentTotalStaked, _amount);\n        balanceOf_[_user] = SafeMath.sub(balanceOf_[_user], _amount);\n\n        // Update the payment ratios for the user and everyone else...\n        int256 _updatedPayouts = (int256)(\n            profitPerShare_ * _amount + (_taxedTokens * magnitude)\n        );\n        payoutsOf_[_user] -= _updatedPayouts;\n\n        // Serve dividends between the drip and instant divs (4:1)...\n        allocateFees(_undividedDividends);\n\n        // Tell the network, and trigger a distribution\n        emit onWithdraw(_user, _amount, _taxedTokens, block.timestamp);\n\n        // Update the leaderboard...\n        emit onUpdate(\n            _user,\n            accountOf_[_user].deposited,\n            balanceOf_[_user],\n            accountOf_[_user].withdrawn,\n            block.timestamp\n        );\n        // Trigger a distribution for everyone, kind soul!\n        distribute();\n        }\n     // Transfer\n    function transfer(\n        address _to,\n        uint256 _amount\n    ) external onlyHolders returns (bool) {\n        return _transferTokens(_to, _amount);\n    }\n\n    /*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n    $$VIEW FUNCTIONS                 $$\n    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/\n\n    // User is immune to withdraw fees when holding an item\n    function checkImmunity(address _user) public view returns (bool isImmune) {\n        uint256 x = 0;\n        IERC721 jpegTest1;\n        for(uint i =0; i < jpeg.length; i++){\n            jpegTest1 = IERC721(jpeg[i]);\n             x += jpegTest1.balanceOf(_user);\n        }\n       if (x >= requiredBalance) {\n            return true;\n        }\n        return false;\n    }\n\n    function myTokens() public view returns (uint256) {\n        return balanceOf(msg.sender);\n    }\n\n    function myEarnings() public view returns (uint256) {\n        return dividendsOf(msg.sender);\n    }\n\n    function balanceOf(address _user) public view returns (uint256) {\n        return balanceOf_[_user];\n    }\n\n    function tokenBalance(address _user) public view returns (uint256) {\n        return _user.balance;\n    }\n\n    function totalBalance() public view returns (uint256) {\n        return stakingToken.balanceOf(address(this));\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return currentTotalStaked;\n    }\n\n    function dividendsOf(address _user) public view returns (uint256) {\n        return\n            (uint256)(\n                (int256)(profitPerShare_ * balanceOf_[_user]) -\n                    payoutsOf_[_user]\n            ) / magnitude;\n    }\n\n    function sellPrice() public pure  returns (uint256) {\n        uint256 _tokens = 1e18;\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_tokens, divsFee), 100);\n        uint256 _taxedTokens = SafeMath.sub(_tokens, _dividends);\n        return _taxedTokens;\n    }\n\n    function buyPrice() public pure returns (uint256) {\n        uint256 _tokens = 1e18;\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_tokens, divsFee), 100);\n        uint256 _taxedTokens = SafeMath.add(_tokens, _dividends);\n        return _taxedTokens;\n    }\n\n    function calculateSharesReceived(\n        uint256 _amount\n    ) public pure returns (uint256) {\n        uint256 _divies = SafeMath.div(SafeMath.mul(_amount, divsFee), 100);\n        uint256 _remains = SafeMath.sub(_amount, _divies);\n        uint256 _result = _remains;\n        return _result;\n    }\n\n    function calculateTokensReceived(\n        uint256 _amount\n    ) public view returns (uint256) {\n        require(_amount <= currentTotalStaked);\n        uint256 _tokens = _amount;\n        uint256 _divies = SafeMath.div(SafeMath.mul(_tokens, divsFee), 100);\n        uint256 _remains = SafeMath.sub(_tokens, _divies);\n        return _remains;\n    }\n\n    function accountOf(address _user) public view returns (uint256[14] memory) {\n        Account memory a = accountOf_[_user];\n        uint256[14] memory accountArray = [\n            a.deposited,\n            a.withdrawn,\n            a.rewarded,\n            a.compounded,\n            a.contributed,\n            a.transferredShares,\n            a.receivedShares,\n            a.xInvested,\n            a.xRewarded,\n            a.xContributed,\n            a.xWithdrawn,\n            a.xTransferredShares,\n            a.xReceivedShares,\n            a.xCompounded\n        ];\n        return accountArray;\n    }\n\n    function dailyEstimate(address _user) public view returns (uint256) {\n        uint256 share = dripPoolBalance.mul(dripRate).div(1);\n        return\n            (currentTotalStaked > 0)\n                ? share.mul(balanceOf_[_user]).div(currentTotalStaked)\n                : 0;\n    }\n\n    /*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n    $$ PUBLIC OWNER-ONLY FUNCTIONS $$\n    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/\n    function setFeeSplit(\n        uint256 _pool,\n        uint256 _divs\n    ) public onlyOwner returns (bool _success) {\n        require(_pool.add(_divs) == 3, \"TEN_PORTIONS_REQUIRE_DIVISION\");\n\n        // Set the new values...\n        forPool = _pool;\n        forDivs = _divs;\n\n        // Tell the network, successful function!\n        emit onSetFeeSplit(_pool, _divs, block.timestamp);\n        return true;\n    }\n\n   // make a set of NFT available for immunity withdraw\n    function setImmunityToken(\n        IERC721[] memory _contract\n    ) public onlyOwner returns (bool _success) {\n    for(uint i =0; i < jpeg.length; i++){\n    // check to make sure they are ERC721 tokens\n   require(_contract[i].supportsInterface(0x80ac58cd), \"NOT_ERC721\");    \n    }\n        IERC721[] memory oldContract = jpeg;\n        jpeg = _contract;\n\n        emit onSetImmunityToken(\n            msg.sender,\n            oldContract,\n            _contract,\n            block.timestamp\n        );\n        return true;\n    }\n\n    /*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n    $$ PRIVATE / INTERNAL FUNCTIONS   $$\n    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/\n\n    // Allocate fees (private method)\n    function allocateFees(uint fee) private {\n        uint256 _onePiece = fee.div(10);\n\n        uint256 _forPool = (_onePiece.mul(forPool)); // for the Drip Pool\n        uint256 _forDivs = (_onePiece.mul(forDivs)); // for Instant Divs\n\n        dripPoolBalance = dripPoolBalance.add(_forPool);\n\n        // If there's more than 0 tokens staked in the vault...\n        if (currentTotalStaked > 0) {\n            // Distribute those instant divs...\n            profitPerShare_ = SafeMath.add(\n                profitPerShare_,\n                (_forDivs * magnitude) / currentTotalStaked\n            );\n        } else {\n            // Otherwise add the divs portion to the drip pool balance.\n            dripPoolBalance += _forDivs;\n        }\n    }\n\n    // Distribute (private method)\n    function distribute() private {\n        uint _currentTimestamp = (block.timestamp);\n\n        // Log a rebase, if it's time to do so...\n        if (_currentTimestamp.safeSub(lastRebaseTime) > rebaseFrequency) {\n            // Tell the network...\n            emit onRebase(totalBalance(), _currentTimestamp);\n\n            // Update the time this was last updated...\n            lastRebaseTime = _currentTimestamp;\n        }\n\n        // If there's any time difference...\n        if (\n            SafeMath.safeSub(_currentTimestamp, lastPayout) > payoutFrequency &&\n            currentTotalStaked > 0\n        ) {\n            // Calculate shares and profits...\n            uint256 share = dripPoolBalance.mul(dripRate).div(1).div(\n                24 hours\n            );\n            uint256 profit = share * _currentTimestamp.safeSub(lastPayout);\n\n            // Subtract from drip pool balance and add to all user earnings\n            dripPoolBalance = dripPoolBalance.safeSub(profit);\n            profitPerShare_ = SafeMath.add(\n                profitPerShare_,\n                (profit * magnitude) / currentTotalStaked\n            );\n\n            // Update the last payout timestamp\n            lastPayout = _currentTimestamp;\n        }\n    }\n\n    // Deposit Tokens (internal method)\n    function _depositTokens(\n        address _recipient,\n        uint256 _amount\n    ) internal returns (uint256) {\n        // If the recipient has zero activity, they're new - COUNT THEM!!!\n        if (\n            accountOf_[_recipient].deposited == 0 &&\n            accountOf_[_recipient].receivedShares == 0\n        ) {\n            users += 1;\n        }\n\n        // Count this tx...\n        totalTxs += 1;     \n         uint256 _undividedDividends = SafeMath.mul(_amount, divsFee) / 100;\n          uint256   _tokens = SafeMath.sub(_amount, _undividedDividends);\n\n       \n        // Tell the network...\n        emit onDeposit(_recipient, _amount, _tokens, block.timestamp);\n\n        // There needs to be something being added in this call...\n        require(\n            _tokens > 0 &&\n                SafeMath.add(_tokens, currentTotalStaked) > currentTotalStaked\n        );\n        if (currentTotalStaked > 0) {\n            currentTotalStaked += _tokens;\n        } else {\n            currentTotalStaked = _tokens;\n        }\n\n        // Allocate fees, and balance to the recipient\n        allocateFees(_undividedDividends);\n        balanceOf_[_recipient] = SafeMath.add(balanceOf_[_recipient], _tokens);\n\n        // Updated payouts...\n        int256 _updatedPayouts = (int256)(profitPerShare_ * _tokens);\n\n        // Update stats...\n        payoutsOf_[_recipient] += _updatedPayouts;\n        accountOf_[_recipient].deposited += _amount;\n        accountOf_[_recipient].xInvested += 1;\n\n        // Successful function - how many \"shares\" generated?\n        return _tokens;\n    }\n\n    // Compound (internal method)\n    function _compoundTokens() internal returns (uint256) {\n        address _user = msg.sender;\n\n        // Quickly roll the caller's earnings into their payouts\n        uint256 _dividends = dividendsOf(_user);\n        payoutsOf_[_user] += (int256)(_dividends * magnitude);\n\n        // Then actually trigger the deposit method\n        // (NOTE: No tokens required here, earnings are tokens already within the contract)\n        uint256 _tokens = _depositTokens(msg.sender, _dividends);\n\n        // Tell the network...\n        emit onCompound(_user, _dividends, _tokens, block.timestamp);\n\n        // Then update the stats...\n        accountOf_[_user].compounded = SafeMath.add(\n            accountOf_[_user].compounded,\n            _dividends\n        );\n        accountOf_[_user].xCompounded += 1;\n\n        // Update the leaderboard...\n        emit onUpdate(\n            _user,\n            accountOf_[_user].deposited,\n            balanceOf_[_user],\n            accountOf_[_user].withdrawn,\n            block.timestamp\n        );\n\n        // Then trigger a distribution for everyone, you kind soul!\n        distribute();\n\n        // Successful function!\n        return _tokens;\n    }\n\n    // Transfer Tokens (internal method)\n    function _transferTokens(\n        address _recipient,\n        uint256 _amount\n    ) internal returns (bool _success) {\n        address _sender = msg.sender;\n        require(_amount <= balanceOf_[_sender]);\n\n        // Harvest any earnings before transferring, to help with cleaner accounting\n        if (myEarnings() > 0) {\n            harvest();\n        }\n\n        // \"Move\" the tokens...\n        balanceOf_[_sender] = SafeMath.sub(balanceOf_[_sender], _amount);\n        balanceOf_[_recipient] = SafeMath.add(balanceOf_[_recipient], _amount);\n\n        // Adjust payout ratios to match the new balances...\n        payoutsOf_[_sender] -= (int256)(profitPerShare_ * _amount);\n        payoutsOf_[_recipient] += (int256)(profitPerShare_ * _amount);\n\n        // If the recipient has zero activity, they're new - COUNT THEM!!!\n        if (\n            accountOf_[_recipient].deposited == 0 &&\n            accountOf_[_recipient].receivedShares == 0\n        ) {\n            users += 1;\n        }\n        // Update stats...\n        accountOf_[_sender].xTransferredShares += 1;\n        accountOf_[_sender].transferredShares += _amount;\n        accountOf_[_recipient].receivedShares += _amount;\n        accountOf_[_recipient].xReceivedShares += 1;\n\n        // Add this to the Tx counter...\n        totalTxs += 1;\n\n        // Tell the network, successful function!\n        emit onTransfer(_sender, _recipient, _amount, block.timestamp);\n\n        // Update the leaderboard for sender...\n        emit onUpdate(\n            _sender,\n            accountOf_[_sender].deposited,\n            balanceOf_[_sender],\n            accountOf_[_sender].withdrawn,\n            block.timestamp\n        );\n\n        // Update the leaderboard for recipient...\n        emit onUpdate(\n            _recipient,\n            accountOf_[_recipient].deposited,\n            balanceOf_[_recipient],\n            accountOf_[_recipient].withdrawn,\n            block.timestamp\n        );\n\n        return true;\n    }\n}\n"
			},
			"contracts/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.7.4;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
			},
			"contracts/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.7.4;\n\nimport \"../lib/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}"
			},
			"contracts/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}"
			},
			"contracts/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
			},
			"contracts/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"
			},
			"contracts/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n\n        /* @dev Subtracts two numbers, else returns zero */\n    function safeSub(uint a, uint b) internal pure returns (uint) {\n        if (b > a) {\n            return 0;\n        } else {\n            return a - b;\n        }\n    }\n}"
			},
			"contracts/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"
			},
			"contracts/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"
			},
			"lib/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.7.4;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Address.sol\":134:7818  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Address.sol\":134:7818  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220439eb543ed6104a74b725b2b04a72531b5813299bda0c709dd800af907d425d964736f6c63430007040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220439eb543ed6104a74b725b2b04a72531b5813299bda0c709dd800af907d425d964736f6c63430007040033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NUMBER SWAP15 0xB5 NUMBER 0xED PUSH2 0x4A7 0x4B PUSH19 0x5B2B04A72531B5813299BDA0C709DD800AF907 0xD4 0x25 0xD9 PUSH5 0x736F6C6343 STOP SMOD DIV STOP CALLER ",
							"sourceMap": "134:7684:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220439eb543ed6104a74b725b2b04a72531b5813299bda0c709dd800af907d425d964736f6c63430007040033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NUMBER SWAP15 0xB5 NUMBER 0xED PUSH2 0x4A7 0x4B PUSH19 0x5B2B04A72531B5813299BDA0C709DD800AF907 0xD4 0x25 0xD9 PUSH5 0x736F6C6343 STOP SMOD DIV STOP CALLER ",
							"sourceMap": "134:7684:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 134,
									"end": 7818,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "INVALID",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220439eb543ed6104a74b725b2b04a72531b5813299bda0c709dd800af907d425d964736f6c63430007040033",
									".code": [
										{
											"begin": 134,
											"end": 7818,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 134,
											"end": 7818,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 134,
											"end": 7818,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 134,
											"end": 7818,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 134,
											"end": 7818,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 134,
											"end": 7818,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 134,
											"end": 7818,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 134,
											"end": 7818,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 134,
											"end": 7818,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Address.sol\":\"Address\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Address.sol\":{\"keccak256\":\"0xf6ef080fad8534f258b526768063c666e701b135ec3bde9bdffc77254e399515\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://043eada9acabd207d4aaa1706ca581c514ba75e8ec9183a805ff8d1f25ccd445\",\"dweb:/ipfs/QmU6fLUSyR7YSMVtcGtj5epEvpxDBERGMS5L92WG7JKQVH\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Context.sol\":{\"keccak256\":\"0xd3e88da8695a1d63936f7bbf3b3441056c44d167e679a80f9a1b5ffafb11fad9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://587786c556944a0a561b5f5ab16716263b42ca8dd6cc1102b75f4c4d1a802325\",\"dweb:/ipfs/QmU9Y13bBrVy2uE4TiHfPSTFQXV2BeUnxrMo135zRy7wJT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/DiamodSafe.sol": {
				"DiamondSafe": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_tokenAddress",
									"type": "address"
								},
								{
									"internalType": "uint8",
									"name": "_dripRate",
									"type": "uint8"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_compounded",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokensMinted",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "onCompound",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_deposited",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokensMinted",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "onDeposit",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_contributed",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "onDonate",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "onDonateBNB",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "onRebase",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_pool",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_divs",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "onSetFeeSplit",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_caller",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "contract IERC721[]",
									"name": "oldOne",
									"type": "address[]"
								},
								{
									"indexed": false,
									"internalType": "contract IERC721[]",
									"name": "newOne",
									"type": "address[]"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "onSetImmunityToken",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokens",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "onTransfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "invested",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokens",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "soldTokens",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "onUpdate",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_liquidated",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokensEarned",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "onWithdraw",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_withdrawn",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "onWithdraw",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "accountOf",
							"outputs": [
								{
									"internalType": "uint256[14]",
									"name": "",
									"type": "uint256[14]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "bnbReceiver",
							"outputs": [
								{
									"internalType": "address payable",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "buyPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "calculateSharesReceived",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "calculateTokensReceived",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "checkImmunity",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isImmune",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "compound",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "dailyEstimate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "deposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "depositTo",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "dividendsOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "donate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "dripPoolBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "dripRate",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "forDivs",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "forPool",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "harvest",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "jpeg",
							"outputs": [
								{
									"internalType": "contract IERC721",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "lastPayout",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "lastRebaseTime",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "myEarnings",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "myTokens",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "payoutFrequency",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rebaseFrequency",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "requiredBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "sellPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_pool",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_divs",
									"type": "uint256"
								}
							],
							"name": "setFeeSplit",
							"outputs": [
								{
									"internalType": "bool",
									"name": "_success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC721[]",
									"name": "_contract",
									"type": "address[]"
								}
							],
							"name": "setImmunityToken",
							"outputs": [
								{
									"internalType": "bool",
									"name": "_success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "stakingToken",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tokenAddress",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "tokenBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalClaims",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalDeposits",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalTxs",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "users",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/DiamodSafe.sol\":237:21542  contract DiamondSafe is Ownable, ReentrancyGuard {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/DiamodSafe.sol\":4539:5101  constructor(address _tokenAddress, uint8 _dripRate) Ownable() {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  0x40\n  dup2\n  lt\n  iszero\n  tag_2\n  jumpi\n  0x00\n  dup1\n  revert\ntag_2:\n  pop\n  dup1\n  mload\n  0x20\n  swap1\n  swap2\n  add\n  mload\n    /* \"contracts/Ownable.sol\":877:894  address msgSender */\n  0x00\n    /* \"contracts/Ownable.sol\":897:909  _msgSender() */\n  tag_7\n    /* \"contracts/Ownable.sol\":897:907  _msgSender */\n  tag_8\n    /* \"contracts/Ownable.sol\":897:909  _msgSender() */\n  jump\t// in\ntag_7:\n    /* \"contracts/Ownable.sol\":919:925  _owner */\n  0x00\n    /* \"contracts/Ownable.sol\":919:937  _owner = msgSender */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n  sub(shl(0xa0, 0x01), 0x01)\n  dup4\n  and\n  swap1\n  dup2\n  or\n  dup3\n  sstore\n    /* \"contracts/Ownable.sol\":952:995  OwnershipTransferred(address(0), msgSender) */\n  mload(0x40)\n    /* \"contracts/Ownable.sol\":919:937  _owner = msgSender */\n  swap3\n  swap4\n  pop\n  swap2\n    /* \"contracts/Ownable.sol\":952:995  OwnershipTransferred(address(0), msgSender) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"contracts/Ownable.sol\":919:925  _owner */\n  dup3\n  swap1\n    /* \"contracts/Ownable.sol\":952:995  OwnershipTransferred(address(0), msgSender) */\n  log3\n  pop\n    /* \"contracts/ReentrancyGuard.sol\":1716:1717  1 */\n  0x01\n    /* \"contracts/ReentrancyGuard.sol\":1821:1843  _status = _NOT_ENTERED */\n  dup1\n  sstore\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"contracts/DiamodSafe.sol\":4632:4659  _tokenAddress != address(0) */\n  dup3\n  and\n  iszero\n  dup1\n  iszero\n  swap1\n    /* \"contracts/DiamodSafe.sol\":4632:4696  _tokenAddress != address(0) && Address.isContract(_tokenAddress) */\n  tag_12\n  jumpi\n  pop\n    /* \"contracts/DiamodSafe.sol\":4663:4696  Address.isContract(_tokenAddress) */\n  tag_12\n    /* \"contracts/DiamodSafe.sol\":4682:4695  _tokenAddress */\n  dup3\n    /* \"contracts/DiamodSafe.sol\":4663:4681  Address.isContract */\n  or(tag_0_209, shl(0x20, tag_13))\n    /* \"contracts/DiamodSafe.sol\":4663:4696  Address.isContract(_tokenAddress) */\n  0x20\n  shr\n  jump\t// in\ntag_12:\n    /* \"contracts/DiamodSafe.sol\":4611:4737  require(... */\n  tag_14\n  jumpi\n  0x40\n  dup1\n  mload\n  shl(0xe5, 0x461bcd)\n  dup2\n  mstore\n  0x20\n  0x04\n  dup3\n  add\n  mstore\n  0x0f\n  0x24\n  dup3\n  add\n  mstore\n  shl(0x88, 0x494e56414c49445f41444452455353)\n  0x44\n  dup3\n  add\n  mstore\n  swap1\n  mload\n  swap1\n  dup2\n  swap1\n  sub\n  0x64\n  add\n  swap1\n  revert\ntag_14:\n    /* \"contracts/DiamodSafe.sol\":4748:4760  tokenAddress */\n  0x04\n    /* \"contracts/DiamodSafe.sol\":4748:4776  tokenAddress = _tokenAddress */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n  swap1\n  swap4\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  swap4\n  dup5\n  and\n  dup2\n  or\n  swap1\n  swap2\n  sstore\n    /* \"contracts/DiamodSafe.sol\":4786:4798  stakingToken */\n  0x02\n    /* \"contracts/DiamodSafe.sol\":4786:4822  stakingToken = IERC20(_tokenAddress) */\n  dup1\n  sload\n  dup5\n  and\n  swap1\n  swap2\n  or\n  dup2\n  sstore\n    /* \"contracts/DiamodSafe.sol\":4833:4844  bnbReceiver */\n  0x05\n    /* \"contracts/DiamodSafe.sol\":4833:4857  bnbReceiver = msg.sender */\n  dup1\n  sload\n  swap1\n  swap4\n  and\n    /* \"contracts/DiamodSafe.sol\":4847:4857  msg.sender */\n  caller\n    /* \"contracts/DiamodSafe.sol\":4833:4857  bnbReceiver = msg.sender */\n  or\n  swap1\n  swap3\n  sstore\n    /* \"contracts/DiamodSafe.sol\":4937:4945  dripRate */\n  0x0d\n    /* \"contracts/DiamodSafe.sol\":4937:4957  dripRate = _dripRate */\n  dup1\n  sload\n  0xff\n  swap1\n  swap3\n  and\n  not(0xff)\n  swap1\n  swap3\n  and\n  swap2\n  swap1\n  swap2\n  or\n  swap1\n  sstore\n    /* \"contracts/DiamodSafe.sol\":4981:4996  block.timestamp */\n  timestamp\n    /* \"contracts/DiamodSafe.sol\":4967:4977  lastPayout */\n  0x09\n    /* \"contracts/DiamodSafe.sol\":4967:4997  lastPayout = (block.timestamp) */\n  sstore\n    /* \"contracts/DiamodSafe.sol\":5032:5039  forPool */\n  0x0e\n    /* \"contracts/DiamodSafe.sol\":5032:5043  forPool = 2 */\n  sstore\n    /* \"contracts/DiamodSafe.sol\":4748:4776  tokenAddress = _tokenAddress */\n  0x01\n    /* \"contracts/DiamodSafe.sol\":5053:5060  forDivs */\n  0x0f\n    /* \"contracts/DiamodSafe.sol\":5053:5064  forDivs = 1 */\n  dup2\n  swap1\n  sstore\n    /* \"contracts/DiamodSafe.sol\":5075:5090  requiredBalance */\n  0x03\n    /* \"contracts/DiamodSafe.sol\":5075:5094  requiredBalance = 1 */\n  sstore\n    /* \"contracts/DiamodSafe.sol\":237:21542  contract DiamondSafe is Ownable, ReentrancyGuard {... */\n  jump(tag_15)\n    /* \"contracts/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\ntag_8:\n    /* \"contracts/Context.sol\":685:695  msg.sender */\n  caller\n    /* \"contracts/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\n  swap1\n  jump\t// out\n    /* \"contracts/Address.sol\":726:1139  function isContract(address account) internal view returns (bool) {... */\ntag_13:\n    /* \"contracts/Address.sol\":1086:1106  extcodesize(account) */\n  extcodesize\n    /* \"contracts/Address.sol\":1124:1132  size > 0 */\n  iszero\n  iszero\n  swap1\n    /* \"contracts/Address.sol\":726:1139  function isContract(address account) internal view returns (bool) {... */\n  jump\t// out\n    /* \"contracts/DiamodSafe.sol\":237:21542  contract DiamondSafe is Ownable, ReentrancyGuard {... */\ntag_15:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/DiamodSafe.sol\":237:21542  contract DiamondSafe is Ownable, ReentrancyGuard {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8da5cb5b\n      gt\n      tag_46\n      jumpi\n      dup1\n      0xd7c3771d\n      gt\n      tag_47\n      jumpi\n      dup1\n      0xf2fde38b\n      gt\n      tag_48\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_40\n      jumpi\n      dup1\n      0xf69e2046\n      eq\n      tag_41\n      jumpi\n      dup1\n      0xf6db0da0\n      eq\n      tag_42\n      jumpi\n      dup1\n      0xfbaf1bbd\n      eq\n      tag_43\n      jumpi\n      dup1\n      0xffaad6a5\n      eq\n      tag_44\n      jumpi\n      dup1\n      0xffe6bbd8\n      eq\n      tag_45\n      jumpi\n      jump(tag_2)\n    tag_48:\n      dup1\n      0xd7c3771d\n      eq\n      tag_35\n      jumpi\n      dup1\n      0xe02e1e9c\n      eq\n      tag_36\n      jumpi\n      dup1\n      0xeedc966a\n      eq\n      tag_37\n      jumpi\n      dup1\n      0xf14faf6f\n      eq\n      tag_38\n      jumpi\n      dup1\n      0xf2020275\n      eq\n      tag_39\n      jumpi\n      jump(tag_2)\n    tag_47:\n      dup1\n      0xad7a672f\n      gt\n      tag_49\n      jumpi\n      dup1\n      0xad7a672f\n      eq\n      tag_29\n      jumpi\n      dup1\n      0xaecb6d28\n      eq\n      tag_30\n      jumpi\n      dup1\n      0xb03cf5a7\n      eq\n      tag_31\n      jumpi\n      dup1\n      0xb6b55f25\n      eq\n      tag_32\n      jumpi\n      dup1\n      0xb9db102a\n      eq\n      tag_33\n      jumpi\n      dup1\n      0xd3261592\n      eq\n      tag_34\n      jumpi\n      jump(tag_2)\n    tag_49:\n      dup1\n      0x8da5cb5b\n      eq\n      tag_24\n      jumpi\n      dup1\n      0x949e8acd\n      eq\n      tag_25\n      jumpi\n      dup1\n      0x9d76ea58\n      eq\n      tag_26\n      jumpi\n      dup1\n      0xa01496de\n      eq\n      tag_27\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_28\n      jumpi\n      jump(tag_2)\n    tag_46:\n      dup1\n      0x4b750334\n      gt\n      tag_50\n      jumpi\n      dup1\n      0x7d882097\n      gt\n      tag_51\n      jumpi\n      dup1\n      0x7d882097\n      eq\n      tag_18\n      jumpi\n      dup1\n      0x7e6335c7\n      eq\n      tag_19\n      jumpi\n      dup1\n      0x8086b8ba\n      eq\n      tag_20\n      jumpi\n      dup1\n      0x81fce645\n      eq\n      tag_21\n      jumpi\n      dup1\n      0x8620410b\n      eq\n      tag_22\n      jumpi\n      dup1\n      0x89375abf\n      eq\n      tag_21\n      jumpi\n      jump(tag_2)\n    tag_51:\n      dup1\n      0x4b750334\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x537a39bb\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x72f702f3\n      eq\n      tag_17\n      jumpi\n      jump(tag_2)\n    tag_50:\n      dup1\n      0x1f38b9cd\n      gt\n      tag_52\n      jumpi\n      dup1\n      0x1f38b9cd\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x2e1a7d4d\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x36599ead\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x41c61383\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x4641257d\n      eq\n      tag_12\n      jumpi\n      jump(tag_2)\n    tag_52:\n      dup1\n      0x65318b\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x08560ace\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x10d0ffdd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x1924063e\n      eq\n      tag_7\n      jumpi\n      jump(tag_2)\n    tag_1:\n      jumpi(tag_2, calldatasize)\n        /* \"contracts/DiamodSafe.sol\":5288:5299  bnbReceiver */\n      sload(0x05)\n        /* \"contracts/DiamodSafe.sol\":5270:5311  Address.sendValue(bnbReceiver, msg.value) */\n      tag_55\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":5288:5299  bnbReceiver */\n      and\n        /* \"contracts/DiamodSafe.sol\":5301:5310  msg.value */\n      callvalue\n        /* \"contracts/DiamodSafe.sol\":5270:5287  Address.sendValue */\n      tag_56\n        /* \"contracts/DiamodSafe.sol\":5270:5311  Address.sendValue(bnbReceiver, msg.value) */\n      jump\t// in\n    tag_55:\n        /* \"contracts/DiamodSafe.sol\":5326:5377  onDonateBNB(msg.sender, msg.value, block.timestamp) */\n      0x40\n      dup1\n      mload\n        /* \"contracts/DiamodSafe.sol\":5350:5359  msg.value */\n      callvalue\n        /* \"contracts/DiamodSafe.sol\":5326:5377  onDonateBNB(msg.sender, msg.value, block.timestamp) */\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":5361:5376  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe.sol\":5326:5377  onDonateBNB(msg.sender, msg.value, block.timestamp) */\n      0x20\n      dup3\n      add\n      mstore\n      dup2\n      mload\n        /* \"contracts/DiamodSafe.sol\":5338:5348  msg.sender */\n      caller\n      swap3\n        /* \"contracts/DiamodSafe.sol\":5326:5377  onDonateBNB(msg.sender, msg.value, block.timestamp) */\n      0x3c2bd1b3f5ca07afb09fbee41ac43da2b98d9c2e9832673052e546bd1d4c091d\n      swap3\n      dup3\n      swap1\n      sub\n      add\n      swap1\n      log2\n        /* \"contracts/DiamodSafe.sol\":237:21542  contract DiamondSafe is Ownable, ReentrancyGuard {... */\n      stop\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/DiamodSafe.sol\":11053:11293  function dividendsOf(address _user) public view returns (uint256) {... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_57\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_57:\n      pop\n      tag_58\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_59\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_59:\n      pop\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_60\n      jump\t// in\n    tag_58:\n      0x40\n      dup1\n      mload\n      swap2\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/DiamodSafe.sol\":587:617  uint256 public requiredBalance */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_61\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_61:\n      pop\n      tag_58\n      tag_63\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":12144:12489  function calculateTokensReceived(... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_64\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_64:\n      pop\n      tag_58\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_66\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_66:\n      pop\n      calldataload\n      tag_67\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":10952:11047  function totalSupply() public view returns (uint256) {... */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_68\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_68:\n      pop\n      tag_58\n      tag_70\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":1702:1731  uint256 public lastRebaseTime */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_71\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_71:\n      pop\n      tag_58\n      tag_73\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":1494:1513  uint public forDivs */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_74\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_74:\n      pop\n      tag_58\n      tag_76\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":8130:9661  function withdraw(uint256 _amount) public onlyHolders {... */\n    tag_9:\n      callvalue\n      dup1\n      iszero\n      tag_77\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_77:\n      pop\n      tag_78\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_79\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_79:\n      pop\n      calldataload\n      tag_80\n      jump\t// in\n    tag_78:\n      stop\n        /* \"contracts/DiamodSafe.sol\":10031:10398  function checkImmunity(address _user) public view returns (bool isImmune) {... */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_81\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_81:\n      pop\n      tag_82\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_83\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_83:\n      pop\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_84\n      jump\t// in\n    tag_82:\n      0x40\n      dup1\n      mload\n      swap2\n      iszero\n      iszero\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/DiamodSafe.sol\":1102:1125  uint public totalClaims */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_85\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_85:\n      pop\n      tag_58\n      tag_87\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":7218:8108  function harvest() public onlyEarners {... */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_88\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_88:\n      pop\n      tag_78\n      tag_90\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":11299:11565  function sellPrice() public pure  returns (uint256) {... */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_91\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_91:\n      pop\n      tag_58\n      tag_93\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":877:897  uint public totalTxs */\n    tag_14:\n      callvalue\n      dup1\n      iszero\n      tag_94\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_94:\n      pop\n      tag_58\n      tag_96\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":10610:10715  function balanceOf(address _user) public view returns (uint256) {... */\n    tag_15:\n      callvalue\n      dup1\n      iszero\n      tag_97\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_97:\n      pop\n      tag_58\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_99\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_99:\n      pop\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_100\n      jump\t// in\n        /* \"contracts/Ownable.sol\":1710:1855  function renounceOwnership() public virtual onlyOwner {... */\n    tag_16:\n      callvalue\n      dup1\n      iszero\n      tag_101\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_101:\n      pop\n      tag_78\n      tag_103\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":394:420  IERC20 public stakingToken */\n    tag_17:\n      callvalue\n      dup1\n      iszero\n      tag_104\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_104:\n      pop\n      tag_105\n      tag_106\n      jump\t// in\n    tag_105:\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap3\n      and\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/DiamodSafe.sol\":1131:1156  uint public totalDeposits */\n    tag_18:\n      callvalue\n      dup1\n      iszero\n      tag_107\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_107:\n      pop\n      tag_58\n      tag_109\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":13501:13910  function setFeeSplit(... */\n    tag_19:\n      callvalue\n      dup1\n      iszero\n      tag_110\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_110:\n      pop\n      tag_82\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_112\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_112:\n      pop\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      calldataload\n      tag_113\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":12495:13092  function accountOf(address _user) public view returns (uint256[14] memory) {... */\n    tag_20:\n      callvalue\n      dup1\n      iszero\n      tag_114\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_114:\n      pop\n      tag_115\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_116\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_116:\n      pop\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_117\n      jump\t// in\n    tag_115:\n      mload(0x40)\n      dup1\n      dup3\n      0x01c0\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_118:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_120\n      jumpi\n      dup2\n      dup2\n      add\n      mload\n      dup4\n      dup3\n      add\n      mstore\n      0x20\n      add\n      jump(tag_118)\n    tag_120:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/DiamodSafe.sol\":1612:1663  uint256 public constant payoutFrequency = 2 seconds */\n    tag_21:\n      callvalue\n      dup1\n      iszero\n      tag_121\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_121:\n      pop\n      tag_58\n      tag_123\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":11571:11835  function buyPrice() public pure returns (uint256) {... */\n    tag_22:\n      callvalue\n      dup1\n      iszero\n      tag_124\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_124:\n      pop\n      tag_58\n      tag_126\n      jump\t// in\n        /* \"contracts/Ownable.sol\":1078:1163  function owner() public view virtual returns (address) {... */\n    tag_24:\n      callvalue\n      dup1\n      iszero\n      tag_130\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_130:\n      pop\n      tag_105\n      tag_132\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":10404:10499  function myTokens() public view returns (uint256) {... */\n    tag_25:\n      callvalue\n      dup1\n      iszero\n      tag_133\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_133:\n      pop\n      tag_58\n      tag_135\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":699:726  address public tokenAddress */\n    tag_26:\n      callvalue\n      dup1\n      iszero\n      tag_136\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_136:\n      pop\n      tag_105\n      tag_138\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":1469:1488  uint public forPool */\n    tag_27:\n      callvalue\n      dup1\n      iszero\n      tag_139\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_139:\n      pop\n      tag_58\n      tag_141\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":9683:9842  function transfer(... */\n    tag_28:\n      callvalue\n      dup1\n      iszero\n      tag_142\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_142:\n      pop\n      tag_82\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_144\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_144:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      calldataload\n      and\n      swap1\n      0x20\n      add\n      calldataload\n      tag_145\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":10831:10946  function totalBalance() public view returns (uint256) {... */\n    tag_29:\n      callvalue\n      dup1\n      iszero\n      tag_146\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_146:\n      pop\n      tag_58\n      tag_148\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":1213:1240  uint public dripPoolBalance */\n    tag_30:\n      callvalue\n      dup1\n      iszero\n      tag_149\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_149:\n      pop\n      tag_58\n      tag_151\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":772:793  IERC721[] public jpeg */\n    tag_31:\n      callvalue\n      dup1\n      iszero\n      tag_152\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_152:\n      pop\n      tag_105\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_154\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_154:\n      pop\n      calldataload\n      tag_155\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":6127:6237  function deposit(uint _amount) public returns (uint256) {... */\n    tag_32:\n      callvalue\n      dup1\n      iszero\n      tag_156\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_156:\n      pop\n      tag_58\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_158\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_158:\n      pop\n      calldataload\n      tag_159\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":975:997  uint public lastPayout */\n    tag_33:\n      callvalue\n      dup1\n      iszero\n      tag_160\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_160:\n      pop\n      tag_58\n      tag_162\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":1246:1267  uint8 public dripRate */\n    tag_34:\n      callvalue\n      dup1\n      iszero\n      tag_163\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_163:\n      pop\n      tag_164\n      tag_165\n      jump\t// in\n    tag_164:\n      0x40\n      dup1\n      mload\n      0xff\n      swap1\n      swap3\n      and\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/DiamodSafe.sol\":732:766  address payable public bnbReceiver */\n    tag_35:\n      callvalue\n      dup1\n      iszero\n      tag_166\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_166:\n      pop\n      tag_105\n      tag_168\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":11841:12138  function calculateSharesReceived(... */\n    tag_36:\n      callvalue\n      dup1\n      iszero\n      tag_169\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_169:\n      pop\n      tag_58\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_171\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_171:\n      pop\n      calldataload\n      tag_172\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":10721:10825  function tokenBalance(address _user) public view returns (uint256) {... */\n    tag_37:\n      callvalue\n      dup1\n      iszero\n      tag_173\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_173:\n      pop\n      tag_58\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_175\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_175:\n      pop\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_176\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":5530:6106  function donate(uint _amount) public returns (uint256) {... */\n    tag_38:\n      callvalue\n      dup1\n      iszero\n      tag_177\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_177:\n      pop\n      tag_58\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_179\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_179:\n      pop\n      calldataload\n      tag_180\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":854:871  uint public users */\n    tag_39:\n      callvalue\n      dup1\n      iszero\n      tag_181\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_181:\n      pop\n      tag_58\n      tag_183\n      jump\t// in\n        /* \"contracts/Ownable.sol\":2004:2244  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_40:\n      callvalue\n      dup1\n      iszero\n      tag_184\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_184:\n      pop\n      tag_78\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_186\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_186:\n      pop\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_187\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":7124:7197  function compound() public onlyEarners {... */\n    tag_41:\n      callvalue\n      dup1\n      iszero\n      tag_188\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_188:\n      pop\n      tag_78\n      tag_190\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":13972:14496  function setImmunityToken(... */\n    tag_42:\n      callvalue\n      dup1\n      iszero\n      tag_191\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_191:\n      pop\n      tag_82\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_193\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_193:\n      dup2\n      add\n      swap1\n      0x20\n      dup2\n      add\n      dup2\n      calldataload\n      0x0100000000\n      dup2\n      gt\n      iszero\n      tag_194\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_194:\n      dup3\n      add\n      dup4\n      0x20\n      dup3\n      add\n      gt\n      iszero\n      tag_195\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_195:\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap2\n      dup5\n      0x20\n      dup4\n      mul\n      dup5\n      add\n      gt\n      0x0100000000\n      dup4\n      gt\n      or\n      iszero\n      tag_196\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_196:\n      swap2\n      swap1\n      dup1\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      0x20\n      mul\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      pop\n      swap3\n      swap6\n      pop\n      tag_197\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":13098:13379  function dailyEstimate(address _user) public view returns (uint256) {... */\n    tag_43:\n      callvalue\n      dup1\n      iszero\n      tag_198\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_198:\n      pop\n      tag_58\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_200\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_200:\n      pop\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_201\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":6260:7102  function depositTo(address _user, uint _amount) public returns (uint256) {... */\n    tag_44:\n      callvalue\n      dup1\n      iszero\n      tag_202\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_202:\n      pop\n      tag_58\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_204\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_204:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      calldataload\n      and\n      swap1\n      0x20\n      add\n      calldataload\n      tag_205\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":10505:10604  function myEarnings() public view returns (uint256) {... */\n    tag_45:\n      callvalue\n      dup1\n      iszero\n      tag_206\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_206:\n      pop\n      tag_58\n      tag_208\n      jump\t// in\n        /* \"contracts/Address.sol\":2056:2447  function sendValue(address payable recipient, uint256 amount) internal {... */\n    tag_56:\n        /* \"contracts/Address.sol\":2170:2176  amount */\n      dup1\n        /* \"contracts/Address.sol\":2145:2166  address(this).balance */\n      selfbalance\n        /* \"contracts/Address.sol\":2145:2176  address(this).balance >= amount */\n      lt\n      iszero\n        /* \"contracts/Address.sol\":2137:2210  require(address(this).balance >= amount, \"Address: insufficient balance\") */\n      tag_211\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1d\n      0x24\n      dup3\n      add\n      mstore\n      0x416464726573733a20696e73756666696369656e742062616c616e6365000000\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_211:\n        /* \"contracts/Address.sol\":2317:2352  recipient.call{ value: amount }(\"\") */\n      mload(0x40)\n        /* \"contracts/Address.sol\":2299:2311  bool success */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Address.sol\":2317:2331  recipient.call */\n      dup5\n      and\n      swap1\n        /* \"contracts/Address.sol\":2340:2346  amount */\n      dup4\n      swap1\n        /* \"contracts/Address.sol\":2299:2311  bool success */\n      dup4\n        /* \"contracts/Address.sol\":2317:2352  recipient.call{ value: amount }(\"\") */\n      dup2\n        /* \"contracts/Address.sol\":2299:2311  bool success */\n      dup2\n        /* \"contracts/Address.sol\":2317:2352  recipient.call{ value: amount }(\"\") */\n      dup2\n        /* \"contracts/Address.sol\":2340:2346  amount */\n      dup6\n        /* \"contracts/Address.sol\":2317:2331  recipient.call */\n      dup8\n        /* \"contracts/Address.sol\":2317:2352  recipient.call{ value: amount }(\"\") */\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_214\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_213)\n    tag_214:\n      0x60\n      swap2\n      pop\n    tag_213:\n      pop\n        /* \"contracts/Address.sol\":2298:2352  (bool success, ) = recipient.call{ value: amount }(\"\") */\n      pop\n      swap1\n      pop\n        /* \"contracts/Address.sol\":2370:2377  success */\n      dup1\n        /* \"contracts/Address.sol\":2362:2440  require(success, \"Address: unable to send value, recipient may have reverted\") */\n      tag_215\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x3a\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae\n      0x3a\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_215:\n        /* \"contracts/Address.sol\":2056:2447  function sendValue(address payable recipient, uint256 amount) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":11053:11293  function dividendsOf(address _user) public view returns (uint256) {... */\n    tag_60:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":11243:11260  payoutsOf_[_user] */\n      dup2\n      and\n        /* \"contracts/DiamodSafe.sol\":11110:11117  uint256 */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":11243:11260  payoutsOf_[_user] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":11243:11253  payoutsOf_ */\n      0x13\n        /* \"contracts/DiamodSafe.sol\":11243:11260  payoutsOf_[_user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe.sol\":11202:11212  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe.sol\":11202:11219  balanceOf_[_user] */\n      swap1\n      swap3\n      mstore\n      dup3\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe.sol\":11184:11199  profitPerShare_ */\n      sload(0x12)\n      shl(0x40, 0x01)\n        /* \"contracts/DiamodSafe.sol\":1394:1401  2 ** 64 */\n      swap3\n        /* \"contracts/DiamodSafe.sol\":11184:11219  profitPerShare_ * balanceOf_[_user] */\n      swap2\n      mul\n        /* \"contracts/DiamodSafe.sol\":11175:11260  (int256)(profitPerShare_ * balanceOf_[_user]) -... */\n      sub\n        /* \"contracts/DiamodSafe.sol\":11148:11286  (uint256)(... */\n      div\n        /* \"contracts/DiamodSafe.sol\":11129:11286  return... */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe.sol\":11053:11293  function dividendsOf(address _user) public view returns (uint256) {... */\n    tag_216:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":587:617  uint256 public requiredBalance */\n    tag_63:\n      sload(0x03)\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":12144:12489  function calculateTokensReceived(... */\n    tag_67:\n        /* \"contracts/DiamodSafe.sol\":12229:12236  uint256 */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":12267:12285  currentTotalStaked */\n      sload(0x11)\n        /* \"contracts/DiamodSafe.sol\":12256:12263  _amount */\n      dup3\n        /* \"contracts/DiamodSafe.sol\":12256:12285  _amount <= currentTotalStaked */\n      gt\n      iszero\n        /* \"contracts/DiamodSafe.sol\":12248:12286  require(_amount <= currentTotalStaked) */\n      tag_219\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_219:\n        /* \"contracts/DiamodSafe.sol\":12314:12321  _amount */\n      dup2\n        /* \"contracts/DiamodSafe.sol\":12296:12311  uint256 _tokens */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":12349:12398  SafeMath.div(SafeMath.mul(_tokens, divsFee), 100) */\n      tag_220\n        /* \"contracts/DiamodSafe.sol\":12362:12392  SafeMath.mul(_tokens, divsFee) */\n      tag_221\n        /* \"contracts/DiamodSafe.sol\":12314:12321  _amount */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":12296:12311  uint256 _tokens */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":12362:12374  SafeMath.mul */\n      tag_222\n        /* \"contracts/DiamodSafe.sol\":12362:12392  SafeMath.mul(_tokens, divsFee) */\n      jump\t// in\n    tag_221:\n        /* \"contracts/DiamodSafe.sol\":12394:12397  100 */\n      0x64\n        /* \"contracts/DiamodSafe.sol\":12349:12361  SafeMath.div */\n      tag_223\n        /* \"contracts/DiamodSafe.sol\":12349:12398  SafeMath.div(SafeMath.mul(_tokens, divsFee), 100) */\n      jump\t// in\n    tag_220:\n        /* \"contracts/DiamodSafe.sol\":12331:12398  uint256 _divies = SafeMath.div(SafeMath.mul(_tokens, divsFee), 100) */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe.sol\":12408:12424  uint256 _remains */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":12427:12457  SafeMath.sub(_tokens, _divies) */\n      tag_224\n        /* \"contracts/DiamodSafe.sol\":12440:12447  _tokens */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":12449:12456  _divies */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":12427:12439  SafeMath.sub */\n      tag_225\n        /* \"contracts/DiamodSafe.sol\":12427:12457  SafeMath.sub(_tokens, _divies) */\n      jump\t// in\n    tag_224:\n        /* \"contracts/DiamodSafe.sol\":12408:12457  uint256 _remains = SafeMath.sub(_tokens, _divies) */\n      swap6\n        /* \"contracts/DiamodSafe.sol\":12144:12489  function calculateTokensReceived(... */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":10952:11047  function totalSupply() public view returns (uint256) {... */\n    tag_70:\n        /* \"contracts/DiamodSafe.sol\":11022:11040  currentTotalStaked */\n      sload(0x11)\n        /* \"contracts/DiamodSafe.sol\":10952:11047  function totalSupply() public view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":1702:1731  uint256 public lastRebaseTime */\n    tag_73:\n      sload(0x10)\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":1494:1513  uint public forDivs */\n    tag_76:\n      sload(0x0f)\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":8130:9661  function withdraw(uint256 _amount) public onlyHolders {... */\n    tag_80:\n        /* \"contracts/DiamodSafe.sol\":2107:2108  0 */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":2094:2104  myTokens() */\n      tag_228\n        /* \"contracts/DiamodSafe.sol\":2094:2102  myTokens */\n      tag_135\n        /* \"contracts/DiamodSafe.sol\":2094:2104  myTokens() */\n      jump\t// in\n    tag_228:\n        /* \"contracts/DiamodSafe.sol\":2094:2108  myTokens() > 0 */\n      gt\n        /* \"contracts/DiamodSafe.sol\":2086:2109  require(myTokens() > 0) */\n      tag_229\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_229:\n        /* \"contracts/DiamodSafe.sol\":8210:8220  msg.sender */\n      caller\n        /* \"contracts/DiamodSafe.sol\":8194:8207  address _user */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":8249:8266  balanceOf_[_user] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":8249:8259  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe.sol\":8249:8266  balanceOf_[_user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe.sol\":8238:8266  _amount <= balanceOf_[_user] */\n      dup3\n      gt\n      iszero\n        /* \"contracts/DiamodSafe.sol\":8230:8267  require(_amount <= balanceOf_[_user]) */\n      tag_231\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_231:\n        /* \"contracts/DiamodSafe.sol\":8278:8305  uint256 _undividedDividends */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":8341:8344  100 */\n      0x64\n        /* \"contracts/DiamodSafe.sol\":8308:8338  SafeMath.mul(_amount, divsFee) */\n      tag_232\n        /* \"contracts/DiamodSafe.sol\":8321:8328  _amount */\n      dup5\n        /* \"contracts/DiamodSafe.sol\":8278:8305  uint256 _undividedDividends */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":8308:8320  SafeMath.mul */\n      tag_222\n        /* \"contracts/DiamodSafe.sol\":8308:8338  SafeMath.mul(_amount, divsFee) */\n      jump\t// in\n    tag_232:\n        /* \"contracts/DiamodSafe.sol\":8308:8344  SafeMath.mul(_amount, divsFee) / 100 */\n      dup2\n      tag_233\n      jumpi\n      invalid\n    tag_233:\n      div\n        /* \"contracts/DiamodSafe.sol\":8278:8344  uint256 _undividedDividends = SafeMath.mul(_amount, divsFee) / 100 */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe.sol\":8564:8565  0 */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":8542:8565  _undividedDividends = 0 */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe.sol\":8647:8668  uint256  _taxedTokens */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":8671:8713  SafeMath.sub(_amount, _undividedDividends) */\n      tag_234\n        /* \"contracts/DiamodSafe.sol\":8684:8691  _amount */\n      dup5\n        /* \"contracts/DiamodSafe.sol\":8693:8712  _undividedDividends */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":8671:8683  SafeMath.sub */\n      tag_225\n        /* \"contracts/DiamodSafe.sol\":8671:8713  SafeMath.sub(_amount, _undividedDividends) */\n      jump\t// in\n    tag_234:\n        /* \"contracts/DiamodSafe.sol\":8647:8713  uint256  _taxedTokens = SafeMath.sub(_amount, _undividedDividends) */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe.sol\":8744:8785  SafeMath.sub(currentTotalStaked, _amount) */\n      tag_235\n        /* \"contracts/DiamodSafe.sol\":8757:8775  currentTotalStaked */\n      sload(0x11)\n        /* \"contracts/DiamodSafe.sol\":8777:8784  _amount */\n      dup6\n        /* \"contracts/DiamodSafe.sol\":8744:8756  SafeMath.sub */\n      tag_225\n        /* \"contracts/DiamodSafe.sol\":8744:8785  SafeMath.sub(currentTotalStaked, _amount) */\n      jump\t// in\n    tag_235:\n        /* \"contracts/DiamodSafe.sol\":8723:8741  currentTotalStaked */\n      0x11\n        /* \"contracts/DiamodSafe.sol\":8723:8785  currentTotalStaked = SafeMath.sub(currentTotalStaked, _amount) */\n      sstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":8828:8845  balanceOf_[_user] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":8828:8838  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe.sol\":8828:8845  balanceOf_[_user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe.sol\":8815:8855  SafeMath.sub(balanceOf_[_user], _amount) */\n      tag_236\n      swap1\n        /* \"contracts/DiamodSafe.sol\":8847:8854  _amount */\n      dup6\n        /* \"contracts/DiamodSafe.sol\":8815:8827  SafeMath.sub */\n      tag_225\n        /* \"contracts/DiamodSafe.sol\":8815:8855  SafeMath.sub(balanceOf_[_user], _amount) */\n      jump\t// in\n    tag_236:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":8795:8812  balanceOf_[_user] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":8795:8805  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe.sol\":8795:8812  balanceOf_[_user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":8795:8855  balanceOf_[_user] = SafeMath.sub(balanceOf_[_user], _amount) */\n      swap4\n      swap1\n      swap4\n      sstore\n        /* \"contracts/DiamodSafe.sol\":8984:8999  profitPerShare_ */\n      sload(0x12)\n        /* \"contracts/DiamodSafe.sol\":9058:9068  payoutsOf_ */\n      0x13\n        /* \"contracts/DiamodSafe.sol\":9058:9075  payoutsOf_[_user] */\n      swap1\n      swap2\n      mstore\n      swap2\n      swap1\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":9058:9094  payoutsOf_[_user] -= _updatedPayouts */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe.sol\":8984:9009  profitPerShare_ * _amount */\n      swap2\n      dup7\n      mul\n      shl(0x40, 0x01)\n        /* \"contracts/DiamodSafe.sol\":9013:9037  _taxedTokens * magnitude */\n      dup5\n      mul\n        /* \"contracts/DiamodSafe.sol\":8984:9038  profitPerShare_ * _amount + (_taxedTokens * magnitude) */\n      add\n        /* \"contracts/DiamodSafe.sol\":9058:9094  payoutsOf_[_user] -= _updatedPayouts */\n      swap2\n      dup3\n      swap1\n      sub\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe.sol\":9175:9208  allocateFees(_undividedDividends) */\n      tag_237\n        /* \"contracts/DiamodSafe.sol\":9188:9207  _undividedDividends */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":9175:9187  allocateFees */\n      tag_238\n        /* \"contracts/DiamodSafe.sol\":9175:9208  allocateFees(_undividedDividends) */\n      jump\t// in\n    tag_237:\n        /* \"contracts/DiamodSafe.sol\":9280:9337  onWithdraw(_user, _amount, _taxedTokens, block.timestamp) */\n      0x40\n      dup1\n      mload\n      dup7\n      dup2\n      mstore\n      0x20\n      dup2\n      add\n      dup5\n      swap1\n      mstore\n        /* \"contracts/DiamodSafe.sol\":9321:9336  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe.sol\":9280:9337  onWithdraw(_user, _amount, _taxedTokens, block.timestamp) */\n      dup2\n      dup4\n      add\n      mstore\n      swap1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup7\n      and\n      swap2\n      0x90ebb005d68efee044927e1e77e1fd0cecc508368aa72c39250a787eed5f0a70\n      swap2\n      swap1\n      dup2\n      swap1\n      sub\n      0x60\n      add\n      swap1\n      log2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":9390:9569  onUpdate(... */\n      dup5\n      and\n        /* \"contracts/DiamodSafe.sol\":9431:9448  accountOf_[_user] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":9431:9441  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe.sol\":9431:9448  accountOf_[_user] */\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":9431:9458  accountOf_[_user].deposited */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe.sol\":9472:9482  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe.sol\":9472:9489  balanceOf_[_user] */\n      dup5\n      mstore\n      swap5\n      dup3\n      swap1\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe.sol\":9503:9520  accountOf_[_user] */\n      swap4\n      dup4\n      mstore\n        /* \"contracts/DiamodSafe.sol\":9503:9530  accountOf_[_user].withdrawn */\n      0x01\n      add\n      sload\n        /* \"contracts/DiamodSafe.sol\":9390:9569  onUpdate(... */\n      dup2\n      mload\n      swap5\n      dup6\n      mstore\n      swap2\n      dup5\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      dup3\n      dup3\n      add\n      mstore\n        /* \"contracts/DiamodSafe.sol\":9544:9559  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe.sol\":9390:9569  onUpdate(... */\n      0x60\n      dup4\n      add\n      mstore\n      mload\n      0x00\n      dup1\n      mload\n      0x20\n      data_27cc9c295b15a532bb1b5f9308f1d54813e694c2ebdd1c2ced210bfe52dcd57e\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      swap2\n      dup2\n      swap1\n      sub\n      0x80\n      add\n      swap1\n      log2\n        /* \"contracts/DiamodSafe.sol\":9638:9650  distribute() */\n      tag_239\n        /* \"contracts/DiamodSafe.sol\":9638:9648  distribute */\n      tag_240\n        /* \"contracts/DiamodSafe.sol\":9638:9650  distribute() */\n      jump\t// in\n    tag_239:\n        /* \"contracts/DiamodSafe.sol\":2119:2120  _ */\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/DiamodSafe.sol\":8130:9661  function withdraw(uint256 _amount) public onlyHolders {... */\n      pop\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":10031:10398  function checkImmunity(address _user) public view returns (bool isImmune) {... */\n    tag_84:\n        /* \"contracts/DiamodSafe.sol\":10090:10103  bool isImmune */\n      0x00\n      dup1\n      dup1\n      dup1\n        /* \"contracts/DiamodSafe.sol\":10165:10300  for(uint i =0; i < jpeg.length; i++){... */\n    tag_242:\n        /* \"contracts/DiamodSafe.sol\":10184:10188  jpeg */\n      0x06\n        /* \"contracts/DiamodSafe.sol\":10184:10195  jpeg.length */\n      sload\n        /* \"contracts/DiamodSafe.sol\":10180:10195  i < jpeg.length */\n      dup2\n      lt\n        /* \"contracts/DiamodSafe.sol\":10165:10300  for(uint i =0; i < jpeg.length; i++){... */\n      iszero\n      tag_243\n      jumpi\n        /* \"contracts/DiamodSafe.sol\":10235:10239  jpeg */\n      0x06\n        /* \"contracts/DiamodSafe.sol\":10240:10241  i */\n      dup2\n        /* \"contracts/DiamodSafe.sol\":10235:10242  jpeg[i] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_245\n      jumpi\n      invalid\n    tag_245:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap2\n      dup3\n      swap1\n      keccak256\n      add\n      sload\n        /* \"contracts/DiamodSafe.sol\":10263:10289  jpegTest1.balanceOf(_user) */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n      dup10\n      dup2\n      and\n      0x04\n      dup4\n      add\n      mstore\n      swap2\n      mload\n        /* \"contracts/DiamodSafe.sol\":10235:10242  jpeg[i] */\n      swap2\n      swap1\n      swap3\n      and\n      swap5\n      pop\n      dup5\n      swap3\n        /* \"contracts/DiamodSafe.sol\":10263:10282  jpegTest1.balanceOf */\n      0x70a08231\n      swap3\n        /* \"contracts/DiamodSafe.sol\":10263:10289  jpegTest1.balanceOf(_user) */\n      0x24\n      dup1\n      dup3\n      add\n      swap4\n      swap2\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"contracts/DiamodSafe.sol\":10235:10242  jpeg[i] */\n      dup7\n        /* \"contracts/DiamodSafe.sol\":10263:10289  jpegTest1.balanceOf(_user) */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_247\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_247:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_249\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_249:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_250\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_250:\n      pop\n      mload\n        /* \"contracts/DiamodSafe.sol\":10258:10289  x += jpegTest1.balanceOf(_user) */\n      swap3\n      swap1\n      swap3\n      add\n      swap2\n        /* \"contracts/DiamodSafe.sol\":10197:10200  i++ */\n      0x01\n      add\n        /* \"contracts/DiamodSafe.sol\":10165:10300  for(uint i =0; i < jpeg.length; i++){... */\n      jump(tag_242)\n    tag_243:\n      pop\n        /* \"contracts/DiamodSafe.sol\":10317:10332  requiredBalance */\n      sload(0x03)\n        /* \"contracts/DiamodSafe.sol\":10312:10313  x */\n      dup3\n        /* \"contracts/DiamodSafe.sol\":10312:10332  x >= requiredBalance */\n      lt\n        /* \"contracts/DiamodSafe.sol\":10308:10370  if (x >= requiredBalance) {... */\n      tag_251\n      jumpi\n        /* \"contracts/DiamodSafe.sol\":10355:10359  true */\n      0x01\n        /* \"contracts/DiamodSafe.sol\":10348:10359  return true */\n      swap3\n      pop\n      pop\n      pop\n      jump(tag_216)\n        /* \"contracts/DiamodSafe.sol\":10308:10370  if (x >= requiredBalance) {... */\n    tag_251:\n      pop\n        /* \"contracts/DiamodSafe.sol\":10386:10391  false */\n      0x00\n      swap4\n        /* \"contracts/DiamodSafe.sol\":10031:10398  function checkImmunity(address _user) public view returns (bool isImmune) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":1102:1125  uint public totalClaims */\n    tag_87:\n      sload(0x0a)\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":7218:8108  function harvest() public onlyEarners {... */\n    tag_90:\n        /* \"contracts/DiamodSafe.sol\":2242:2243  0 */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":2227:2239  myEarnings() */\n      tag_253\n        /* \"contracts/DiamodSafe.sol\":2227:2237  myEarnings */\n      tag_208\n        /* \"contracts/DiamodSafe.sol\":2227:2239  myEarnings() */\n      jump\t// in\n    tag_253:\n        /* \"contracts/DiamodSafe.sol\":2227:2243  myEarnings() > 0 */\n      gt\n        /* \"contracts/DiamodSafe.sol\":2219:2244  require(myEarnings() > 0) */\n      tag_254\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_254:\n        /* \"contracts/DiamodSafe.sol\":7282:7292  msg.sender */\n      caller\n        /* \"contracts/DiamodSafe.sol\":7266:7279  address _user */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":7323:7335  myEarnings() */\n      tag_256\n        /* \"contracts/DiamodSafe.sol\":7323:7333  myEarnings */\n      tag_208\n        /* \"contracts/DiamodSafe.sol\":7323:7335  myEarnings() */\n      jump\t// in\n    tag_256:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":7429:7446  payoutsOf_[_user] */\n      dup1\n      dup5\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":7429:7439  payoutsOf_ */\n      0x13\n        /* \"contracts/DiamodSafe.sol\":7429:7446  payoutsOf_[_user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":7429:7482  payoutsOf_[_user] += (int256)(_dividends * magnitude) */\n      dup1\n      sload\n      shl(0x40, 0x01)\n        /* \"contracts/DiamodSafe.sol\":7459:7481  _dividends * magnitude */\n      dup9\n      mul\n        /* \"contracts/DiamodSafe.sol\":7429:7482  payoutsOf_[_user] += (int256)(_dividends * magnitude) */\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe.sol\":7546:7558  stakingToken */\n      sload(0x02)\n        /* \"contracts/DiamodSafe.sol\":7546:7586  stakingToken.transfer(_user, _dividends) */\n      dup2\n      mload\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n      swap6\n      swap1\n      swap6\n      mstore\n      0x24\n      dup6\n      add\n      dup8\n      swap1\n      mstore\n      swap1\n      mload\n        /* \"contracts/DiamodSafe.sol\":7302:7335  uint256 _dividends = myEarnings() */\n      swap6\n      swap7\n      pop\n        /* \"contracts/DiamodSafe.sol\":7546:7558  stakingToken */\n      swap1\n      swap4\n      and\n      swap4\n        /* \"contracts/DiamodSafe.sol\":7546:7567  stakingToken.transfer */\n      0xa9059cbb\n      swap4\n        /* \"contracts/DiamodSafe.sol\":7546:7586  stakingToken.transfer(_user, _dividends) */\n      0x44\n      dup1\n      dup6\n      add\n      swap5\n        /* \"contracts/DiamodSafe.sol\":7429:7446  payoutsOf_[_user] */\n      swap2\n      swap4\n        /* \"contracts/DiamodSafe.sol\":7546:7586  stakingToken.transfer(_user, _dividends) */\n      swap2\n      dup4\n      swap1\n      sub\n      add\n      swap1\n      dup3\n      swap1\n        /* \"contracts/DiamodSafe.sol\":7546:7558  stakingToken */\n      dup8\n        /* \"contracts/DiamodSafe.sol\":7546:7586  stakingToken.transfer(_user, _dividends) */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_257\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_257:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_259\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_259:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_260\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_260:\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":7717:7734  accountOf_[_user] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":7717:7727  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe.sol\":7546:7586  stakingToken.transfer(_user, _dividends) */\n      0x20\n        /* \"contracts/DiamodSafe.sol\":7717:7734  accountOf_[_user] */\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":7717:7744  accountOf_[_user].withdrawn */\n      0x01\n      add\n      sload\n        /* \"contracts/DiamodSafe.sol\":7691:7778  SafeMath.add(... */\n      tag_261\n      swap1\n        /* \"contracts/DiamodSafe.sol\":7758:7768  _dividends */\n      dup3\n        /* \"contracts/DiamodSafe.sol\":7691:7703  SafeMath.add */\n      tag_262\n        /* \"contracts/DiamodSafe.sol\":7691:7778  SafeMath.add(... */\n      jump\t// in\n    tag_261:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":7661:7678  accountOf_[_user] */\n      dup4\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":7661:7671  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe.sol\":7661:7678  accountOf_[_user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":7661:7688  accountOf_[_user].withdrawn */\n      0x01\n      dup1\n      dup3\n      add\n        /* \"contracts/DiamodSafe.sol\":7661:7778  accountOf_[_user].withdrawn = SafeMath.add(... */\n      swap6\n      swap1\n      swap6\n      sstore\n        /* \"contracts/DiamodSafe.sol\":7788:7816  accountOf_[_user].xWithdrawn */\n      0x0b\n      add\n        /* \"contracts/DiamodSafe.sol\":7788:7821  accountOf_[_user].xWithdrawn += 1 */\n      dup1\n      sload\n      dup6\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe.sol\":7878:7886  totalTxs */\n      0x08\n        /* \"contracts/DiamodSafe.sol\":7878:7891  totalTxs += 1 */\n      dup1\n      sload\n      swap1\n      swap5\n      add\n      swap1\n      swap4\n      sstore\n        /* \"contracts/DiamodSafe.sol\":7901:7912  totalClaims */\n      0x0a\n        /* \"contracts/DiamodSafe.sol\":7901:7926  totalClaims += _dividends */\n      dup1\n      sload\n      dup6\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe.sol\":7973:8019  onWithdraw(_user, _dividends, block.timestamp) */\n      dup1\n      mload\n      dup5\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":8003:8018  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe.sol\":7973:8019  onWithdraw(_user, _dividends, block.timestamp) */\n      swap4\n      dup2\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      dup1\n      mload\n        /* \"contracts/DiamodSafe.sol\":7661:7678  accountOf_[_user] */\n      swap2\n      swap3\n        /* \"contracts/DiamodSafe.sol\":7973:8019  onWithdraw(_user, _dividends, block.timestamp) */\n      0x1b091269e929df55d64d6ea7e9cadbe4fb38dce5ccdc995767bc515030dbfbbf\n      swap3\n      swap1\n      dup2\n      swap1\n      sub\n      swap1\n      swap2\n      add\n      swap1\n      log2\n        /* \"contracts/DiamodSafe.sol\":8089:8101  distribute() */\n      tag_263\n        /* \"contracts/DiamodSafe.sol\":8089:8099  distribute */\n      tag_240\n        /* \"contracts/DiamodSafe.sol\":8089:8101  distribute() */\n      jump\t// in\n    tag_263:\n        /* \"contracts/DiamodSafe.sol\":2254:2255  _ */\n      pop\n      pop\n        /* \"contracts/DiamodSafe.sol\":7218:8108  function harvest() public onlyEarners {... */\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":11299:11565  function sellPrice() public pure  returns (uint256) {... */\n    tag_93:\n        /* \"contracts/DiamodSafe.sol\":11342:11349  uint256 */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":11379:11383  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/DiamodSafe.sol\":11342:11349  uint256 */\n      dup2\n        /* \"contracts/DiamodSafe.sol\":11414:11463  SafeMath.div(SafeMath.mul(_tokens, divsFee), 100) */\n      tag_265\n        /* \"contracts/DiamodSafe.sol\":11427:11457  SafeMath.mul(_tokens, divsFee) */\n      tag_221\n        /* \"contracts/DiamodSafe.sol\":11379:11383  1e18 */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":11342:11349  uint256 */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":11427:11439  SafeMath.mul */\n      tag_222\n        /* \"contracts/DiamodSafe.sol\":11427:11457  SafeMath.mul(_tokens, divsFee) */\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":11414:11463  SafeMath.div(SafeMath.mul(_tokens, divsFee), 100) */\n    tag_265:\n        /* \"contracts/DiamodSafe.sol\":11393:11463  uint256 _dividends = SafeMath.div(SafeMath.mul(_tokens, divsFee), 100) */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe.sol\":11473:11493  uint256 _taxedTokens */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":11496:11529  SafeMath.sub(_tokens, _dividends) */\n      tag_267\n        /* \"contracts/DiamodSafe.sol\":11509:11516  _tokens */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":11518:11528  _dividends */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":11496:11508  SafeMath.sub */\n      tag_225\n        /* \"contracts/DiamodSafe.sol\":11496:11529  SafeMath.sub(_tokens, _dividends) */\n      jump\t// in\n    tag_267:\n        /* \"contracts/DiamodSafe.sol\":11473:11529  uint256 _taxedTokens = SafeMath.sub(_tokens, _dividends) */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/DiamodSafe.sol\":11299:11565  function sellPrice() public pure  returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":877:897  uint public totalTxs */\n    tag_96:\n      sload(0x08)\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":10610:10715  function balanceOf(address _user) public view returns (uint256) {... */\n    tag_100:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":10691:10708  balanceOf_[_user] */\n      and\n        /* \"contracts/DiamodSafe.sol\":10665:10672  uint256 */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":10691:10708  balanceOf_[_user] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":10691:10701  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe.sol\":10691:10708  balanceOf_[_user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"contracts/DiamodSafe.sol\":10610:10715  function balanceOf(address _user) public view returns (uint256) {... */\n      jump\t// out\n        /* \"contracts/Ownable.sol\":1710:1855  function renounceOwnership() public virtual onlyOwner {... */\n    tag_103:\n        /* \"contracts/Ownable.sol\":1301:1313  _msgSender() */\n      tag_270\n        /* \"contracts/Ownable.sol\":1301:1311  _msgSender */\n      tag_271\n        /* \"contracts/Ownable.sol\":1301:1313  _msgSender() */\n      jump\t// in\n    tag_270:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Ownable.sol\":1290:1313  owner() == _msgSender() */\n      and\n        /* \"contracts/Ownable.sol\":1290:1297  owner() */\n      tag_272\n        /* \"contracts/Ownable.sol\":1290:1295  owner */\n      tag_132\n        /* \"contracts/Ownable.sol\":1290:1297  owner() */\n      jump\t// in\n    tag_272:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Ownable.sol\":1290:1313  owner() == _msgSender() */\n      and\n      eq\n        /* \"contracts/Ownable.sol\":1282:1350  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_273\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_273:\n        /* \"contracts/Ownable.sol\":1816:1817  0 */\n      0x00\n        /* \"contracts/Ownable.sol\":1800:1806  _owner */\n      dup1\n      sload\n        /* \"contracts/Ownable.sol\":1779:1819  OwnershipTransferred(_owner, address(0)) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Ownable.sol\":1800:1806  _owner */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/Ownable.sol\":1779:1819  OwnershipTransferred(_owner, address(0)) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"contracts/Ownable.sol\":1816:1817  0 */\n      dup4\n      swap1\n        /* \"contracts/Ownable.sol\":1779:1819  OwnershipTransferred(_owner, address(0)) */\n      log3\n        /* \"contracts/Ownable.sol\":1846:1847  0 */\n      0x00\n        /* \"contracts/Ownable.sol\":1829:1848  _owner = address(0) */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      swap1\n      sstore\n        /* \"contracts/Ownable.sol\":1710:1855  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":394:420  IERC20 public stakingToken */\n    tag_106:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":1131:1156  uint public totalDeposits */\n    tag_109:\n      sload(0x0b)\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":13501:13910  function setFeeSplit(... */\n    tag_113:\n        /* \"contracts/DiamodSafe.sol\":13600:13613  bool _success */\n      0x00\n        /* \"contracts/Ownable.sol\":1301:1313  _msgSender() */\n      tag_276\n        /* \"contracts/Ownable.sol\":1301:1311  _msgSender */\n      tag_271\n        /* \"contracts/Ownable.sol\":1301:1313  _msgSender() */\n      jump\t// in\n    tag_276:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Ownable.sol\":1290:1313  owner() == _msgSender() */\n      and\n        /* \"contracts/Ownable.sol\":1290:1297  owner() */\n      tag_277\n        /* \"contracts/Ownable.sol\":1290:1295  owner */\n      tag_132\n        /* \"contracts/Ownable.sol\":1290:1297  owner() */\n      jump\t// in\n    tag_277:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Ownable.sol\":1290:1313  owner() == _msgSender() */\n      and\n      eq\n        /* \"contracts/Ownable.sol\":1282:1350  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_278\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_278:\n        /* \"contracts/DiamodSafe.sol\":13633:13649  _pool.add(_divs) */\n      tag_280\n        /* \"contracts/DiamodSafe.sol\":13633:13638  _pool */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":13643:13648  _divs */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":13633:13642  _pool.add */\n      tag_262\n        /* \"contracts/DiamodSafe.sol\":13633:13649  _pool.add(_divs) */\n      jump\t// in\n    tag_280:\n        /* \"contracts/DiamodSafe.sol\":13653:13654  3 */\n      0x03\n        /* \"contracts/DiamodSafe.sol\":13633:13654  _pool.add(_divs) == 3 */\n      eq\n        /* \"contracts/DiamodSafe.sol\":13625:13688  require(_pool.add(_divs) == 3, \"TEN_PORTIONS_REQUIRE_DIVISION\") */\n      tag_281\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1d\n      0x24\n      dup3\n      add\n      mstore\n      0x54454e5f504f5254494f4e535f524551554952455f4449564953494f4e000000\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_281:\n        /* \"contracts/DiamodSafe.sol\":13732:13739  forPool */\n      0x0e\n        /* \"contracts/DiamodSafe.sol\":13732:13747  forPool = _pool */\n      dup4\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe.sol\":13757:13764  forDivs */\n      0x0f\n        /* \"contracts/DiamodSafe.sol\":13757:13772  forDivs = _divs */\n      dup3\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe.sol\":13838:13882  onSetFeeSplit(_pool, _divs, block.timestamp) */\n      0x40\n      dup1\n      mload\n      dup5\n      dup2\n      mstore\n      0x20\n      dup2\n      add\n      dup5\n      swap1\n      mstore\n        /* \"contracts/DiamodSafe.sol\":13866:13881  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe.sol\":13838:13882  onSetFeeSplit(_pool, _divs, block.timestamp) */\n      dup2\n      dup4\n      add\n      mstore\n      swap1\n      mload\n      0x677017fa3a0fe0f50a95e6024c5b688f2b14a4696c4a897c459715cabfc1c03a\n      swap2\n      dup2\n      swap1\n      sub\n      0x60\n      add\n      swap1\n      log1\n      pop\n        /* \"contracts/DiamodSafe.sol\":13899:13903  true */\n      0x01\n        /* \"contracts/Ownable.sol\":1360:1361  _ */\n    tag_279:\n        /* \"contracts/DiamodSafe.sol\":13501:13910  function setFeeSplit(... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":12495:13092  function accountOf(address _user) public view returns (uint256[14] memory) {... */\n    tag_117:\n        /* \"contracts/DiamodSafe.sol\":12550:12568  uint256[14] memory */\n      tag_282\n      tag_283\n      jump\t// in\n    tag_282:\n        /* \"contracts/DiamodSafe.sol\":12580:12596  Account memory a */\n      tag_285\n      tag_286\n      jump\t// in\n    tag_285:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":12599:12616  accountOf_[_user] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":12599:12609  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe.sol\":12599:12616  accountOf_[_user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":12580:12616  Account memory a = accountOf_[_user] */\n      dup3\n      mload\n      0x01c0\n      dup2\n      add\n      dup5\n      mstore\n      dup2\n      sload\n      dup2\n      mstore\n      0x01\n      dup3\n      add\n      sload\n      swap3\n      dup2\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      0x02\n      dup2\n      add\n      sload\n      swap3\n      dup3\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      0x03\n      dup3\n      add\n      sload\n      0x60\n      dup3\n      add\n      mstore\n      0x04\n      dup3\n      add\n      sload\n      0x80\n      dup3\n      add\n      mstore\n      0x05\n      dup3\n      add\n      sload\n      0xa0\n      dup3\n      add\n      mstore\n      0x06\n      dup3\n      add\n      sload\n      0xc0\n      dup3\n      add\n      mstore\n      0x07\n      dup3\n      add\n      sload\n      0xe0\n      dup3\n      add\n      mstore\n      0x08\n      dup3\n      add\n      sload\n      0x0100\n      dup3\n      add\n      mstore\n      0x09\n      dup3\n      add\n      sload\n      0x0120\n      dup3\n      add\n      mstore\n      0x0a\n      dup3\n      add\n      sload\n      0x0140\n      dup3\n      add\n      mstore\n      0x0b\n      dup3\n      add\n      sload\n      0x0160\n      dup3\n      add\n      mstore\n      0x0c\n      dup3\n      add\n      sload\n      0x0180\n      dup3\n      add\n      mstore\n      0x0d\n      swap1\n      swap2\n      add\n      sload\n      0x01a0\n      dup3\n      add\n      mstore\n        /* \"contracts/DiamodSafe.sol\":12626:12657  uint256[14] memory accountArray */\n      tag_287\n      tag_283\n      jump\t// in\n    tag_287:\n        /* \"contracts/DiamodSafe.sol\":12626:13056  uint256[14] memory accountArray = [... */\n      mload(0x40)\n      dup1\n      0x01c0\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/DiamodSafe.sol\":12674:12675  a */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":12674:12685  a.deposited */\n      0x00\n      add\n      mload\n        /* \"contracts/DiamodSafe.sol\":12626:13056  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe.sol\":12699:12700  a */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":12699:12710  a.withdrawn */\n      0x20\n      add\n      mload\n        /* \"contracts/DiamodSafe.sol\":12626:13056  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe.sol\":12724:12725  a */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":12724:12734  a.rewarded */\n      0x60\n      add\n      mload\n        /* \"contracts/DiamodSafe.sol\":12626:13056  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe.sol\":12748:12749  a */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":12748:12760  a.compounded */\n      0x40\n      add\n      mload\n        /* \"contracts/DiamodSafe.sol\":12626:13056  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe.sol\":12774:12775  a */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":12774:12787  a.contributed */\n      0x80\n      add\n      mload\n        /* \"contracts/DiamodSafe.sol\":12626:13056  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe.sol\":12801:12802  a */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":12801:12820  a.transferredShares */\n      0xa0\n      add\n      mload\n        /* \"contracts/DiamodSafe.sol\":12626:13056  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe.sol\":12834:12835  a */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":12834:12850  a.receivedShares */\n      0xc0\n      add\n      mload\n        /* \"contracts/DiamodSafe.sol\":12626:13056  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe.sol\":12864:12865  a */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":12864:12875  a.xInvested */\n      0xe0\n      add\n      mload\n        /* \"contracts/DiamodSafe.sol\":12626:13056  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe.sol\":12889:12890  a */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":12889:12900  a.xRewarded */\n      0x0120\n      add\n      mload\n        /* \"contracts/DiamodSafe.sol\":12626:13056  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe.sol\":12914:12915  a */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":12914:12928  a.xContributed */\n      0x0140\n      add\n      mload\n        /* \"contracts/DiamodSafe.sol\":12626:13056  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe.sol\":12942:12943  a */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":12942:12954  a.xWithdrawn */\n      0x0160\n      add\n      mload\n        /* \"contracts/DiamodSafe.sol\":12626:13056  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe.sol\":12968:12969  a */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":12968:12988  a.xTransferredShares */\n      0x0180\n      add\n      mload\n        /* \"contracts/DiamodSafe.sol\":12626:13056  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe.sol\":13002:13003  a */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":13002:13019  a.xReceivedShares */\n      0x01a0\n      add\n      mload\n        /* \"contracts/DiamodSafe.sol\":12626:13056  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe.sol\":13033:13034  a */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":13033:13046  a.xCompounded */\n      0x0100\n      add\n      mload\n        /* \"contracts/DiamodSafe.sol\":12626:13056  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      pop\n      swap1\n      pop\n        /* \"contracts/DiamodSafe.sol\":13073:13085  accountArray */\n      dup1\n        /* \"contracts/DiamodSafe.sol\":13066:13085  return accountArray */\n      swap3\n      pop\n      pop\n      pop\n        /* \"contracts/DiamodSafe.sol\":12495:13092  function accountOf(address _user) public view returns (uint256[14] memory) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":1612:1663  uint256 public constant payoutFrequency = 2 seconds */\n    tag_123:\n        /* \"contracts/DiamodSafe.sol\":1654:1663  2 seconds */\n      0x02\n        /* \"contracts/DiamodSafe.sol\":1612:1663  uint256 public constant payoutFrequency = 2 seconds */\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":11571:11835  function buyPrice() public pure returns (uint256) {... */\n    tag_126:\n        /* \"contracts/DiamodSafe.sol\":11612:11619  uint256 */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":11649:11653  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/DiamodSafe.sol\":11612:11619  uint256 */\n      dup2\n        /* \"contracts/DiamodSafe.sol\":11684:11733  SafeMath.div(SafeMath.mul(_tokens, divsFee), 100) */\n      tag_289\n        /* \"contracts/DiamodSafe.sol\":11697:11727  SafeMath.mul(_tokens, divsFee) */\n      tag_221\n        /* \"contracts/DiamodSafe.sol\":11649:11653  1e18 */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":11612:11619  uint256 */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":11697:11709  SafeMath.mul */\n      tag_222\n        /* \"contracts/DiamodSafe.sol\":11697:11727  SafeMath.mul(_tokens, divsFee) */\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":11684:11733  SafeMath.div(SafeMath.mul(_tokens, divsFee), 100) */\n    tag_289:\n        /* \"contracts/DiamodSafe.sol\":11663:11733  uint256 _dividends = SafeMath.div(SafeMath.mul(_tokens, divsFee), 100) */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe.sol\":11743:11763  uint256 _taxedTokens */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":11766:11799  SafeMath.add(_tokens, _dividends) */\n      tag_267\n        /* \"contracts/DiamodSafe.sol\":11779:11786  _tokens */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":11788:11798  _dividends */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":11766:11778  SafeMath.add */\n      tag_262\n        /* \"contracts/DiamodSafe.sol\":11766:11799  SafeMath.add(_tokens, _dividends) */\n      jump\t// in\n        /* \"contracts/Ownable.sol\":1078:1163  function owner() public view virtual returns (address) {... */\n    tag_132:\n        /* \"contracts/Ownable.sol\":1124:1131  address */\n      0x00\n        /* \"contracts/Ownable.sol\":1150:1156  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"contracts/Ownable.sol\":1078:1163  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":10404:10499  function myTokens() public view returns (uint256) {... */\n    tag_135:\n        /* \"contracts/DiamodSafe.sol\":10445:10452  uint256 */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":10471:10492  balanceOf(msg.sender) */\n      tag_294\n        /* \"contracts/DiamodSafe.sol\":10481:10491  msg.sender */\n      caller\n        /* \"contracts/DiamodSafe.sol\":10471:10480  balanceOf */\n      tag_100\n        /* \"contracts/DiamodSafe.sol\":10471:10492  balanceOf(msg.sender) */\n      jump\t// in\n    tag_294:\n        /* \"contracts/DiamodSafe.sol\":10464:10492  return balanceOf(msg.sender) */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe.sol\":10404:10499  function myTokens() public view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":699:726  address public tokenAddress */\n    tag_138:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x04))\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":1469:1488  uint public forPool */\n    tag_141:\n      sload(0x0e)\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":9683:9842  function transfer(... */\n    tag_145:\n        /* \"contracts/DiamodSafe.sol\":9783:9787  bool */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":2107:2108  0 */\n      dup1\n        /* \"contracts/DiamodSafe.sol\":2094:2104  myTokens() */\n      tag_296\n        /* \"contracts/DiamodSafe.sol\":2094:2102  myTokens */\n      tag_135\n        /* \"contracts/DiamodSafe.sol\":2094:2104  myTokens() */\n      jump\t// in\n    tag_296:\n        /* \"contracts/DiamodSafe.sol\":2094:2108  myTokens() > 0 */\n      gt\n        /* \"contracts/DiamodSafe.sol\":2086:2109  require(myTokens() > 0) */\n      tag_297\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_297:\n        /* \"contracts/DiamodSafe.sol\":9806:9835  _transferTokens(_to, _amount) */\n      tag_299\n        /* \"contracts/DiamodSafe.sol\":9822:9825  _to */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":9827:9834  _amount */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":9806:9821  _transferTokens */\n      tag_300\n        /* \"contracts/DiamodSafe.sol\":9806:9835  _transferTokens(_to, _amount) */\n      jump\t// in\n    tag_299:\n        /* \"contracts/DiamodSafe.sol\":9799:9835  return _transferTokens(_to, _amount) */\n      swap4\n        /* \"contracts/DiamodSafe.sol\":9683:9842  function transfer(... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":10831:10946  function totalBalance() public view returns (uint256) {... */\n    tag_148:\n        /* \"contracts/DiamodSafe.sol\":10902:10914  stakingToken */\n      sload(0x02)\n        /* \"contracts/DiamodSafe.sol\":10902:10939  stakingToken.balanceOf(address(this)) */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":10933:10937  this */\n      address\n        /* \"contracts/DiamodSafe.sol\":10902:10939  stakingToken.balanceOf(address(this)) */\n      0x04\n      dup3\n      add\n      mstore\n      swap1\n      mload\n        /* \"contracts/DiamodSafe.sol\":10876:10883  uint256 */\n      0x00\n      swap3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":10902:10914  stakingToken */\n      and\n      swap2\n        /* \"contracts/DiamodSafe.sol\":10902:10924  stakingToken.balanceOf */\n      0x70a08231\n      swap2\n        /* \"contracts/DiamodSafe.sol\":10902:10939  stakingToken.balanceOf(address(this)) */\n      0x24\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"contracts/DiamodSafe.sol\":10902:10914  stakingToken */\n      dup7\n        /* \"contracts/DiamodSafe.sol\":10902:10939  stakingToken.balanceOf(address(this)) */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_302\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_302:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_304\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_304:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_305\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_305:\n      pop\n      mload\n      swap1\n      pop\n        /* \"contracts/DiamodSafe.sol\":10831:10946  function totalBalance() public view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":1213:1240  uint public dripPoolBalance */\n    tag_151:\n      sload(0x0c)\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":772:793  IERC721[] public jpeg */\n    tag_155:\n      0x06\n      dup2\n      dup2\n      sload\n      dup2\n      lt\n      tag_306\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_306:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n      pop\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":6127:6237  function deposit(uint _amount) public returns (uint256) {... */\n    tag_159:\n        /* \"contracts/DiamodSafe.sol\":6174:6181  uint256 */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":6200:6230  depositTo(msg.sender, _amount) */\n      tag_279\n        /* \"contracts/DiamodSafe.sol\":6210:6220  msg.sender */\n      caller\n        /* \"contracts/DiamodSafe.sol\":6222:6229  _amount */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":6200:6209  depositTo */\n      tag_205\n        /* \"contracts/DiamodSafe.sol\":6200:6230  depositTo(msg.sender, _amount) */\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":975:997  uint public lastPayout */\n    tag_162:\n      sload(0x09)\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":1246:1267  uint8 public dripRate */\n    tag_165:\n      and(0xff, sload(0x0d))\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":732:766  address payable public bnbReceiver */\n    tag_168:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x05))\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":11841:12138  function calculateSharesReceived(... */\n    tag_172:\n        /* \"contracts/DiamodSafe.sol\":11926:11933  uint256 */\n      0x00\n      dup1\n        /* \"contracts/DiamodSafe.sol\":11963:12012  SafeMath.div(SafeMath.mul(_amount, divsFee), 100) */\n      tag_311\n        /* \"contracts/DiamodSafe.sol\":11976:12006  SafeMath.mul(_amount, divsFee) */\n      tag_221\n        /* \"contracts/DiamodSafe.sol\":11989:11996  _amount */\n      dup5\n        /* \"contracts/DiamodSafe.sol\":11926:11933  uint256 */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":11976:11988  SafeMath.mul */\n      tag_222\n        /* \"contracts/DiamodSafe.sol\":11976:12006  SafeMath.mul(_amount, divsFee) */\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":11963:12012  SafeMath.div(SafeMath.mul(_amount, divsFee), 100) */\n    tag_311:\n        /* \"contracts/DiamodSafe.sol\":11945:12012  uint256 _divies = SafeMath.div(SafeMath.mul(_amount, divsFee), 100) */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe.sol\":12022:12038  uint256 _remains */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":12041:12071  SafeMath.sub(_amount, _divies) */\n      tag_313\n        /* \"contracts/DiamodSafe.sol\":12054:12061  _amount */\n      dup5\n        /* \"contracts/DiamodSafe.sol\":12063:12070  _divies */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":12041:12053  SafeMath.sub */\n      tag_225\n        /* \"contracts/DiamodSafe.sol\":12041:12071  SafeMath.sub(_amount, _divies) */\n      jump\t// in\n    tag_313:\n        /* \"contracts/DiamodSafe.sol\":12022:12071  uint256 _remains = SafeMath.sub(_amount, _divies) */\n      swap5\n        /* \"contracts/DiamodSafe.sol\":11841:12138  function calculateSharesReceived(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":10721:10825  function tokenBalance(address _user) public view returns (uint256) {... */\n    tag_176:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":10805:10818  _user.balance */\n      and\n      balance\n      swap1\n        /* \"contracts/DiamodSafe.sol\":10721:10825  function tokenBalance(address _user) public view returns (uint256) {... */\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":5530:6106  function donate(uint _amount) public returns (uint256) {... */\n    tag_180:\n        /* \"contracts/DiamodSafe.sol\":5673:5685  stakingToken */\n      sload(0x02)\n        /* \"contracts/DiamodSafe.sol\":5673:5734  stakingToken.transferFrom(msg.sender, address(this), _amount) */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0x23b872dd)\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":5699:5709  msg.sender */\n      caller\n        /* \"contracts/DiamodSafe.sol\":5673:5734  stakingToken.transferFrom(msg.sender, address(this), _amount) */\n      0x04\n      dup3\n      add\n      mstore\n        /* \"contracts/DiamodSafe.sol\":5719:5723  this */\n      address\n        /* \"contracts/DiamodSafe.sol\":5673:5734  stakingToken.transferFrom(msg.sender, address(this), _amount) */\n      0x24\n      dup3\n      add\n      mstore\n      0x44\n      dup2\n      add\n      dup5\n      swap1\n      mstore\n      swap1\n      mload\n        /* \"contracts/DiamodSafe.sol\":5576:5583  uint256 */\n      0x00\n      swap3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":5673:5685  stakingToken */\n      and\n      swap2\n        /* \"contracts/DiamodSafe.sol\":5673:5698  stakingToken.transferFrom */\n      0x23b872dd\n      swap2\n        /* \"contracts/DiamodSafe.sol\":5673:5734  stakingToken.transferFrom(msg.sender, address(this), _amount) */\n      0x64\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"contracts/DiamodSafe.sol\":5576:5583  uint256 */\n      dup8\n        /* \"contracts/DiamodSafe.sol\":5673:5685  stakingToken */\n      dup8\n        /* \"contracts/DiamodSafe.sol\":5673:5734  stakingToken.transferFrom(msg.sender, address(this), _amount) */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_316\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_316:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_318\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_318:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_319\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_319:\n      pop\n      mload\n        /* \"contracts/DiamodSafe.sol\":5665:5735  require(stakingToken.transferFrom(msg.sender, address(this), _amount)) */\n      tag_320\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_320:\n        /* \"contracts/DiamodSafe.sol\":5797:5812  dripPoolBalance */\n      0x0c\n        /* \"contracts/DiamodSafe.sol\":5797:5823  dripPoolBalance += _amount */\n      dup1\n      sload\n      dup4\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe.sol\":5844:5854  msg.sender */\n      caller\n        /* \"contracts/DiamodSafe.sol\":5797:5812  dripPoolBalance */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":5833:5855  accountOf_[msg.sender] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":5833:5843  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe.sol\":5833:5855  accountOf_[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":5833:5868  accountOf_[msg.sender].xContributed */\n      0x0a\n      dup2\n      add\n        /* \"contracts/DiamodSafe.sol\":5833:5873  accountOf_[msg.sender].xContributed += 1 */\n      dup1\n      sload\n      0x01\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe.sol\":5883:5917  accountOf_[msg.sender].contributed */\n      0x04\n      add\n        /* \"contracts/DiamodSafe.sol\":5883:5928  accountOf_[msg.sender].contributed += _amount */\n      dup1\n      sload\n      dup7\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe.sol\":6021:6067  onDonate(msg.sender, _amount, block.timestamp) */\n      dup2\n      mload\n      dup6\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":6051:6066  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe.sol\":6021:6067  onDonate(msg.sender, _amount, block.timestamp) */\n      swap2\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      dup2\n      mload\n      0x0da1788c3e861a58a47f0d46073b13c4d66efcc259714744f920d1afe7b8dee5\n      swap3\n      swap2\n      dup2\n      swap1\n      sub\n      swap1\n      swap2\n      add\n      swap1\n      log2\n      pop\n      pop\n        /* \"contracts/DiamodSafe.sol\":6084:6099  dripPoolBalance */\n      sload(0x0c)\n      swap1\n        /* \"contracts/DiamodSafe.sol\":5530:6106  function donate(uint _amount) public returns (uint256) {... */\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":854:871  uint public users */\n    tag_183:\n      sload(0x07)\n      dup2\n      jump\t// out\n        /* \"contracts/Ownable.sol\":2004:2244  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_187:\n        /* \"contracts/Ownable.sol\":1301:1313  _msgSender() */\n      tag_322\n        /* \"contracts/Ownable.sol\":1301:1311  _msgSender */\n      tag_271\n        /* \"contracts/Ownable.sol\":1301:1313  _msgSender() */\n      jump\t// in\n    tag_322:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Ownable.sol\":1290:1313  owner() == _msgSender() */\n      and\n        /* \"contracts/Ownable.sol\":1290:1297  owner() */\n      tag_323\n        /* \"contracts/Ownable.sol\":1290:1295  owner */\n      tag_132\n        /* \"contracts/Ownable.sol\":1290:1297  owner() */\n      jump\t// in\n    tag_323:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Ownable.sol\":1290:1313  owner() == _msgSender() */\n      and\n      eq\n        /* \"contracts/Ownable.sol\":1282:1350  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_324\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_324:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Ownable.sol\":2092:2114  newOwner != address(0) */\n      dup2\n      and\n        /* \"contracts/Ownable.sol\":2084:2157  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_326\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x26\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe\n      0x26\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_326:\n        /* \"contracts/Ownable.sol\":2193:2199  _owner */\n      0x00\n      dup1\n      sload\n        /* \"contracts/Ownable.sol\":2172:2210  OwnershipTransferred(_owner, newOwner) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      dup1\n      dup6\n      and\n      swap4\n        /* \"contracts/Ownable.sol\":2193:2199  _owner */\n      swap3\n      and\n      swap2\n        /* \"contracts/Ownable.sol\":2172:2210  OwnershipTransferred(_owner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap2\n      log3\n        /* \"contracts/Ownable.sol\":2220:2226  _owner */\n      0x00\n        /* \"contracts/Ownable.sol\":2220:2237  _owner = newOwner */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/Ownable.sol\":2004:2244  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":7124:7197  function compound() public onlyEarners {... */\n    tag_190:\n        /* \"contracts/DiamodSafe.sol\":2242:2243  0 */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":2227:2239  myEarnings() */\n      tag_328\n        /* \"contracts/DiamodSafe.sol\":2227:2237  myEarnings */\n      tag_208\n        /* \"contracts/DiamodSafe.sol\":2227:2239  myEarnings() */\n      jump\t// in\n    tag_328:\n        /* \"contracts/DiamodSafe.sol\":2227:2243  myEarnings() > 0 */\n      gt\n        /* \"contracts/DiamodSafe.sol\":2219:2244  require(myEarnings() > 0) */\n      tag_329\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_329:\n        /* \"contracts/DiamodSafe.sol\":7173:7190  _compoundTokens() */\n      tag_331\n        /* \"contracts/DiamodSafe.sol\":7173:7188  _compoundTokens */\n      tag_332\n        /* \"contracts/DiamodSafe.sol\":7173:7190  _compoundTokens() */\n      jump\t// in\n    tag_331:\n      pop\n        /* \"contracts/DiamodSafe.sol\":7124:7197  function compound() public onlyEarners {... */\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":13972:14496  function setImmunityToken(... */\n    tag_197:\n        /* \"contracts/DiamodSafe.sol\":14066:14079  bool _success */\n      0x00\n        /* \"contracts/Ownable.sol\":1301:1313  _msgSender() */\n      tag_334\n        /* \"contracts/Ownable.sol\":1301:1311  _msgSender */\n      tag_271\n        /* \"contracts/Ownable.sol\":1301:1313  _msgSender() */\n      jump\t// in\n    tag_334:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Ownable.sol\":1290:1313  owner() == _msgSender() */\n      and\n        /* \"contracts/Ownable.sol\":1290:1297  owner() */\n      tag_335\n        /* \"contracts/Ownable.sol\":1290:1295  owner */\n      tag_132\n        /* \"contracts/Ownable.sol\":1290:1297  owner() */\n      jump\t// in\n    tag_335:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Ownable.sol\":1290:1313  owner() == _msgSender() */\n      and\n      eq\n        /* \"contracts/Ownable.sol\":1282:1350  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_336\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_336:\n        /* \"contracts/DiamodSafe.sol\":14091:14097  uint i */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":14087:14253  for(uint i =0; i < jpeg.length; i++){... */\n    tag_338:\n        /* \"contracts/DiamodSafe.sol\":14106:14110  jpeg */\n      0x06\n        /* \"contracts/DiamodSafe.sol\":14106:14117  jpeg.length */\n      sload\n        /* \"contracts/DiamodSafe.sol\":14102:14117  i < jpeg.length */\n      dup2\n      lt\n        /* \"contracts/DiamodSafe.sol\":14087:14253  for(uint i =0; i < jpeg.length; i++){... */\n      iszero\n      tag_339\n      jumpi\n        /* \"contracts/DiamodSafe.sol\":14185:14194  _contract */\n      dup3\n        /* \"contracts/DiamodSafe.sol\":14195:14196  i */\n      dup2\n        /* \"contracts/DiamodSafe.sol\":14185:14197  _contract[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_341\n      jumpi\n      invalid\n    tag_341:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":14185:14215  _contract[i].supportsInterface */\n      and\n      0x01ffc9a7\n        /* \"contracts/DiamodSafe.sol\":14216:14226  0x80ac58cd */\n      0x80ac58cd\n        /* \"contracts/DiamodSafe.sol\":14185:14227  _contract[i].supportsInterface(0x80ac58cd) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      0xe0\n      shl\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_342\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_342:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_344\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_344:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_345\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_345:\n      pop\n      mload\n        /* \"contracts/DiamodSafe.sol\":14177:14242  require(_contract[i].supportsInterface(0x80ac58cd), \"NOT_ERC721\") */\n      tag_346\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0a\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xb0, 0x4e4f545f455243373231)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_346:\n        /* \"contracts/DiamodSafe.sol\":14119:14122  i++ */\n      0x01\n      add\n        /* \"contracts/DiamodSafe.sol\":14087:14253  for(uint i =0; i < jpeg.length; i++){... */\n      jump(tag_338)\n    tag_339:\n      pop\n        /* \"contracts/DiamodSafe.sol\":14262:14290  IERC721[] memory oldContract */\n      0x60\n        /* \"contracts/DiamodSafe.sol\":14293:14297  jpeg */\n      0x06\n        /* \"contracts/DiamodSafe.sol\":14262:14297  IERC721[] memory oldContract = jpeg */\n      dup1\n      sload\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      dup1\n      iszero\n      tag_347\n      jumpi\n      0x20\n      mul\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_348:\n      dup2\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x01\n      swap1\n      swap2\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_348\n      jumpi\n    tag_347:\n      pop\n      pop\n        /* \"contracts/DiamodSafe.sol\":14307:14323  jpeg = _contract */\n      dup7\n      mload\n        /* \"contracts/DiamodSafe.sol\":14262:14297  IERC721[] memory oldContract = jpeg */\n      swap4\n      swap5\n      pop\n        /* \"contracts/DiamodSafe.sol\":14307:14323  jpeg = _contract */\n      tag_349\n      swap4\n        /* \"contracts/DiamodSafe.sol\":14307:14311  jpeg */\n      0x06\n      swap4\n      pop\n        /* \"contracts/DiamodSafe.sol\":14307:14323  jpeg = _contract */\n      0x20\n      dup9\n      add\n      swap3\n      pop\n      swap1\n      pop\n      tag_350\n      jump\t// in\n    tag_349:\n      pop\n        /* \"contracts/DiamodSafe.sol\":14371:14381  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":14339:14468  onSetImmunityToken(... */\n      and\n      0xf0650831416f723858005cfeae97a2d6f5e127d1e6ae8938574d1d73e7f4727c\n        /* \"contracts/DiamodSafe.sol\":14395:14406  oldContract */\n      dup3\n        /* \"contracts/DiamodSafe.sol\":14420:14429  _contract */\n      dup6\n        /* \"contracts/DiamodSafe.sol\":14443:14458  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe.sol\":14339:14468  onSetImmunityToken(... */\n      mload(0x40)\n      dup1\n      dup1\n      0x20\n      add\n      dup1\n      0x20\n      add\n      dup5\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup2\n      sub\n      dup4\n      mstore\n      dup7\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      0x20\n      mul\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_351:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_353\n      jumpi\n      dup2\n      dup2\n      add\n      mload\n      dup4\n      dup3\n      add\n      mstore\n      0x20\n      add\n      jump(tag_351)\n    tag_353:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      dup4\n      dup2\n      sub\n      dup3\n      mstore\n      dup6\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      0x20\n      mul\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_354:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_356\n      jumpi\n      dup2\n      dup2\n      add\n      mload\n      dup4\n      dup3\n      add\n      mstore\n      0x20\n      add\n      jump(tag_354)\n    tag_356:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n      pop\n        /* \"contracts/DiamodSafe.sol\":14485:14489  true */\n      0x01\n      swap3\n        /* \"contracts/DiamodSafe.sol\":13972:14496  function setImmunityToken(... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":13098:13379  function dailyEstimate(address _user) public view returns (uint256) {... */\n    tag_201:\n        /* \"contracts/DiamodSafe.sol\":13212:13220  dripRate */\n      sload(0x0d)\n        /* \"contracts/DiamodSafe.sol\":13192:13207  dripPoolBalance */\n      sload(0x0c)\n        /* \"contracts/DiamodSafe.sol\":13157:13164  uint256 */\n      0x00\n      swap2\n      dup3\n      swap2\n        /* \"contracts/DiamodSafe.sol\":13192:13228  dripPoolBalance.mul(dripRate).div(1) */\n      tag_358\n      swap2\n        /* \"contracts/DiamodSafe.sol\":13226:13227  1 */\n      0x01\n      swap2\n        /* \"contracts/DiamodSafe.sol\":13192:13221  dripPoolBalance.mul(dripRate) */\n      tag_359\n      swap2\n        /* \"contracts/DiamodSafe.sol\":13212:13220  dripRate */\n      0xff\n      and\n        /* \"contracts/DiamodSafe.sol\":13192:13211  dripPoolBalance.mul */\n      tag_222\n        /* \"contracts/DiamodSafe.sol\":13192:13221  dripPoolBalance.mul(dripRate) */\n      jump\t// in\n    tag_359:\n        /* \"contracts/DiamodSafe.sol\":13192:13225  dripPoolBalance.mul(dripRate).div */\n      swap1\n      tag_223\n        /* \"contracts/DiamodSafe.sol\":13192:13228  dripPoolBalance.mul(dripRate).div(1) */\n      jump\t// in\n    tag_358:\n        /* \"contracts/DiamodSafe.sol\":13176:13228  uint256 share = dripPoolBalance.mul(dripRate).div(1) */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe.sol\":13279:13280  0 */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":13258:13276  currentTotalStaked */\n      sload(0x11)\n        /* \"contracts/DiamodSafe.sol\":13258:13280  currentTotalStaked > 0 */\n      gt\n        /* \"contracts/DiamodSafe.sol\":13257:13372  (currentTotalStaked > 0)... */\n      tag_360\n      jumpi\n        /* \"contracts/DiamodSafe.sol\":13371:13372  0 */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":13257:13372  (currentTotalStaked > 0)... */\n      jump(tag_299)\n    tag_360:\n        /* \"contracts/DiamodSafe.sol\":13333:13351  currentTotalStaked */\n      sload(0x11)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":13310:13327  balanceOf_[_user] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":13310:13320  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe.sol\":13310:13327  balanceOf_[_user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe.sol\":13300:13352  share.mul(balanceOf_[_user]).div(currentTotalStaked) */\n      tag_299\n      swap2\n        /* \"contracts/DiamodSafe.sol\":13333:13351  currentTotalStaked */\n      swap1\n        /* \"contracts/DiamodSafe.sol\":13300:13328  share.mul(balanceOf_[_user]) */\n      tag_359\n      swap1\n        /* \"contracts/DiamodSafe.sol\":13300:13305  share */\n      dup5\n      swap1\n        /* \"contracts/DiamodSafe.sol\":13300:13309  share.mul */\n      tag_222\n        /* \"contracts/DiamodSafe.sol\":13300:13328  share.mul(balanceOf_[_user]) */\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":6260:7102  function depositTo(address _user, uint _amount) public returns (uint256) {... */\n    tag_205:\n        /* \"contracts/DiamodSafe.sol\":6421:6433  stakingToken */\n      sload(0x02)\n        /* \"contracts/DiamodSafe.sol\":6421:6482  stakingToken.transferFrom(msg.sender, address(this), _amount) */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0x23b872dd)\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":6447:6457  msg.sender */\n      caller\n        /* \"contracts/DiamodSafe.sol\":6421:6482  stakingToken.transferFrom(msg.sender, address(this), _amount) */\n      0x04\n      dup3\n      add\n      mstore\n        /* \"contracts/DiamodSafe.sol\":6467:6471  this */\n      address\n        /* \"contracts/DiamodSafe.sol\":6421:6482  stakingToken.transferFrom(msg.sender, address(this), _amount) */\n      0x24\n      dup3\n      add\n      mstore\n      0x44\n      dup2\n      add\n      dup5\n      swap1\n      mstore\n      swap1\n      mload\n        /* \"contracts/DiamodSafe.sol\":6324:6331  uint256 */\n      0x00\n      swap3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":6421:6433  stakingToken */\n      and\n      swap2\n        /* \"contracts/DiamodSafe.sol\":6421:6446  stakingToken.transferFrom */\n      0x23b872dd\n      swap2\n        /* \"contracts/DiamodSafe.sol\":6421:6482  stakingToken.transferFrom(msg.sender, address(this), _amount) */\n      0x64\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"contracts/DiamodSafe.sol\":6324:6331  uint256 */\n      dup8\n        /* \"contracts/DiamodSafe.sol\":6421:6433  stakingToken */\n      dup8\n        /* \"contracts/DiamodSafe.sol\":6421:6482  stakingToken.transferFrom(msg.sender, address(this), _amount) */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_365\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_365:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_367\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_367:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_368\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_368:\n      pop\n      mload\n        /* \"contracts/DiamodSafe.sol\":6413:6483  require(stakingToken.transferFrom(msg.sender, address(this), _amount)) */\n      tag_369\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_369:\n        /* \"contracts/DiamodSafe.sol\":6545:6558  totalDeposits */\n      0x0b\n        /* \"contracts/DiamodSafe.sol\":6545:6569  totalDeposits += _amount */\n      dup1\n      sload\n      dup4\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe.sol\":6545:6558  totalDeposits */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":6646:6676  _depositTokens(_user, _amount) */\n      tag_370\n        /* \"contracts/DiamodSafe.sol\":6661:6666  _user */\n      dup5\n        /* \"contracts/DiamodSafe.sol\":6562:6569  _amount */\n      dup5\n        /* \"contracts/DiamodSafe.sol\":6646:6660  _depositTokens */\n      tag_371\n        /* \"contracts/DiamodSafe.sol\":6646:6676  _depositTokens(_user, _amount) */\n      jump\t// in\n    tag_370:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":6729:6908  onUpdate(... */\n      dup6\n      and\n        /* \"contracts/DiamodSafe.sol\":6770:6787  accountOf_[_user] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":6770:6780  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe.sol\":6770:6787  accountOf_[_user] */\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":6770:6797  accountOf_[_user].deposited */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe.sol\":6811:6821  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe.sol\":6811:6828  balanceOf_[_user] */\n      dup5\n      mstore\n      swap5\n      dup3\n      swap1\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe.sol\":6842:6859  accountOf_[_user] */\n      swap4\n      dup4\n      mstore\n        /* \"contracts/DiamodSafe.sol\":6842:6869  accountOf_[_user].withdrawn */\n      0x01\n      add\n      sload\n        /* \"contracts/DiamodSafe.sol\":6729:6908  onUpdate(... */\n      dup2\n      mload\n      swap5\n      dup6\n      mstore\n      swap2\n      dup5\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      dup3\n      dup3\n      add\n      mstore\n        /* \"contracts/DiamodSafe.sol\":6883:6898  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe.sol\":6729:6908  onUpdate(... */\n      0x60\n      dup4\n      add\n      mstore\n      mload\n        /* \"contracts/DiamodSafe.sol\":6632:6676  uint amount = _depositTokens(_user, _amount) */\n      swap3\n      swap4\n      pop\n        /* \"contracts/DiamodSafe.sol\":6729:6908  onUpdate(... */\n      swap1\n      swap2\n      0x00\n      dup1\n      mload\n      0x20\n      data_27cc9c295b15a532bb1b5f9308f1d54813e694c2ebdd1c2ced210bfe52dcd57e\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      swap2\n      dup2\n      swap1\n      sub\n      0x80\n      add\n      swap1\n      log2\n        /* \"contracts/DiamodSafe.sol\":6983:6995  distribute() */\n      tag_299\n        /* \"contracts/DiamodSafe.sol\":6983:6993  distribute */\n      tag_240\n        /* \"contracts/DiamodSafe.sol\":6983:6995  distribute() */\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":10505:10604  function myEarnings() public view returns (uint256) {... */\n    tag_208:\n        /* \"contracts/DiamodSafe.sol\":10548:10555  uint256 */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":10574:10597  dividendsOf(msg.sender) */\n      tag_294\n        /* \"contracts/DiamodSafe.sol\":10586:10596  msg.sender */\n      caller\n        /* \"contracts/DiamodSafe.sol\":10574:10585  dividendsOf */\n      tag_60\n        /* \"contracts/DiamodSafe.sol\":10574:10597  dividendsOf(msg.sender) */\n      jump\t// in\n        /* \"contracts/Address.sol\":726:1139  function isContract(address account) internal view returns (bool) {... */\n    tag_209:\n        /* \"contracts/Address.sol\":1086:1106  extcodesize(account) */\n      extcodesize\n        /* \"contracts/Address.sol\":1124:1132  size > 0 */\n      iszero\n      iszero\n      swap1\n        /* \"contracts/Address.sol\":726:1139  function isContract(address account) internal view returns (bool) {... */\n      jump\t// out\n        /* \"contracts/SafeMath.sol\":3538:3753  function mul(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_222:\n        /* \"contracts/SafeMath.sol\":3596:3603  uint256 */\n      0x00\n        /* \"contracts/SafeMath.sol\":3619:3625  a == 0 */\n      dup3\n        /* \"contracts/SafeMath.sol\":3615:3635  if (a == 0) return 0 */\n      tag_377\n      jumpi\n      pop\n        /* \"contracts/SafeMath.sol\":3634:3635  0 */\n      0x00\n        /* \"contracts/SafeMath.sol\":3627:3635  return 0 */\n      jump(tag_279)\n        /* \"contracts/SafeMath.sol\":3615:3635  if (a == 0) return 0 */\n    tag_377:\n        /* \"contracts/SafeMath.sol\":3657:3662  a * b */\n      dup3\n      dup3\n      mul\n        /* \"contracts/SafeMath.sol\":3661:3662  b */\n      dup3\n        /* \"contracts/SafeMath.sol\":3657:3658  a */\n      dup5\n        /* \"contracts/SafeMath.sol\":3657:3662  a * b */\n      dup3\n        /* \"contracts/SafeMath.sol\":3657:3658  a */\n      dup2\n        /* \"contracts/SafeMath.sol\":3680:3685  c / a */\n      tag_378\n      jumpi\n      invalid\n    tag_378:\n      div\n        /* \"contracts/SafeMath.sol\":3680:3690  c / a == b */\n      eq\n        /* \"contracts/SafeMath.sol\":3672:3728  require(c / a == b, \"SafeMath: multiplication overflow\") */\n      tag_299\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x21\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3\n      0x21\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/SafeMath.sol\":4217:4367  function div(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_223:\n        /* \"contracts/SafeMath.sol\":4275:4282  uint256 */\n      0x00\n        /* \"contracts/SafeMath.sol\":4306:4307  0 */\n      dup1\n        /* \"contracts/SafeMath.sol\":4302:4303  b */\n      dup3\n        /* \"contracts/SafeMath.sol\":4302:4307  b > 0 */\n      gt\n        /* \"contracts/SafeMath.sol\":4294:4338  require(b > 0, \"SafeMath: division by zero\") */\n      tag_381\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1a\n      0x24\n      dup3\n      add\n      mstore\n      0x536166654d6174683a206469766973696f6e206279207a65726f000000000000\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_381:\n        /* \"contracts/SafeMath.sol\":4359:4360  b */\n      dup2\n        /* \"contracts/SafeMath.sol\":4355:4356  a */\n      dup4\n        /* \"contracts/SafeMath.sol\":4355:4360  a / b */\n      dup2\n      tag_382\n      jumpi\n      invalid\n    tag_382:\n      div\n      swap4\n        /* \"contracts/SafeMath.sol\":4217:4367  function div(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/SafeMath.sol\":3136:3291  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_225:\n        /* \"contracts/SafeMath.sol\":3194:3201  uint256 */\n      0x00\n        /* \"contracts/SafeMath.sol\":3226:3227  a */\n      dup3\n        /* \"contracts/SafeMath.sol\":3221:3222  b */\n      dup3\n        /* \"contracts/SafeMath.sol\":3221:3227  b <= a */\n      gt\n      iszero\n        /* \"contracts/SafeMath.sol\":3213:3262  require(b <= a, \"SafeMath: subtraction overflow\") */\n      tag_384\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1e\n      0x24\n      dup3\n      add\n      mstore\n      0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_384:\n      pop\n        /* \"contracts/SafeMath.sol\":3279:3284  a - b */\n      swap1\n      sub\n      swap1\n        /* \"contracts/SafeMath.sol\":3136:3291  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":14666:15403  function allocateFees(uint fee) private {... */\n    tag_238:\n        /* \"contracts/DiamodSafe.sol\":14716:14733  uint256 _onePiece */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":14736:14747  fee.div(10) */\n      tag_386\n        /* \"contracts/DiamodSafe.sol\":14736:14739  fee */\n      dup3\n        /* \"contracts/DiamodSafe.sol\":14744:14746  10 */\n      0x0a\n        /* \"contracts/DiamodSafe.sol\":14736:14743  fee.div */\n      tag_223\n        /* \"contracts/DiamodSafe.sol\":14736:14747  fee.div(10) */\n      jump\t// in\n    tag_386:\n        /* \"contracts/DiamodSafe.sol\":14716:14747  uint256 _onePiece = fee.div(10) */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe.sol\":14758:14774  uint256 _forPool */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":14778:14800  _onePiece.mul(forPool) */\n      tag_387\n        /* \"contracts/DiamodSafe.sol\":14792:14799  forPool */\n      sload(0x0e)\n        /* \"contracts/DiamodSafe.sol\":14778:14787  _onePiece */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":14778:14791  _onePiece.mul */\n      tag_222\n      swap1\n        /* \"contracts/DiamodSafe.sol\":14778:14800  _onePiece.mul(forPool) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_387:\n        /* \"contracts/DiamodSafe.sol\":14758:14801  uint256 _forPool = (_onePiece.mul(forPool)) */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe.sol\":14832:14848  uint256 _forDivs */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":14852:14874  _onePiece.mul(forDivs) */\n      tag_388\n        /* \"contracts/DiamodSafe.sol\":14866:14873  forDivs */\n      sload(0x0f)\n        /* \"contracts/DiamodSafe.sol\":14852:14861  _onePiece */\n      dup5\n        /* \"contracts/DiamodSafe.sol\":14852:14865  _onePiece.mul */\n      tag_222\n      swap1\n        /* \"contracts/DiamodSafe.sol\":14852:14874  _onePiece.mul(forDivs) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_388:\n        /* \"contracts/DiamodSafe.sol\":14924:14939  dripPoolBalance */\n      sload(0x0c)\n        /* \"contracts/DiamodSafe.sol\":14832:14875  uint256 _forDivs = (_onePiece.mul(forDivs)) */\n      swap1\n      swap2\n      pop\n        /* \"contracts/DiamodSafe.sol\":14924:14953  dripPoolBalance.add(_forPool) */\n      tag_389\n      swap1\n        /* \"contracts/DiamodSafe.sol\":14944:14952  _forPool */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":14924:14943  dripPoolBalance.add */\n      tag_262\n        /* \"contracts/DiamodSafe.sol\":14924:14953  dripPoolBalance.add(_forPool) */\n      jump\t// in\n    tag_389:\n        /* \"contracts/DiamodSafe.sol\":14906:14921  dripPoolBalance */\n      0x0c\n        /* \"contracts/DiamodSafe.sol\":14906:14953  dripPoolBalance = dripPoolBalance.add(_forPool) */\n      sstore\n        /* \"contracts/DiamodSafe.sol\":15032:15050  currentTotalStaked */\n      sload(0x11)\n        /* \"contracts/DiamodSafe.sol\":15032:15054  currentTotalStaked > 0 */\n      iszero\n        /* \"contracts/DiamodSafe.sol\":15028:15397  if (currentTotalStaked > 0) {... */\n      tag_390\n      jumpi\n        /* \"contracts/DiamodSafe.sol\":15136:15256  SafeMath.add(... */\n      tag_391\n        /* \"contracts/DiamodSafe.sol\":15166:15181  profitPerShare_ */\n      sload(0x12)\n        /* \"contracts/DiamodSafe.sol\":15224:15242  currentTotalStaked */\n      sload(0x11)\n      shl(0x40, 0x01)\n        /* \"contracts/DiamodSafe.sol\":15200:15208  _forDivs */\n      dup5\n        /* \"contracts/DiamodSafe.sol\":15200:15220  _forDivs * magnitude */\n      mul\n        /* \"contracts/DiamodSafe.sol\":15199:15242  (_forDivs * magnitude) / currentTotalStaked */\n      dup2\n      tag_392\n      jumpi\n      invalid\n    tag_392:\n      div\n        /* \"contracts/DiamodSafe.sol\":15136:15148  SafeMath.add */\n      tag_262\n        /* \"contracts/DiamodSafe.sol\":15136:15256  SafeMath.add(... */\n      jump\t// in\n    tag_391:\n        /* \"contracts/DiamodSafe.sol\":15118:15133  profitPerShare_ */\n      0x12\n        /* \"contracts/DiamodSafe.sol\":15118:15256  profitPerShare_ = SafeMath.add(... */\n      sstore\n        /* \"contracts/DiamodSafe.sol\":15028:15397  if (currentTotalStaked > 0) {... */\n      jump(tag_393)\n    tag_390:\n        /* \"contracts/DiamodSafe.sol\":15359:15374  dripPoolBalance */\n      0x0c\n        /* \"contracts/DiamodSafe.sol\":15359:15386  dripPoolBalance += _forDivs */\n      dup1\n      sload\n      dup3\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe.sol\":15028:15397  if (currentTotalStaked > 0) {... */\n    tag_393:\n        /* \"contracts/DiamodSafe.sol\":14666:15403  function allocateFees(uint fee) private {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":15444:16684  function distribute() private {... */\n    tag_240:\n        /* \"contracts/DiamodSafe.sol\":15617:15631  lastRebaseTime */\n      sload(0x10)\n        /* \"contracts/DiamodSafe.sol\":15510:15525  block.timestamp */\n      timestamp\n      swap1\n        /* \"contracts/DiamodSafe.sol\":1597:1606  2 seconds */\n      0x02\n      swap1\n        /* \"contracts/DiamodSafe.sol\":15591:15632  _currentTimestamp.safeSub(lastRebaseTime) */\n      tag_395\n      swap1\n        /* \"contracts/DiamodSafe.sol\":15510:15525  block.timestamp */\n      dup4\n      swap1\n        /* \"contracts/DiamodSafe.sol\":15591:15616  _currentTimestamp.safeSub */\n      tag_396\n        /* \"contracts/DiamodSafe.sol\":15591:15632  _currentTimestamp.safeSub(lastRebaseTime) */\n      jump\t// in\n    tag_395:\n        /* \"contracts/DiamodSafe.sol\":15591:15650  _currentTimestamp.safeSub(lastRebaseTime) > rebaseFrequency */\n      gt\n        /* \"contracts/DiamodSafe.sol\":15587:15865  if (_currentTimestamp.safeSub(lastRebaseTime) > rebaseFrequency) {... */\n      iszero\n      tag_397\n      jumpi\n        /* \"contracts/DiamodSafe.sol\":15706:15749  onRebase(totalBalance(), _currentTimestamp) */\n      0x2cfce469a63f2e9972b7f23da751e6943ed2b091c10e40b5c43b5f6105bf20ea\n        /* \"contracts/DiamodSafe.sol\":15715:15729  totalBalance() */\n      tag_398\n        /* \"contracts/DiamodSafe.sol\":15715:15727  totalBalance */\n      tag_148\n        /* \"contracts/DiamodSafe.sol\":15715:15729  totalBalance() */\n      jump\t// in\n    tag_398:\n        /* \"contracts/DiamodSafe.sol\":15706:15749  onRebase(totalBalance(), _currentTimestamp) */\n      0x40\n      dup1\n      mload\n      swap2\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup5\n      swap1\n      mstore\n      dup1\n      mload\n      swap2\n      dup3\n      swap1\n      sub\n      add\n      swap1\n      log1\n        /* \"contracts/DiamodSafe.sol\":15820:15834  lastRebaseTime */\n      0x10\n        /* \"contracts/DiamodSafe.sol\":15820:15854  lastRebaseTime = _currentTimestamp */\n      dup2\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe.sol\":15587:15865  if (_currentTimestamp.safeSub(lastRebaseTime) > rebaseFrequency) {... */\n    tag_397:\n        /* \"contracts/DiamodSafe.sol\":1654:1663  2 seconds */\n      0x02\n        /* \"contracts/DiamodSafe.sol\":15937:15984  SafeMath.safeSub(_currentTimestamp, lastPayout) */\n      tag_399\n        /* \"contracts/DiamodSafe.sol\":15954:15971  _currentTimestamp */\n      dup3\n        /* \"contracts/DiamodSafe.sol\":15973:15983  lastPayout */\n      sload(0x09)\n        /* \"contracts/DiamodSafe.sol\":15937:15953  SafeMath.safeSub */\n      tag_396\n        /* \"contracts/DiamodSafe.sol\":15937:15984  SafeMath.safeSub(_currentTimestamp, lastPayout) */\n      jump\t// in\n    tag_399:\n        /* \"contracts/DiamodSafe.sol\":15937:16002  SafeMath.safeSub(_currentTimestamp, lastPayout) > payoutFrequency */\n      gt\n        /* \"contracts/DiamodSafe.sol\":15937:16040  SafeMath.safeSub(_currentTimestamp, lastPayout) > payoutFrequency &&... */\n      dup1\n      iszero\n      tag_400\n      jumpi\n      pop\n        /* \"contracts/DiamodSafe.sol\":16039:16040  0 */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":16018:16036  currentTotalStaked */\n      sload(0x11)\n        /* \"contracts/DiamodSafe.sol\":16018:16040  currentTotalStaked > 0 */\n      gt\n        /* \"contracts/DiamodSafe.sol\":15937:16040  SafeMath.safeSub(_currentTimestamp, lastPayout) > payoutFrequency &&... */\n    tag_400:\n        /* \"contracts/DiamodSafe.sol\":15920:16678  if (... */\n      iszero\n      tag_331\n      jumpi\n        /* \"contracts/DiamodSafe.sol\":16148:16156  dripRate */\n      sload(0x0d)\n        /* \"contracts/DiamodSafe.sol\":16128:16143  dripPoolBalance */\n      sload(0x0c)\n        /* \"contracts/DiamodSafe.sol\":16112:16125  uint256 share */\n      0x00\n      swap2\n        /* \"contracts/DiamodSafe.sol\":16128:16208  dripPoolBalance.mul(dripRate).div(1).div(... */\n      tag_402\n      swap2\n        /* \"contracts/DiamodSafe.sol\":16186:16194  24 hours */\n      0x015180\n      swap2\n        /* \"contracts/DiamodSafe.sol\":16128:16164  dripPoolBalance.mul(dripRate).div(1) */\n      tag_359\n      swap2\n        /* \"contracts/DiamodSafe.sol\":16162:16163  1 */\n      0x01\n      swap2\n        /* \"contracts/DiamodSafe.sol\":16128:16164  dripPoolBalance.mul(dripRate).div(1) */\n      dup4\n      swap2\n        /* \"contracts/DiamodSafe.sol\":16128:16143  dripPoolBalance */\n      swap1\n        /* \"contracts/DiamodSafe.sol\":16148:16156  dripRate */\n      0xff\n      and\n        /* \"contracts/DiamodSafe.sol\":16128:16147  dripPoolBalance.mul */\n      tag_222\n        /* \"contracts/DiamodSafe.sol\":16128:16157  dripPoolBalance.mul(dripRate) */\n      jump\t// in\n        /* \"contracts/DiamodSafe.sol\":16128:16208  dripPoolBalance.mul(dripRate).div(1).div(... */\n    tag_402:\n        /* \"contracts/DiamodSafe.sol\":16112:16208  uint256 share = dripPoolBalance.mul(dripRate).div(1).div(... */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe.sol\":16222:16236  uint256 profit */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":16247:16284  _currentTimestamp.safeSub(lastPayout) */\n      tag_405\n        /* \"contracts/DiamodSafe.sol\":16273:16283  lastPayout */\n      sload(0x09)\n        /* \"contracts/DiamodSafe.sol\":16247:16264  _currentTimestamp */\n      dup5\n        /* \"contracts/DiamodSafe.sol\":16247:16272  _currentTimestamp.safeSub */\n      tag_396\n      swap1\n        /* \"contracts/DiamodSafe.sol\":16247:16284  _currentTimestamp.safeSub(lastPayout) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_405:\n        /* \"contracts/DiamodSafe.sol\":16393:16408  dripPoolBalance */\n      sload(0x0c)\n        /* \"contracts/DiamodSafe.sol\":16239:16284  share * _currentTimestamp.safeSub(lastPayout) */\n      swap1\n      dup4\n      mul\n      swap2\n      pop\n        /* \"contracts/DiamodSafe.sol\":16393:16424  dripPoolBalance.safeSub(profit) */\n      tag_406\n      swap1\n        /* \"contracts/DiamodSafe.sol\":16239:16284  share * _currentTimestamp.safeSub(lastPayout) */\n      dup3\n        /* \"contracts/DiamodSafe.sol\":16393:16416  dripPoolBalance.safeSub */\n      tag_396\n        /* \"contracts/DiamodSafe.sol\":16393:16424  dripPoolBalance.safeSub(profit) */\n      jump\t// in\n    tag_406:\n        /* \"contracts/DiamodSafe.sol\":16375:16390  dripPoolBalance */\n      0x0c\n        /* \"contracts/DiamodSafe.sol\":16375:16424  dripPoolBalance = dripPoolBalance.safeSub(profit) */\n      sstore\n        /* \"contracts/DiamodSafe.sol\":16486:16501  profitPerShare_ */\n      sload(0x12)\n        /* \"contracts/DiamodSafe.sol\":16542:16560  currentTotalStaked */\n      sload(0x11)\n        /* \"contracts/DiamodSafe.sol\":16456:16574  SafeMath.add(... */\n      tag_407\n      swap2\n        /* \"contracts/DiamodSafe.sol\":16486:16501  profitPerShare_ */\n      swap1\n      shl(0x40, 0x01)\n        /* \"contracts/DiamodSafe.sol\":16520:16538  profit * magnitude */\n      dup5\n      mul\n        /* \"contracts/DiamodSafe.sol\":16542:16560  currentTotalStaked */\n      dup2\n        /* \"contracts/DiamodSafe.sol\":16519:16560  (profit * magnitude) / currentTotalStaked */\n      tag_392\n      jumpi\n      invalid\n        /* \"contracts/DiamodSafe.sol\":16456:16574  SafeMath.add(... */\n    tag_407:\n        /* \"contracts/DiamodSafe.sol\":16438:16453  profitPerShare_ */\n      0x12\n        /* \"contracts/DiamodSafe.sol\":16438:16574  profitPerShare_ = SafeMath.add(... */\n      sstore\n      pop\n      pop\n        /* \"contracts/DiamodSafe.sol\":16637:16647  lastPayout */\n      0x09\n        /* \"contracts/DiamodSafe.sol\":16637:16667  lastPayout = _currentTimestamp */\n      sstore\n        /* \"contracts/DiamodSafe.sol\":15444:16684  function distribute() private {... */\n      jump\t// out\n        /* \"contracts/SafeMath.sol\":2690:2865  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_262:\n        /* \"contracts/SafeMath.sol\":2748:2755  uint256 */\n      0x00\n        /* \"contracts/SafeMath.sol\":2779:2784  a + b */\n      dup3\n      dup3\n      add\n        /* \"contracts/SafeMath.sol\":2802:2808  c >= a */\n      dup4\n      dup2\n      lt\n      iszero\n        /* \"contracts/SafeMath.sol\":2794:2840  require(c >= a, \"SafeMath: addition overflow\") */\n      tag_299\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1b\n      0x24\n      dup3\n      add\n      mstore\n      0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n        /* \"contracts/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\n    tag_271:\n        /* \"contracts/Context.sol\":685:695  msg.sender */\n      caller\n        /* \"contracts/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":19571:21540  function _transferTokens(... */\n    tag_300:\n        /* \"contracts/DiamodSafe.sol\":19716:19726  msg.sender */\n      caller\n        /* \"contracts/DiamodSafe.sol\":19673:19686  bool _success */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":19755:19774  balanceOf_[_sender] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":19755:19765  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe.sol\":19755:19774  balanceOf_[_sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe.sol\":19673:19686  bool _success */\n      swap1\n      swap2\n        /* \"contracts/DiamodSafe.sol\":19716:19726  msg.sender */\n      swap1\n        /* \"contracts/DiamodSafe.sol\":19744:19774  _amount <= balanceOf_[_sender] */\n      dup4\n      gt\n      iszero\n        /* \"contracts/DiamodSafe.sol\":19736:19775  require(_amount <= balanceOf_[_sender]) */\n      tag_413\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_413:\n        /* \"contracts/DiamodSafe.sol\":19890:19891  0 */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":19875:19887  myEarnings() */\n      tag_414\n        /* \"contracts/DiamodSafe.sol\":19875:19885  myEarnings */\n      tag_208\n        /* \"contracts/DiamodSafe.sol\":19875:19887  myEarnings() */\n      jump\t// in\n    tag_414:\n        /* \"contracts/DiamodSafe.sol\":19875:19891  myEarnings() > 0 */\n      gt\n        /* \"contracts/DiamodSafe.sol\":19871:19927  if (myEarnings() > 0) {... */\n      iszero\n      tag_416\n      jumpi\n        /* \"contracts/DiamodSafe.sol\":19907:19916  harvest() */\n      tag_416\n        /* \"contracts/DiamodSafe.sol\":19907:19914  harvest */\n      tag_90\n        /* \"contracts/DiamodSafe.sol\":19907:19916  harvest() */\n      jump\t// in\n    tag_416:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":20004:20023  balanceOf_[_sender] */\n      dup2\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":20004:20014  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe.sol\":20004:20023  balanceOf_[_sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe.sol\":19991:20033  SafeMath.sub(balanceOf_[_sender], _amount) */\n      tag_417\n      swap1\n        /* \"contracts/DiamodSafe.sol\":20025:20032  _amount */\n      dup5\n        /* \"contracts/DiamodSafe.sol\":19991:20003  SafeMath.sub */\n      tag_225\n        /* \"contracts/DiamodSafe.sol\":19991:20033  SafeMath.sub(balanceOf_[_sender], _amount) */\n      jump\t// in\n    tag_417:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":19969:19988  balanceOf_[_sender] */\n      dup1\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":19969:19979  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe.sol\":19969:19988  balanceOf_[_sender] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":19969:20033  balanceOf_[_sender] = SafeMath.sub(balanceOf_[_sender], _amount) */\n      swap4\n      swap1\n      swap4\n      sstore\n        /* \"contracts/DiamodSafe.sol\":20081:20103  balanceOf_[_recipient] */\n      swap1\n      dup7\n      and\n      dup2\n      mstore\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe.sol\":20068:20113  SafeMath.add(balanceOf_[_recipient], _amount) */\n      tag_418\n      swap1\n        /* \"contracts/DiamodSafe.sol\":20105:20112  _amount */\n      dup5\n        /* \"contracts/DiamodSafe.sol\":20068:20080  SafeMath.add */\n      tag_262\n        /* \"contracts/DiamodSafe.sol\":20068:20113  SafeMath.add(balanceOf_[_recipient], _amount) */\n      jump\t// in\n    tag_418:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":20043:20065  balanceOf_[_recipient] */\n      dup6\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":20043:20053  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe.sol\":20043:20065  balanceOf_[_recipient] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":20043:20113  balanceOf_[_recipient] = SafeMath.add(balanceOf_[_recipient], _amount) */\n      swap6\n      swap1\n      swap6\n      sstore\n        /* \"contracts/DiamodSafe.sol\":20217:20232  profitPerShare_ */\n      0x12\n      dup1\n      sload\n        /* \"contracts/DiamodSafe.sol\":20185:20204  payoutsOf_[_sender] */\n      swap5\n      dup8\n      and\n      dup4\n      mstore\n        /* \"contracts/DiamodSafe.sol\":20185:20195  payoutsOf_ */\n      0x13\n        /* \"contracts/DiamodSafe.sol\":20185:20204  payoutsOf_[_sender] */\n      dup3\n      mstore\n      dup6\n      dup4\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":20185:20243  payoutsOf_[_sender] -= (int256)(profitPerShare_ * _amount) */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe.sol\":20217:20242  profitPerShare_ * _amount */\n      swap6\n      dup11\n      mul\n        /* \"contracts/DiamodSafe.sol\":20185:20243  payoutsOf_[_sender] -= (int256)(profitPerShare_ * _amount) */\n      swap1\n      swap6\n      sub\n      swap1\n      swap5\n      sstore\n        /* \"contracts/DiamodSafe.sol\":20288:20303  profitPerShare_ */\n      swap3\n      sload\n        /* \"contracts/DiamodSafe.sol\":20253:20275  payoutsOf_[_recipient] */\n      swap2\n      dup2\n      mstore\n      dup4\n      dup2\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":20253:20314  payoutsOf_[_recipient] += (int256)(profitPerShare_ * _amount) */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe.sol\":20288:20313  profitPerShare_ * _amount */\n      swap3\n      dup9\n      mul\n        /* \"contracts/DiamodSafe.sol\":20253:20314  payoutsOf_[_recipient] += (int256)(profitPerShare_ * _amount) */\n      swap1\n      swap3\n      add\n      swap1\n      swap2\n      sstore\n        /* \"contracts/DiamodSafe.sol\":20417:20427  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe.sol\":20417:20439  accountOf_[_recipient] */\n      swap1\n      swap2\n      mstore\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":20417:20449  accountOf_[_recipient].deposited */\n      sload\n        /* \"contracts/DiamodSafe.sol\":20417:20454  accountOf_[_recipient].deposited == 0 */\n      iszero\n        /* \"contracts/DiamodSafe.sol\":20417:20512  accountOf_[_recipient].deposited == 0 &&... */\n      dup1\n      iszero\n      tag_419\n      jumpi\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":20470:20492  accountOf_[_recipient] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":20470:20480  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe.sol\":20470:20492  accountOf_[_recipient] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":20470:20507  accountOf_[_recipient].receivedShares */\n      0x06\n      add\n      sload\n        /* \"contracts/DiamodSafe.sol\":20470:20512  accountOf_[_recipient].receivedShares == 0 */\n      iszero\n        /* \"contracts/DiamodSafe.sol\":20417:20512  accountOf_[_recipient].deposited == 0 &&... */\n    tag_419:\n        /* \"contracts/DiamodSafe.sol\":20400:20558  if (... */\n      iszero\n      tag_420\n      jumpi\n        /* \"contracts/DiamodSafe.sol\":20537:20542  users */\n      0x07\n        /* \"contracts/DiamodSafe.sol\":20537:20547  users += 1 */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe.sol\":20546:20547  1 */\n      0x01\n        /* \"contracts/DiamodSafe.sol\":20537:20547  users += 1 */\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe.sol\":20400:20558  if (... */\n    tag_420:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":20594:20613  accountOf_[_sender] */\n      dup1\n      dup3\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":20594:20604  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe.sol\":20594:20613  accountOf_[_sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":20594:20632  accountOf_[_sender].xTransferredShares */\n      0x0c\n      dup2\n      add\n        /* \"contracts/DiamodSafe.sol\":20594:20637  accountOf_[_sender].xTransferredShares += 1 */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe.sol\":20636:20637  1 */\n      0x01\n        /* \"contracts/DiamodSafe.sol\":20594:20637  accountOf_[_sender].xTransferredShares += 1 */\n      swap1\n      dup2\n      add\n      swap1\n      swap2\n      sstore\n        /* \"contracts/DiamodSafe.sol\":20647:20684  accountOf_[_sender].transferredShares */\n      0x05\n      swap1\n      swap2\n      add\n        /* \"contracts/DiamodSafe.sol\":20647:20695  accountOf_[_sender].transferredShares += _amount */\n      dup1\n      sload\n      dup11\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe.sol\":20705:20727  accountOf_[_recipient] */\n      swap5\n      dup10\n      and\n      dup1\n      dup5\n      mstore\n      swap3\n      dup2\n      swap1\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":20705:20742  accountOf_[_recipient].receivedShares */\n      0x06\n      dup2\n      add\n        /* \"contracts/DiamodSafe.sol\":20705:20753  accountOf_[_recipient].receivedShares += _amount */\n      dup1\n      sload\n      dup11\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe.sol\":20763:20801  accountOf_[_recipient].xReceivedShares */\n      0x0d\n      add\n        /* \"contracts/DiamodSafe.sol\":20763:20806  accountOf_[_recipient].xReceivedShares += 1 */\n      dup1\n      sload\n      dup7\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe.sol\":20858:20866  totalTxs */\n      0x08\n        /* \"contracts/DiamodSafe.sol\":20858:20871  totalTxs += 1 */\n      dup1\n      sload\n      swap1\n      swap6\n      add\n      swap1\n      swap5\n      sstore\n        /* \"contracts/DiamodSafe.sol\":20937:20994  onTransfer(_sender, _recipient, _amount, block.timestamp) */\n      dup4\n      mload\n      dup8\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":20978:20993  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe.sol\":20937:20994  onTransfer(_sender, _recipient, _amount, block.timestamp) */\n      swap2\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      dup4\n      mload\n        /* \"contracts/DiamodSafe.sol\":20705:20727  accountOf_[_recipient] */\n      swap2\n      swap4\n        /* \"contracts/DiamodSafe.sol\":20937:20994  onTransfer(_sender, _recipient, _amount, block.timestamp) */\n      0x91c7d71a3ae3fb7cf61e00517bf4868e9e23d0bace5e304cbc3b68de5d85350e\n      swap3\n      swap2\n      dup3\n      swap1\n      sub\n      add\n      swap1\n      log3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":21058:21245  onUpdate(... */\n      dup2\n      and\n        /* \"contracts/DiamodSafe.sol\":21101:21120  accountOf_[_sender] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":21101:21111  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe.sol\":21101:21120  accountOf_[_sender] */\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":21101:21130  accountOf_[_sender].deposited */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe.sol\":21144:21154  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe.sol\":21144:21163  balanceOf_[_sender] */\n      dup5\n      mstore\n      swap5\n      dup3\n      swap1\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe.sol\":21177:21196  accountOf_[_sender] */\n      swap4\n      dup4\n      mstore\n        /* \"contracts/DiamodSafe.sol\":21177:21206  accountOf_[_sender].withdrawn */\n      0x01\n      add\n      sload\n        /* \"contracts/DiamodSafe.sol\":21058:21245  onUpdate(... */\n      dup2\n      mload\n      swap5\n      dup6\n      mstore\n      swap2\n      dup5\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      dup3\n      dup3\n      add\n      mstore\n        /* \"contracts/DiamodSafe.sol\":21220:21235  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe.sol\":21058:21245  onUpdate(... */\n      0x60\n      dup4\n      add\n      mstore\n      mload\n      0x00\n      dup1\n      mload\n      0x20\n      data_27cc9c295b15a532bb1b5f9308f1d54813e694c2ebdd1c2ced210bfe52dcd57e\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      swap2\n      dup2\n      swap1\n      sub\n      0x80\n      add\n      swap1\n      log2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":21312:21511  onUpdate(... */\n      dup5\n      and\n        /* \"contracts/DiamodSafe.sol\":21358:21380  accountOf_[_recipient] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":21358:21368  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe.sol\":21358:21380  accountOf_[_recipient] */\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":21358:21390  accountOf_[_recipient].deposited */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe.sol\":21404:21414  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe.sol\":21404:21426  balanceOf_[_recipient] */\n      dup5\n      mstore\n      swap5\n      dup3\n      swap1\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe.sol\":21440:21462  accountOf_[_recipient] */\n      swap4\n      dup4\n      mstore\n        /* \"contracts/DiamodSafe.sol\":21440:21472  accountOf_[_recipient].withdrawn */\n      0x01\n      add\n      sload\n        /* \"contracts/DiamodSafe.sol\":21312:21511  onUpdate(... */\n      dup2\n      mload\n      swap5\n      dup6\n      mstore\n      swap2\n      dup5\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      dup3\n      dup3\n      add\n      mstore\n        /* \"contracts/DiamodSafe.sol\":21486:21501  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe.sol\":21312:21511  onUpdate(... */\n      0x60\n      dup4\n      add\n      mstore\n      mload\n      0x00\n      dup1\n      mload\n      0x20\n      data_27cc9c295b15a532bb1b5f9308f1d54813e694c2ebdd1c2ced210bfe52dcd57e\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      swap2\n      dup2\n      swap1\n      sub\n      0x80\n      add\n      swap1\n      log2\n      pop\n        /* \"contracts/DiamodSafe.sol\":21529:21533  true */\n      0x01\n      swap4\n        /* \"contracts/DiamodSafe.sol\":19571:21540  function _transferTokens(... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":18346:19524  function _compoundTokens() internal returns (uint256) {... */\n    tag_332:\n        /* \"contracts/DiamodSafe.sol\":18391:18398  uint256 */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":18426:18436  msg.sender */\n      caller\n        /* \"contracts/DiamodSafe.sol\":18391:18398  uint256 */\n      dup2\n        /* \"contracts/DiamodSafe.sol\":18533:18551  dividendsOf(_user) */\n      tag_422\n        /* \"contracts/DiamodSafe.sol\":18426:18436  msg.sender */\n      dup3\n        /* \"contracts/DiamodSafe.sol\":18533:18544  dividendsOf */\n      tag_60\n        /* \"contracts/DiamodSafe.sol\":18533:18551  dividendsOf(_user) */\n      jump\t// in\n    tag_422:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":18561:18578  payoutsOf_[_user] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":18561:18571  payoutsOf_ */\n      0x13\n        /* \"contracts/DiamodSafe.sol\":18561:18578  payoutsOf_[_user] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":18561:18614  payoutsOf_[_user] += (int256)(_dividends * magnitude) */\n      dup1\n      sload\n      shl(0x40, 0x01)\n        /* \"contracts/DiamodSafe.sol\":18591:18613  _dividends * magnitude */\n      dup5\n      mul\n        /* \"contracts/DiamodSafe.sol\":18561:18614  payoutsOf_[_user] += (int256)(_dividends * magnitude) */\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe.sol\":18512:18551  uint256 _dividends = dividendsOf(_user) */\n      swap1\n      swap2\n      pop\n        /* \"contracts/DiamodSafe.sol\":18787:18825  _depositTokens(msg.sender, _dividends) */\n      tag_423\n        /* \"contracts/DiamodSafe.sol\":18802:18812  msg.sender */\n      caller\n        /* \"contracts/DiamodSafe.sol\":18512:18551  uint256 _dividends = dividendsOf(_user) */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":18787:18801  _depositTokens */\n      tag_371\n        /* \"contracts/DiamodSafe.sol\":18787:18825  _depositTokens(msg.sender, _dividends) */\n      jump\t// in\n    tag_423:\n        /* \"contracts/DiamodSafe.sol\":18872:18927  onCompound(_user, _dividends, _tokens, block.timestamp) */\n      0x40\n      dup1\n      mload\n      dup5\n      dup2\n      mstore\n      0x20\n      dup2\n      add\n      dup4\n      swap1\n      mstore\n        /* \"contracts/DiamodSafe.sol\":18911:18926  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe.sol\":18872:18927  onCompound(_user, _dividends, _tokens, block.timestamp) */\n      dup2\n      dup4\n      add\n      mstore\n      swap1\n      mload\n        /* \"contracts/DiamodSafe.sol\":18769:18825  uint256 _tokens = _depositTokens(msg.sender, _dividends) */\n      swap2\n      swap3\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":18872:18927  onCompound(_user, _dividends, _tokens, block.timestamp) */\n      dup6\n      and\n      swap2\n      0x193a876ac91d11a4a0a71ebef73b195ba55aa7c16d6755c93c21d973e692a02c\n      swap2\n      dup2\n      swap1\n      sub\n      0x60\n      add\n      swap1\n      log2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":19031:19048  accountOf_[_user] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":19031:19041  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe.sol\":19031:19048  accountOf_[_user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":19031:19059  accountOf_[_user].compounded */\n      0x02\n      add\n      sload\n        /* \"contracts/DiamodSafe.sol\":19005:19093  SafeMath.add(... */\n      tag_424\n      swap1\n        /* \"contracts/DiamodSafe.sol\":19073:19083  _dividends */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":19005:19017  SafeMath.add */\n      tag_262\n        /* \"contracts/DiamodSafe.sol\":19005:19093  SafeMath.add(... */\n      jump\t// in\n    tag_424:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":18974:18991  accountOf_[_user] */\n      dup5\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":18974:18984  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe.sol\":18974:18991  accountOf_[_user] */\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":18974:19002  accountOf_[_user].compounded */\n      0x02\n      dup2\n      add\n        /* \"contracts/DiamodSafe.sol\":18974:19093  accountOf_[_user].compounded = SafeMath.add(... */\n      swap7\n      swap1\n      swap7\n      sstore\n        /* \"contracts/DiamodSafe.sol\":19103:19132  accountOf_[_user].xCompounded */\n      0x08\n      dup7\n      add\n        /* \"contracts/DiamodSafe.sol\":19103:19137  accountOf_[_user].xCompounded += 1 */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe.sol\":19136:19137  1 */\n      0x01\n        /* \"contracts/DiamodSafe.sol\":19103:19137  accountOf_[_user].xCompounded += 1 */\n      swap1\n      dup2\n      add\n      swap1\n      swap2\n      sstore\n        /* \"contracts/DiamodSafe.sol\":19231:19258  accountOf_[_user].deposited */\n      dup7\n      sload\n        /* \"contracts/DiamodSafe.sol\":19272:19282  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe.sol\":19272:19289  balanceOf_[_user] */\n      dup5\n      mstore\n      swap5\n      dup3\n      swap1\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe.sol\":19303:19320  accountOf_[_user] */\n      swap4\n      dup4\n      mstore\n        /* \"contracts/DiamodSafe.sol\":19303:19330  accountOf_[_user].withdrawn */\n      swap1\n      swap6\n      add\n      sload\n        /* \"contracts/DiamodSafe.sol\":19190:19369  onUpdate(... */\n      dup6\n      mload\n      swap4\n      dup5\n      mstore\n      swap1\n      dup4\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      dup2\n      dup5\n      add\n      mstore\n        /* \"contracts/DiamodSafe.sol\":19344:19359  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe.sol\":19190:19369  onUpdate(... */\n      0x60\n      dup3\n      add\n      mstore\n      swap2\n      mload\n        /* \"contracts/DiamodSafe.sol\":18974:18991  accountOf_[_user] */\n      swap1\n      swap2\n      0x00\n      dup1\n      mload\n      0x20\n      data_27cc9c295b15a532bb1b5f9308f1d54813e694c2ebdd1c2ced210bfe52dcd57e\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":19190:19369  onUpdate(... */\n      swap2\n      swap1\n      dup2\n      swap1\n      sub\n      0x80\n      add\n      swap1\n      log2\n        /* \"contracts/DiamodSafe.sol\":19448:19460  distribute() */\n      tag_425\n        /* \"contracts/DiamodSafe.sol\":19448:19458  distribute */\n      tag_240\n        /* \"contracts/DiamodSafe.sol\":19448:19460  distribute() */\n      jump\t// in\n    tag_425:\n        /* \"contracts/DiamodSafe.sol\":19510:19517  _tokens */\n      swap3\n      pop\n      pop\n      pop\n        /* \"contracts/DiamodSafe.sol\":18346:19524  function _compoundTokens() internal returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/DiamodSafe.sol\":16730:18306  function _depositTokens(... */\n    tag_371:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":16942:16964  accountOf_[_recipient] */\n      dup3\n      and\n        /* \"contracts/DiamodSafe.sol\":16831:16838  uint256 */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":16942:16964  accountOf_[_recipient] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":16942:16952  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe.sol\":16942:16964  accountOf_[_recipient] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":16942:16974  accountOf_[_recipient].deposited */\n      sload\n        /* \"contracts/DiamodSafe.sol\":16942:16979  accountOf_[_recipient].deposited == 0 */\n      iszero\n        /* \"contracts/DiamodSafe.sol\":16942:17037  accountOf_[_recipient].deposited == 0 &&... */\n      dup1\n      iszero\n      tag_427\n      jumpi\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":16995:17017  accountOf_[_recipient] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":16995:17005  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe.sol\":16995:17017  accountOf_[_recipient] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":16995:17032  accountOf_[_recipient].receivedShares */\n      0x06\n      add\n      sload\n        /* \"contracts/DiamodSafe.sol\":16995:17037  accountOf_[_recipient].receivedShares == 0 */\n      iszero\n        /* \"contracts/DiamodSafe.sol\":16942:17037  accountOf_[_recipient].deposited == 0 &&... */\n    tag_427:\n        /* \"contracts/DiamodSafe.sol\":16925:17083  if (... */\n      iszero\n      tag_428\n      jumpi\n        /* \"contracts/DiamodSafe.sol\":17062:17067  users */\n      0x07\n        /* \"contracts/DiamodSafe.sol\":17062:17072  users += 1 */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe.sol\":17071:17072  1 */\n      0x01\n        /* \"contracts/DiamodSafe.sol\":17062:17072  users += 1 */\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe.sol\":16925:17083  if (... */\n    tag_428:\n        /* \"contracts/DiamodSafe.sol\":17121:17129  totalTxs */\n      0x08\n        /* \"contracts/DiamodSafe.sol\":17121:17134  totalTxs += 1 */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe.sol\":17133:17134  1 */\n      0x01\n        /* \"contracts/DiamodSafe.sol\":17121:17134  totalTxs += 1 */\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe.sol\":17121:17129  totalTxs */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":17213:17216  100 */\n      0x64\n        /* \"contracts/DiamodSafe.sol\":17180:17210  SafeMath.mul(_amount, divsFee) */\n      tag_429\n        /* \"contracts/DiamodSafe.sol\":17193:17200  _amount */\n      dup5\n        /* \"contracts/DiamodSafe.sol\":17121:17129  totalTxs */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":17180:17192  SafeMath.mul */\n      tag_222\n        /* \"contracts/DiamodSafe.sol\":17180:17210  SafeMath.mul(_amount, divsFee) */\n      jump\t// in\n    tag_429:\n        /* \"contracts/DiamodSafe.sol\":17180:17216  SafeMath.mul(_amount, divsFee) / 100 */\n      dup2\n      tag_430\n      jumpi\n      invalid\n    tag_430:\n      div\n        /* \"contracts/DiamodSafe.sol\":17150:17216  uint256 _undividedDividends = SafeMath.mul(_amount, divsFee) / 100 */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe.sol\":17228:17245  uint256   _tokens */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":17248:17290  SafeMath.sub(_amount, _undividedDividends) */\n      tag_431\n        /* \"contracts/DiamodSafe.sol\":17261:17268  _amount */\n      dup5\n        /* \"contracts/DiamodSafe.sol\":17270:17289  _undividedDividends */\n      dup4\n        /* \"contracts/DiamodSafe.sol\":17248:17260  SafeMath.sub */\n      tag_225\n        /* \"contracts/DiamodSafe.sol\":17248:17290  SafeMath.sub(_amount, _undividedDividends) */\n      jump\t// in\n    tag_431:\n        /* \"contracts/DiamodSafe.sol\":17345:17401  onDeposit(_recipient, _amount, _tokens, block.timestamp) */\n      0x40\n      dup1\n      mload\n      dup7\n      dup2\n      mstore\n      0x20\n      dup2\n      add\n      dup4\n      swap1\n      mstore\n        /* \"contracts/DiamodSafe.sol\":17385:17400  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe.sol\":17345:17401  onDeposit(_recipient, _amount, _tokens, block.timestamp) */\n      dup2\n      dup4\n      add\n      mstore\n      swap1\n      mload\n        /* \"contracts/DiamodSafe.sol\":17228:17290  uint256   _tokens = SafeMath.sub(_amount, _undividedDividends) */\n      swap2\n      swap3\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":17345:17401  onDeposit(_recipient, _amount, _tokens, block.timestamp) */\n      dup8\n      and\n      swap2\n      0xb49bb132260f6aa1c86e2d2a3957c097216e6ec9b5fa15867289f058b4d297ac\n      swap2\n      dup2\n      swap1\n      sub\n      0x60\n      add\n      swap1\n      log2\n        /* \"contracts/DiamodSafe.sol\":17510:17511  0 */\n      0x00\n        /* \"contracts/DiamodSafe.sol\":17500:17507  _tokens */\n      dup2\n        /* \"contracts/DiamodSafe.sol\":17500:17511  _tokens > 0 */\n      gt\n        /* \"contracts/DiamodSafe.sol\":17500:17593  _tokens > 0 &&... */\n      dup1\n      iszero\n      tag_432\n      jumpi\n      pop\n        /* \"contracts/DiamodSafe.sol\":17575:17593  currentTotalStaked */\n      sload(0x11)\n        /* \"contracts/DiamodSafe.sol\":17531:17572  SafeMath.add(_tokens, currentTotalStaked) */\n      tag_433\n        /* \"contracts/DiamodSafe.sol\":17544:17551  _tokens */\n      dup3\n        /* \"contracts/DiamodSafe.sol\":17575:17593  currentTotalStaked */\n      dup3\n        /* \"contracts/DiamodSafe.sol\":17531:17543  SafeMath.add */\n      tag_262\n        /* \"contracts/DiamodSafe.sol\":17531:17572  SafeMath.add(_tokens, currentTotalStaked) */\n      jump\t// in\n    tag_433:\n        /* \"contracts/DiamodSafe.sol\":17531:17593  SafeMath.add(_tokens, currentTotalStaked) > currentTotalStaked */\n      gt\n        /* \"contracts/DiamodSafe.sol\":17500:17593  _tokens > 0 &&... */\n    tag_432:\n        /* \"contracts/DiamodSafe.sol\":17479:17603  require(... */\n      tag_434\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_434:\n        /* \"contracts/DiamodSafe.sol\":17617:17635  currentTotalStaked */\n      sload(0x11)\n        /* \"contracts/DiamodSafe.sol\":17617:17639  currentTotalStaked > 0 */\n      iszero\n        /* \"contracts/DiamodSafe.sol\":17613:17754  if (currentTotalStaked > 0) {... */\n      tag_435\n      jumpi\n        /* \"contracts/DiamodSafe.sol\":17655:17673  currentTotalStaked */\n      0x11\n        /* \"contracts/DiamodSafe.sol\":17655:17684  currentTotalStaked += _tokens */\n      dup1\n      sload\n      dup3\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe.sol\":17613:17754  if (currentTotalStaked > 0) {... */\n      jump(tag_436)\n    tag_435:\n        /* \"contracts/DiamodSafe.sol\":17715:17733  currentTotalStaked */\n      0x11\n        /* \"contracts/DiamodSafe.sol\":17715:17743  currentTotalStaked = _tokens */\n      dup2\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe.sol\":17613:17754  if (currentTotalStaked > 0) {... */\n    tag_436:\n        /* \"contracts/DiamodSafe.sol\":17819:17852  allocateFees(_undividedDividends) */\n      tag_437\n        /* \"contracts/DiamodSafe.sol\":17832:17851  _undividedDividends */\n      dup3\n        /* \"contracts/DiamodSafe.sol\":17819:17831  allocateFees */\n      tag_238\n        /* \"contracts/DiamodSafe.sol\":17819:17852  allocateFees(_undividedDividends) */\n      jump\t// in\n    tag_437:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":17900:17922  balanceOf_[_recipient] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":17900:17910  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe.sol\":17900:17922  balanceOf_[_recipient] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe.sol\":17887:17932  SafeMath.add(balanceOf_[_recipient], _tokens) */\n      tag_438\n      swap1\n        /* \"contracts/DiamodSafe.sol\":17924:17931  _tokens */\n      dup3\n        /* \"contracts/DiamodSafe.sol\":17887:17899  SafeMath.add */\n      tag_262\n        /* \"contracts/DiamodSafe.sol\":17887:17932  SafeMath.add(balanceOf_[_recipient], _tokens) */\n      jump\t// in\n    tag_438:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe.sol\":17862:17884  balanceOf_[_recipient] */\n      dup7\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe.sol\":17862:17872  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe.sol\":17862:17884  balanceOf_[_recipient] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":17862:17932  balanceOf_[_recipient] = SafeMath.add(balanceOf_[_recipient], _tokens) */\n      swap4\n      swap1\n      swap4\n      sstore\n        /* \"contracts/DiamodSafe.sol\":18007:18022  profitPerShare_ */\n      sload(0x12)\n        /* \"contracts/DiamodSafe.sol\":18071:18081  payoutsOf_ */\n      0x13\n        /* \"contracts/DiamodSafe.sol\":18071:18093  payoutsOf_[_recipient] */\n      dup3\n      mstore\n      dup4\n      dup4\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":18071:18112  payoutsOf_[_recipient] += _updatedPayouts */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe.sol\":18007:18032  profitPerShare_ * _tokens */\n      swap2\n      dup7\n      mul\n        /* \"contracts/DiamodSafe.sol\":18071:18112  payoutsOf_[_recipient] += _updatedPayouts */\n      swap2\n      swap1\n      swap2\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe.sol\":18122:18132  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe.sol\":18122:18144  accountOf_[_recipient] */\n      swap1\n      mstore\n      keccak256\n        /* \"contracts/DiamodSafe.sol\":18122:18165  accountOf_[_recipient].deposited += _amount */\n      dup1\n      sload\n      dup6\n      add\n      dup2\n      sstore\n        /* \"contracts/DiamodSafe.sol\":18175:18207  accountOf_[_recipient].xInvested */\n      0x07\n      add\n        /* \"contracts/DiamodSafe.sol\":18175:18212  accountOf_[_recipient].xInvested += 1 */\n      dup1\n      sload\n      0x01\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe.sol\":18025:18032  _tokens */\n      swap2\n      pop\n      pop\n        /* \"contracts/DiamodSafe.sol\":16730:18306  function _depositTokens(... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/SafeMath.sol\":7288:7453  function safeSub(uint a, uint b) internal pure returns (uint) {... */\n    tag_396:\n        /* \"contracts/SafeMath.sol\":7344:7348  uint */\n      0x00\n        /* \"contracts/SafeMath.sol\":7368:7369  a */\n      dup3\n        /* \"contracts/SafeMath.sol\":7364:7365  b */\n      dup3\n        /* \"contracts/SafeMath.sol\":7364:7369  b > a */\n      gt\n        /* \"contracts/SafeMath.sol\":7360:7447  if (b > a) {... */\n      iszero\n      tag_440\n      jumpi\n      pop\n        /* \"contracts/SafeMath.sol\":7392:7393  0 */\n      0x00\n        /* \"contracts/SafeMath.sol\":7385:7393  return 0 */\n      jump(tag_279)\n        /* \"contracts/SafeMath.sol\":7360:7447  if (b > a) {... */\n    tag_440:\n      pop\n        /* \"contracts/SafeMath.sol\":7431:7436  a - b */\n      dup1\n      dup3\n      sub\n        /* \"contracts/SafeMath.sol\":7424:7436  return a - b */\n      jump(tag_279)\n    tag_283:\n      mload(0x40)\n      dup1\n      0x01c0\n      add\n      0x40\n      mstore\n      dup1\n      0x0e\n      swap1\n      0x20\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      pop\n      swap2\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n    tag_286:\n      mload(0x40)\n      dup1\n      0x01c0\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      pop\n      swap1\n      jump\t// out\n    tag_350:\n      dup3\n      dup1\n      sload\n      dup3\n      dup3\n      sstore\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      dup2\n      add\n      swap3\n      dup3\n      iszero\n      tag_444\n      jumpi\n      swap2\n      0x20\n      mul\n      dup3\n      add\n    tag_443:\n      dup3\n      dup2\n      gt\n      iszero\n      tag_444\n      jumpi\n      dup3\n      mload\n      dup3\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      or\n      dup3\n      sstore\n      0x20\n      swap1\n      swap3\n      add\n      swap2\n      0x01\n      swap1\n      swap2\n      add\n      swap1\n      jump(tag_443)\n    tag_444:\n      pop\n      tag_445\n      swap3\n      swap2\n      pop\n      tag_446\n      jump\t// in\n    tag_445:\n      pop\n      swap1\n      jump\t// out\n    tag_446:\n    tag_447:\n      dup1\n      dup3\n      gt\n      iszero\n      tag_445\n      jumpi\n      0x00\n      dup2\n      sstore\n      0x01\n      add\n      jump(tag_447)\n    stop\n    data_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe 4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373\n    data_27cc9c295b15a532bb1b5f9308f1d54813e694c2ebdd1c2ced210bfe52dcd57e 29f64f6f46c82c5ecfa955fe7d093e63b4106b6dbe5193e00efd62c7384ef177\n    data_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae 416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564\n    data_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3 536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77\n    data_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe 4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n\n    auxdata: 0xa2646970667358221220c4af3c69537b0d4a49627aa93c92a3f3747d74b27d835adbe424730631ee0a9764736f6c63430007040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b506040516200256e3803806200256e833981810160405260408110156200003757600080fd5b50805160209091015160006200004c6200016b565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180556001600160a01b03821615801590620000c45750620000c4826200016f60201b620019a51760201c565b62000108576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4144445245535360881b604482015290519081900360640190fd5b600480546001600160a01b039093166001600160a01b031993841681179091556002805484169091178155600580549093163317909255600d805460ff90921660ff1990921691909117905542600955600e556001600f81905560035562000175565b3390565b3b151590565b6123e980620001856000396000f3fe60806040526004361061025f5760003560e01c80638da5cb5b11610144578063d7c3771d116100b6578063f2fde38b1161007a578063f2fde38b14610794578063f69e2046146107c7578063f6db0da0146107dc578063fbaf1bbd1461088c578063ffaad6a5146108bf578063ffe6bbd8146108f8576102b5565b8063d7c3771d146106e3578063e02e1e9c146106f8578063eedc966a14610722578063f14faf6f14610755578063f20202751461077f576102b5565b8063ad7a672f11610108578063ad7a672f14610625578063aecb6d281461063a578063b03cf5a71461064f578063b6b55f2514610679578063b9db102a146106a3578063d3261592146106b8576102b5565b80638da5cb5b14610598578063949e8acd146105ad5780639d76ea58146105c2578063a01496de146105d7578063a9059cbb146105ec576102b5565b80634b750334116101dd5780637d882097116101a15780637d882097146104bd5780637e6335c7146104d25780638086b8ba1461050257806381fce6451461056e5780638620410b1461058357806389375abf1461056e576102b5565b80634b7503341461041a578063537a39bb1461042f57806370a0823114610444578063715018a61461047757806372f702f31461048c576102b5565b80631f38b9cd116102245780631f38b9cd146103685780632e1a7d4d1461037d57806336599ead146103a957806341c61383146103f05780634641257d14610405576102b5565b806265318b146102ba57806308560ace146102ff57806310d0ffdd1461031457806318160ddd1461033e5780631924063e14610353576102b5565b366102b55760055461027a906001600160a01b03163461090d565b60408051348152426020820152815133927f3c2bd1b3f5ca07afb09fbee41ac43da2b98d9c2e9832673052e546bd1d4c091d928290030190a2005b600080fd5b3480156102c657600080fd5b506102ed600480360360208110156102dd57600080fd5b50356001600160a01b03166109f7565b60408051918252519081900360200190f35b34801561030b57600080fd5b506102ed610a30565b34801561032057600080fd5b506102ed6004803603602081101561033757600080fd5b5035610a36565b34801561034a57600080fd5b506102ed610a75565b34801561035f57600080fd5b506102ed610a7b565b34801561037457600080fd5b506102ed610a81565b34801561038957600080fd5b506103a7600480360360208110156103a057600080fd5b5035610a87565b005b3480156103b557600080fd5b506103dc600480360360208110156103cc57600080fd5b50356001600160a01b0316610c0f565b604080519115158252519081900360200190f35b3480156103fc57600080fd5b506102ed610cda565b34801561041157600080fd5b506103a7610ce0565b34801561042657600080fd5b506102ed610e4d565b34801561043b57600080fd5b506102ed610e7c565b34801561045057600080fd5b506102ed6004803603602081101561046757600080fd5b50356001600160a01b0316610e82565b34801561048357600080fd5b506103a7610e9d565b34801561049857600080fd5b506104a1610f49565b604080516001600160a01b039092168252519081900360200190f35b3480156104c957600080fd5b506102ed610f58565b3480156104de57600080fd5b506103dc600480360360408110156104f557600080fd5b5080359060200135610f5e565b34801561050e57600080fd5b506105356004803603602081101561052557600080fd5b50356001600160a01b0316611073565b60405180826101c080838360005b8381101561055b578181015183820152602001610543565b5050505090500191505060405180910390f35b34801561057a57600080fd5b506102ed6111ea565b34801561058f57600080fd5b506102ed6111ef565b3480156105a457600080fd5b506104a1611216565b3480156105b957600080fd5b506102ed611225565b3480156105ce57600080fd5b506104a1611235565b3480156105e357600080fd5b506102ed611244565b3480156105f857600080fd5b506103dc6004803603604081101561060f57600080fd5b506001600160a01b03813516906020013561124a565b34801561063157600080fd5b506102ed611270565b34801561064657600080fd5b506102ed6112ec565b34801561065b57600080fd5b506104a16004803603602081101561067257600080fd5b50356112f2565b34801561068557600080fd5b506102ed6004803603602081101561069c57600080fd5b503561131c565b3480156106af57600080fd5b506102ed611328565b3480156106c457600080fd5b506106cd61132e565b6040805160ff9092168252519081900360200190f35b3480156106ef57600080fd5b506104a1611337565b34801561070457600080fd5b506102ed6004803603602081101561071b57600080fd5b5035611346565b34801561072e57600080fd5b506102ed6004803603602081101561074557600080fd5b50356001600160a01b031661136c565b34801561076157600080fd5b506102ed6004803603602081101561077857600080fd5b5035611379565b34801561078b57600080fd5b506102ed611478565b3480156107a057600080fd5b506103a7600480360360208110156107b757600080fd5b50356001600160a01b031661147e565b3480156107d357600080fd5b506103a7611580565b3480156107e857600080fd5b506103dc600480360360208110156107ff57600080fd5b81019060208101813564010000000081111561081a57600080fd5b82018360208201111561082c57600080fd5b8035906020019184602083028401116401000000008311171561084e57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061159f945050505050565b34801561089857600080fd5b506102ed600480360360208110156108af57600080fd5b50356001600160a01b031661182c565b3480156108cb57600080fd5b506102ed600480360360408110156108e257600080fd5b506001600160a01b03813516906020013561188f565b34801561090457600080fd5b506102ed61199a565b80471015610962576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d80600081146109ad576040519150601f19603f3d011682016040523d82523d6000602084013e6109b2565b606091505b50509050806109f25760405162461bcd60e51b815260040180806020018281038252603a815260200180612339603a913960400191505060405180910390fd5b505050565b6001600160a01b0381166000908152601360209081526040808320546014909252822054601254600160401b929102030490505b919050565b60035481565b6000601154821115610a4757600080fd5b816000610a5e610a5783836119ab565b6064611a04565b90506000610a6c8383611a6b565b95945050505050565b60115490565b60105481565b600f5481565b6000610a91611225565b11610a9b57600080fd5b33600081815260146020526040902054821115610ab757600080fd5b60006064610ac584836119ab565b81610acc57fe5b049050600090506000610adf8483611a6b565b9050610aed60115485611a6b565b6011556001600160a01b038316600090815260146020526040902054610b139085611a6b565b6001600160a01b03841660009081526014602090815260408083209390935560125460139091529190208054918602600160401b840201918290039055610b5983611ac8565b6040805186815260208101849052428183015290516001600160a01b038616917f90ebb005d68efee044927e1e77e1fd0cecc508368aa72c39250a787eed5f0a70919081900360600190a26001600160a01b038416600081815260156020818152604080842080546014845294829020549383526001015481519485529184019290925282820152426060830152516000805160206123198339815191529181900360800190a2610c08611b56565b5050505050565b60008080805b600654811015610cbb5760068181548110610c2c57fe5b60009182526020918290200154604080516370a0823160e01b81526001600160a01b038981166004830152915191909216945084926370a082319260248082019391829003018186803b158015610c8257600080fd5b505afa158015610c96573d6000803e3d6000fd5b505050506040513d6020811015610cac57600080fd5b50519290920191600101610c15565b506003548210610cd057600192505050610a2b565b5060009392505050565b600a5481565b6000610cea61199a565b11610cf457600080fd5b336000610cff61199a565b6001600160a01b0380841660008181526013602090815260408083208054600160401b8802019055600254815163a9059cbb60e01b815260048101959095526024850187905290519596509093169363a9059cbb936044808501949193918390030190829087803b158015610d7357600080fd5b505af1158015610d87573d6000803e3d6000fd5b505050506040513d6020811015610d9d57600080fd5b50506001600160a01b038216600090815260156020526040902060010154610dc59082611c4c565b6001600160a01b038316600081815260156020908152604091829020600180820195909555600b0180548501905560088054909401909355600a80548501905580518481524293810193909352805191927f1b091269e929df55d64d6ea7e9cadbe4fb38dce5ccdc995767bc515030dbfbbf929081900390910190a2610e49611b56565b5050565b6000670de0b6b3a764000081610e66610a5783836119ab565b90506000610e748383611a6b565b935050505090565b60085481565b6001600160a01b031660009081526014602052604090205490565b610ea5611ca6565b6001600160a01b0316610eb6611216565b6001600160a01b031614610eff576040805162461bcd60e51b81526020600482018190526024820152600080516020612394833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6002546001600160a01b031681565b600b5481565b6000610f68611ca6565b6001600160a01b0316610f79611216565b6001600160a01b031614610fc2576040805162461bcd60e51b81526020600482018190526024820152600080516020612394833981519152604482015290519081900360640190fd5b610fcc8383611c4c565b600314611020576040805162461bcd60e51b815260206004820152601d60248201527f54454e5f504f5254494f4e535f524551554952455f4449564953494f4e000000604482015290519081900360640190fd5b600e839055600f8290556040805184815260208101849052428183015290517f677017fa3a0fe0f50a95e6024c5b688f2b14a4696c4a897c459715cabfc1c03a9181900360600190a15060015b92915050565b61107b6121ea565b611083612209565b506001600160a01b03821660009081526015602090815260409182902082516101c081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e082015260088201546101008201526009820154610120820152600a820154610140820152600b820154610160820152600c820154610180820152600d909101546101a08201526111426121ea565b604051806101c0016040528083600001518152602001836020015181526020018360600151815260200183604001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e0015181526020018361012001518152602001836101400151815260200183610160015181526020018361018001518152602001836101a00151815260200183610100015181525090508092505050919050565b600281565b6000670de0b6b3a764000081611208610a5783836119ab565b90506000610e748383611c4c565b6000546001600160a01b031690565b600061123033610e82565b905090565b6004546001600160a01b031681565b600e5481565b600080611255611225565b1161125f57600080fd5b6112698383611caa565b9392505050565b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156112bb57600080fd5b505afa1580156112cf573d6000803e3d6000fd5b505050506040513d60208110156112e557600080fd5b5051905090565b600c5481565b6006818154811061130257600080fd5b6000918252602090912001546001600160a01b0316905081565b600061106d338361188f565b60095481565b600d5460ff1681565b6005546001600160a01b031681565b600080611356610a5784836119ab565b905060006113648483611a6b565b949350505050565b6001600160a01b03163190565b600254604080516323b872dd60e01b81523360048201523060248201526044810184905290516000926001600160a01b0316916323b872dd91606480830192602092919082900301818787803b1580156113d257600080fd5b505af11580156113e6573d6000803e3d6000fd5b505050506040513d60208110156113fc57600080fd5b505161140757600080fd5b600c80548301905533600081815260156020908152604091829020600a8101805460010190556004018054860190558151858152429181019190915281517f0da1788c3e861a58a47f0d46073b13c4d66efcc259714744f920d1afe7b8dee5929181900390910190a25050600c5490565b60075481565b611486611ca6565b6001600160a01b0316611497611216565b6001600160a01b0316146114e0576040805162461bcd60e51b81526020600482018190526024820152600080516020612394833981519152604482015290519081900360640190fd5b6001600160a01b0381166115255760405162461bcd60e51b81526004018080602001828103825260268152602001806122f36026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600061158a61199a565b1161159457600080fd5b61159c611f15565b50565b60006115a9611ca6565b6001600160a01b03166115ba611216565b6001600160a01b031614611603576040805162461bcd60e51b81526020600482018190526024820152600080516020612394833981519152604482015290519081900360640190fd5b60005b6006548110156116e05782818151811061161c57fe5b60200260200101516001600160a01b03166301ffc9a76380ac58cd6040518263ffffffff1660e01b8152600401808260e01b815260200191505060206040518083038186803b15801561166e57600080fd5b505afa158015611682573d6000803e3d6000fd5b505050506040513d602081101561169857600080fd5b50516116d8576040805162461bcd60e51b815260206004820152600a6024820152694e4f545f45524337323160b01b604482015290519081900360640190fd5b600101611606565b506060600680548060200260200160405190810160405280929190818152602001828054801561173957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161171b575b5050865193945061175593600693506020880192509050612278565b50336001600160a01b03167ff0650831416f723858005cfeae97a2d6f5e127d1e6ae8938574d1d73e7f4727c828542604051808060200180602001848152602001838103835286818151815260200191508051906020019060200280838360005b838110156117ce5781810151838201526020016117b6565b50505050905001838103825285818151815260200191508051906020019060200280838360005b8381101561180d5781810151838201526020016117f5565b505050509050019550505050505060405180910390a250600192915050565b600d54600c5460009182916118509160019161184a9160ff166119ab565b90611a04565b9050600060115411611863576000611269565b6011546001600160a01b038416600090815260146020526040902054611269919061184a9084906119ab565b600254604080516323b872dd60e01b81523360048201523060248201526044810184905290516000926001600160a01b0316916323b872dd91606480830192602092919082900301818787803b1580156118e857600080fd5b505af11580156118fc573d6000803e3d6000fd5b505050506040513d602081101561191257600080fd5b505161191d57600080fd5b600b8054830190556000611931848461204b565b6001600160a01b0385166000818152601560208181526040808420805460148452948290205493835260010154815194855291840192909252828201524260608301525192935090916000805160206123198339815191529181900360800190a2611269611b56565b6000611230336109f7565b3b151590565b6000826119ba5750600061106d565b828202828482816119c757fe5b04146112695760405162461bcd60e51b81526004018080602001828103825260218152602001806123736021913960400191505060405180910390fd5b6000808211611a5a576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611a6357fe5b049392505050565b600082821115611ac2576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000611ad582600a611a04565b90506000611aee600e54836119ab90919063ffffffff16565b90506000611b07600f54846119ab90919063ffffffff16565b600c54909150611b179083611c4c565b600c5560115415611b4757611b3f601254601154600160401b840281611b3957fe5b04611c4c565b601255611b50565b600c8054820190555b50505050565b6010544290600290611b699083906121cf565b1115611bb5577f2cfce469a63f2e9972b7f23da751e6943ed2b091c10e40b5c43b5f6105bf20ea611b98611270565b60408051918252602082018490528051918290030190a160108190555b6002611bc3826009546121cf565b118015611bd257506000601154115b1561159c57600d54600c54600091611bfb91620151809161184a9160019183919060ff166119ab565b90506000611c14600954846121cf90919063ffffffff16565b600c549083029150611c2690826121cf565b600c55601254601154611c429190600160401b840281611b3957fe5b6012555050600955565b600082820183811015611269576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3390565b33600081815260146020526040812054909190831115611cc957600080fd5b6000611cd361199a565b1115611ce157611ce1610ce0565b6001600160a01b038116600090815260146020526040902054611d049084611a6b565b6001600160a01b038083166000908152601460205260408082209390935590861681522054611d339084611c4c565b6001600160a01b03858116600081815260146020908152604080832095909555601280549487168352601382528583208054958a029095039094559254918152838120805492880290920190915560159091522054158015611dae57506001600160a01b038416600090815260156020526040902060060154155b15611dbd576007805460010190555b6001600160a01b038082166000818152601560209081526040808320600c810180546001908101909155600590910180548a019055948916808452928190206006810180548a019055600d018054860190556008805490950190945583518781524291810191909152835191937f91c7d71a3ae3fb7cf61e00517bf4868e9e23d0bace5e304cbc3b68de5d85350e92918290030190a36001600160a01b038116600081815260156020818152604080842080546014845294829020549383526001015481519485529184019290925282820152426060830152516000805160206123198339815191529181900360800190a26001600160a01b038416600081815260156020818152604080842080546014845294829020549383526001015481519485529184019290925282820152426060830152516000805160206123198339815191529181900360800190a25060019392505050565b60003381611f22826109f7565b6001600160a01b03831660009081526013602052604081208054600160401b8402019055909150611f53338361204b565b6040805184815260208101839052428183015290519192506001600160a01b038516917f193a876ac91d11a4a0a71ebef73b195ba55aa7c16d6755c93c21d973e692a02c9181900360600190a26001600160a01b038316600090815260156020526040902060020154611fc69083611c4c565b6001600160a01b0384166000818152601560208181526040808420600281019690965560088601805460019081019091558654601484529482902054938352909501548551938452908301919091528184015242606082015291519091600080516020612319833981519152919081900360800190a2612044611b56565b9250505090565b6001600160a01b03821660009081526015602052604081205415801561208a57506001600160a01b038316600090815260156020526040902060060154155b15612099576007805460010190555b600880546001019055600060646120b084836119ab565b816120b757fe5b04905060006120c68483611a6b565b6040805186815260208101839052428183015290519192506001600160a01b038716917fb49bb132260f6aa1c86e2d2a3957c097216e6ec9b5fa15867289f058b4d297ac9181900360600190a260008111801561212d575060115461212b8282611c4c565b115b61213657600080fd5b6011541561214b576011805482019055612151565b60118190555b61215a82611ac8565b6001600160a01b03851660009081526014602052604090205461217d9082611c4c565b6001600160a01b03861660009081526014602090815260408083209390935560125460138252838320805491860291909101905560159052208054850181556007018054600101905591505092915050565b6000828211156121e15750600061106d565b5080820361106d565b604051806101c00160405280600e906020820280368337509192915050565b604051806101c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8280548282559060005260206000209081019282156122cd579160200282015b828111156122cd57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612298565b506122d99291506122dd565b5090565b5b808211156122d957600081556001016122de56fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737329f64f6f46c82c5ecfa955fe7d093e63b4106b6dbe5193e00efd62c7384ef177416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220c4af3c69537b0d4a49627aa93c92a3f3747d74b27d835adbe424730631ee0a9764736f6c63430007040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x256E CODESIZE SUB DUP1 PUSH3 0x256E DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x40 DUP2 LT ISZERO PUSH3 0x37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD PUSH1 0x0 PUSH3 0x4C PUSH3 0x16B JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP3 SWAP4 POP SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 POP PUSH1 0x1 DUP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO DUP1 ISZERO SWAP1 PUSH3 0xC4 JUMPI POP PUSH3 0xC4 DUP3 PUSH3 0x16F PUSH1 0x20 SHL PUSH3 0x19A5 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x108 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x494E56414C49445F41444452455353 PUSH1 0x88 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP4 DUP5 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD DUP5 AND SWAP1 SWAP2 OR DUP2 SSTORE PUSH1 0x5 DUP1 SLOAD SWAP1 SWAP4 AND CALLER OR SWAP1 SWAP3 SSTORE PUSH1 0xD DUP1 SLOAD PUSH1 0xFF SWAP1 SWAP3 AND PUSH1 0xFF NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE TIMESTAMP PUSH1 0x9 SSTORE PUSH1 0xE SSTORE PUSH1 0x1 PUSH1 0xF DUP2 SWAP1 SSTORE PUSH1 0x3 SSTORE PUSH3 0x175 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x23E9 DUP1 PUSH3 0x185 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x25F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x144 JUMPI DUP1 PUSH4 0xD7C3771D GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0xF2FDE38B GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x794 JUMPI DUP1 PUSH4 0xF69E2046 EQ PUSH2 0x7C7 JUMPI DUP1 PUSH4 0xF6DB0DA0 EQ PUSH2 0x7DC JUMPI DUP1 PUSH4 0xFBAF1BBD EQ PUSH2 0x88C JUMPI DUP1 PUSH4 0xFFAAD6A5 EQ PUSH2 0x8BF JUMPI DUP1 PUSH4 0xFFE6BBD8 EQ PUSH2 0x8F8 JUMPI PUSH2 0x2B5 JUMP JUMPDEST DUP1 PUSH4 0xD7C3771D EQ PUSH2 0x6E3 JUMPI DUP1 PUSH4 0xE02E1E9C EQ PUSH2 0x6F8 JUMPI DUP1 PUSH4 0xEEDC966A EQ PUSH2 0x722 JUMPI DUP1 PUSH4 0xF14FAF6F EQ PUSH2 0x755 JUMPI DUP1 PUSH4 0xF2020275 EQ PUSH2 0x77F JUMPI PUSH2 0x2B5 JUMP JUMPDEST DUP1 PUSH4 0xAD7A672F GT PUSH2 0x108 JUMPI DUP1 PUSH4 0xAD7A672F EQ PUSH2 0x625 JUMPI DUP1 PUSH4 0xAECB6D28 EQ PUSH2 0x63A JUMPI DUP1 PUSH4 0xB03CF5A7 EQ PUSH2 0x64F JUMPI DUP1 PUSH4 0xB6B55F25 EQ PUSH2 0x679 JUMPI DUP1 PUSH4 0xB9DB102A EQ PUSH2 0x6A3 JUMPI DUP1 PUSH4 0xD3261592 EQ PUSH2 0x6B8 JUMPI PUSH2 0x2B5 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x598 JUMPI DUP1 PUSH4 0x949E8ACD EQ PUSH2 0x5AD JUMPI DUP1 PUSH4 0x9D76EA58 EQ PUSH2 0x5C2 JUMPI DUP1 PUSH4 0xA01496DE EQ PUSH2 0x5D7 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x5EC JUMPI PUSH2 0x2B5 JUMP JUMPDEST DUP1 PUSH4 0x4B750334 GT PUSH2 0x1DD JUMPI DUP1 PUSH4 0x7D882097 GT PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x7D882097 EQ PUSH2 0x4BD JUMPI DUP1 PUSH4 0x7E6335C7 EQ PUSH2 0x4D2 JUMPI DUP1 PUSH4 0x8086B8BA EQ PUSH2 0x502 JUMPI DUP1 PUSH4 0x81FCE645 EQ PUSH2 0x56E JUMPI DUP1 PUSH4 0x8620410B EQ PUSH2 0x583 JUMPI DUP1 PUSH4 0x89375ABF EQ PUSH2 0x56E JUMPI PUSH2 0x2B5 JUMP JUMPDEST DUP1 PUSH4 0x4B750334 EQ PUSH2 0x41A JUMPI DUP1 PUSH4 0x537A39BB EQ PUSH2 0x42F JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x444 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x477 JUMPI DUP1 PUSH4 0x72F702F3 EQ PUSH2 0x48C JUMPI PUSH2 0x2B5 JUMP JUMPDEST DUP1 PUSH4 0x1F38B9CD GT PUSH2 0x224 JUMPI DUP1 PUSH4 0x1F38B9CD EQ PUSH2 0x368 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x37D JUMPI DUP1 PUSH4 0x36599EAD EQ PUSH2 0x3A9 JUMPI DUP1 PUSH4 0x41C61383 EQ PUSH2 0x3F0 JUMPI DUP1 PUSH4 0x4641257D EQ PUSH2 0x405 JUMPI PUSH2 0x2B5 JUMP JUMPDEST DUP1 PUSH3 0x65318B EQ PUSH2 0x2BA JUMPI DUP1 PUSH4 0x8560ACE EQ PUSH2 0x2FF JUMPI DUP1 PUSH4 0x10D0FFDD EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x33E JUMPI DUP1 PUSH4 0x1924063E EQ PUSH2 0x353 JUMPI PUSH2 0x2B5 JUMP JUMPDEST CALLDATASIZE PUSH2 0x2B5 JUMPI PUSH1 0x5 SLOAD PUSH2 0x27A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE PUSH2 0x90D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLVALUE DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP3 ADD MSTORE DUP2 MLOAD CALLER SWAP3 PUSH32 0x3C2BD1B3F5CA07AFB09FBEE41AC43DA2B98D9C2E9832673052E546BD1D4C091D SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG2 STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x9F7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0xA30 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xA36 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0xA75 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0xA7B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x374 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0xA81 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x389 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xA87 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3DC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xC0F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0xCDA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A7 PUSH2 0xCE0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x426 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0xE4D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0xE7C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x467 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xE82 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x483 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A7 PUSH2 0xE9D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x498 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A1 PUSH2 0xF49 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0xF58 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3DC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xF5E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x535 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x525 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1073 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH2 0x1C0 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x55B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x543 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0x11EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0x11EF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A1 PUSH2 0x1216 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0x1225 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A1 PUSH2 0x1235 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0x1244 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3DC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x60F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x124A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x631 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0x1270 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x646 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0x12EC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x65B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x672 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x12F2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x685 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x69C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x131C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0x1328 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6CD PUSH2 0x132E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A1 PUSH2 0x1337 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x704 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x71B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1346 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x72E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x745 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x136C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x761 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x778 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1379 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x78B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0x1478 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x147E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A7 PUSH2 0x1580 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3DC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x81A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x82C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x84E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x159F SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x898 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x182C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x8E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x188F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x904 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0x199A JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x962 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9AD JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9B2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x9F2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x3A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2339 PUSH1 0x3A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x14 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD PUSH1 0x12 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP3 SWAP2 MUL SUB DIV SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x11 SLOAD DUP3 GT ISZERO PUSH2 0xA47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x0 PUSH2 0xA5E PUSH2 0xA57 DUP4 DUP4 PUSH2 0x19AB JUMP JUMPDEST PUSH1 0x64 PUSH2 0x1A04 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA6C DUP4 DUP4 PUSH2 0x1A6B JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x11 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x10 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xF SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA91 PUSH2 0x1225 JUMP JUMPDEST GT PUSH2 0xA9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0xAB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH2 0xAC5 DUP5 DUP4 PUSH2 0x19AB JUMP JUMPDEST DUP2 PUSH2 0xACC JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 SWAP1 POP PUSH1 0x0 PUSH2 0xADF DUP5 DUP4 PUSH2 0x1A6B JUMP JUMPDEST SWAP1 POP PUSH2 0xAED PUSH1 0x11 SLOAD DUP6 PUSH2 0x1A6B JUMP JUMPDEST PUSH1 0x11 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xB13 SWAP1 DUP6 PUSH2 0x1A6B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x12 SLOAD PUSH1 0x13 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 DUP1 SLOAD SWAP2 DUP7 MUL PUSH1 0x1 PUSH1 0x40 SHL DUP5 MUL ADD SWAP2 DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0xB59 DUP4 PUSH2 0x1AC8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE TIMESTAMP DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH32 0x90EBB005D68EFEE044927E1E77E1FD0CECC508368AA72C39250A787EED5F0A70 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x14 DUP5 MSTORE SWAP5 DUP3 SWAP1 KECCAK256 SLOAD SWAP4 DUP4 MSTORE PUSH1 0x1 ADD SLOAD DUP2 MLOAD SWAP5 DUP6 MSTORE SWAP2 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x60 DUP4 ADD MSTORE MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2319 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG2 PUSH2 0xC08 PUSH2 0x1B56 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0xCBB JUMPI PUSH1 0x6 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xC2C JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 ADD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP5 POP DUP5 SWAP3 PUSH4 0x70A08231 SWAP3 PUSH1 0x24 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC96 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xCAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP3 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xC15 JUMP JUMPDEST POP PUSH1 0x3 SLOAD DUP3 LT PUSH2 0xCD0 JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0xA2B JUMP JUMPDEST POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCEA PUSH2 0x199A JUMP JUMPDEST GT PUSH2 0xCF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 PUSH2 0xCFF PUSH2 0x199A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP9 MUL ADD SWAP1 SSTORE PUSH1 0x2 SLOAD DUP2 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x24 DUP6 ADD DUP8 SWAP1 MSTORE SWAP1 MLOAD SWAP6 SWAP7 POP SWAP1 SWAP4 AND SWAP4 PUSH4 0xA9059CBB SWAP4 PUSH1 0x44 DUP1 DUP6 ADD SWAP5 SWAP2 SWAP4 SWAP2 DUP4 SWAP1 SUB ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD87 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xDC5 SWAP1 DUP3 PUSH2 0x1C4C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x1 DUP1 DUP3 ADD SWAP6 SWAP1 SWAP6 SSTORE PUSH1 0xB ADD DUP1 SLOAD DUP6 ADD SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD SWAP1 SWAP5 ADD SWAP1 SWAP4 SSTORE PUSH1 0xA DUP1 SLOAD DUP6 ADD SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE TIMESTAMP SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP1 MLOAD SWAP2 SWAP3 PUSH32 0x1B091269E929DF55D64D6EA7E9CADBE4FB38DCE5CCDC995767BC515030DBFBBF SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 PUSH2 0xE49 PUSH2 0x1B56 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0xE66 PUSH2 0xA57 DUP4 DUP4 PUSH2 0x19AB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE74 DUP4 DUP4 PUSH2 0x1A6B JUMP JUMPDEST SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xEA5 PUSH2 0x1CA6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xEB6 PUSH2 0x1216 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xEFF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2394 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF68 PUSH2 0x1CA6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xF79 PUSH2 0x1216 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xFC2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2394 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xFCC DUP4 DUP4 PUSH2 0x1C4C JUMP JUMPDEST PUSH1 0x3 EQ PUSH2 0x1020 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54454E5F504F5254494F4E535F524551554952455F4449564953494F4E000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xE DUP4 SWAP1 SSTORE PUSH1 0xF DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE TIMESTAMP DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH32 0x677017FA3A0FE0F50A95E6024C5B688F2B14A4696C4A897C459715CABFC1C03A SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x107B PUSH2 0x21EA JUMP JUMPDEST PUSH2 0x1083 PUSH2 0x2209 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH2 0x1C0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 DUP3 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 DUP3 ADD SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 DUP3 ADD SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 DUP3 ADD SLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH1 0x9 DUP3 ADD SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xA DUP3 ADD SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xB DUP3 ADD SLOAD PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0xC DUP3 ADD SLOAD PUSH2 0x180 DUP3 ADD MSTORE PUSH1 0xD SWAP1 SWAP2 ADD SLOAD PUSH2 0x1A0 DUP3 ADD MSTORE PUSH2 0x1142 PUSH2 0x21EA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 DUP4 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x60 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x40 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x80 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0xA0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0xC0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0xE0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x120 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x140 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x160 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x180 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x1A0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x100 ADD MLOAD DUP2 MSTORE POP SWAP1 POP DUP1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x1208 PUSH2 0xA57 DUP4 DUP4 PUSH2 0x19AB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE74 DUP4 DUP4 PUSH2 0x1C4C JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1230 CALLER PUSH2 0xE82 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1255 PUSH2 0x1225 JUMP JUMPDEST GT PUSH2 0x125F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1269 DUP4 DUP4 PUSH2 0x1CAA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12CF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x12E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH1 0x6 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1302 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x106D CALLER DUP4 PUSH2 0x188F JUMP JUMPDEST PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1356 PUSH2 0xA57 DUP5 DUP4 PUSH2 0x19AB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1364 DUP5 DUP4 PUSH2 0x1A6B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x23B872DD SWAP2 PUSH1 0x64 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP8 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x13E6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x13FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x1407 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xC DUP1 SLOAD DUP4 ADD SWAP1 SSTORE CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0xA DUP2 ADD DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE PUSH1 0x4 ADD DUP1 SLOAD DUP7 ADD SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE TIMESTAMP SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 MLOAD PUSH32 0xDA1788C3E861A58A47F0D46073B13C4D66EFCC259714744F920D1AFE7B8DEE5 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 POP POP PUSH1 0xC SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1486 PUSH2 0x1CA6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1497 PUSH2 0x1216 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x14E0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2394 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1525 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x22F3 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x158A PUSH2 0x199A JUMP JUMPDEST GT PUSH2 0x1594 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x159C PUSH2 0x1F15 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15A9 PUSH2 0x1CA6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x15BA PUSH2 0x1216 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1603 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2394 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0x16E0 JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x161C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1FFC9A7 PUSH4 0x80AC58CD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x166E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1682 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1698 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x16D8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x4E4F545F455243373231 PUSH1 0xB0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 ADD PUSH2 0x1606 JUMP JUMPDEST POP PUSH1 0x60 PUSH1 0x6 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1739 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x171B JUMPI JUMPDEST POP POP DUP7 MLOAD SWAP4 SWAP5 POP PUSH2 0x1755 SWAP4 PUSH1 0x6 SWAP4 POP PUSH1 0x20 DUP9 ADD SWAP3 POP SWAP1 POP PUSH2 0x2278 JUMP JUMPDEST POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xF0650831416F723858005CFEAE97A2D6F5E127D1E6AE8938574D1D73E7F4727C DUP3 DUP6 TIMESTAMP PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 SUB DUP4 MSTORE DUP7 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x17CE JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x17B6 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP4 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x180D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x17F5 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0xC SLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH2 0x1850 SWAP2 PUSH1 0x1 SWAP2 PUSH2 0x184A SWAP2 PUSH1 0xFF AND PUSH2 0x19AB JUMP JUMPDEST SWAP1 PUSH2 0x1A04 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x11 SLOAD GT PUSH2 0x1863 JUMPI PUSH1 0x0 PUSH2 0x1269 JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1269 SWAP2 SWAP1 PUSH2 0x184A SWAP1 DUP5 SWAP1 PUSH2 0x19AB JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x23B872DD SWAP2 PUSH1 0x64 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP8 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x18FC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1912 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x191D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xB DUP1 SLOAD DUP4 ADD SWAP1 SSTORE PUSH1 0x0 PUSH2 0x1931 DUP5 DUP5 PUSH2 0x204B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x14 DUP5 MSTORE SWAP5 DUP3 SWAP1 KECCAK256 SLOAD SWAP4 DUP4 MSTORE PUSH1 0x1 ADD SLOAD DUP2 MLOAD SWAP5 DUP6 MSTORE SWAP2 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x60 DUP4 ADD MSTORE MLOAD SWAP3 SWAP4 POP SWAP1 SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2319 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG2 PUSH2 0x1269 PUSH2 0x1B56 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1230 CALLER PUSH2 0x9F7 JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x19BA JUMPI POP PUSH1 0x0 PUSH2 0x106D JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x19C7 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1269 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2373 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x1A5A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x1A63 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1AC2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AD5 DUP3 PUSH1 0xA PUSH2 0x1A04 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1AEE PUSH1 0xE SLOAD DUP4 PUSH2 0x19AB SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B07 PUSH1 0xF SLOAD DUP5 PUSH2 0x19AB SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC SLOAD SWAP1 SWAP2 POP PUSH2 0x1B17 SWAP1 DUP4 PUSH2 0x1C4C JUMP JUMPDEST PUSH1 0xC SSTORE PUSH1 0x11 SLOAD ISZERO PUSH2 0x1B47 JUMPI PUSH2 0x1B3F PUSH1 0x12 SLOAD PUSH1 0x11 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP5 MUL DUP2 PUSH2 0x1B39 JUMPI INVALID JUMPDEST DIV PUSH2 0x1C4C JUMP JUMPDEST PUSH1 0x12 SSTORE PUSH2 0x1B50 JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x10 SLOAD TIMESTAMP SWAP1 PUSH1 0x2 SWAP1 PUSH2 0x1B69 SWAP1 DUP4 SWAP1 PUSH2 0x21CF JUMP JUMPDEST GT ISZERO PUSH2 0x1BB5 JUMPI PUSH32 0x2CFCE469A63F2E9972B7F23DA751E6943ED2B091C10E40B5C43B5F6105BF20EA PUSH2 0x1B98 PUSH2 0x1270 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP5 SWAP1 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG1 PUSH1 0x10 DUP2 SWAP1 SSTORE JUMPDEST PUSH1 0x2 PUSH2 0x1BC3 DUP3 PUSH1 0x9 SLOAD PUSH2 0x21CF JUMP JUMPDEST GT DUP1 ISZERO PUSH2 0x1BD2 JUMPI POP PUSH1 0x0 PUSH1 0x11 SLOAD GT JUMPDEST ISZERO PUSH2 0x159C JUMPI PUSH1 0xD SLOAD PUSH1 0xC SLOAD PUSH1 0x0 SWAP2 PUSH2 0x1BFB SWAP2 PUSH3 0x15180 SWAP2 PUSH2 0x184A SWAP2 PUSH1 0x1 SWAP2 DUP4 SWAP2 SWAP1 PUSH1 0xFF AND PUSH2 0x19AB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1C14 PUSH1 0x9 SLOAD DUP5 PUSH2 0x21CF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC SLOAD SWAP1 DUP4 MUL SWAP2 POP PUSH2 0x1C26 SWAP1 DUP3 PUSH2 0x21CF JUMP JUMPDEST PUSH1 0xC SSTORE PUSH1 0x12 SLOAD PUSH1 0x11 SLOAD PUSH2 0x1C42 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x40 SHL DUP5 MUL DUP2 PUSH2 0x1B39 JUMPI INVALID JUMPDEST PUSH1 0x12 SSTORE POP POP PUSH1 0x9 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x1269 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST CALLER SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 GT ISZERO PUSH2 0x1CC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1CD3 PUSH2 0x199A JUMP JUMPDEST GT ISZERO PUSH2 0x1CE1 JUMPI PUSH2 0x1CE1 PUSH2 0xCE0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1D04 SWAP1 DUP5 PUSH2 0x1A6B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP7 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x1D33 SWAP1 DUP5 PUSH2 0x1C4C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP6 SWAP1 SWAP6 SSTORE PUSH1 0x12 DUP1 SLOAD SWAP5 DUP8 AND DUP4 MSTORE PUSH1 0x13 DUP3 MSTORE DUP6 DUP4 KECCAK256 DUP1 SLOAD SWAP6 DUP11 MUL SWAP1 SWAP6 SUB SWAP1 SWAP5 SSTORE SWAP3 SLOAD SWAP2 DUP2 MSTORE DUP4 DUP2 KECCAK256 DUP1 SLOAD SWAP3 DUP9 MUL SWAP1 SWAP3 ADD SWAP1 SWAP2 SSTORE PUSH1 0x15 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD ISZERO DUP1 ISZERO PUSH2 0x1DAE JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x6 ADD SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x1DBD JUMPI PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0xC DUP2 ADD DUP1 SLOAD PUSH1 0x1 SWAP1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH1 0x5 SWAP1 SWAP2 ADD DUP1 SLOAD DUP11 ADD SWAP1 SSTORE SWAP5 DUP10 AND DUP1 DUP5 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 PUSH1 0x6 DUP2 ADD DUP1 SLOAD DUP11 ADD SWAP1 SSTORE PUSH1 0xD ADD DUP1 SLOAD DUP7 ADD SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD SWAP1 SWAP6 ADD SWAP1 SWAP5 SSTORE DUP4 MLOAD DUP8 DUP2 MSTORE TIMESTAMP SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD SWAP2 SWAP4 PUSH32 0x91C7D71A3AE3FB7CF61E00517BF4868E9E23D0BACE5E304CBC3B68DE5D85350E SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x14 DUP5 MSTORE SWAP5 DUP3 SWAP1 KECCAK256 SLOAD SWAP4 DUP4 MSTORE PUSH1 0x1 ADD SLOAD DUP2 MLOAD SWAP5 DUP6 MSTORE SWAP2 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x60 DUP4 ADD MSTORE MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2319 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x14 DUP5 MSTORE SWAP5 DUP3 SWAP1 KECCAK256 SLOAD SWAP4 DUP4 MSTORE PUSH1 0x1 ADD SLOAD DUP2 MLOAD SWAP5 DUP6 MSTORE SWAP2 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x60 DUP4 ADD MSTORE MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2319 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG2 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x1F22 DUP3 PUSH2 0x9F7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP5 MUL ADD SWAP1 SSTORE SWAP1 SWAP2 POP PUSH2 0x1F53 CALLER DUP4 PUSH2 0x204B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE TIMESTAMP DUP2 DUP4 ADD MSTORE SWAP1 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 PUSH32 0x193A876AC91D11A4A0A71EBEF73B195BA55AA7C16D6755C93C21D973E692A02C SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x1FC6 SWAP1 DUP4 PUSH2 0x1C4C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x2 DUP2 ADD SWAP7 SWAP1 SWAP7 SSTORE PUSH1 0x8 DUP7 ADD DUP1 SLOAD PUSH1 0x1 SWAP1 DUP2 ADD SWAP1 SWAP2 SSTORE DUP7 SLOAD PUSH1 0x14 DUP5 MSTORE SWAP5 DUP3 SWAP1 KECCAK256 SLOAD SWAP4 DUP4 MSTORE SWAP1 SWAP6 ADD SLOAD DUP6 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 DUP5 ADD MSTORE TIMESTAMP PUSH1 0x60 DUP3 ADD MSTORE SWAP2 MLOAD SWAP1 SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2319 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG2 PUSH2 0x2044 PUSH2 0x1B56 JUMP JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO DUP1 ISZERO PUSH2 0x208A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x6 ADD SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x2099 JUMPI PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE PUSH1 0x0 PUSH1 0x64 PUSH2 0x20B0 DUP5 DUP4 PUSH2 0x19AB JUMP JUMPDEST DUP2 PUSH2 0x20B7 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH2 0x20C6 DUP5 DUP4 PUSH2 0x1A6B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE TIMESTAMP DUP2 DUP4 ADD MSTORE SWAP1 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP2 PUSH32 0xB49BB132260F6AA1C86E2D2A3957C097216E6EC9B5FA15867289F058B4D297AC SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG2 PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x212D JUMPI POP PUSH1 0x11 SLOAD PUSH2 0x212B DUP3 DUP3 PUSH2 0x1C4C JUMP JUMPDEST GT JUMPDEST PUSH2 0x2136 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x11 SLOAD ISZERO PUSH2 0x214B JUMPI PUSH1 0x11 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE PUSH2 0x2151 JUMP JUMPDEST PUSH1 0x11 DUP2 SWAP1 SSTORE JUMPDEST PUSH2 0x215A DUP3 PUSH2 0x1AC8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x217D SWAP1 DUP3 PUSH2 0x1C4C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x12 SLOAD PUSH1 0x13 DUP3 MSTORE DUP4 DUP4 KECCAK256 DUP1 SLOAD SWAP2 DUP7 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SSTORE PUSH1 0x15 SWAP1 MSTORE KECCAK256 DUP1 SLOAD DUP6 ADD DUP2 SSTORE PUSH1 0x7 ADD DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x21E1 JUMPI POP PUSH1 0x0 PUSH2 0x106D JUMP JUMPDEST POP DUP1 DUP3 SUB PUSH2 0x106D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x22CD JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x22CD JUMPI DUP3 MLOAD DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x2298 JUMP JUMPDEST POP PUSH2 0x22D9 SWAP3 SWAP2 POP PUSH2 0x22DD JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x22D9 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x22DE JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F206164647265737329F64F6F46C82C5ECFA955FE7D093E63 0xB4 LT PUSH12 0x6DBE5193E00EFD62C7384EF1 PUSH24 0x416464726573733A20756E61626C6520746F2073656E6420 PUSH23 0x616C75652C20726563697069656E74206D617920686176 PUSH6 0x207265766572 PUSH21 0x6564536166654D6174683A206D756C7469706C6963 PUSH2 0x7469 PUSH16 0x6E206F766572666C6F774F776E61626C PUSH6 0x3A2063616C6C PUSH6 0x72206973206E PUSH16 0x7420746865206F776E6572A264697066 PUSH20 0x58221220C4AF3C69537B0D4A49627AA93C92A3F3 PUSH21 0x7D74B27D835ADBE424730631EE0A9764736F6C6343 STOP SMOD DIV STOP CALLER ",
							"sourceMap": "237:21305:2:-:0;;;4539:562;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4539:562:2;;;;;;;877:17:5;897:12;:10;:12::i;:::-;919:6;:18;;-1:-1:-1;;;;;;919:18:5;-1:-1:-1;;;;;919:18:5;;;;;;;952:43;;919:18;;-1:-1:-1;919:18:5;952:43;;919:6;;952:43;-1:-1:-1;1716:1:6;1821:22;;-1:-1:-1;;;;;4632:27:2;::::1;::::0;;::::1;::::0;:64:::1;;;4663:33;4682:13;4663:18;;;;;:33;;:::i;:::-;4611:126;;;::::0;;-1:-1:-1;;;4611:126:2;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;4611:126:2;;;;;;;;;;;;;::::1;;4748:12;:28:::0;;-1:-1:-1;;;;;4748:28:2;;::::1;-1:-1:-1::0;;;;;;4748:28:2;;::::1;::::0;::::1;::::0;;;4786:12:::1;:36:::0;;;::::1;::::0;;::::1;::::0;;4833:11:::1;:24:::0;;;;::::1;4847:10;4833:24;::::0;;;4937:8:::1;:20:::0;;::::1;::::0;;::::1;-1:-1:-1::0;;4937:20:2;;::::1;::::0;;;::::1;::::0;;4981:15:::1;4967:10;:30:::0;5032:7:::1;:11:::0;4748:28;5053:7:::1;:11:::0;;;5075:15:::1;:19:::0;237:21305;;598:104:1;685:10;598:104;:::o;726:413:0:-;1086:20;1124:8;;;726:413::o;237:21305:2:-;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "60806040526004361061025f5760003560e01c80638da5cb5b11610144578063d7c3771d116100b6578063f2fde38b1161007a578063f2fde38b14610794578063f69e2046146107c7578063f6db0da0146107dc578063fbaf1bbd1461088c578063ffaad6a5146108bf578063ffe6bbd8146108f8576102b5565b8063d7c3771d146106e3578063e02e1e9c146106f8578063eedc966a14610722578063f14faf6f14610755578063f20202751461077f576102b5565b8063ad7a672f11610108578063ad7a672f14610625578063aecb6d281461063a578063b03cf5a71461064f578063b6b55f2514610679578063b9db102a146106a3578063d3261592146106b8576102b5565b80638da5cb5b14610598578063949e8acd146105ad5780639d76ea58146105c2578063a01496de146105d7578063a9059cbb146105ec576102b5565b80634b750334116101dd5780637d882097116101a15780637d882097146104bd5780637e6335c7146104d25780638086b8ba1461050257806381fce6451461056e5780638620410b1461058357806389375abf1461056e576102b5565b80634b7503341461041a578063537a39bb1461042f57806370a0823114610444578063715018a61461047757806372f702f31461048c576102b5565b80631f38b9cd116102245780631f38b9cd146103685780632e1a7d4d1461037d57806336599ead146103a957806341c61383146103f05780634641257d14610405576102b5565b806265318b146102ba57806308560ace146102ff57806310d0ffdd1461031457806318160ddd1461033e5780631924063e14610353576102b5565b366102b55760055461027a906001600160a01b03163461090d565b60408051348152426020820152815133927f3c2bd1b3f5ca07afb09fbee41ac43da2b98d9c2e9832673052e546bd1d4c091d928290030190a2005b600080fd5b3480156102c657600080fd5b506102ed600480360360208110156102dd57600080fd5b50356001600160a01b03166109f7565b60408051918252519081900360200190f35b34801561030b57600080fd5b506102ed610a30565b34801561032057600080fd5b506102ed6004803603602081101561033757600080fd5b5035610a36565b34801561034a57600080fd5b506102ed610a75565b34801561035f57600080fd5b506102ed610a7b565b34801561037457600080fd5b506102ed610a81565b34801561038957600080fd5b506103a7600480360360208110156103a057600080fd5b5035610a87565b005b3480156103b557600080fd5b506103dc600480360360208110156103cc57600080fd5b50356001600160a01b0316610c0f565b604080519115158252519081900360200190f35b3480156103fc57600080fd5b506102ed610cda565b34801561041157600080fd5b506103a7610ce0565b34801561042657600080fd5b506102ed610e4d565b34801561043b57600080fd5b506102ed610e7c565b34801561045057600080fd5b506102ed6004803603602081101561046757600080fd5b50356001600160a01b0316610e82565b34801561048357600080fd5b506103a7610e9d565b34801561049857600080fd5b506104a1610f49565b604080516001600160a01b039092168252519081900360200190f35b3480156104c957600080fd5b506102ed610f58565b3480156104de57600080fd5b506103dc600480360360408110156104f557600080fd5b5080359060200135610f5e565b34801561050e57600080fd5b506105356004803603602081101561052557600080fd5b50356001600160a01b0316611073565b60405180826101c080838360005b8381101561055b578181015183820152602001610543565b5050505090500191505060405180910390f35b34801561057a57600080fd5b506102ed6111ea565b34801561058f57600080fd5b506102ed6111ef565b3480156105a457600080fd5b506104a1611216565b3480156105b957600080fd5b506102ed611225565b3480156105ce57600080fd5b506104a1611235565b3480156105e357600080fd5b506102ed611244565b3480156105f857600080fd5b506103dc6004803603604081101561060f57600080fd5b506001600160a01b03813516906020013561124a565b34801561063157600080fd5b506102ed611270565b34801561064657600080fd5b506102ed6112ec565b34801561065b57600080fd5b506104a16004803603602081101561067257600080fd5b50356112f2565b34801561068557600080fd5b506102ed6004803603602081101561069c57600080fd5b503561131c565b3480156106af57600080fd5b506102ed611328565b3480156106c457600080fd5b506106cd61132e565b6040805160ff9092168252519081900360200190f35b3480156106ef57600080fd5b506104a1611337565b34801561070457600080fd5b506102ed6004803603602081101561071b57600080fd5b5035611346565b34801561072e57600080fd5b506102ed6004803603602081101561074557600080fd5b50356001600160a01b031661136c565b34801561076157600080fd5b506102ed6004803603602081101561077857600080fd5b5035611379565b34801561078b57600080fd5b506102ed611478565b3480156107a057600080fd5b506103a7600480360360208110156107b757600080fd5b50356001600160a01b031661147e565b3480156107d357600080fd5b506103a7611580565b3480156107e857600080fd5b506103dc600480360360208110156107ff57600080fd5b81019060208101813564010000000081111561081a57600080fd5b82018360208201111561082c57600080fd5b8035906020019184602083028401116401000000008311171561084e57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061159f945050505050565b34801561089857600080fd5b506102ed600480360360208110156108af57600080fd5b50356001600160a01b031661182c565b3480156108cb57600080fd5b506102ed600480360360408110156108e257600080fd5b506001600160a01b03813516906020013561188f565b34801561090457600080fd5b506102ed61199a565b80471015610962576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d80600081146109ad576040519150601f19603f3d011682016040523d82523d6000602084013e6109b2565b606091505b50509050806109f25760405162461bcd60e51b815260040180806020018281038252603a815260200180612339603a913960400191505060405180910390fd5b505050565b6001600160a01b0381166000908152601360209081526040808320546014909252822054601254600160401b929102030490505b919050565b60035481565b6000601154821115610a4757600080fd5b816000610a5e610a5783836119ab565b6064611a04565b90506000610a6c8383611a6b565b95945050505050565b60115490565b60105481565b600f5481565b6000610a91611225565b11610a9b57600080fd5b33600081815260146020526040902054821115610ab757600080fd5b60006064610ac584836119ab565b81610acc57fe5b049050600090506000610adf8483611a6b565b9050610aed60115485611a6b565b6011556001600160a01b038316600090815260146020526040902054610b139085611a6b565b6001600160a01b03841660009081526014602090815260408083209390935560125460139091529190208054918602600160401b840201918290039055610b5983611ac8565b6040805186815260208101849052428183015290516001600160a01b038616917f90ebb005d68efee044927e1e77e1fd0cecc508368aa72c39250a787eed5f0a70919081900360600190a26001600160a01b038416600081815260156020818152604080842080546014845294829020549383526001015481519485529184019290925282820152426060830152516000805160206123198339815191529181900360800190a2610c08611b56565b5050505050565b60008080805b600654811015610cbb5760068181548110610c2c57fe5b60009182526020918290200154604080516370a0823160e01b81526001600160a01b038981166004830152915191909216945084926370a082319260248082019391829003018186803b158015610c8257600080fd5b505afa158015610c96573d6000803e3d6000fd5b505050506040513d6020811015610cac57600080fd5b50519290920191600101610c15565b506003548210610cd057600192505050610a2b565b5060009392505050565b600a5481565b6000610cea61199a565b11610cf457600080fd5b336000610cff61199a565b6001600160a01b0380841660008181526013602090815260408083208054600160401b8802019055600254815163a9059cbb60e01b815260048101959095526024850187905290519596509093169363a9059cbb936044808501949193918390030190829087803b158015610d7357600080fd5b505af1158015610d87573d6000803e3d6000fd5b505050506040513d6020811015610d9d57600080fd5b50506001600160a01b038216600090815260156020526040902060010154610dc59082611c4c565b6001600160a01b038316600081815260156020908152604091829020600180820195909555600b0180548501905560088054909401909355600a80548501905580518481524293810193909352805191927f1b091269e929df55d64d6ea7e9cadbe4fb38dce5ccdc995767bc515030dbfbbf929081900390910190a2610e49611b56565b5050565b6000670de0b6b3a764000081610e66610a5783836119ab565b90506000610e748383611a6b565b935050505090565b60085481565b6001600160a01b031660009081526014602052604090205490565b610ea5611ca6565b6001600160a01b0316610eb6611216565b6001600160a01b031614610eff576040805162461bcd60e51b81526020600482018190526024820152600080516020612394833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6002546001600160a01b031681565b600b5481565b6000610f68611ca6565b6001600160a01b0316610f79611216565b6001600160a01b031614610fc2576040805162461bcd60e51b81526020600482018190526024820152600080516020612394833981519152604482015290519081900360640190fd5b610fcc8383611c4c565b600314611020576040805162461bcd60e51b815260206004820152601d60248201527f54454e5f504f5254494f4e535f524551554952455f4449564953494f4e000000604482015290519081900360640190fd5b600e839055600f8290556040805184815260208101849052428183015290517f677017fa3a0fe0f50a95e6024c5b688f2b14a4696c4a897c459715cabfc1c03a9181900360600190a15060015b92915050565b61107b6121ea565b611083612209565b506001600160a01b03821660009081526015602090815260409182902082516101c081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e082015260088201546101008201526009820154610120820152600a820154610140820152600b820154610160820152600c820154610180820152600d909101546101a08201526111426121ea565b604051806101c0016040528083600001518152602001836020015181526020018360600151815260200183604001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e0015181526020018361012001518152602001836101400151815260200183610160015181526020018361018001518152602001836101a00151815260200183610100015181525090508092505050919050565b600281565b6000670de0b6b3a764000081611208610a5783836119ab565b90506000610e748383611c4c565b6000546001600160a01b031690565b600061123033610e82565b905090565b6004546001600160a01b031681565b600e5481565b600080611255611225565b1161125f57600080fd5b6112698383611caa565b9392505050565b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156112bb57600080fd5b505afa1580156112cf573d6000803e3d6000fd5b505050506040513d60208110156112e557600080fd5b5051905090565b600c5481565b6006818154811061130257600080fd5b6000918252602090912001546001600160a01b0316905081565b600061106d338361188f565b60095481565b600d5460ff1681565b6005546001600160a01b031681565b600080611356610a5784836119ab565b905060006113648483611a6b565b949350505050565b6001600160a01b03163190565b600254604080516323b872dd60e01b81523360048201523060248201526044810184905290516000926001600160a01b0316916323b872dd91606480830192602092919082900301818787803b1580156113d257600080fd5b505af11580156113e6573d6000803e3d6000fd5b505050506040513d60208110156113fc57600080fd5b505161140757600080fd5b600c80548301905533600081815260156020908152604091829020600a8101805460010190556004018054860190558151858152429181019190915281517f0da1788c3e861a58a47f0d46073b13c4d66efcc259714744f920d1afe7b8dee5929181900390910190a25050600c5490565b60075481565b611486611ca6565b6001600160a01b0316611497611216565b6001600160a01b0316146114e0576040805162461bcd60e51b81526020600482018190526024820152600080516020612394833981519152604482015290519081900360640190fd5b6001600160a01b0381166115255760405162461bcd60e51b81526004018080602001828103825260268152602001806122f36026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600061158a61199a565b1161159457600080fd5b61159c611f15565b50565b60006115a9611ca6565b6001600160a01b03166115ba611216565b6001600160a01b031614611603576040805162461bcd60e51b81526020600482018190526024820152600080516020612394833981519152604482015290519081900360640190fd5b60005b6006548110156116e05782818151811061161c57fe5b60200260200101516001600160a01b03166301ffc9a76380ac58cd6040518263ffffffff1660e01b8152600401808260e01b815260200191505060206040518083038186803b15801561166e57600080fd5b505afa158015611682573d6000803e3d6000fd5b505050506040513d602081101561169857600080fd5b50516116d8576040805162461bcd60e51b815260206004820152600a6024820152694e4f545f45524337323160b01b604482015290519081900360640190fd5b600101611606565b506060600680548060200260200160405190810160405280929190818152602001828054801561173957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161171b575b5050865193945061175593600693506020880192509050612278565b50336001600160a01b03167ff0650831416f723858005cfeae97a2d6f5e127d1e6ae8938574d1d73e7f4727c828542604051808060200180602001848152602001838103835286818151815260200191508051906020019060200280838360005b838110156117ce5781810151838201526020016117b6565b50505050905001838103825285818151815260200191508051906020019060200280838360005b8381101561180d5781810151838201526020016117f5565b505050509050019550505050505060405180910390a250600192915050565b600d54600c5460009182916118509160019161184a9160ff166119ab565b90611a04565b9050600060115411611863576000611269565b6011546001600160a01b038416600090815260146020526040902054611269919061184a9084906119ab565b600254604080516323b872dd60e01b81523360048201523060248201526044810184905290516000926001600160a01b0316916323b872dd91606480830192602092919082900301818787803b1580156118e857600080fd5b505af11580156118fc573d6000803e3d6000fd5b505050506040513d602081101561191257600080fd5b505161191d57600080fd5b600b8054830190556000611931848461204b565b6001600160a01b0385166000818152601560208181526040808420805460148452948290205493835260010154815194855291840192909252828201524260608301525192935090916000805160206123198339815191529181900360800190a2611269611b56565b6000611230336109f7565b3b151590565b6000826119ba5750600061106d565b828202828482816119c757fe5b04146112695760405162461bcd60e51b81526004018080602001828103825260218152602001806123736021913960400191505060405180910390fd5b6000808211611a5a576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611a6357fe5b049392505050565b600082821115611ac2576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000611ad582600a611a04565b90506000611aee600e54836119ab90919063ffffffff16565b90506000611b07600f54846119ab90919063ffffffff16565b600c54909150611b179083611c4c565b600c5560115415611b4757611b3f601254601154600160401b840281611b3957fe5b04611c4c565b601255611b50565b600c8054820190555b50505050565b6010544290600290611b699083906121cf565b1115611bb5577f2cfce469a63f2e9972b7f23da751e6943ed2b091c10e40b5c43b5f6105bf20ea611b98611270565b60408051918252602082018490528051918290030190a160108190555b6002611bc3826009546121cf565b118015611bd257506000601154115b1561159c57600d54600c54600091611bfb91620151809161184a9160019183919060ff166119ab565b90506000611c14600954846121cf90919063ffffffff16565b600c549083029150611c2690826121cf565b600c55601254601154611c429190600160401b840281611b3957fe5b6012555050600955565b600082820183811015611269576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3390565b33600081815260146020526040812054909190831115611cc957600080fd5b6000611cd361199a565b1115611ce157611ce1610ce0565b6001600160a01b038116600090815260146020526040902054611d049084611a6b565b6001600160a01b038083166000908152601460205260408082209390935590861681522054611d339084611c4c565b6001600160a01b03858116600081815260146020908152604080832095909555601280549487168352601382528583208054958a029095039094559254918152838120805492880290920190915560159091522054158015611dae57506001600160a01b038416600090815260156020526040902060060154155b15611dbd576007805460010190555b6001600160a01b038082166000818152601560209081526040808320600c810180546001908101909155600590910180548a019055948916808452928190206006810180548a019055600d018054860190556008805490950190945583518781524291810191909152835191937f91c7d71a3ae3fb7cf61e00517bf4868e9e23d0bace5e304cbc3b68de5d85350e92918290030190a36001600160a01b038116600081815260156020818152604080842080546014845294829020549383526001015481519485529184019290925282820152426060830152516000805160206123198339815191529181900360800190a26001600160a01b038416600081815260156020818152604080842080546014845294829020549383526001015481519485529184019290925282820152426060830152516000805160206123198339815191529181900360800190a25060019392505050565b60003381611f22826109f7565b6001600160a01b03831660009081526013602052604081208054600160401b8402019055909150611f53338361204b565b6040805184815260208101839052428183015290519192506001600160a01b038516917f193a876ac91d11a4a0a71ebef73b195ba55aa7c16d6755c93c21d973e692a02c9181900360600190a26001600160a01b038316600090815260156020526040902060020154611fc69083611c4c565b6001600160a01b0384166000818152601560208181526040808420600281019690965560088601805460019081019091558654601484529482902054938352909501548551938452908301919091528184015242606082015291519091600080516020612319833981519152919081900360800190a2612044611b56565b9250505090565b6001600160a01b03821660009081526015602052604081205415801561208a57506001600160a01b038316600090815260156020526040902060060154155b15612099576007805460010190555b600880546001019055600060646120b084836119ab565b816120b757fe5b04905060006120c68483611a6b565b6040805186815260208101839052428183015290519192506001600160a01b038716917fb49bb132260f6aa1c86e2d2a3957c097216e6ec9b5fa15867289f058b4d297ac9181900360600190a260008111801561212d575060115461212b8282611c4c565b115b61213657600080fd5b6011541561214b576011805482019055612151565b60118190555b61215a82611ac8565b6001600160a01b03851660009081526014602052604090205461217d9082611c4c565b6001600160a01b03861660009081526014602090815260408083209390935560125460138252838320805491860291909101905560159052208054850181556007018054600101905591505092915050565b6000828211156121e15750600061106d565b5080820361106d565b604051806101c00160405280600e906020820280368337509192915050565b604051806101c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8280548282559060005260206000209081019282156122cd579160200282015b828111156122cd57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612298565b506122d99291506122dd565b5090565b5b808211156122d957600081556001016122de56fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737329f64f6f46c82c5ecfa955fe7d093e63b4106b6dbe5193e00efd62c7384ef177416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220c4af3c69537b0d4a49627aa93c92a3f3747d74b27d835adbe424730631ee0a9764736f6c63430007040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x25F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x144 JUMPI DUP1 PUSH4 0xD7C3771D GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0xF2FDE38B GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x794 JUMPI DUP1 PUSH4 0xF69E2046 EQ PUSH2 0x7C7 JUMPI DUP1 PUSH4 0xF6DB0DA0 EQ PUSH2 0x7DC JUMPI DUP1 PUSH4 0xFBAF1BBD EQ PUSH2 0x88C JUMPI DUP1 PUSH4 0xFFAAD6A5 EQ PUSH2 0x8BF JUMPI DUP1 PUSH4 0xFFE6BBD8 EQ PUSH2 0x8F8 JUMPI PUSH2 0x2B5 JUMP JUMPDEST DUP1 PUSH4 0xD7C3771D EQ PUSH2 0x6E3 JUMPI DUP1 PUSH4 0xE02E1E9C EQ PUSH2 0x6F8 JUMPI DUP1 PUSH4 0xEEDC966A EQ PUSH2 0x722 JUMPI DUP1 PUSH4 0xF14FAF6F EQ PUSH2 0x755 JUMPI DUP1 PUSH4 0xF2020275 EQ PUSH2 0x77F JUMPI PUSH2 0x2B5 JUMP JUMPDEST DUP1 PUSH4 0xAD7A672F GT PUSH2 0x108 JUMPI DUP1 PUSH4 0xAD7A672F EQ PUSH2 0x625 JUMPI DUP1 PUSH4 0xAECB6D28 EQ PUSH2 0x63A JUMPI DUP1 PUSH4 0xB03CF5A7 EQ PUSH2 0x64F JUMPI DUP1 PUSH4 0xB6B55F25 EQ PUSH2 0x679 JUMPI DUP1 PUSH4 0xB9DB102A EQ PUSH2 0x6A3 JUMPI DUP1 PUSH4 0xD3261592 EQ PUSH2 0x6B8 JUMPI PUSH2 0x2B5 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x598 JUMPI DUP1 PUSH4 0x949E8ACD EQ PUSH2 0x5AD JUMPI DUP1 PUSH4 0x9D76EA58 EQ PUSH2 0x5C2 JUMPI DUP1 PUSH4 0xA01496DE EQ PUSH2 0x5D7 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x5EC JUMPI PUSH2 0x2B5 JUMP JUMPDEST DUP1 PUSH4 0x4B750334 GT PUSH2 0x1DD JUMPI DUP1 PUSH4 0x7D882097 GT PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x7D882097 EQ PUSH2 0x4BD JUMPI DUP1 PUSH4 0x7E6335C7 EQ PUSH2 0x4D2 JUMPI DUP1 PUSH4 0x8086B8BA EQ PUSH2 0x502 JUMPI DUP1 PUSH4 0x81FCE645 EQ PUSH2 0x56E JUMPI DUP1 PUSH4 0x8620410B EQ PUSH2 0x583 JUMPI DUP1 PUSH4 0x89375ABF EQ PUSH2 0x56E JUMPI PUSH2 0x2B5 JUMP JUMPDEST DUP1 PUSH4 0x4B750334 EQ PUSH2 0x41A JUMPI DUP1 PUSH4 0x537A39BB EQ PUSH2 0x42F JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x444 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x477 JUMPI DUP1 PUSH4 0x72F702F3 EQ PUSH2 0x48C JUMPI PUSH2 0x2B5 JUMP JUMPDEST DUP1 PUSH4 0x1F38B9CD GT PUSH2 0x224 JUMPI DUP1 PUSH4 0x1F38B9CD EQ PUSH2 0x368 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x37D JUMPI DUP1 PUSH4 0x36599EAD EQ PUSH2 0x3A9 JUMPI DUP1 PUSH4 0x41C61383 EQ PUSH2 0x3F0 JUMPI DUP1 PUSH4 0x4641257D EQ PUSH2 0x405 JUMPI PUSH2 0x2B5 JUMP JUMPDEST DUP1 PUSH3 0x65318B EQ PUSH2 0x2BA JUMPI DUP1 PUSH4 0x8560ACE EQ PUSH2 0x2FF JUMPI DUP1 PUSH4 0x10D0FFDD EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x33E JUMPI DUP1 PUSH4 0x1924063E EQ PUSH2 0x353 JUMPI PUSH2 0x2B5 JUMP JUMPDEST CALLDATASIZE PUSH2 0x2B5 JUMPI PUSH1 0x5 SLOAD PUSH2 0x27A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE PUSH2 0x90D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLVALUE DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP3 ADD MSTORE DUP2 MLOAD CALLER SWAP3 PUSH32 0x3C2BD1B3F5CA07AFB09FBEE41AC43DA2B98D9C2E9832673052E546BD1D4C091D SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG2 STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x9F7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0xA30 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xA36 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0xA75 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0xA7B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x374 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0xA81 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x389 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xA87 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3DC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xC0F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0xCDA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A7 PUSH2 0xCE0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x426 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0xE4D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0xE7C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x467 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xE82 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x483 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A7 PUSH2 0xE9D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x498 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A1 PUSH2 0xF49 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0xF58 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3DC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xF5E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x535 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x525 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1073 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH2 0x1C0 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x55B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x543 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0x11EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0x11EF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A1 PUSH2 0x1216 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0x1225 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A1 PUSH2 0x1235 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0x1244 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3DC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x60F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x124A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x631 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0x1270 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x646 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0x12EC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x65B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x672 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x12F2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x685 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x69C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x131C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0x1328 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6CD PUSH2 0x132E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A1 PUSH2 0x1337 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x704 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x71B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1346 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x72E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x745 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x136C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x761 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x778 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1379 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x78B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0x1478 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x147E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A7 PUSH2 0x1580 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3DC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x81A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x82C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x84E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x159F SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x898 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x182C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x8E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x188F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x904 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH2 0x199A JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x962 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9AD JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9B2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x9F2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x3A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2339 PUSH1 0x3A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x14 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD PUSH1 0x12 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP3 SWAP2 MUL SUB DIV SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x11 SLOAD DUP3 GT ISZERO PUSH2 0xA47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x0 PUSH2 0xA5E PUSH2 0xA57 DUP4 DUP4 PUSH2 0x19AB JUMP JUMPDEST PUSH1 0x64 PUSH2 0x1A04 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA6C DUP4 DUP4 PUSH2 0x1A6B JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x11 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x10 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xF SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA91 PUSH2 0x1225 JUMP JUMPDEST GT PUSH2 0xA9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0xAB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH2 0xAC5 DUP5 DUP4 PUSH2 0x19AB JUMP JUMPDEST DUP2 PUSH2 0xACC JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 SWAP1 POP PUSH1 0x0 PUSH2 0xADF DUP5 DUP4 PUSH2 0x1A6B JUMP JUMPDEST SWAP1 POP PUSH2 0xAED PUSH1 0x11 SLOAD DUP6 PUSH2 0x1A6B JUMP JUMPDEST PUSH1 0x11 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xB13 SWAP1 DUP6 PUSH2 0x1A6B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x12 SLOAD PUSH1 0x13 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 DUP1 SLOAD SWAP2 DUP7 MUL PUSH1 0x1 PUSH1 0x40 SHL DUP5 MUL ADD SWAP2 DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0xB59 DUP4 PUSH2 0x1AC8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE TIMESTAMP DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH32 0x90EBB005D68EFEE044927E1E77E1FD0CECC508368AA72C39250A787EED5F0A70 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x14 DUP5 MSTORE SWAP5 DUP3 SWAP1 KECCAK256 SLOAD SWAP4 DUP4 MSTORE PUSH1 0x1 ADD SLOAD DUP2 MLOAD SWAP5 DUP6 MSTORE SWAP2 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x60 DUP4 ADD MSTORE MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2319 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG2 PUSH2 0xC08 PUSH2 0x1B56 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0xCBB JUMPI PUSH1 0x6 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xC2C JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 ADD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP5 POP DUP5 SWAP3 PUSH4 0x70A08231 SWAP3 PUSH1 0x24 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC96 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xCAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP3 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xC15 JUMP JUMPDEST POP PUSH1 0x3 SLOAD DUP3 LT PUSH2 0xCD0 JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0xA2B JUMP JUMPDEST POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCEA PUSH2 0x199A JUMP JUMPDEST GT PUSH2 0xCF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 PUSH2 0xCFF PUSH2 0x199A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP9 MUL ADD SWAP1 SSTORE PUSH1 0x2 SLOAD DUP2 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x24 DUP6 ADD DUP8 SWAP1 MSTORE SWAP1 MLOAD SWAP6 SWAP7 POP SWAP1 SWAP4 AND SWAP4 PUSH4 0xA9059CBB SWAP4 PUSH1 0x44 DUP1 DUP6 ADD SWAP5 SWAP2 SWAP4 SWAP2 DUP4 SWAP1 SUB ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD87 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xDC5 SWAP1 DUP3 PUSH2 0x1C4C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x1 DUP1 DUP3 ADD SWAP6 SWAP1 SWAP6 SSTORE PUSH1 0xB ADD DUP1 SLOAD DUP6 ADD SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD SWAP1 SWAP5 ADD SWAP1 SWAP4 SSTORE PUSH1 0xA DUP1 SLOAD DUP6 ADD SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE TIMESTAMP SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP1 MLOAD SWAP2 SWAP3 PUSH32 0x1B091269E929DF55D64D6EA7E9CADBE4FB38DCE5CCDC995767BC515030DBFBBF SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 PUSH2 0xE49 PUSH2 0x1B56 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0xE66 PUSH2 0xA57 DUP4 DUP4 PUSH2 0x19AB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE74 DUP4 DUP4 PUSH2 0x1A6B JUMP JUMPDEST SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xEA5 PUSH2 0x1CA6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xEB6 PUSH2 0x1216 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xEFF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2394 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF68 PUSH2 0x1CA6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xF79 PUSH2 0x1216 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xFC2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2394 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xFCC DUP4 DUP4 PUSH2 0x1C4C JUMP JUMPDEST PUSH1 0x3 EQ PUSH2 0x1020 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54454E5F504F5254494F4E535F524551554952455F4449564953494F4E000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xE DUP4 SWAP1 SSTORE PUSH1 0xF DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE TIMESTAMP DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH32 0x677017FA3A0FE0F50A95E6024C5B688F2B14A4696C4A897C459715CABFC1C03A SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x107B PUSH2 0x21EA JUMP JUMPDEST PUSH2 0x1083 PUSH2 0x2209 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH2 0x1C0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 DUP3 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 DUP3 ADD SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 DUP3 ADD SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 DUP3 ADD SLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH1 0x9 DUP3 ADD SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xA DUP3 ADD SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xB DUP3 ADD SLOAD PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0xC DUP3 ADD SLOAD PUSH2 0x180 DUP3 ADD MSTORE PUSH1 0xD SWAP1 SWAP2 ADD SLOAD PUSH2 0x1A0 DUP3 ADD MSTORE PUSH2 0x1142 PUSH2 0x21EA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 DUP4 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x60 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x40 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x80 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0xA0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0xC0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0xE0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x120 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x140 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x160 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x180 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x1A0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x100 ADD MLOAD DUP2 MSTORE POP SWAP1 POP DUP1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x1208 PUSH2 0xA57 DUP4 DUP4 PUSH2 0x19AB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE74 DUP4 DUP4 PUSH2 0x1C4C JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1230 CALLER PUSH2 0xE82 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1255 PUSH2 0x1225 JUMP JUMPDEST GT PUSH2 0x125F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1269 DUP4 DUP4 PUSH2 0x1CAA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12CF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x12E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH1 0x6 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1302 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x106D CALLER DUP4 PUSH2 0x188F JUMP JUMPDEST PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1356 PUSH2 0xA57 DUP5 DUP4 PUSH2 0x19AB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1364 DUP5 DUP4 PUSH2 0x1A6B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x23B872DD SWAP2 PUSH1 0x64 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP8 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x13E6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x13FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x1407 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xC DUP1 SLOAD DUP4 ADD SWAP1 SSTORE CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0xA DUP2 ADD DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE PUSH1 0x4 ADD DUP1 SLOAD DUP7 ADD SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE TIMESTAMP SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 MLOAD PUSH32 0xDA1788C3E861A58A47F0D46073B13C4D66EFCC259714744F920D1AFE7B8DEE5 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 POP POP PUSH1 0xC SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1486 PUSH2 0x1CA6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1497 PUSH2 0x1216 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x14E0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2394 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1525 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x22F3 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x158A PUSH2 0x199A JUMP JUMPDEST GT PUSH2 0x1594 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x159C PUSH2 0x1F15 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15A9 PUSH2 0x1CA6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x15BA PUSH2 0x1216 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1603 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2394 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0x16E0 JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x161C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1FFC9A7 PUSH4 0x80AC58CD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x166E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1682 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1698 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x16D8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x4E4F545F455243373231 PUSH1 0xB0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 ADD PUSH2 0x1606 JUMP JUMPDEST POP PUSH1 0x60 PUSH1 0x6 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1739 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x171B JUMPI JUMPDEST POP POP DUP7 MLOAD SWAP4 SWAP5 POP PUSH2 0x1755 SWAP4 PUSH1 0x6 SWAP4 POP PUSH1 0x20 DUP9 ADD SWAP3 POP SWAP1 POP PUSH2 0x2278 JUMP JUMPDEST POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xF0650831416F723858005CFEAE97A2D6F5E127D1E6AE8938574D1D73E7F4727C DUP3 DUP6 TIMESTAMP PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 SUB DUP4 MSTORE DUP7 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x17CE JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x17B6 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP4 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x180D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x17F5 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0xC SLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH2 0x1850 SWAP2 PUSH1 0x1 SWAP2 PUSH2 0x184A SWAP2 PUSH1 0xFF AND PUSH2 0x19AB JUMP JUMPDEST SWAP1 PUSH2 0x1A04 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x11 SLOAD GT PUSH2 0x1863 JUMPI PUSH1 0x0 PUSH2 0x1269 JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1269 SWAP2 SWAP1 PUSH2 0x184A SWAP1 DUP5 SWAP1 PUSH2 0x19AB JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x23B872DD SWAP2 PUSH1 0x64 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP8 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x18FC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1912 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x191D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xB DUP1 SLOAD DUP4 ADD SWAP1 SSTORE PUSH1 0x0 PUSH2 0x1931 DUP5 DUP5 PUSH2 0x204B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x14 DUP5 MSTORE SWAP5 DUP3 SWAP1 KECCAK256 SLOAD SWAP4 DUP4 MSTORE PUSH1 0x1 ADD SLOAD DUP2 MLOAD SWAP5 DUP6 MSTORE SWAP2 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x60 DUP4 ADD MSTORE MLOAD SWAP3 SWAP4 POP SWAP1 SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2319 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG2 PUSH2 0x1269 PUSH2 0x1B56 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1230 CALLER PUSH2 0x9F7 JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x19BA JUMPI POP PUSH1 0x0 PUSH2 0x106D JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x19C7 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1269 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2373 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x1A5A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x1A63 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1AC2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AD5 DUP3 PUSH1 0xA PUSH2 0x1A04 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1AEE PUSH1 0xE SLOAD DUP4 PUSH2 0x19AB SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B07 PUSH1 0xF SLOAD DUP5 PUSH2 0x19AB SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC SLOAD SWAP1 SWAP2 POP PUSH2 0x1B17 SWAP1 DUP4 PUSH2 0x1C4C JUMP JUMPDEST PUSH1 0xC SSTORE PUSH1 0x11 SLOAD ISZERO PUSH2 0x1B47 JUMPI PUSH2 0x1B3F PUSH1 0x12 SLOAD PUSH1 0x11 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP5 MUL DUP2 PUSH2 0x1B39 JUMPI INVALID JUMPDEST DIV PUSH2 0x1C4C JUMP JUMPDEST PUSH1 0x12 SSTORE PUSH2 0x1B50 JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x10 SLOAD TIMESTAMP SWAP1 PUSH1 0x2 SWAP1 PUSH2 0x1B69 SWAP1 DUP4 SWAP1 PUSH2 0x21CF JUMP JUMPDEST GT ISZERO PUSH2 0x1BB5 JUMPI PUSH32 0x2CFCE469A63F2E9972B7F23DA751E6943ED2B091C10E40B5C43B5F6105BF20EA PUSH2 0x1B98 PUSH2 0x1270 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP5 SWAP1 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG1 PUSH1 0x10 DUP2 SWAP1 SSTORE JUMPDEST PUSH1 0x2 PUSH2 0x1BC3 DUP3 PUSH1 0x9 SLOAD PUSH2 0x21CF JUMP JUMPDEST GT DUP1 ISZERO PUSH2 0x1BD2 JUMPI POP PUSH1 0x0 PUSH1 0x11 SLOAD GT JUMPDEST ISZERO PUSH2 0x159C JUMPI PUSH1 0xD SLOAD PUSH1 0xC SLOAD PUSH1 0x0 SWAP2 PUSH2 0x1BFB SWAP2 PUSH3 0x15180 SWAP2 PUSH2 0x184A SWAP2 PUSH1 0x1 SWAP2 DUP4 SWAP2 SWAP1 PUSH1 0xFF AND PUSH2 0x19AB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1C14 PUSH1 0x9 SLOAD DUP5 PUSH2 0x21CF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC SLOAD SWAP1 DUP4 MUL SWAP2 POP PUSH2 0x1C26 SWAP1 DUP3 PUSH2 0x21CF JUMP JUMPDEST PUSH1 0xC SSTORE PUSH1 0x12 SLOAD PUSH1 0x11 SLOAD PUSH2 0x1C42 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x40 SHL DUP5 MUL DUP2 PUSH2 0x1B39 JUMPI INVALID JUMPDEST PUSH1 0x12 SSTORE POP POP PUSH1 0x9 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x1269 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST CALLER SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 GT ISZERO PUSH2 0x1CC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1CD3 PUSH2 0x199A JUMP JUMPDEST GT ISZERO PUSH2 0x1CE1 JUMPI PUSH2 0x1CE1 PUSH2 0xCE0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1D04 SWAP1 DUP5 PUSH2 0x1A6B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP7 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x1D33 SWAP1 DUP5 PUSH2 0x1C4C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP6 SWAP1 SWAP6 SSTORE PUSH1 0x12 DUP1 SLOAD SWAP5 DUP8 AND DUP4 MSTORE PUSH1 0x13 DUP3 MSTORE DUP6 DUP4 KECCAK256 DUP1 SLOAD SWAP6 DUP11 MUL SWAP1 SWAP6 SUB SWAP1 SWAP5 SSTORE SWAP3 SLOAD SWAP2 DUP2 MSTORE DUP4 DUP2 KECCAK256 DUP1 SLOAD SWAP3 DUP9 MUL SWAP1 SWAP3 ADD SWAP1 SWAP2 SSTORE PUSH1 0x15 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD ISZERO DUP1 ISZERO PUSH2 0x1DAE JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x6 ADD SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x1DBD JUMPI PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0xC DUP2 ADD DUP1 SLOAD PUSH1 0x1 SWAP1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH1 0x5 SWAP1 SWAP2 ADD DUP1 SLOAD DUP11 ADD SWAP1 SSTORE SWAP5 DUP10 AND DUP1 DUP5 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 PUSH1 0x6 DUP2 ADD DUP1 SLOAD DUP11 ADD SWAP1 SSTORE PUSH1 0xD ADD DUP1 SLOAD DUP7 ADD SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD SWAP1 SWAP6 ADD SWAP1 SWAP5 SSTORE DUP4 MLOAD DUP8 DUP2 MSTORE TIMESTAMP SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD SWAP2 SWAP4 PUSH32 0x91C7D71A3AE3FB7CF61E00517BF4868E9E23D0BACE5E304CBC3B68DE5D85350E SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x14 DUP5 MSTORE SWAP5 DUP3 SWAP1 KECCAK256 SLOAD SWAP4 DUP4 MSTORE PUSH1 0x1 ADD SLOAD DUP2 MLOAD SWAP5 DUP6 MSTORE SWAP2 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x60 DUP4 ADD MSTORE MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2319 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x14 DUP5 MSTORE SWAP5 DUP3 SWAP1 KECCAK256 SLOAD SWAP4 DUP4 MSTORE PUSH1 0x1 ADD SLOAD DUP2 MLOAD SWAP5 DUP6 MSTORE SWAP2 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x60 DUP4 ADD MSTORE MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2319 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG2 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x1F22 DUP3 PUSH2 0x9F7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP5 MUL ADD SWAP1 SSTORE SWAP1 SWAP2 POP PUSH2 0x1F53 CALLER DUP4 PUSH2 0x204B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE TIMESTAMP DUP2 DUP4 ADD MSTORE SWAP1 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 PUSH32 0x193A876AC91D11A4A0A71EBEF73B195BA55AA7C16D6755C93C21D973E692A02C SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x1FC6 SWAP1 DUP4 PUSH2 0x1C4C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x2 DUP2 ADD SWAP7 SWAP1 SWAP7 SSTORE PUSH1 0x8 DUP7 ADD DUP1 SLOAD PUSH1 0x1 SWAP1 DUP2 ADD SWAP1 SWAP2 SSTORE DUP7 SLOAD PUSH1 0x14 DUP5 MSTORE SWAP5 DUP3 SWAP1 KECCAK256 SLOAD SWAP4 DUP4 MSTORE SWAP1 SWAP6 ADD SLOAD DUP6 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 DUP5 ADD MSTORE TIMESTAMP PUSH1 0x60 DUP3 ADD MSTORE SWAP2 MLOAD SWAP1 SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2319 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG2 PUSH2 0x2044 PUSH2 0x1B56 JUMP JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO DUP1 ISZERO PUSH2 0x208A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x6 ADD SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x2099 JUMPI PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE PUSH1 0x0 PUSH1 0x64 PUSH2 0x20B0 DUP5 DUP4 PUSH2 0x19AB JUMP JUMPDEST DUP2 PUSH2 0x20B7 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH2 0x20C6 DUP5 DUP4 PUSH2 0x1A6B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE TIMESTAMP DUP2 DUP4 ADD MSTORE SWAP1 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP2 PUSH32 0xB49BB132260F6AA1C86E2D2A3957C097216E6EC9B5FA15867289F058B4D297AC SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG2 PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x212D JUMPI POP PUSH1 0x11 SLOAD PUSH2 0x212B DUP3 DUP3 PUSH2 0x1C4C JUMP JUMPDEST GT JUMPDEST PUSH2 0x2136 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x11 SLOAD ISZERO PUSH2 0x214B JUMPI PUSH1 0x11 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE PUSH2 0x2151 JUMP JUMPDEST PUSH1 0x11 DUP2 SWAP1 SSTORE JUMPDEST PUSH2 0x215A DUP3 PUSH2 0x1AC8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x217D SWAP1 DUP3 PUSH2 0x1C4C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x12 SLOAD PUSH1 0x13 DUP3 MSTORE DUP4 DUP4 KECCAK256 DUP1 SLOAD SWAP2 DUP7 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SSTORE PUSH1 0x15 SWAP1 MSTORE KECCAK256 DUP1 SLOAD DUP6 ADD DUP2 SSTORE PUSH1 0x7 ADD DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x21E1 JUMPI POP PUSH1 0x0 PUSH2 0x106D JUMP JUMPDEST POP DUP1 DUP3 SUB PUSH2 0x106D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x22CD JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x22CD JUMPI DUP3 MLOAD DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x2298 JUMP JUMPDEST POP PUSH2 0x22D9 SWAP3 SWAP2 POP PUSH2 0x22DD JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x22D9 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x22DE JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F206164647265737329F64F6F46C82C5ECFA955FE7D093E63 0xB4 LT PUSH12 0x6DBE5193E00EFD62C7384EF1 PUSH24 0x416464726573733A20756E61626C6520746F2073656E6420 PUSH23 0x616C75652C20726563697069656E74206D617920686176 PUSH6 0x207265766572 PUSH21 0x6564536166654D6174683A206D756C7469706C6963 PUSH2 0x7469 PUSH16 0x6E206F766572666C6F774F776E61626C PUSH6 0x3A2063616C6C PUSH6 0x72206973206E PUSH16 0x7420746865206F776E6572A264697066 PUSH20 0x58221220C4AF3C69537B0D4A49627AA93C92A3F3 PUSH21 0x7D74B27D835ADBE424730631EE0A9764736F6C6343 STOP SMOD DIV STOP CALLER ",
							"sourceMap": "237:21305:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5288:11;;5270:41;;-1:-1:-1;;;;;5288:11:2;5301:9;5270:17;:41::i;:::-;5326:51;;;5350:9;5326:51;;5361:15;5326:51;;;;;;5338:10;;5326:51;;;;;;;;237:21305;;;;;11053:240;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11053:240:2;-1:-1:-1;;;;;11053:240:2;;:::i;:::-;;;;;;;;;;;;;;;;587:30;;;;;;;;;;;;;:::i;12144:345::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12144:345:2;;:::i;10952:95::-;;;;;;;;;;;;;:::i;1702:29::-;;;;;;;;;;;;;:::i;1494:19::-;;;;;;;;;;;;;:::i;8130:1531::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8130:1531:2;;:::i;:::-;;10031:367;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10031:367:2;-1:-1:-1;;;;;10031:367:2;;:::i;:::-;;;;;;;;;;;;;;;;;;1102:23;;;;;;;;;;;;;:::i;7218:890::-;;;;;;;;;;;;;:::i;11299:266::-;;;;;;;;;;;;;:::i;877:20::-;;;;;;;;;;;;;:::i;10610:105::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10610:105:2;-1:-1:-1;;;;;10610:105:2;;:::i;1710:145:5:-;;;;;;;;;;;;;:::i;394:26:2:-;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;394:26:2;;;;;;;;;;;;;;1131:25;;;;;;;;;;;;;:::i;13501:409::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13501:409:2;;;;;;;:::i;12495:597::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12495:597:2;-1:-1:-1;;;;;12495:597:2;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1612:51;;;;;;;;;;;;;:::i;11571:264::-;;;;;;;;;;;;;:::i;1078:85:5:-;;;;;;;;;;;;;:::i;10404:95:2:-;;;;;;;;;;;;;:::i;699:27::-;;;;;;;;;;;;;:::i;1469:19::-;;;;;;;;;;;;;:::i;9683:159::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;9683:159:2;;;;;;;;:::i;10831:115::-;;;;;;;;;;;;;:::i;1213:27::-;;;;;;;;;;;;;:::i;772:21::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;772:21:2;;:::i;6127:110::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6127:110:2;;:::i;975:22::-;;;;;;;;;;;;;:::i;1246:21::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;732:34;;;;;;;;;;;;;:::i;11841:297::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11841:297:2;;:::i;10721:104::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10721:104:2;-1:-1:-1;;;;;10721:104:2;;:::i;5530:576::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5530:576:2;;:::i;854:17::-;;;;;;;;;;;;;:::i;2004:240:5:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2004:240:5;-1:-1:-1;;;;;2004:240:5;;:::i;7124:73:2:-;;;;;;;;;;;;;:::i;13972:524::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13972:524:2;;-1:-1:-1;13972:524:2;;-1:-1:-1;;;;;13972:524:2:i;13098:281::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13098:281:2;-1:-1:-1;;;;;13098:281:2;;:::i;6260:842::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;6260:842:2;;;;;;;;:::i;10505:99::-;;;;;;;;;;;;;:::i;2056:391:0:-;2170:6;2145:21;:31;;2137:73;;;;;-1:-1:-1;;;2137:73:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;2317:35;;2299:12;;-1:-1:-1;;;;;2317:14:0;;;2340:6;;2299:12;2317:35;2299:12;2317:35;2340:6;2317:14;:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2298:54;;;2370:7;2362:78;;;;-1:-1:-1;;;2362:78:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2056:391;;;:::o;11053:240:2:-;-1:-1:-1;;;;;11243:17:2;;11110:7;11243:17;;;:10;:17;;;;;;;;;11202:10;:17;;;;;;11184:15;;-1:-1:-1;;;1394:7:2;11184:35;;11175:85;11148:138;11129:157;;11053:240;;;;:::o;587:30::-;;;;:::o;12144:345::-;12229:7;12267:18;;12256:7;:29;;12248:38;;;;;;12314:7;12296:15;12349:49;12362:30;12314:7;12296:15;12362:12;:30::i;:::-;12394:3;12349:12;:49::i;:::-;12331:67;;12408:16;12427:30;12440:7;12449;12427:12;:30::i;:::-;12408:49;12144:345;-1:-1:-1;;;;;12144:345:2:o;10952:95::-;11022:18;;10952:95;:::o;1702:29::-;;;;:::o;1494:19::-;;;;:::o;8130:1531::-;2107:1;2094:10;:8;:10::i;:::-;:14;2086:23;;;;;;8210:10:::1;8194:13;8249:17:::0;;;:10:::1;:17;::::0;;;;;8238:28;::::1;;8230:37;;;::::0;::::1;;8278:27;8341:3;8308:30;8321:7:::0;8278:27;8308:12:::1;:30::i;:::-;:36;;;;;;8278:66;;8564:1;8542:23;;8647:21;8671:42;8684:7;8693:19;8671:12;:42::i;:::-;8647:66;;8744:41;8757:18;;8777:7;8744:12;:41::i;:::-;8723:18;:62:::0;-1:-1:-1;;;;;8828:17:2;::::1;;::::0;;;:10:::1;:17;::::0;;;;;8815:40:::1;::::0;8847:7;8815:12:::1;:40::i;:::-;-1:-1:-1::0;;;;;8795:17:2;::::1;;::::0;;;:10:::1;:17;::::0;;;;;;;:60;;;;8984:15:::1;::::0;9058:10:::1;:17:::0;;;;;;:36;;8984:25;;::::1;-1:-1:-1::0;;;9013:24:2;::::1;8984:54;9058:36:::0;;;::::1;::::0;;9175:33:::1;9188:19:::0;9175:12:::1;:33::i;:::-;9280:57;::::0;;;;;::::1;::::0;::::1;::::0;;;9321:15:::1;9280:57:::0;;;;;;-1:-1:-1;;;;;9280:57:2;::::1;::::0;::::1;::::0;;;;;;;;::::1;-1:-1:-1::0;;;;;9390:179:2;::::1;9431:17;::::0;;;:10:::1;:17;::::0;;;;;;;:27;;9472:10:::1;:17:::0;;;;;;;9503;;;:27:::1;;::::0;9390:179;;;;;;;::::1;::::0;;;;;;;;9544:15:::1;9390:179:::0;;;;;-1:-1:-1;;;;;;;;;;;9390:179:2;;;;;;;::::1;9638:12;:10;:12::i;:::-;2119:1;;;;8130:1531:::0;:::o;10031:367::-;10090:13;;;;10165:135;10184:4;:11;10180:15;;10165:135;;;10235:4;10240:1;10235:7;;;;;;;;;;;;;;;;;;;10263:26;;;-1:-1:-1;;;10263:26:2;;-1:-1:-1;;;;;10263:26:2;;;;;;;;;10235:7;;;;;-1:-1:-1;10235:7:2;;10263:19;;:26;;;;;;;;;;;10235:7;10263:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10263:26:2;10258:31;;;;;10197:3;;10165:135;;;;10317:15;;10312:1;:20;10308:62;;10355:4;10348:11;;;;;;10308:62;-1:-1:-1;10386:5:2;;10031:367;-1:-1:-1;;;10031:367:2:o;1102:23::-;;;;:::o;7218:890::-;2242:1;2227:12;:10;:12::i;:::-;:16;2219:25;;;;;;7282:10:::1;7266:13;7323:12;:10;:12::i;:::-;-1:-1:-1::0;;;;;7429:17:2;;::::1;;::::0;;;:10:::1;:17;::::0;;;;;;;:53;;-1:-1:-1;;;7459:22:2;::::1;7429:53;::::0;;7546:12:::1;::::0;:40;;-1:-1:-1;;;7546:40:2;;::::1;::::0;::::1;::::0;;;;;;;;;;;;7302:33;;-1:-1:-1;7546:12:2;;::::1;::::0;:21:::1;::::0;:40;;;;;7429:17;;7546:40;;;;;;;;:12;:40;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;;;;;;;7717:17:2;::::1;;::::0;;;:10:::1;7546:40;7717:17:::0;;;;:27:::1;;::::0;7691:87:::1;::::0;7758:10;7691:12:::1;:87::i;:::-;-1:-1:-1::0;;;;;7661:17:2;::::1;;::::0;;;:10:::1;:17;::::0;;;;;;;;:27:::1;::::0;;::::1;:117:::0;;;;7788:28:::1;;:33:::0;;;::::1;::::0;;7878:8:::1;:13:::0;;;;::::1;::::0;;;7901:11:::1;:25:::0;;;::::1;::::0;;7973:46;;;;;8003:15:::1;7973:46:::0;;::::1;::::0;;;;;;7661:17;;7973:46:::1;::::0;;;;;;;;;::::1;8089:12;:10;:12::i;:::-;2254:1;;7218:890::o:0;11299:266::-;11342:7;11379:4;11342:7;11414:49;11427:30;11379:4;11342:7;11427:12;:30::i;11414:49::-;11393:70;;11473:20;11496:33;11509:7;11518:10;11496:12;:33::i;:::-;11473:56;-1:-1:-1;;;;11299:266:2;:::o;877:20::-;;;;:::o;10610:105::-;-1:-1:-1;;;;;10691:17:2;10665:7;10691:17;;;:10;:17;;;;;;;10610:105::o;1710:145:5:-;1301:12;:10;:12::i;:::-;-1:-1:-1;;;;;1290:23:5;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1290:23:5;;1282:68;;;;;-1:-1:-1;;;1282:68:5;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1282:68:5;;;;;;;;;;;;;;;1816:1:::1;1800:6:::0;;1779:40:::1;::::0;-1:-1:-1;;;;;1800:6:5;;::::1;::::0;1779:40:::1;::::0;1816:1;;1779:40:::1;1846:1;1829:19:::0;;-1:-1:-1;;;;;;1829:19:5::1;::::0;;1710:145::o;394:26:2:-;;;-1:-1:-1;;;;;394:26:2;;:::o;1131:25::-;;;;:::o;13501:409::-;13600:13;1301:12:5;:10;:12::i;:::-;-1:-1:-1;;;;;1290:23:5;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1290:23:5;;1282:68;;;;;-1:-1:-1;;;1282:68:5;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1282:68:5;;;;;;;;;;;;;;;13633:16:2::1;:5:::0;13643;13633:9:::1;:16::i;:::-;13653:1;13633:21;13625:63;;;::::0;;-1:-1:-1;;;13625:63:2;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;13732:7;:15:::0;;;13757:7:::1;:15:::0;;;13838:44:::1;::::0;;;;;::::1;::::0;::::1;::::0;;;13866:15:::1;13838:44:::0;;;;;;::::1;::::0;;;;;;;::::1;-1:-1:-1::0;13899:4:2::1;1360:1:5;13501:409:2::0;;;;:::o;12495:597::-;12550:18;;:::i;:::-;12580:16;;:::i;:::-;-1:-1:-1;;;;;;12599:17:2;;;;;;:10;:17;;;;;;;;;12580:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12626:31;;:::i;:::-;:430;;;;;;;;12674:1;:11;;;12626:430;;;;12699:1;:11;;;12626:430;;;;12724:1;:10;;;12626:430;;;;12748:1;:12;;;12626:430;;;;12774:1;:13;;;12626:430;;;;12801:1;:19;;;12626:430;;;;12834:1;:16;;;12626:430;;;;12864:1;:11;;;12626:430;;;;12889:1;:11;;;12626:430;;;;12914:1;:14;;;12626:430;;;;12942:1;:12;;;12626:430;;;;12968:1;:20;;;12626:430;;;;13002:1;:17;;;12626:430;;;;13033:1;:13;;;12626:430;;;;;13073:12;13066:19;;;;12495:597;;;:::o;1612:51::-;1654:9;1612:51;:::o;11571:264::-;11612:7;11649:4;11612:7;11684:49;11697:30;11649:4;11612:7;11697:12;:30::i;11684:49::-;11663:70;;11743:20;11766:33;11779:7;11788:10;11766:12;:33::i;1078:85:5:-;1124:7;1150:6;-1:-1:-1;;;;;1150:6:5;1078:85;:::o;10404:95:2:-;10445:7;10471:21;10481:10;10471:9;:21::i;:::-;10464:28;;10404:95;:::o;699:27::-;;;-1:-1:-1;;;;;699:27:2;;:::o;1469:19::-;;;;:::o;9683:159::-;9783:4;2107:1;2094:10;:8;:10::i;:::-;:14;2086:23;;;;;;9806:29:::1;9822:3;9827:7;9806:15;:29::i;:::-;9799:36:::0;9683:159;-1:-1:-1;;;9683:159:2:o;10831:115::-;10902:12;;:37;;;-1:-1:-1;;;10902:37:2;;10933:4;10902:37;;;;;;10876:7;;-1:-1:-1;;;;;10902:12:2;;:22;;:37;;;;;;;;;;;;;;:12;:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10902:37:2;;-1:-1:-1;10831:115:2;:::o;1213:27::-;;;;:::o;772:21::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;772:21:2;;-1:-1:-1;772:21:2;:::o;6127:110::-;6174:7;6200:30;6210:10;6222:7;6200:9;:30::i;975:22::-;;;;:::o;1246:21::-;;;;;;:::o;732:34::-;;;-1:-1:-1;;;;;732:34:2;;:::o;11841:297::-;11926:7;;11963:49;11976:30;11989:7;11926;11976:12;:30::i;11963:49::-;11945:67;;12022:16;12041:30;12054:7;12063;12041:12;:30::i;:::-;12022:49;11841:297;-1:-1:-1;;;;11841:297:2:o;10721:104::-;-1:-1:-1;;;;;10805:13:2;;;10721:104::o;5530:576::-;5673:12;;:61;;;-1:-1:-1;;;5673:61:2;;5699:10;5673:61;;;;5719:4;5673:61;;;;;;;;;;;;5576:7;;-1:-1:-1;;;;;5673:12:2;;:25;;:61;;;;;;;;;;;;;;5576:7;5673:12;:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5673:61:2;5665:70;;;;;;5797:15;:26;;;;;;5844:10;5797:15;5833:22;;;:10;:22;;;;;;;;;:35;;;:40;;-1:-1:-1;5833:40:2;;;5883:34;;:45;;;;;;6021:46;;;;;6051:15;6021:46;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6084:15:2;;;5530:576::o;854:17::-;;;;:::o;2004:240:5:-;1301:12;:10;:12::i;:::-;-1:-1:-1;;;;;1290:23:5;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1290:23:5;;1282:68;;;;;-1:-1:-1;;;1282:68:5;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1282:68:5;;;;;;;;;;;;;;;-1:-1:-1;;;;;2092:22:5;::::1;2084:73;;;;-1:-1:-1::0;;;2084:73:5::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2193:6;::::0;;2172:38:::1;::::0;-1:-1:-1;;;;;2172:38:5;;::::1;::::0;2193:6;::::1;::::0;2172:38:::1;::::0;::::1;2220:6;:17:::0;;-1:-1:-1;;;;;;2220:17:5::1;-1:-1:-1::0;;;;;2220:17:5;;;::::1;::::0;;;::::1;::::0;;2004:240::o;7124:73:2:-;2242:1;2227:12;:10;:12::i;:::-;:16;2219:25;;;;;;7173:17:::1;:15;:17::i;:::-;;7124:73::o:0;13972:524::-;14066:13;1301:12:5;:10;:12::i;:::-;-1:-1:-1;;;;;1290:23:5;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1290:23:5;;1282:68;;;;;-1:-1:-1;;;1282:68:5;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1282:68:5;;;;;;;;;;;;;;;14091:6:2::1;14087:166;14106:4;:11:::0;14102:15;::::1;14087:166;;;14185:9;14195:1;14185:12;;;;;;;;;;;;;;-1:-1:-1::0;;;;;14185:30:2::1;;14216:10;14185:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;14185:42:2;14177:65:::1;;;::::0;;-1:-1:-1;;;14177:65:2;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;14177:65:2;;;;;;;;;;;;;::::1;;14119:3;;14087:166;;;;14262:28;14293:4;14262:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;;-1:-1:-1;;;;;14262:35:2::1;::::0;;;;;::::1;::::0;::::1;;::::0;;::::1;;;;-1:-1:-1::0;;14307:16:2;;14262:35;;-1:-1:-1;14307:16:2::1;::::0;:4:::1;::::0;-1:-1:-1;14307:16:2::1;::::0;::::1;::::0;-1:-1:-1;14307:16:2;-1:-1:-1;14307:16:2::1;:::i;:::-;;14371:10;-1:-1:-1::0;;;;;14339:129:2::1;;14395:11;14420:9;14443:15;14339:129;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;;::::1;::::0;;;::::1;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;;::::1;::::0;;;::::1;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;14485:4:2::1;::::0;13972:524;-1:-1:-1;;13972:524:2:o;13098:281::-;13212:8;;13192:15;;13157:7;;;;13192:36;;13226:1;;13192:29;;13212:8;;13192:19;:29::i;:::-;:33;;:36::i;:::-;13176:52;;13279:1;13258:18;;:22;13257:115;;13371:1;13257:115;;;13333:18;;-1:-1:-1;;;;;13310:17:2;;;;;;:10;:17;;;;;;13300:52;;13333:18;13300:28;;:5;;:9;:28::i;6260:842::-;6421:12;;:61;;;-1:-1:-1;;;6421:61:2;;6447:10;6421:61;;;;6467:4;6421:61;;;;;;;;;;;;6324:7;;-1:-1:-1;;;;;6421:12:2;;:25;;:61;;;;;;;;;;;;;;6324:7;6421:12;:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6421:61:2;6413:70;;;;;;6545:13;:24;;;;;;:13;6646:30;6661:5;6562:7;6646:14;:30::i;:::-;-1:-1:-1;;;;;6729:179:2;;6770:17;;;;:10;:17;;;;;;;;:27;;6811:10;:17;;;;;;;6842;;;:27;;;6729:179;;;;;;;;;;;;;;;;6883:15;6729:179;;;;;6632:44;;-1:-1:-1;6729:179:2;;-1:-1:-1;;;;;;;;;;;6729:179:2;;;;;;;;6983:12;:10;:12::i;10505:99::-;10548:7;10574:23;10586:10;10574:11;:23::i;726:413:0:-;1086:20;1124:8;;;726:413::o;3538:215:8:-;3596:7;3619:6;3615:20;;-1:-1:-1;3634:1:8;3627:8;;3615:20;3657:5;;;3661:1;3657;:5;:1;3680:5;;;;;:10;3672:56;;;;-1:-1:-1;;;3672:56:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4217:150;4275:7;4306:1;4302;:5;4294:44;;;;;-1:-1:-1;;;4294:44:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;4359:1;4355;:5;;;;;;;4217:150;-1:-1:-1;;;4217:150:8:o;3136:155::-;3194:7;3226:1;3221;:6;;3213:49;;;;;-1:-1:-1;;;3213:49:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3279:5:8;;;3136:155::o;14666:737:2:-;14716:17;14736:11;:3;14744:2;14736:7;:11::i;:::-;14716:31;;14758:16;14778:22;14792:7;;14778:9;:13;;:22;;;;:::i;:::-;14758:43;;14832:16;14852:22;14866:7;;14852:9;:13;;:22;;;;:::i;:::-;14924:15;;14832:43;;-1:-1:-1;14924:29:2;;14944:8;14924:19;:29::i;:::-;14906:15;:47;15032:18;;:22;15028:369;;15136:120;15166:15;;15224:18;;-1:-1:-1;;;15200:8:2;:20;15199:43;;;;;;15136:12;:120::i;:::-;15118:15;:138;15028:369;;;15359:15;:27;;;;;;15028:369;14666:737;;;;:::o;15444:1240::-;15617:14;;15510:15;;1597:9;;15591:41;;15510:15;;15591:25;:41::i;:::-;:59;15587:278;;;15706:43;15715:14;:12;:14::i;:::-;15706:43;;;;;;;;;;;;;;;;;;;;;15820:14;:34;;;15587:278;1654:9;15937:47;15954:17;15973:10;;15937:16;:47::i;:::-;:65;:103;;;;;16039:1;16018:18;;:22;15937:103;15920:758;;;16148:8;;16128:15;;16112:13;;16128:80;;16186:8;;16128:36;;16162:1;;16128:36;;:15;16148:8;;16128:19;:29::i;:80::-;16112:96;;16222:14;16247:37;16273:10;;16247:17;:25;;:37;;;;:::i;:::-;16393:15;;16239:45;;;;-1:-1:-1;16393:31:2;;16239:45;16393:23;:31::i;:::-;16375:15;:49;16486:15;;16542:18;;16456:118;;16486:15;-1:-1:-1;;;16520:18:2;;16542;16519:41;;;16456:118;16438:15;:136;-1:-1:-1;;16637:10:2;:30;15444:1240::o;2690:175:8:-;2748:7;2779:5;;;2802:6;;;;2794:46;;;;;-1:-1:-1;;;2794:46:8;;;;;;;;;;;;;;;;;;;;;;;;;;;598:104:1;685:10;598:104;:::o;19571:1969:2:-;19716:10;19673:13;19755:19;;;:10;:19;;;;;;19673:13;;19716:10;19744:30;;;19736:39;;;;;;19890:1;19875:12;:10;:12::i;:::-;:16;19871:56;;;19907:9;:7;:9::i;:::-;-1:-1:-1;;;;;20004:19:2;;;;;;:10;:19;;;;;;19991:42;;20025:7;19991:12;:42::i;:::-;-1:-1:-1;;;;;19969:19:2;;;;;;;:10;:19;;;;;;:64;;;;20081:22;;;;;;;20068:45;;20105:7;20068:12;:45::i;:::-;-1:-1:-1;;;;;20043:22:2;;;;;;;:10;:22;;;;;;;;:70;;;;20217:15;;;20185:19;;;;;:10;:19;;;;;:58;;20217:25;;;20185:58;;;;;;20288:15;;20253:22;;;;;;:61;;20288:25;;;20253:61;;;;;;20417:10;:22;;;;:32;:37;:95;;;;-1:-1:-1;;;;;;20470:22:2;;;;;;:10;:22;;;;;:37;;;:42;20417:95;20400:158;;;20537:5;:10;;20546:1;20537:10;;;20400:158;-1:-1:-1;;;;;20594:19:2;;;;;;;:10;:19;;;;;;;;:38;;;:43;;20636:1;20594:43;;;;;;20647:37;;;;:48;;;;;;20705:22;;;;;;;;;;:37;;;:48;;;;;;20763:38;;:43;;;;;;20858:8;:13;;;;;;;;20937:57;;;;;20978:15;20937:57;;;;;;;;;20705:22;;20937:57;;;;;;;;;-1:-1:-1;;;;;21058:187:2;;21101:19;;;;:10;:19;;;;;;;;:29;;21144:10;:19;;;;;;;21177;;;:29;;;21058:187;;;;;;;;;;;;;;;;21220:15;21058:187;;;;;-1:-1:-1;;;;;;;;;;;21058:187:2;;;;;;;;-1:-1:-1;;;;;21312:199:2;;21358:22;;;;:10;:22;;;;;;;;:32;;21404:10;:22;;;;;;;21440;;;:32;;;21312:199;;;;;;;;;;;;;;;;21486:15;21312:199;;;;;-1:-1:-1;;;;;;;;;;;21312:199:2;;;;;;;;-1:-1:-1;21529:4:2;;19571:1969;-1:-1:-1;;;19571:1969:2:o;18346:1178::-;18391:7;18426:10;18391:7;18533:18;18426:10;18533:11;:18::i;:::-;-1:-1:-1;;;;;18561:17:2;;;;;;:10;:17;;;;;:53;;-1:-1:-1;;;18591:22:2;;18561:53;;;18512:39;;-1:-1:-1;18787:38:2;18802:10;18512:39;18787:14;:38::i;:::-;18872:55;;;;;;;;;;;;18911:15;18872:55;;;;;;18769:56;;-1:-1:-1;;;;;;18872:55:2;;;;;;;;;;;;-1:-1:-1;;;;;19031:17:2;;;;;;:10;:17;;;;;:28;;;19005:88;;19073:10;19005:12;:88::i;:::-;-1:-1:-1;;;;;18974:17:2;;;;;;:10;:17;;;;;;;;:28;;;:119;;;;19103:29;;;:34;;19136:1;19103:34;;;;;;19231:27;;19272:10;:17;;;;;;;19303;;;:27;;;;19190:179;;;;;;;;;;;;;;;;19344:15;19190:179;;;;;;18974:17;;-1:-1:-1;;;;;;;;;;;19190:179:2;;;;;;;;;19448:12;:10;:12::i;:::-;19510:7;-1:-1:-1;;;18346:1178:2;:::o;16730:1576::-;-1:-1:-1;;;;;16942:22:2;;16831:7;16942:22;;;:10;:22;;;;;:32;:37;:95;;;;-1:-1:-1;;;;;;16995:22:2;;;;;;:10;:22;;;;;:37;;;:42;16942:95;16925:158;;;17062:5;:10;;17071:1;17062:10;;;16925:158;17121:8;:13;;17133:1;17121:13;;;:8;17213:3;17180:30;17193:7;17121:8;17180:12;:30::i;:::-;:36;;;;;;17150:66;;17228:17;17248:42;17261:7;17270:19;17248:12;:42::i;:::-;17345:56;;;;;;;;;;;;17385:15;17345:56;;;;;;17228:62;;-1:-1:-1;;;;;;17345:56:2;;;;;;;;;;;;17510:1;17500:7;:11;:93;;;;-1:-1:-1;17575:18:2;;17531:41;17544:7;17575:18;17531:12;:41::i;:::-;:62;17500:93;17479:124;;;;;;17617:18;;:22;17613:141;;17655:18;:29;;;;;;17613:141;;;17715:18;:28;;;17613:141;17819:33;17832:19;17819:12;:33::i;:::-;-1:-1:-1;;;;;17900:22:2;;;;;;:10;:22;;;;;;17887:45;;17924:7;17887:12;:45::i;:::-;-1:-1:-1;;;;;17862:22:2;;;;;;:10;:22;;;;;;;;:70;;;;18007:15;;18071:10;:22;;;;;:41;;18007:25;;;18071:41;;;;;;18122:10;:22;;;:43;;;;;;18175:32;;:37;;-1:-1:-1;18175:37:2;;;18025:7;-1:-1:-1;;16730:1576:2;;;;:::o;7288:165:8:-;7344:4;7368:1;7364;:5;7360:87;;;-1:-1:-1;7392:1:8;7385:8;;7360:87;-1:-1:-1;7431:5:8;;;7424:12;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1838600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"accountOf(address)": "infinite",
								"balanceOf(address)": "1232",
								"bnbReceiver()": "1082",
								"buyPrice()": "infinite",
								"calculateSharesReceived(uint256)": "613",
								"calculateTokensReceived(uint256)": "1468",
								"checkImmunity(address)": "infinite",
								"compound()": "infinite",
								"dailyEstimate(address)": "infinite",
								"deposit(uint256)": "infinite",
								"depositTo(address,uint256)": "infinite",
								"dividendsOf(address)": "2900",
								"donate(uint256)": "infinite",
								"dripPoolBalance()": "1065",
								"dripRate()": "1168",
								"forDivs()": "1044",
								"forPool()": "1110",
								"harvest()": "infinite",
								"jpeg(uint256)": "2059",
								"lastPayout()": "1131",
								"lastRebaseTime()": "1133",
								"myEarnings()": "2984",
								"myTokens()": "1187",
								"owner()": "1083",
								"payoutFrequency()": "309",
								"rebaseFrequency()": "353",
								"renounceOwnership()": "infinite",
								"requiredBalance()": "1067",
								"sellPrice()": "553",
								"setFeeSplit(uint256,uint256)": "infinite",
								"setImmunityToken(address[])": "infinite",
								"stakingToken()": "1171",
								"tokenAddress()": "1127",
								"tokenBalance(address)": "1062",
								"totalBalance()": "infinite",
								"totalClaims()": "1110",
								"totalDeposits()": "1043",
								"totalSupply()": "1111",
								"totalTxs()": "1066",
								"transfer(address,uint256)": "infinite",
								"transferOwnership(address)": "infinite",
								"users()": "1131",
								"withdraw(uint256)": "infinite"
							},
							"internal": {
								"_compoundTokens()": "infinite",
								"_depositTokens(address,uint256)": "infinite",
								"_transferTokens(address,uint256)": "infinite",
								"allocateFees(uint256)": "infinite",
								"distribute()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 237,
									"end": 21542,
									"name": "PUSH",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 237,
									"end": 21542,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 237,
									"end": 21542,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "PUSHSIZE",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "CODESIZE",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "PUSHSIZE",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "tag",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 4539,
									"end": 5101,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 877,
									"end": 894,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 897,
									"end": 909,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "7"
								},
								{
									"begin": 897,
									"end": 907,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "8"
								},
								{
									"begin": 897,
									"end": 909,
									"name": "JUMP",
									"source": 5,
									"value": "[in]"
								},
								{
									"begin": 897,
									"end": 909,
									"name": "tag",
									"source": 5,
									"value": "7"
								},
								{
									"begin": 897,
									"end": 909,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 919,
									"end": 925,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 919,
									"end": 937,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 919,
									"end": 937,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 919,
									"end": 937,
									"name": "AND",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 919,
									"end": 937,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 919,
									"end": 937,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 919,
									"end": 937,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 919,
									"end": 937,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 919,
									"end": 937,
									"name": "OR",
									"source": 5
								},
								{
									"begin": 919,
									"end": 937,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 919,
									"end": 937,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 952,
									"end": 995,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 952,
									"end": 995,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 919,
									"end": 937,
									"name": "SWAP3",
									"source": 5
								},
								{
									"begin": 919,
									"end": 937,
									"name": "SWAP4",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 919,
									"end": 937,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 952,
									"end": 995,
									"name": "PUSH",
									"source": 5,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 952,
									"end": 995,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 919,
									"end": 925,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 919,
									"end": 925,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 952,
									"end": 995,
									"name": "LOG3",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1716,
									"end": 1717,
									"name": "PUSH",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1821,
									"end": 1843,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1821,
									"end": 1843,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 4632,
									"end": 4659,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 4632,
									"end": 4659,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 4632,
									"end": 4659,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 4632,
									"end": 4659,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 4632,
									"end": 4659,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 4632,
									"end": 4659,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4632,
									"end": 4696,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "12"
								},
								{
									"begin": 4632,
									"end": 4696,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 4632,
									"end": 4696,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 4663,
									"end": 4696,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "12"
								},
								{
									"begin": 4682,
									"end": 4695,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 4663,
									"end": 4681,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "13"
								},
								{
									"begin": 4663,
									"end": 4681,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 4663,
									"end": 4681,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": 4663,
									"end": 4681,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "18446744073709551825"
								},
								{
									"begin": 4663,
									"end": 4681,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 4663,
									"end": 4696,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 4663,
									"end": 4696,
									"name": "SHR",
									"source": 2
								},
								{
									"begin": 4663,
									"end": 4696,
									"name": "JUMP",
									"source": 2,
									"value": "[in]"
								},
								{
									"begin": 4663,
									"end": 4696,
									"name": "tag",
									"source": 2,
									"value": "12"
								},
								{
									"begin": 4663,
									"end": 4696,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "14"
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "461BCD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "PUSH",
									"source": 2,
									"value": "F"
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "PUSH",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "494E56414C49445F41444452455353"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "88"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "PUSH",
									"source": 2,
									"value": "44"
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "PUSH",
									"source": 2,
									"value": "64"
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "tag",
									"source": 2,
									"value": "14"
								},
								{
									"begin": 4611,
									"end": 4737,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 4748,
									"end": 4760,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 4748,
									"end": 4776,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 4748,
									"end": 4776,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 4748,
									"end": 4776,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4748,
									"end": 4776,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 4748,
									"end": 4776,
									"name": "AND",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 4748,
									"end": 4776,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 4748,
									"end": 4776,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 4748,
									"end": 4776,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 4748,
									"end": 4776,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 4748,
									"end": 4776,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 4748,
									"end": 4776,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4748,
									"end": 4776,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 4748,
									"end": 4776,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 4786,
									"end": 4798,
									"name": "PUSH",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 4786,
									"end": 4822,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 4786,
									"end": 4822,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 4786,
									"end": 4822,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 4786,
									"end": 4822,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 4786,
									"end": 4822,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4786,
									"end": 4822,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 4786,
									"end": 4822,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 4786,
									"end": 4822,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 4786,
									"end": 4822,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 4833,
									"end": 4844,
									"name": "PUSH",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 4833,
									"end": 4857,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 4833,
									"end": 4857,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 4833,
									"end": 4857,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4833,
									"end": 4857,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 4833,
									"end": 4857,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 4847,
									"end": 4857,
									"name": "CALLER",
									"source": 2
								},
								{
									"begin": 4833,
									"end": 4857,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 4833,
									"end": 4857,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4833,
									"end": 4857,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 4833,
									"end": 4857,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 4937,
									"end": 4945,
									"name": "PUSH",
									"source": 2,
									"value": "D"
								},
								{
									"begin": 4937,
									"end": 4957,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 4937,
									"end": 4957,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 4937,
									"end": 4957,
									"name": "PUSH",
									"source": 2,
									"value": "FF"
								},
								{
									"begin": 4937,
									"end": 4957,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4937,
									"end": 4957,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 4937,
									"end": 4957,
									"name": "AND",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FF"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 4937,
									"end": 4957,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4937,
									"end": 4957,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 4937,
									"end": 4957,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 4937,
									"end": 4957,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 4937,
									"end": 4957,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4937,
									"end": 4957,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 4937,
									"end": 4957,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 4937,
									"end": 4957,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4937,
									"end": 4957,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 4981,
									"end": 4996,
									"name": "TIMESTAMP",
									"source": 2
								},
								{
									"begin": 4967,
									"end": 4977,
									"name": "PUSH",
									"source": 2,
									"value": "9"
								},
								{
									"begin": 4967,
									"end": 4997,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 5032,
									"end": 5039,
									"name": "PUSH",
									"source": 2,
									"value": "E"
								},
								{
									"begin": 5032,
									"end": 5043,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 4748,
									"end": 4776,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 5053,
									"end": 5060,
									"name": "PUSH",
									"source": 2,
									"value": "F"
								},
								{
									"begin": 5053,
									"end": 5064,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 5053,
									"end": 5064,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 5053,
									"end": 5064,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 5075,
									"end": 5090,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 5075,
									"end": 5094,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 237,
									"end": 21542,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "15"
								},
								{
									"begin": 237,
									"end": 21542,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 598,
									"end": 702,
									"name": "tag",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 598,
									"end": 702,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 685,
									"end": 695,
									"name": "CALLER",
									"source": 1
								},
								{
									"begin": 598,
									"end": 702,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 598,
									"end": 702,
									"name": "JUMP",
									"source": 1,
									"value": "[out]"
								},
								{
									"begin": 726,
									"end": 1139,
									"name": "tag",
									"source": 0,
									"value": "13"
								},
								{
									"begin": 726,
									"end": 1139,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1086,
									"end": 1106,
									"name": "EXTCODESIZE",
									"source": 0
								},
								{
									"begin": 1124,
									"end": 1132,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 1124,
									"end": 1132,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 1124,
									"end": 1132,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 726,
									"end": 1139,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 237,
									"end": 21542,
									"name": "tag",
									"source": 2,
									"value": "15"
								},
								{
									"begin": 237,
									"end": 21542,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 237,
									"end": 21542,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 237,
									"end": 21542,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 237,
									"end": 21542,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 237,
									"end": 21542,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 237,
									"end": 21542,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 237,
									"end": 21542,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 237,
									"end": 21542,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220c4af3c69537b0d4a49627aa93c92a3f3747d74b27d835adbe424730631ee0a9764736f6c63430007040033",
									".code": [
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "8DA5CB5B"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "D7C3771D"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "F2FDE38B"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "F2FDE38B"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "F69E2046"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "F6DB0DA0"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "FBAF1BBD"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "FFAAD6A5"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "FFE6BBD8"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "tag",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "D7C3771D"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "E02E1E9C"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "EEDC966A"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "F14FAF6F"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "F2020275"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "tag",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "AD7A672F"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "AD7A672F"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "AECB6D28"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "B03CF5A7"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "B6B55F25"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "B9DB102A"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "D3261592"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "tag",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "8DA5CB5B"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "949E8ACD"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "9D76EA58"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "A01496DE"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "A9059CBB"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "tag",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "4B750334"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "7D882097"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "7D882097"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "7E6335C7"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "8086B8BA"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "81FCE645"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "8620410B"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "89375ABF"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "tag",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "4B750334"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "537A39BB"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "70A08231"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "715018A6"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "72F702F3"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "tag",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "1F38B9CD"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "1F38B9CD"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "2E1A7D4D"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "36599EAD"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "41C61383"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "4641257D"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "tag",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "65318B"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "8560ACE"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "10D0FFDD"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "18160DDD"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "1924063E"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "tag",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5288,
											"end": 5299,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 5288,
											"end": 5299,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5270,
											"end": 5311,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 5270,
											"end": 5311,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5288,
											"end": 5299,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5301,
											"end": 5310,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 5270,
											"end": 5287,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 5270,
											"end": 5311,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5270,
											"end": 5311,
											"name": "tag",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 5270,
											"end": 5311,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5326,
											"end": 5377,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5326,
											"end": 5377,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5326,
											"end": 5377,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5350,
											"end": 5359,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 5326,
											"end": 5377,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5326,
											"end": 5377,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5361,
											"end": 5376,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 5326,
											"end": 5377,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5326,
											"end": 5377,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5326,
											"end": 5377,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5326,
											"end": 5377,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5326,
											"end": 5377,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5326,
											"end": 5377,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5338,
											"end": 5348,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 5338,
											"end": 5348,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5326,
											"end": 5377,
											"name": "PUSH",
											"source": 2,
											"value": "3C2BD1B3F5CA07AFB09FBEE41AC43DA2B98D9C2E9832673052E546BD1D4C091D"
										},
										{
											"begin": 5326,
											"end": 5377,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5326,
											"end": 5377,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5326,
											"end": 5377,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5326,
											"end": 5377,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5326,
											"end": 5377,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5326,
											"end": 5377,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5326,
											"end": 5377,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "STOP",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "tag",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21542,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "57"
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "tag",
											"source": 2,
											"value": "57"
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "tag",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "tag",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 587,
											"end": 617,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 587,
											"end": 617,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 587,
											"end": 617,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "tag",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 587,
											"end": 617,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 587,
											"end": 617,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 587,
											"end": 617,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "tag",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "tag",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10952,
											"end": 11047,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 10952,
											"end": 11047,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10952,
											"end": 11047,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 10952,
											"end": 11047,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10952,
											"end": 11047,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10952,
											"end": 11047,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 10952,
											"end": 11047,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10952,
											"end": 11047,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10952,
											"end": 11047,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10952,
											"end": 11047,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10952,
											"end": 11047,
											"name": "tag",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 10952,
											"end": 11047,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10952,
											"end": 11047,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10952,
											"end": 11047,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 10952,
											"end": 11047,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 10952,
											"end": 11047,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1702,
											"end": 1731,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 1702,
											"end": 1731,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1702,
											"end": 1731,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1702,
											"end": 1731,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1702,
											"end": 1731,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1702,
											"end": 1731,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 1702,
											"end": 1731,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1702,
											"end": 1731,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1702,
											"end": 1731,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1702,
											"end": 1731,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1702,
											"end": 1731,
											"name": "tag",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 1702,
											"end": 1731,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1702,
											"end": 1731,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1702,
											"end": 1731,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 1702,
											"end": 1731,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 1702,
											"end": 1731,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1494,
											"end": 1513,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 1494,
											"end": 1513,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1494,
											"end": 1513,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1494,
											"end": 1513,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1494,
											"end": 1513,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1494,
											"end": 1513,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 1494,
											"end": 1513,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1494,
											"end": 1513,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1494,
											"end": 1513,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1494,
											"end": 1513,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1494,
											"end": 1513,
											"name": "tag",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 1494,
											"end": 1513,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1494,
											"end": 1513,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1494,
											"end": 1513,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 1494,
											"end": 1513,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 1494,
											"end": 1513,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "tag",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "tag",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "tag",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "STOP",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "tag",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "82"
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "tag",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "tag",
											"source": 2,
											"value": "82"
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "tag",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7218,
											"end": 8108,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 7218,
											"end": 8108,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7218,
											"end": 8108,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 7218,
											"end": 8108,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7218,
											"end": 8108,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7218,
											"end": 8108,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 7218,
											"end": 8108,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7218,
											"end": 8108,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7218,
											"end": 8108,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7218,
											"end": 8108,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7218,
											"end": 8108,
											"name": "tag",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 7218,
											"end": 8108,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7218,
											"end": 8108,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7218,
											"end": 8108,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 7218,
											"end": 8108,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 7218,
											"end": 8108,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11299,
											"end": 11565,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 11299,
											"end": 11565,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11299,
											"end": 11565,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 11299,
											"end": 11565,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11299,
											"end": 11565,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11299,
											"end": 11565,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 11299,
											"end": 11565,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11299,
											"end": 11565,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11299,
											"end": 11565,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11299,
											"end": 11565,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11299,
											"end": 11565,
											"name": "tag",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 11299,
											"end": 11565,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11299,
											"end": 11565,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11299,
											"end": 11565,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 11299,
											"end": 11565,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 11299,
											"end": 11565,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 877,
											"end": 897,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 877,
											"end": 897,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 877,
											"end": 897,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 877,
											"end": 897,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 877,
											"end": 897,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 877,
											"end": 897,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 877,
											"end": 897,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 877,
											"end": 897,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 877,
											"end": 897,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 877,
											"end": 897,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 877,
											"end": 897,
											"name": "tag",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 877,
											"end": 897,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 877,
											"end": 897,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 877,
											"end": 897,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 877,
											"end": 897,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 877,
											"end": 897,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "tag",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "tag",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "tag",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "101"
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "tag",
											"source": 5,
											"value": "101"
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "103"
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "tag",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "tag",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 394,
											"end": 420,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "tag",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "tag",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "tag",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "tag",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "82"
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "tag",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "113"
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "tag",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "tag",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "tag",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "PUSH",
											"source": 2,
											"value": "1C0"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "tag",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "tag",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1612,
											"end": 1663,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 1612,
											"end": 1663,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1612,
											"end": 1663,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1612,
											"end": 1663,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1612,
											"end": 1663,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1612,
											"end": 1663,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 1612,
											"end": 1663,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1612,
											"end": 1663,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1612,
											"end": 1663,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1612,
											"end": 1663,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1612,
											"end": 1663,
											"name": "tag",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 1612,
											"end": 1663,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1612,
											"end": 1663,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1612,
											"end": 1663,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 1612,
											"end": 1663,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "123"
										},
										{
											"begin": 1612,
											"end": 1663,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11571,
											"end": 11835,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 11571,
											"end": 11835,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11571,
											"end": 11835,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 11571,
											"end": 11835,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11571,
											"end": 11835,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11571,
											"end": 11835,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 11571,
											"end": 11835,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11571,
											"end": 11835,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11571,
											"end": 11835,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11571,
											"end": 11835,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11571,
											"end": 11835,
											"name": "tag",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 11571,
											"end": 11835,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11571,
											"end": 11835,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11571,
											"end": 11835,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 11571,
											"end": 11835,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "126"
										},
										{
											"begin": 11571,
											"end": 11835,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "tag",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "130"
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "tag",
											"source": 5,
											"value": "130"
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "105"
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "132"
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 10404,
											"end": 10499,
											"name": "tag",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 10404,
											"end": 10499,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10404,
											"end": 10499,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 10404,
											"end": 10499,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10404,
											"end": 10499,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10404,
											"end": 10499,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "133"
										},
										{
											"begin": 10404,
											"end": 10499,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10404,
											"end": 10499,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10404,
											"end": 10499,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10404,
											"end": 10499,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10404,
											"end": 10499,
											"name": "tag",
											"source": 2,
											"value": "133"
										},
										{
											"begin": 10404,
											"end": 10499,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10404,
											"end": 10499,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10404,
											"end": 10499,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 10404,
											"end": 10499,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 10404,
											"end": 10499,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 699,
											"end": 726,
											"name": "tag",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 699,
											"end": 726,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 699,
											"end": 726,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 699,
											"end": 726,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 699,
											"end": 726,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 699,
											"end": 726,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 699,
											"end": 726,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 699,
											"end": 726,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 699,
											"end": 726,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 699,
											"end": 726,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 699,
											"end": 726,
											"name": "tag",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 699,
											"end": 726,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 699,
											"end": 726,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 699,
											"end": 726,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 699,
											"end": 726,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "138"
										},
										{
											"begin": 699,
											"end": 726,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1469,
											"end": 1488,
											"name": "tag",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 1469,
											"end": 1488,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1469,
											"end": 1488,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1469,
											"end": 1488,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1469,
											"end": 1488,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1469,
											"end": 1488,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "139"
										},
										{
											"begin": 1469,
											"end": 1488,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1469,
											"end": 1488,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1469,
											"end": 1488,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1469,
											"end": 1488,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1469,
											"end": 1488,
											"name": "tag",
											"source": 2,
											"value": "139"
										},
										{
											"begin": 1469,
											"end": 1488,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1469,
											"end": 1488,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1469,
											"end": 1488,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 1469,
											"end": 1488,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "141"
										},
										{
											"begin": 1469,
											"end": 1488,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "tag",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "142"
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "tag",
											"source": 2,
											"value": "142"
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "82"
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "144"
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "tag",
											"source": 2,
											"value": "144"
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "145"
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10831,
											"end": 10946,
											"name": "tag",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 10831,
											"end": 10946,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10831,
											"end": 10946,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 10831,
											"end": 10946,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10831,
											"end": 10946,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10831,
											"end": 10946,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "146"
										},
										{
											"begin": 10831,
											"end": 10946,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10831,
											"end": 10946,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10831,
											"end": 10946,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10831,
											"end": 10946,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10831,
											"end": 10946,
											"name": "tag",
											"source": 2,
											"value": "146"
										},
										{
											"begin": 10831,
											"end": 10946,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10831,
											"end": 10946,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10831,
											"end": 10946,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 10831,
											"end": 10946,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "148"
										},
										{
											"begin": 10831,
											"end": 10946,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "tag",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "tag",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "151"
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "tag",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "152"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "tag",
											"source": 2,
											"value": "152"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "154"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "tag",
											"source": 2,
											"value": "154"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 772,
											"end": 793,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "155"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "tag",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "tag",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "tag",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 975,
											"end": 997,
											"name": "tag",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 975,
											"end": 997,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 975,
											"end": 997,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 975,
											"end": 997,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 975,
											"end": 997,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 975,
											"end": 997,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 975,
											"end": 997,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 975,
											"end": 997,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 975,
											"end": 997,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 975,
											"end": 997,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 975,
											"end": 997,
											"name": "tag",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 975,
											"end": 997,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 975,
											"end": 997,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 975,
											"end": 997,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 975,
											"end": 997,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "162"
										},
										{
											"begin": 975,
											"end": 997,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "tag",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "163"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "tag",
											"source": 2,
											"value": "163"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "164"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "165"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "tag",
											"source": 2,
											"value": "164"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "tag",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 732,
											"end": 766,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "166"
										},
										{
											"begin": 732,
											"end": 766,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 732,
											"end": 766,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "tag",
											"source": 2,
											"value": "166"
										},
										{
											"begin": 732,
											"end": 766,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 732,
											"end": 766,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "168"
										},
										{
											"begin": 732,
											"end": 766,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "tag",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "169"
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "tag",
											"source": 2,
											"value": "169"
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "171"
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "tag",
											"source": 2,
											"value": "171"
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "tag",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "173"
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "tag",
											"source": 2,
											"value": "173"
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "175"
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "tag",
											"source": 2,
											"value": "175"
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "176"
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "tag",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "tag",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "179"
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "tag",
											"source": 2,
											"value": "179"
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 854,
											"end": 871,
											"name": "tag",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 854,
											"end": 871,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 854,
											"end": 871,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 854,
											"end": 871,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 854,
											"end": 871,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 854,
											"end": 871,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "181"
										},
										{
											"begin": 854,
											"end": 871,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 854,
											"end": 871,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 854,
											"end": 871,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 854,
											"end": 871,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 854,
											"end": 871,
											"name": "tag",
											"source": 2,
											"value": "181"
										},
										{
											"begin": 854,
											"end": 871,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 854,
											"end": 871,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 854,
											"end": 871,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 854,
											"end": 871,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "183"
										},
										{
											"begin": 854,
											"end": 871,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "tag",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "184"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "tag",
											"source": 5,
											"value": "184"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "186"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "tag",
											"source": 5,
											"value": "186"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "CALLDATALOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "187"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 7124,
											"end": 7197,
											"name": "tag",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 7124,
											"end": 7197,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7124,
											"end": 7197,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 7124,
											"end": 7197,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7124,
											"end": 7197,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7124,
											"end": 7197,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "188"
										},
										{
											"begin": 7124,
											"end": 7197,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7124,
											"end": 7197,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7124,
											"end": 7197,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7124,
											"end": 7197,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7124,
											"end": 7197,
											"name": "tag",
											"source": 2,
											"value": "188"
										},
										{
											"begin": 7124,
											"end": 7197,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7124,
											"end": 7197,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7124,
											"end": 7197,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 7124,
											"end": 7197,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "190"
										},
										{
											"begin": 7124,
											"end": 7197,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "tag",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "191"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "tag",
											"source": 2,
											"value": "191"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "82"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "193"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "tag",
											"source": 2,
											"value": "193"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH",
											"source": 2,
											"value": "100000000"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "194"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "tag",
											"source": 2,
											"value": "194"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "195"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "tag",
											"source": 2,
											"value": "195"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH",
											"source": 2,
											"value": "100000000"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "196"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "tag",
											"source": 2,
											"value": "196"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "CALLDATACOPY",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "197"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "tag",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "198"
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "tag",
											"source": 2,
											"value": "198"
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "200"
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "tag",
											"source": 2,
											"value": "200"
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "201"
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "tag",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "202"
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "tag",
											"source": 2,
											"value": "202"
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "204"
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "tag",
											"source": 2,
											"value": "204"
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "205"
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10505,
											"end": 10604,
											"name": "tag",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 10505,
											"end": 10604,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10505,
											"end": 10604,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 10505,
											"end": 10604,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10505,
											"end": 10604,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10505,
											"end": 10604,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "206"
										},
										{
											"begin": 10505,
											"end": 10604,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10505,
											"end": 10604,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10505,
											"end": 10604,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10505,
											"end": 10604,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10505,
											"end": 10604,
											"name": "tag",
											"source": 2,
											"value": "206"
										},
										{
											"begin": 10505,
											"end": 10604,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10505,
											"end": 10604,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10505,
											"end": 10604,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 10505,
											"end": 10604,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 10505,
											"end": 10604,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2056,
											"end": 2447,
											"name": "tag",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 2056,
											"end": 2447,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2170,
											"end": 2176,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2166,
											"name": "SELFBALANCE",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2176,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2176,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "211"
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "PUSH",
											"source": 0,
											"value": "1D"
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "PUSH",
											"source": 0,
											"value": "416464726573733A20696E73756666696369656E742062616C616E6365000000"
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "tag",
											"source": 0,
											"value": "211"
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2299,
											"end": 2311,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2299,
											"end": 2311,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2331,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2331,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2331,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2340,
											"end": 2346,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2340,
											"end": 2346,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2299,
											"end": 2311,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2299,
											"end": 2311,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2340,
											"end": 2346,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2331,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "214"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "PUSH",
											"source": 0,
											"value": "3F"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "213"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "tag",
											"source": 0,
											"value": "214"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "tag",
											"source": 0,
											"value": "213"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2298,
											"end": 2352,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2298,
											"end": 2352,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2298,
											"end": 2352,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2370,
											"end": 2377,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "215"
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "PUSH",
											"source": 0,
											"value": "3A"
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "PUSH data",
											"source": 0,
											"value": "51DDAA38748C0A1144620FB5BFE8EDAB31EA437571AD591A7734BBFD0429AEAE"
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "PUSH",
											"source": 0,
											"value": "3A"
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "CODECOPY",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "tag",
											"source": 0,
											"value": "215"
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2056,
											"end": 2447,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2056,
											"end": 2447,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2056,
											"end": 2447,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2056,
											"end": 2447,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "tag",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11243,
											"end": 11260,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11243,
											"end": 11260,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11110,
											"end": 11117,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11243,
											"end": 11260,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11243,
											"end": 11260,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11243,
											"end": 11260,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11243,
											"end": 11253,
											"name": "PUSH",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 11243,
											"end": 11260,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11243,
											"end": 11260,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11243,
											"end": 11260,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11243,
											"end": 11260,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11243,
											"end": 11260,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11243,
											"end": 11260,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11243,
											"end": 11260,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11243,
											"end": 11260,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 11243,
											"end": 11260,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 11202,
											"end": 11212,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 11202,
											"end": 11219,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11202,
											"end": 11219,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 11202,
											"end": 11219,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11202,
											"end": 11219,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11202,
											"end": 11219,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 11202,
											"end": 11219,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 11184,
											"end": 11199,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 11184,
											"end": 11199,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1394,
											"end": 1401,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 11184,
											"end": 11219,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11184,
											"end": 11219,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 11175,
											"end": 11260,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11148,
											"end": 11286,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11286,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11286,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "tag",
											"source": 2,
											"value": "216"
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11053,
											"end": 11293,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 587,
											"end": 617,
											"name": "tag",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 587,
											"end": 617,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 587,
											"end": 617,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "tag",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12229,
											"end": 12236,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12267,
											"end": 12285,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 12267,
											"end": 12285,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12256,
											"end": 12263,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12256,
											"end": 12285,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 12256,
											"end": 12285,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 12248,
											"end": 12286,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "219"
										},
										{
											"begin": 12248,
											"end": 12286,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 12248,
											"end": 12286,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12248,
											"end": 12286,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12248,
											"end": 12286,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 12248,
											"end": 12286,
											"name": "tag",
											"source": 2,
											"value": "219"
										},
										{
											"begin": 12248,
											"end": 12286,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12314,
											"end": 12321,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12311,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12349,
											"end": 12398,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "220"
										},
										{
											"begin": 12362,
											"end": 12392,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "221"
										},
										{
											"begin": 12314,
											"end": 12321,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12311,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12362,
											"end": 12374,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "222"
										},
										{
											"begin": 12362,
											"end": 12392,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12362,
											"end": 12392,
											"name": "tag",
											"source": 2,
											"value": "221"
										},
										{
											"begin": 12362,
											"end": 12392,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12394,
											"end": 12397,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 12349,
											"end": 12361,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "223"
										},
										{
											"begin": 12349,
											"end": 12398,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12349,
											"end": 12398,
											"name": "tag",
											"source": 2,
											"value": "220"
										},
										{
											"begin": 12349,
											"end": 12398,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12331,
											"end": 12398,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12331,
											"end": 12398,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12408,
											"end": 12424,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12427,
											"end": 12457,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "224"
										},
										{
											"begin": 12440,
											"end": 12447,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12449,
											"end": 12456,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12427,
											"end": 12439,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "225"
										},
										{
											"begin": 12427,
											"end": 12457,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12427,
											"end": 12457,
											"name": "tag",
											"source": 2,
											"value": "224"
										},
										{
											"begin": 12427,
											"end": 12457,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12408,
											"end": 12457,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12144,
											"end": 12489,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 10952,
											"end": 11047,
											"name": "tag",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 10952,
											"end": 11047,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11022,
											"end": 11040,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 11022,
											"end": 11040,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 10952,
											"end": 11047,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10952,
											"end": 11047,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1702,
											"end": 1731,
											"name": "tag",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 1702,
											"end": 1731,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1702,
											"end": 1731,
											"name": "PUSH",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 1702,
											"end": 1731,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1702,
											"end": 1731,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1702,
											"end": 1731,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1494,
											"end": 1513,
											"name": "tag",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 1494,
											"end": 1513,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1494,
											"end": 1513,
											"name": "PUSH",
											"source": 2,
											"value": "F"
										},
										{
											"begin": 1494,
											"end": 1513,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1494,
											"end": 1513,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1494,
											"end": 1513,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "tag",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2107,
											"end": 2108,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2094,
											"end": 2104,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "228"
										},
										{
											"begin": 2094,
											"end": 2102,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 2094,
											"end": 2104,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2094,
											"end": 2104,
											"name": "tag",
											"source": 2,
											"value": "228"
										},
										{
											"begin": 2094,
											"end": 2104,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2108,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2086,
											"end": 2109,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "229"
										},
										{
											"begin": 2086,
											"end": 2109,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2086,
											"end": 2109,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2086,
											"end": 2109,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2086,
											"end": 2109,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2086,
											"end": 2109,
											"name": "tag",
											"source": 2,
											"value": "229"
										},
										{
											"begin": 2086,
											"end": 2109,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8210,
											"end": 8220,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 8194,
											"end": 8207,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8249,
											"end": 8266,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8249,
											"end": 8266,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8249,
											"end": 8266,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8249,
											"end": 8259,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 8249,
											"end": 8266,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8249,
											"end": 8266,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8249,
											"end": 8266,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8249,
											"end": 8266,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8249,
											"end": 8266,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8249,
											"end": 8266,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8238,
											"end": 8266,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8238,
											"end": 8266,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 8238,
											"end": 8266,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 8230,
											"end": 8267,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "231"
										},
										{
											"begin": 8230,
											"end": 8267,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8230,
											"end": 8267,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8230,
											"end": 8267,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8230,
											"end": 8267,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 8230,
											"end": 8267,
											"name": "tag",
											"source": 2,
											"value": "231"
										},
										{
											"begin": 8230,
											"end": 8267,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8278,
											"end": 8305,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8341,
											"end": 8344,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 8308,
											"end": 8338,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "232"
										},
										{
											"begin": 8321,
											"end": 8328,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8278,
											"end": 8305,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8308,
											"end": 8320,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "222"
										},
										{
											"begin": 8308,
											"end": 8338,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8308,
											"end": 8338,
											"name": "tag",
											"source": 2,
											"value": "232"
										},
										{
											"begin": 8308,
											"end": 8338,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8308,
											"end": 8344,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8308,
											"end": 8344,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "233"
										},
										{
											"begin": 8308,
											"end": 8344,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8308,
											"end": 8344,
											"name": "INVALID",
											"source": 2
										},
										{
											"begin": 8308,
											"end": 8344,
											"name": "tag",
											"source": 2,
											"value": "233"
										},
										{
											"begin": 8308,
											"end": 8344,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8308,
											"end": 8344,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 8278,
											"end": 8344,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8278,
											"end": 8344,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8564,
											"end": 8565,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8542,
											"end": 8565,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8542,
											"end": 8565,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8647,
											"end": 8668,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8671,
											"end": 8713,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "234"
										},
										{
											"begin": 8684,
											"end": 8691,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8693,
											"end": 8712,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8671,
											"end": 8683,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "225"
										},
										{
											"begin": 8671,
											"end": 8713,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8671,
											"end": 8713,
											"name": "tag",
											"source": 2,
											"value": "234"
										},
										{
											"begin": 8671,
											"end": 8713,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8647,
											"end": 8713,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8647,
											"end": 8713,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8785,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "235"
										},
										{
											"begin": 8757,
											"end": 8775,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 8757,
											"end": 8775,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8777,
											"end": 8784,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8756,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "225"
										},
										{
											"begin": 8744,
											"end": 8785,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8744,
											"end": 8785,
											"name": "tag",
											"source": 2,
											"value": "235"
										},
										{
											"begin": 8744,
											"end": 8785,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8723,
											"end": 8741,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 8723,
											"end": 8785,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8828,
											"end": 8845,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8828,
											"end": 8845,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8828,
											"end": 8845,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8828,
											"end": 8845,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8828,
											"end": 8845,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8828,
											"end": 8845,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8828,
											"end": 8838,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 8828,
											"end": 8845,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8828,
											"end": 8845,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8828,
											"end": 8845,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8828,
											"end": 8845,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8828,
											"end": 8845,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8828,
											"end": 8845,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8815,
											"end": 8855,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "236"
										},
										{
											"begin": 8815,
											"end": 8855,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8847,
											"end": 8854,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 8815,
											"end": 8827,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "225"
										},
										{
											"begin": 8815,
											"end": 8855,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8815,
											"end": 8855,
											"name": "tag",
											"source": 2,
											"value": "236"
										},
										{
											"begin": 8815,
											"end": 8855,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8795,
											"end": 8812,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8795,
											"end": 8812,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8795,
											"end": 8812,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8795,
											"end": 8812,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8795,
											"end": 8812,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8795,
											"end": 8812,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8795,
											"end": 8805,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 8795,
											"end": 8812,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8795,
											"end": 8812,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8795,
											"end": 8812,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8795,
											"end": 8812,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8795,
											"end": 8812,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8795,
											"end": 8812,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8795,
											"end": 8812,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8795,
											"end": 8812,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8795,
											"end": 8855,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 8795,
											"end": 8855,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8795,
											"end": 8855,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 8795,
											"end": 8855,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 9058,
											"end": 9068,
											"name": "PUSH",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 9058,
											"end": 9075,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9058,
											"end": 9075,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9058,
											"end": 9075,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9058,
											"end": 9075,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9058,
											"end": 9075,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9058,
											"end": 9075,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 9058,
											"end": 9094,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9058,
											"end": 9094,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8984,
											"end": 9009,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8984,
											"end": 9009,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 8984,
											"end": 9009,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9013,
											"end": 9037,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9013,
											"end": 9037,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 8984,
											"end": 9038,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9058,
											"end": 9094,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9058,
											"end": 9094,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9058,
											"end": 9094,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9058,
											"end": 9094,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9058,
											"end": 9094,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9058,
											"end": 9094,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 9175,
											"end": 9208,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "237"
										},
										{
											"begin": 9188,
											"end": 9207,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9175,
											"end": 9187,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "238"
										},
										{
											"begin": 9175,
											"end": 9208,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 9175,
											"end": 9208,
											"name": "tag",
											"source": 2,
											"value": "237"
										},
										{
											"begin": 9175,
											"end": 9208,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9321,
											"end": 9336,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "PUSH",
											"source": 2,
											"value": "90EBB005D68EFEE044927E1E77E1FD0CECC508368AA72C39250A787EED5F0A70"
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9280,
											"end": 9337,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9431,
											"end": 9448,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9431,
											"end": 9448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9431,
											"end": 9448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9431,
											"end": 9448,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9431,
											"end": 9441,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 9431,
											"end": 9448,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9431,
											"end": 9448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9431,
											"end": 9448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9431,
											"end": 9448,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9431,
											"end": 9448,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9431,
											"end": 9448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9431,
											"end": 9448,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9431,
											"end": 9448,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 9431,
											"end": 9458,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9431,
											"end": 9458,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 9472,
											"end": 9482,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 9472,
											"end": 9489,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9472,
											"end": 9489,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9472,
											"end": 9489,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 9472,
											"end": 9489,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9472,
											"end": 9489,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9472,
											"end": 9489,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 9472,
											"end": 9489,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 9503,
											"end": 9520,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 9503,
											"end": 9520,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9503,
											"end": 9520,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9503,
											"end": 9530,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 9503,
											"end": 9530,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9503,
											"end": 9530,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9544,
											"end": 9559,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "27CC9C295B15A532BB1B5F9308F1D54813E694C2EBDD1C2CED210BFE52DCD57E"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9390,
											"end": 9569,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": 9638,
											"end": 9650,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "239"
										},
										{
											"begin": 9638,
											"end": 9648,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "240"
										},
										{
											"begin": 9638,
											"end": 9650,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 9638,
											"end": 9650,
											"name": "tag",
											"source": 2,
											"value": "239"
										},
										{
											"begin": 9638,
											"end": 9650,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2119,
											"end": 2120,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2119,
											"end": 2120,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2119,
											"end": 2120,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2119,
											"end": 2120,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8130,
											"end": 9661,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "tag",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10090,
											"end": 10103,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10090,
											"end": 10103,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10090,
											"end": 10103,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10090,
											"end": 10103,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10165,
											"end": 10300,
											"name": "tag",
											"source": 2,
											"value": "242"
										},
										{
											"begin": 10165,
											"end": 10300,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10184,
											"end": 10188,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 10184,
											"end": 10195,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 10180,
											"end": 10195,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10180,
											"end": 10195,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 10165,
											"end": 10300,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10165,
											"end": 10300,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "243"
										},
										{
											"begin": 10165,
											"end": 10300,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10235,
											"end": 10239,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 10240,
											"end": 10241,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "245"
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "INVALID",
											"source": 2
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "tag",
											"source": 2,
											"value": "245"
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10282,
											"name": "PUSH",
											"source": 2,
											"value": "70A08231"
										},
										{
											"begin": 10263,
											"end": 10282,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10235,
											"end": 10242,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "247"
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "tag",
											"source": 2,
											"value": "247"
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "249"
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "tag",
											"source": 2,
											"value": "249"
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "250"
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "tag",
											"source": 2,
											"value": "250"
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10263,
											"end": 10289,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10258,
											"end": 10289,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 10258,
											"end": 10289,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10258,
											"end": 10289,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 10258,
											"end": 10289,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10258,
											"end": 10289,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10197,
											"end": 10200,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 10197,
											"end": 10200,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10165,
											"end": 10300,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "242"
										},
										{
											"begin": 10165,
											"end": 10300,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10165,
											"end": 10300,
											"name": "tag",
											"source": 2,
											"value": "243"
										},
										{
											"begin": 10165,
											"end": 10300,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10165,
											"end": 10300,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10317,
											"end": 10332,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 10317,
											"end": 10332,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 10312,
											"end": 10313,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10312,
											"end": 10332,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 10308,
											"end": 10370,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "251"
										},
										{
											"begin": 10308,
											"end": 10370,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10355,
											"end": 10359,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 10348,
											"end": 10359,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 10348,
											"end": 10359,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10348,
											"end": 10359,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10348,
											"end": 10359,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10348,
											"end": 10359,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "216"
										},
										{
											"begin": 10348,
											"end": 10359,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10308,
											"end": 10370,
											"name": "tag",
											"source": 2,
											"value": "251"
										},
										{
											"begin": 10308,
											"end": 10370,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10386,
											"end": 10391,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10386,
											"end": 10391,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10031,
											"end": 10398,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "tag",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "PUSH",
											"source": 2,
											"value": "A"
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 7218,
											"end": 8108,
											"name": "tag",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 7218,
											"end": 8108,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2242,
											"end": 2243,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2227,
											"end": 2239,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "253"
										},
										{
											"begin": 2227,
											"end": 2237,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 2227,
											"end": 2239,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2227,
											"end": 2239,
											"name": "tag",
											"source": 2,
											"value": "253"
										},
										{
											"begin": 2227,
											"end": 2239,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2227,
											"end": 2243,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2219,
											"end": 2244,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "254"
										},
										{
											"begin": 2219,
											"end": 2244,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2219,
											"end": 2244,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2219,
											"end": 2244,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2219,
											"end": 2244,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2219,
											"end": 2244,
											"name": "tag",
											"source": 2,
											"value": "254"
										},
										{
											"begin": 2219,
											"end": 2244,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7282,
											"end": 7292,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 7266,
											"end": 7279,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7323,
											"end": 7335,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "256"
										},
										{
											"begin": 7323,
											"end": 7333,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 7323,
											"end": 7335,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7323,
											"end": 7335,
											"name": "tag",
											"source": 2,
											"value": "256"
										},
										{
											"begin": 7323,
											"end": 7335,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7429,
											"end": 7446,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7429,
											"end": 7446,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7429,
											"end": 7446,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7429,
											"end": 7446,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7429,
											"end": 7446,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7429,
											"end": 7446,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7429,
											"end": 7446,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7429,
											"end": 7439,
											"name": "PUSH",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 7429,
											"end": 7446,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7429,
											"end": 7446,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7429,
											"end": 7446,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7429,
											"end": 7446,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7429,
											"end": 7446,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7429,
											"end": 7446,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7429,
											"end": 7446,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7429,
											"end": 7446,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7429,
											"end": 7482,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7429,
											"end": 7482,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7459,
											"end": 7481,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 7459,
											"end": 7481,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 7429,
											"end": 7482,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7429,
											"end": 7482,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7429,
											"end": 7482,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7558,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 7546,
											"end": 7558,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7302,
											"end": 7335,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 7302,
											"end": 7335,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7546,
											"end": 7558,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7558,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7558,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7558,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7567,
											"name": "PUSH",
											"source": 2,
											"value": "A9059CBB"
										},
										{
											"begin": 7546,
											"end": 7567,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 7429,
											"end": 7446,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7429,
											"end": 7446,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7558,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "257"
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "tag",
											"source": 2,
											"value": "257"
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "259"
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "tag",
											"source": 2,
											"value": "259"
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "260"
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "tag",
											"source": 2,
											"value": "260"
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7717,
											"end": 7734,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7717,
											"end": 7734,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7717,
											"end": 7734,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7717,
											"end": 7734,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7717,
											"end": 7734,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7717,
											"end": 7734,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7717,
											"end": 7727,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 7546,
											"end": 7586,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7717,
											"end": 7734,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7717,
											"end": 7734,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7717,
											"end": 7734,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7717,
											"end": 7734,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7717,
											"end": 7744,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 7717,
											"end": 7744,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7717,
											"end": 7744,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7691,
											"end": 7778,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "261"
										},
										{
											"begin": 7691,
											"end": 7778,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7758,
											"end": 7768,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7691,
											"end": 7703,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "262"
										},
										{
											"begin": 7691,
											"end": 7778,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7691,
											"end": 7778,
											"name": "tag",
											"source": 2,
											"value": "261"
										},
										{
											"begin": 7691,
											"end": 7778,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7661,
											"end": 7678,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7678,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7678,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7661,
											"end": 7678,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7678,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7678,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7671,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 7661,
											"end": 7678,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7661,
											"end": 7678,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7678,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7678,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7678,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7661,
											"end": 7678,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7678,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7678,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7678,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7688,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 7661,
											"end": 7688,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7688,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7688,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7778,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7778,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7778,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7778,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7788,
											"end": 7816,
											"name": "PUSH",
											"source": 2,
											"value": "B"
										},
										{
											"begin": 7788,
											"end": 7816,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7788,
											"end": 7821,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7788,
											"end": 7821,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7788,
											"end": 7821,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 7788,
											"end": 7821,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7788,
											"end": 7821,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7788,
											"end": 7821,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7878,
											"end": 7886,
											"name": "PUSH",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 7878,
											"end": 7891,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7878,
											"end": 7891,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7878,
											"end": 7891,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7878,
											"end": 7891,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 7878,
											"end": 7891,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7878,
											"end": 7891,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7878,
											"end": 7891,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 7878,
											"end": 7891,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7901,
											"end": 7912,
											"name": "PUSH",
											"source": 2,
											"value": "A"
										},
										{
											"begin": 7901,
											"end": 7926,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7901,
											"end": 7926,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7901,
											"end": 7926,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 7901,
											"end": 7926,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7901,
											"end": 7926,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7901,
											"end": 7926,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8003,
											"end": 8018,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7678,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7678,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "PUSH",
											"source": 2,
											"value": "1B091269E929DF55D64D6EA7E9CADBE4FB38DCE5CCDC995767BC515030DBFBBF"
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7973,
											"end": 8019,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": 8089,
											"end": 8101,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "263"
										},
										{
											"begin": 8089,
											"end": 8099,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "240"
										},
										{
											"begin": 8089,
											"end": 8101,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8089,
											"end": 8101,
											"name": "tag",
											"source": 2,
											"value": "263"
										},
										{
											"begin": 8089,
											"end": 8101,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2254,
											"end": 2255,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2254,
											"end": 2255,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7218,
											"end": 8108,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 11299,
											"end": 11565,
											"name": "tag",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 11299,
											"end": 11565,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11342,
											"end": 11349,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11379,
											"end": 11383,
											"name": "PUSH",
											"source": 2,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 11342,
											"end": 11349,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11414,
											"end": 11463,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "265"
										},
										{
											"begin": 11427,
											"end": 11457,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "221"
										},
										{
											"begin": 11379,
											"end": 11383,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11342,
											"end": 11349,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11427,
											"end": 11439,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "222"
										},
										{
											"begin": 11427,
											"end": 11457,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11414,
											"end": 11463,
											"name": "tag",
											"source": 2,
											"value": "265"
										},
										{
											"begin": 11414,
											"end": 11463,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11393,
											"end": 11463,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11393,
											"end": 11463,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11473,
											"end": 11493,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11496,
											"end": 11529,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "267"
										},
										{
											"begin": 11509,
											"end": 11516,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11518,
											"end": 11528,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11496,
											"end": 11508,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "225"
										},
										{
											"begin": 11496,
											"end": 11529,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11496,
											"end": 11529,
											"name": "tag",
											"source": 2,
											"value": "267"
										},
										{
											"begin": 11496,
											"end": 11529,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11473,
											"end": 11529,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11299,
											"end": 11565,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11299,
											"end": 11565,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 877,
											"end": 897,
											"name": "tag",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 877,
											"end": 897,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 877,
											"end": 897,
											"name": "PUSH",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 877,
											"end": 897,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 877,
											"end": 897,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 877,
											"end": 897,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "tag",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10691,
											"end": 10708,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10665,
											"end": 10672,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10691,
											"end": 10708,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10691,
											"end": 10708,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10691,
											"end": 10708,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10691,
											"end": 10701,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 10691,
											"end": 10708,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10691,
											"end": 10708,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10691,
											"end": 10708,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10691,
											"end": 10708,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10691,
											"end": 10708,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 10691,
											"end": 10708,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 10691,
											"end": 10708,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10610,
											"end": 10715,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "tag",
											"source": 5,
											"value": "103"
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "270"
										},
										{
											"begin": 1301,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "271"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "tag",
											"source": 5,
											"value": "270"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1290,
											"end": 1313,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "272"
										},
										{
											"begin": 1290,
											"end": 1295,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "132"
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "tag",
											"source": 5,
											"value": "272"
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1290,
											"end": 1313,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1290,
											"end": 1313,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "273"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "9924EBDF1ADD33D25D4EF888E16131F0A5687B0580A36C21B5C301A6C462EFFE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "tag",
											"source": 5,
											"value": "273"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1816,
											"end": 1817,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1800,
											"end": 1806,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1800,
											"end": 1806,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1779,
											"end": 1819,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1779,
											"end": 1819,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1800,
											"end": 1806,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1800,
											"end": 1806,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1800,
											"end": 1806,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1800,
											"end": 1806,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1779,
											"end": 1819,
											"name": "PUSH",
											"source": 5,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 1779,
											"end": 1819,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1816,
											"end": 1817,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1816,
											"end": 1817,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1779,
											"end": 1819,
											"name": "LOG3",
											"source": 5
										},
										{
											"begin": 1846,
											"end": 1847,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1829,
											"end": 1848,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1829,
											"end": 1848,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1829,
											"end": 1848,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1829,
											"end": 1848,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1829,
											"end": 1848,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "tag",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 394,
											"end": 420,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "tag",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "PUSH",
											"source": 2,
											"value": "B"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "tag",
											"source": 2,
											"value": "113"
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13600,
											"end": 13613,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "276"
										},
										{
											"begin": 1301,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "271"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "tag",
											"source": 5,
											"value": "276"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1290,
											"end": 1313,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "277"
										},
										{
											"begin": 1290,
											"end": 1295,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "132"
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "tag",
											"source": 5,
											"value": "277"
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1290,
											"end": 1313,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1290,
											"end": 1313,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "278"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "9924EBDF1ADD33D25D4EF888E16131F0A5687B0580A36C21B5C301A6C462EFFE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "tag",
											"source": 5,
											"value": "278"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 13633,
											"end": 13649,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "280"
										},
										{
											"begin": 13633,
											"end": 13638,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 13643,
											"end": 13648,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 13633,
											"end": 13642,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "262"
										},
										{
											"begin": 13633,
											"end": 13649,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 13633,
											"end": 13649,
											"name": "tag",
											"source": 2,
											"value": "280"
										},
										{
											"begin": 13633,
											"end": 13649,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13653,
											"end": 13654,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 13633,
											"end": 13654,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "281"
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "PUSH",
											"source": 2,
											"value": "1D"
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "PUSH",
											"source": 2,
											"value": "54454E5F504F5254494F4E535F524551554952455F4449564953494F4E000000"
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "tag",
											"source": 2,
											"value": "281"
										},
										{
											"begin": 13625,
											"end": 13688,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13732,
											"end": 13739,
											"name": "PUSH",
											"source": 2,
											"value": "E"
										},
										{
											"begin": 13732,
											"end": 13747,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 13732,
											"end": 13747,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13732,
											"end": 13747,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 13757,
											"end": 13764,
											"name": "PUSH",
											"source": 2,
											"value": "F"
										},
										{
											"begin": 13757,
											"end": 13772,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 13757,
											"end": 13772,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13757,
											"end": 13772,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13866,
											"end": 13881,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "PUSH",
											"source": 2,
											"value": "677017FA3A0FE0F50A95E6024C5B688F2B14A4696C4A897C459715CABFC1C03A"
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13838,
											"end": 13882,
											"name": "LOG1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13899,
											"end": 13903,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1360,
											"end": 1361,
											"name": "tag",
											"source": 5,
											"value": "279"
										},
										{
											"begin": 1360,
											"end": 1361,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 13501,
											"end": 13910,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "tag",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12550,
											"end": 12568,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "282"
										},
										{
											"begin": 12550,
											"end": 12568,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "283"
										},
										{
											"begin": 12550,
											"end": 12568,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12550,
											"end": 12568,
											"name": "tag",
											"source": 2,
											"value": "282"
										},
										{
											"begin": 12550,
											"end": 12568,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12596,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "285"
										},
										{
											"begin": 12580,
											"end": 12596,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "286"
										},
										{
											"begin": 12580,
											"end": 12596,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12580,
											"end": 12596,
											"name": "tag",
											"source": 2,
											"value": "285"
										},
										{
											"begin": 12580,
											"end": 12596,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12599,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12599,
											"end": 12616,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 12599,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12599,
											"end": 12616,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12599,
											"end": 12616,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12599,
											"end": 12616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12599,
											"end": 12609,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 12599,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12599,
											"end": 12616,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12599,
											"end": 12616,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12599,
											"end": 12616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12599,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12599,
											"end": 12616,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12599,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12599,
											"end": 12616,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12599,
											"end": 12616,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "1C0"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "C0"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "A"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "B"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "C"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "D"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "PUSH",
											"source": 2,
											"value": "1A0"
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12580,
											"end": 12616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 12657,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "287"
										},
										{
											"begin": 12626,
											"end": 12657,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "283"
										},
										{
											"begin": 12626,
											"end": 12657,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12626,
											"end": 12657,
											"name": "tag",
											"source": 2,
											"value": "287"
										},
										{
											"begin": 12626,
											"end": 12657,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "PUSH",
											"source": 2,
											"value": "1C0"
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12674,
											"end": 12675,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12674,
											"end": 12685,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12674,
											"end": 12685,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12674,
											"end": 12685,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12699,
											"end": 12700,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12699,
											"end": 12710,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12699,
											"end": 12710,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12699,
											"end": 12710,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12724,
											"end": 12725,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12724,
											"end": 12734,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 12724,
											"end": 12734,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12724,
											"end": 12734,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12748,
											"end": 12749,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12748,
											"end": 12760,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12748,
											"end": 12760,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12748,
											"end": 12760,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12774,
											"end": 12775,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12774,
											"end": 12787,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 12774,
											"end": 12787,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12774,
											"end": 12787,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12801,
											"end": 12802,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12801,
											"end": 12820,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 12801,
											"end": 12820,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12801,
											"end": 12820,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12834,
											"end": 12835,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12834,
											"end": 12850,
											"name": "PUSH",
											"source": 2,
											"value": "C0"
										},
										{
											"begin": 12834,
											"end": 12850,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12834,
											"end": 12850,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12864,
											"end": 12865,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12864,
											"end": 12875,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 12864,
											"end": 12875,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12864,
											"end": 12875,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12889,
											"end": 12890,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12889,
											"end": 12900,
											"name": "PUSH",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 12889,
											"end": 12900,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12889,
											"end": 12900,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12914,
											"end": 12915,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12914,
											"end": 12928,
											"name": "PUSH",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 12914,
											"end": 12928,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12914,
											"end": 12928,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12942,
											"end": 12943,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12942,
											"end": 12954,
											"name": "PUSH",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 12942,
											"end": 12954,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12942,
											"end": 12954,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12968,
											"end": 12969,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12968,
											"end": 12988,
											"name": "PUSH",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 12968,
											"end": 12988,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12968,
											"end": 12988,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13002,
											"end": 13003,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 13002,
											"end": 13019,
											"name": "PUSH",
											"source": 2,
											"value": "1A0"
										},
										{
											"begin": 13002,
											"end": 13019,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13002,
											"end": 13019,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13033,
											"end": 13034,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 13033,
											"end": 13046,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 13033,
											"end": 13046,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13033,
											"end": 13046,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12626,
											"end": 13056,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 13073,
											"end": 13085,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13066,
											"end": 13085,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 13066,
											"end": 13085,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 13066,
											"end": 13085,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 13066,
											"end": 13085,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12495,
											"end": 13092,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1612,
											"end": 1663,
											"name": "tag",
											"source": 2,
											"value": "123"
										},
										{
											"begin": 1612,
											"end": 1663,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1654,
											"end": 1663,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1612,
											"end": 1663,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1612,
											"end": 1663,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 11571,
											"end": 11835,
											"name": "tag",
											"source": 2,
											"value": "126"
										},
										{
											"begin": 11571,
											"end": 11835,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11612,
											"end": 11619,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11649,
											"end": 11653,
											"name": "PUSH",
											"source": 2,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 11612,
											"end": 11619,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11684,
											"end": 11733,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "289"
										},
										{
											"begin": 11697,
											"end": 11727,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "221"
										},
										{
											"begin": 11649,
											"end": 11653,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11612,
											"end": 11619,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11697,
											"end": 11709,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "222"
										},
										{
											"begin": 11697,
											"end": 11727,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11684,
											"end": 11733,
											"name": "tag",
											"source": 2,
											"value": "289"
										},
										{
											"begin": 11684,
											"end": 11733,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11663,
											"end": 11733,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11663,
											"end": 11733,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11743,
											"end": 11763,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11766,
											"end": 11799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "267"
										},
										{
											"begin": 11779,
											"end": 11786,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11788,
											"end": 11798,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11766,
											"end": 11778,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "262"
										},
										{
											"begin": 11766,
											"end": 11799,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "tag",
											"source": 5,
											"value": "132"
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1124,
											"end": 1131,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1150,
											"end": 1156,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1150,
											"end": 1156,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 10404,
											"end": 10499,
											"name": "tag",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 10404,
											"end": 10499,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10445,
											"end": 10452,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10471,
											"end": 10492,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "294"
										},
										{
											"begin": 10481,
											"end": 10491,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 10471,
											"end": 10480,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 10471,
											"end": 10492,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10471,
											"end": 10492,
											"name": "tag",
											"source": 2,
											"value": "294"
										},
										{
											"begin": 10471,
											"end": 10492,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10464,
											"end": 10492,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10464,
											"end": 10492,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10404,
											"end": 10499,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10404,
											"end": 10499,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 699,
											"end": 726,
											"name": "tag",
											"source": 2,
											"value": "138"
										},
										{
											"begin": 699,
											"end": 726,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 699,
											"end": 726,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 699,
											"end": 726,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 699,
											"end": 726,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 699,
											"end": 726,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 699,
											"end": 726,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1469,
											"end": 1488,
											"name": "tag",
											"source": 2,
											"value": "141"
										},
										{
											"begin": 1469,
											"end": 1488,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1469,
											"end": 1488,
											"name": "PUSH",
											"source": 2,
											"value": "E"
										},
										{
											"begin": 1469,
											"end": 1488,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1469,
											"end": 1488,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1469,
											"end": 1488,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "tag",
											"source": 2,
											"value": "145"
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9783,
											"end": 9787,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2107,
											"end": 2108,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2104,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "296"
										},
										{
											"begin": 2094,
											"end": 2102,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 2094,
											"end": 2104,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2094,
											"end": 2104,
											"name": "tag",
											"source": 2,
											"value": "296"
										},
										{
											"begin": 2094,
											"end": 2104,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2108,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2086,
											"end": 2109,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "297"
										},
										{
											"begin": 2086,
											"end": 2109,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2086,
											"end": 2109,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2086,
											"end": 2109,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2086,
											"end": 2109,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2086,
											"end": 2109,
											"name": "tag",
											"source": 2,
											"value": "297"
										},
										{
											"begin": 2086,
											"end": 2109,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9806,
											"end": 9835,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "299"
										},
										{
											"begin": 9822,
											"end": 9825,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9827,
											"end": 9834,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9806,
											"end": 9821,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "300"
										},
										{
											"begin": 9806,
											"end": 9835,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 9806,
											"end": 9835,
											"name": "tag",
											"source": 2,
											"value": "299"
										},
										{
											"begin": 9806,
											"end": 9835,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9799,
											"end": 9835,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9683,
											"end": 9842,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 10831,
											"end": 10946,
											"name": "tag",
											"source": 2,
											"value": "148"
										},
										{
											"begin": 10831,
											"end": 10946,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10914,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 10902,
											"end": 10914,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10933,
											"end": 10937,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10876,
											"end": 10883,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10876,
											"end": 10883,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10902,
											"end": 10914,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10914,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10924,
											"name": "PUSH",
											"source": 2,
											"value": "70A08231"
										},
										{
											"begin": 10902,
											"end": 10924,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10914,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "302"
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "tag",
											"source": 2,
											"value": "302"
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "304"
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "tag",
											"source": 2,
											"value": "304"
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "305"
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "tag",
											"source": 2,
											"value": "305"
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10902,
											"end": 10939,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10831,
											"end": 10946,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10831,
											"end": 10946,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "tag",
											"source": 2,
											"value": "151"
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "PUSH",
											"source": 2,
											"value": "C"
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "tag",
											"source": 2,
											"value": "155"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "306"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "tag",
											"source": 2,
											"value": "306"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 772,
											"end": 793,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 772,
											"end": 793,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "tag",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 6127,
											"end": 6237,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6174,
											"end": 6181,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6200,
											"end": 6230,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "279"
										},
										{
											"begin": 6210,
											"end": 6220,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 6222,
											"end": 6229,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6200,
											"end": 6209,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "205"
										},
										{
											"begin": 6200,
											"end": 6230,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 975,
											"end": 997,
											"name": "tag",
											"source": 2,
											"value": "162"
										},
										{
											"begin": 975,
											"end": 997,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 975,
											"end": 997,
											"name": "PUSH",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 975,
											"end": 997,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 975,
											"end": 997,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 975,
											"end": 997,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "tag",
											"source": 2,
											"value": "165"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "PUSH",
											"source": 2,
											"value": "D"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 732,
											"end": 766,
											"name": "tag",
											"source": 2,
											"value": "168"
										},
										{
											"begin": 732,
											"end": 766,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 732,
											"end": 766,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 732,
											"end": 766,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "tag",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11926,
											"end": 11933,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11926,
											"end": 11933,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11963,
											"end": 12012,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "311"
										},
										{
											"begin": 11976,
											"end": 12006,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "221"
										},
										{
											"begin": 11989,
											"end": 11996,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11926,
											"end": 11933,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11976,
											"end": 11988,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "222"
										},
										{
											"begin": 11976,
											"end": 12006,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11963,
											"end": 12012,
											"name": "tag",
											"source": 2,
											"value": "311"
										},
										{
											"begin": 11963,
											"end": 12012,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11945,
											"end": 12012,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11945,
											"end": 12012,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12022,
											"end": 12038,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12041,
											"end": 12071,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "313"
										},
										{
											"begin": 12054,
											"end": 12061,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12063,
											"end": 12070,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12041,
											"end": 12053,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "225"
										},
										{
											"begin": 12041,
											"end": 12071,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12041,
											"end": 12071,
											"name": "tag",
											"source": 2,
											"value": "313"
										},
										{
											"begin": 12041,
											"end": 12071,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12022,
											"end": 12071,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11841,
											"end": 12138,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "tag",
											"source": 2,
											"value": "176"
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10805,
											"end": 10818,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10805,
											"end": 10818,
											"name": "BALANCE",
											"source": 2
										},
										{
											"begin": 10805,
											"end": 10818,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10721,
											"end": 10825,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "tag",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5685,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 5673,
											"end": 5685,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5699,
											"end": 5709,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5719,
											"end": 5723,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5576,
											"end": 5583,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5576,
											"end": 5583,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5673,
											"end": 5685,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5685,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5698,
											"name": "PUSH",
											"source": 2,
											"value": "23B872DD"
										},
										{
											"begin": 5673,
											"end": 5698,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5576,
											"end": 5583,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5685,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "316"
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "tag",
											"source": 2,
											"value": "316"
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "318"
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "tag",
											"source": 2,
											"value": "318"
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "319"
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "tag",
											"source": 2,
											"value": "319"
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5673,
											"end": 5734,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5665,
											"end": 5735,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "320"
										},
										{
											"begin": 5665,
											"end": 5735,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5665,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5665,
											"end": 5735,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5665,
											"end": 5735,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5665,
											"end": 5735,
											"name": "tag",
											"source": 2,
											"value": "320"
										},
										{
											"begin": 5665,
											"end": 5735,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5797,
											"end": 5812,
											"name": "PUSH",
											"source": 2,
											"value": "C"
										},
										{
											"begin": 5797,
											"end": 5823,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5797,
											"end": 5823,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5797,
											"end": 5823,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5797,
											"end": 5823,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5797,
											"end": 5823,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5797,
											"end": 5823,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 5844,
											"end": 5854,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 5797,
											"end": 5812,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5833,
											"end": 5855,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5833,
											"end": 5855,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5833,
											"end": 5855,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5833,
											"end": 5843,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 5833,
											"end": 5855,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5833,
											"end": 5855,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5833,
											"end": 5855,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5833,
											"end": 5855,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5833,
											"end": 5855,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5833,
											"end": 5855,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5833,
											"end": 5855,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5833,
											"end": 5855,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5833,
											"end": 5855,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5833,
											"end": 5868,
											"name": "PUSH",
											"source": 2,
											"value": "A"
										},
										{
											"begin": 5833,
											"end": 5868,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5833,
											"end": 5868,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5833,
											"end": 5873,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5833,
											"end": 5873,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 5833,
											"end": 5873,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5833,
											"end": 5873,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5833,
											"end": 5873,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 5883,
											"end": 5917,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5883,
											"end": 5917,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5883,
											"end": 5928,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5883,
											"end": 5928,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5883,
											"end": 5928,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 5883,
											"end": 5928,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5883,
											"end": 5928,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5883,
											"end": 5928,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6051,
											"end": 6066,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "PUSH",
											"source": 2,
											"value": "DA1788C3E861A58A47F0D46073B13C4D66EFCC259714744F920D1AFE7B8DEE5"
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6067,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6084,
											"end": 6099,
											"name": "PUSH",
											"source": 2,
											"value": "C"
										},
										{
											"begin": 6084,
											"end": 6099,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6084,
											"end": 6099,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5530,
											"end": 6106,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 854,
											"end": 871,
											"name": "tag",
											"source": 2,
											"value": "183"
										},
										{
											"begin": 854,
											"end": 871,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 854,
											"end": 871,
											"name": "PUSH",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 854,
											"end": 871,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 854,
											"end": 871,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 854,
											"end": 871,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "tag",
											"source": 5,
											"value": "187"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "322"
										},
										{
											"begin": 1301,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "271"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "tag",
											"source": 5,
											"value": "322"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1290,
											"end": 1313,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "323"
										},
										{
											"begin": 1290,
											"end": 1295,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "132"
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "tag",
											"source": 5,
											"value": "323"
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1290,
											"end": 1313,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1290,
											"end": 1313,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "324"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "9924EBDF1ADD33D25D4EF888E16131F0A5687B0580A36C21B5C301A6C462EFFE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "tag",
											"source": 5,
											"value": "324"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2092,
											"end": 2114,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2092,
											"end": 2114,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "326"
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "PUSH",
											"source": 5,
											"value": "26"
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "PUSH data",
											"source": 5,
											"value": "245F15FF17F551913A7A18385165551503906A406F905AC1C2437281A7CD0CFE"
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "PUSH",
											"source": 5,
											"value": "26"
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "CODECOPY",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "tag",
											"source": 5,
											"value": "326"
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2193,
											"end": 2199,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2193,
											"end": 2199,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2193,
											"end": 2199,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2172,
											"end": 2210,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2172,
											"end": 2210,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2172,
											"end": 2210,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2172,
											"end": 2210,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 2172,
											"end": 2210,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2172,
											"end": 2210,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 2193,
											"end": 2199,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2193,
											"end": 2199,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2193,
											"end": 2199,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2172,
											"end": 2210,
											"name": "PUSH",
											"source": 5,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2172,
											"end": 2210,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2172,
											"end": 2210,
											"name": "LOG3",
											"source": 5
										},
										{
											"begin": 2220,
											"end": 2226,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "AND",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 7124,
											"end": 7197,
											"name": "tag",
											"source": 2,
											"value": "190"
										},
										{
											"begin": 7124,
											"end": 7197,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2242,
											"end": 2243,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2227,
											"end": 2239,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "328"
										},
										{
											"begin": 2227,
											"end": 2237,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 2227,
											"end": 2239,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2227,
											"end": 2239,
											"name": "tag",
											"source": 2,
											"value": "328"
										},
										{
											"begin": 2227,
											"end": 2239,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2227,
											"end": 2243,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2219,
											"end": 2244,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "329"
										},
										{
											"begin": 2219,
											"end": 2244,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2219,
											"end": 2244,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2219,
											"end": 2244,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2219,
											"end": 2244,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2219,
											"end": 2244,
											"name": "tag",
											"source": 2,
											"value": "329"
										},
										{
											"begin": 2219,
											"end": 2244,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7173,
											"end": 7190,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "331"
										},
										{
											"begin": 7173,
											"end": 7188,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "332"
										},
										{
											"begin": 7173,
											"end": 7190,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7173,
											"end": 7190,
											"name": "tag",
											"source": 2,
											"value": "331"
										},
										{
											"begin": 7173,
											"end": 7190,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7173,
											"end": 7190,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7124,
											"end": 7197,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "tag",
											"source": 2,
											"value": "197"
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14066,
											"end": 14079,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "334"
										},
										{
											"begin": 1301,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "271"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "tag",
											"source": 5,
											"value": "334"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1290,
											"end": 1313,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "335"
										},
										{
											"begin": 1290,
											"end": 1295,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "132"
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "tag",
											"source": 5,
											"value": "335"
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1290,
											"end": 1313,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1290,
											"end": 1313,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "336"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "9924EBDF1ADD33D25D4EF888E16131F0A5687B0580A36C21B5C301A6C462EFFE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "tag",
											"source": 5,
											"value": "336"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 14091,
											"end": 14097,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14087,
											"end": 14253,
											"name": "tag",
											"source": 2,
											"value": "338"
										},
										{
											"begin": 14087,
											"end": 14253,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14106,
											"end": 14110,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 14106,
											"end": 14117,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 14102,
											"end": 14117,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14102,
											"end": 14117,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 14087,
											"end": 14253,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 14087,
											"end": 14253,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "339"
										},
										{
											"begin": 14087,
											"end": 14253,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14194,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14195,
											"end": 14196,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14197,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14197,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14197,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14197,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14197,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "341"
										},
										{
											"begin": 14185,
											"end": 14197,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14197,
											"name": "INVALID",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14197,
											"name": "tag",
											"source": 2,
											"value": "341"
										},
										{
											"begin": 14185,
											"end": 14197,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14197,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14185,
											"end": 14197,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14197,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14185,
											"end": 14197,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14197,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14197,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14185,
											"end": 14215,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14215,
											"name": "PUSH",
											"source": 2,
											"value": "1FFC9A7"
										},
										{
											"begin": 14216,
											"end": 14226,
											"name": "PUSH",
											"source": 2,
											"value": "80AC58CD"
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "342"
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "tag",
											"source": 2,
											"value": "342"
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "344"
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "tag",
											"source": 2,
											"value": "344"
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "345"
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "tag",
											"source": 2,
											"value": "345"
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14185,
											"end": 14227,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "346"
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "PUSH",
											"source": 2,
											"value": "A"
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E4F545F455243373231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "tag",
											"source": 2,
											"value": "346"
										},
										{
											"begin": 14177,
											"end": 14242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14119,
											"end": 14122,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 14119,
											"end": 14122,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14087,
											"end": 14253,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "338"
										},
										{
											"begin": 14087,
											"end": 14253,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 14087,
											"end": 14253,
											"name": "tag",
											"source": 2,
											"value": "339"
										},
										{
											"begin": 14087,
											"end": 14253,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14087,
											"end": 14253,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14290,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 14293,
											"end": 14297,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "347"
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "tag",
											"source": 2,
											"value": "348"
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "348"
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "tag",
											"source": 2,
											"value": "347"
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14307,
											"end": 14323,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 14307,
											"end": 14323,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 14262,
											"end": 14297,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14307,
											"end": 14323,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "349"
										},
										{
											"begin": 14307,
											"end": 14323,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 14307,
											"end": 14311,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 14307,
											"end": 14311,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14307,
											"end": 14323,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14307,
											"end": 14323,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 14307,
											"end": 14323,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14307,
											"end": 14323,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14307,
											"end": 14323,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14307,
											"end": 14323,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "350"
										},
										{
											"begin": 14307,
											"end": 14323,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 14307,
											"end": 14323,
											"name": "tag",
											"source": 2,
											"value": "349"
										},
										{
											"begin": 14307,
											"end": 14323,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14307,
											"end": 14323,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14371,
											"end": 14381,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "PUSH",
											"source": 2,
											"value": "F0650831416F723858005CFEAE97A2D6F5E127D1E6AE8938574D1D73E7F4727C"
										},
										{
											"begin": 14395,
											"end": 14406,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14420,
											"end": 14429,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 14443,
											"end": 14458,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "tag",
											"source": 2,
											"value": "351"
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "353"
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "351"
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "tag",
											"source": 2,
											"value": "353"
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "tag",
											"source": 2,
											"value": "354"
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "356"
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "354"
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "tag",
											"source": 2,
											"value": "356"
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14339,
											"end": 14468,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14485,
											"end": 14489,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 14485,
											"end": 14489,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13972,
											"end": 14496,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "tag",
											"source": 2,
											"value": "201"
										},
										{
											"begin": 13098,
											"end": 13379,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13212,
											"end": 13220,
											"name": "PUSH",
											"source": 2,
											"value": "D"
										},
										{
											"begin": 13212,
											"end": 13220,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 13192,
											"end": 13207,
											"name": "PUSH",
											"source": 2,
											"value": "C"
										},
										{
											"begin": 13192,
											"end": 13207,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 13157,
											"end": 13164,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13157,
											"end": 13164,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13157,
											"end": 13164,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 13157,
											"end": 13164,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13192,
											"end": 13228,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "358"
										},
										{
											"begin": 13192,
											"end": 13228,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13226,
											"end": 13227,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 13226,
											"end": 13227,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13192,
											"end": 13221,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "359"
										},
										{
											"begin": 13192,
											"end": 13221,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13212,
											"end": 13220,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 13212,
											"end": 13220,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 13192,
											"end": 13211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "222"
										},
										{
											"begin": 13192,
											"end": 13221,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 13192,
											"end": 13221,
											"name": "tag",
											"source": 2,
											"value": "359"
										},
										{
											"begin": 13192,
											"end": 13221,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13192,
											"end": 13225,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13192,
											"end": 13225,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "223"
										},
										{
											"begin": 13192,
											"end": 13228,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 13192,
											"end": 13228,
											"name": "tag",
											"source": 2,
											"value": "358"
										},
										{
											"begin": 13192,
											"end": 13228,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13176,
											"end": 13228,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13176,
											"end": 13228,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 13279,
											"end": 13280,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13258,
											"end": 13276,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 13258,
											"end": 13276,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 13258,
											"end": 13280,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 13257,
											"end": 13372,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "360"
										},
										{
											"begin": 13257,
											"end": 13372,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 13371,
											"end": 13372,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13257,
											"end": 13372,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "299"
										},
										{
											"begin": 13257,
											"end": 13372,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 13257,
											"end": 13372,
											"name": "tag",
											"source": 2,
											"value": "360"
										},
										{
											"begin": 13257,
											"end": 13372,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13333,
											"end": 13351,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 13333,
											"end": 13351,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13310,
											"end": 13327,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 13310,
											"end": 13327,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 13310,
											"end": 13327,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13310,
											"end": 13327,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13310,
											"end": 13327,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13310,
											"end": 13327,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13310,
											"end": 13320,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 13310,
											"end": 13327,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 13310,
											"end": 13327,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13310,
											"end": 13327,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 13310,
											"end": 13327,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13310,
											"end": 13327,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 13310,
											"end": 13327,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 13300,
											"end": 13352,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "299"
										},
										{
											"begin": 13300,
											"end": 13352,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13333,
											"end": 13351,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13300,
											"end": 13328,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "359"
										},
										{
											"begin": 13300,
											"end": 13328,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13300,
											"end": 13305,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 13300,
											"end": 13305,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13300,
											"end": 13309,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "222"
										},
										{
											"begin": 13300,
											"end": 13328,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "tag",
											"source": 2,
											"value": "205"
										},
										{
											"begin": 6260,
											"end": 7102,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6433,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 6421,
											"end": 6433,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6447,
											"end": 6457,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6467,
											"end": 6471,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6324,
											"end": 6331,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6324,
											"end": 6331,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6421,
											"end": 6433,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6433,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6446,
											"name": "PUSH",
											"source": 2,
											"value": "23B872DD"
										},
										{
											"begin": 6421,
											"end": 6446,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6324,
											"end": 6331,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6433,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "365"
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "tag",
											"source": 2,
											"value": "365"
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "367"
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "tag",
											"source": 2,
											"value": "367"
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "368"
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "tag",
											"source": 2,
											"value": "368"
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6421,
											"end": 6482,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6413,
											"end": 6483,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "369"
										},
										{
											"begin": 6413,
											"end": 6483,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6413,
											"end": 6483,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6413,
											"end": 6483,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6413,
											"end": 6483,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6413,
											"end": 6483,
											"name": "tag",
											"source": 2,
											"value": "369"
										},
										{
											"begin": 6413,
											"end": 6483,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6545,
											"end": 6558,
											"name": "PUSH",
											"source": 2,
											"value": "B"
										},
										{
											"begin": 6545,
											"end": 6569,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6545,
											"end": 6569,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6545,
											"end": 6569,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6545,
											"end": 6569,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6545,
											"end": 6569,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6545,
											"end": 6569,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 6545,
											"end": 6558,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6646,
											"end": 6676,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "370"
										},
										{
											"begin": 6661,
											"end": 6666,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6562,
											"end": 6569,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6646,
											"end": 6660,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "371"
										},
										{
											"begin": 6646,
											"end": 6676,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6646,
											"end": 6676,
											"name": "tag",
											"source": 2,
											"value": "370"
										},
										{
											"begin": 6646,
											"end": 6676,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6770,
											"end": 6787,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6770,
											"end": 6787,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6770,
											"end": 6787,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6770,
											"end": 6787,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6770,
											"end": 6780,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 6770,
											"end": 6787,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6770,
											"end": 6787,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6770,
											"end": 6787,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6770,
											"end": 6787,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6770,
											"end": 6787,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6770,
											"end": 6787,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6770,
											"end": 6787,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6770,
											"end": 6787,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 6770,
											"end": 6797,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6770,
											"end": 6797,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6811,
											"end": 6821,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 6811,
											"end": 6828,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6811,
											"end": 6828,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6811,
											"end": 6828,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 6811,
											"end": 6828,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6811,
											"end": 6828,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6811,
											"end": 6828,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 6811,
											"end": 6828,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6842,
											"end": 6859,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 6842,
											"end": 6859,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6842,
											"end": 6859,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6842,
											"end": 6869,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 6842,
											"end": 6869,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6842,
											"end": 6869,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6883,
											"end": 6898,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6632,
											"end": 6676,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6632,
											"end": 6676,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "27CC9C295B15A532BB1B5F9308F1D54813E694C2EBDD1C2CED210BFE52DCD57E"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6729,
											"end": 6908,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": 6983,
											"end": 6995,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "299"
										},
										{
											"begin": 6983,
											"end": 6993,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "240"
										},
										{
											"begin": 6983,
											"end": 6995,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10505,
											"end": 10604,
											"name": "tag",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 10505,
											"end": 10604,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10548,
											"end": 10555,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10574,
											"end": 10597,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "294"
										},
										{
											"begin": 10586,
											"end": 10596,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 10574,
											"end": 10585,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 10574,
											"end": 10597,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 726,
											"end": 1139,
											"name": "tag",
											"source": 0,
											"value": "209"
										},
										{
											"begin": 726,
											"end": 1139,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1086,
											"end": 1106,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 1124,
											"end": 1132,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1124,
											"end": 1132,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1124,
											"end": 1132,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 726,
											"end": 1139,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3538,
											"end": 3753,
											"name": "tag",
											"source": 8,
											"value": "222"
										},
										{
											"begin": 3538,
											"end": 3753,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3596,
											"end": 3603,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3619,
											"end": 3625,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3615,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "377"
										},
										{
											"begin": 3615,
											"end": 3635,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3634,
											"end": 3635,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3627,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "279"
										},
										{
											"begin": 3627,
											"end": 3635,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3615,
											"end": 3635,
											"name": "tag",
											"source": 8,
											"value": "377"
										},
										{
											"begin": 3615,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3657,
											"end": 3662,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3657,
											"end": 3662,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3657,
											"end": 3662,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3661,
											"end": 3662,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3657,
											"end": 3658,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3657,
											"end": 3662,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3657,
											"end": 3658,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3680,
											"end": 3685,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "378"
										},
										{
											"begin": 3680,
											"end": 3685,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3680,
											"end": 3685,
											"name": "INVALID",
											"source": 8
										},
										{
											"begin": 3680,
											"end": 3685,
											"name": "tag",
											"source": 8,
											"value": "378"
										},
										{
											"begin": 3680,
											"end": 3685,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3680,
											"end": 3685,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 3680,
											"end": 3690,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "299"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH data",
											"source": 8,
											"value": "9113BB53C2876A3805B2C9242029423FC540A728243CE887AB24C82CF119FBA3"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "CODECOPY",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 4217,
											"end": 4367,
											"name": "tag",
											"source": 8,
											"value": "223"
										},
										{
											"begin": 4217,
											"end": 4367,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4275,
											"end": 4282,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4306,
											"end": 4307,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4302,
											"end": 4303,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4302,
											"end": 4307,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "381"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 8,
											"value": "1A"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 8,
											"value": "536166654D6174683A206469766973696F6E206279207A65726F000000000000"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "tag",
											"source": 8,
											"value": "381"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4359,
											"end": 4360,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4355,
											"end": 4356,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4355,
											"end": 4360,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4355,
											"end": 4360,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "382"
										},
										{
											"begin": 4355,
											"end": 4360,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4355,
											"end": 4360,
											"name": "INVALID",
											"source": 8
										},
										{
											"begin": 4355,
											"end": 4360,
											"name": "tag",
											"source": 8,
											"value": "382"
										},
										{
											"begin": 4355,
											"end": 4360,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4355,
											"end": 4360,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 4355,
											"end": 4360,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 4217,
											"end": 4367,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4217,
											"end": 4367,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3136,
											"end": 3291,
											"name": "tag",
											"source": 8,
											"value": "225"
										},
										{
											"begin": 3136,
											"end": 3291,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3194,
											"end": 3201,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3226,
											"end": 3227,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3221,
											"end": 3222,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3221,
											"end": 3227,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 3221,
											"end": 3227,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "384"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 8,
											"value": "1E"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 8,
											"value": "536166654D6174683A207375627472616374696F6E206F766572666C6F770000"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "tag",
											"source": 8,
											"value": "384"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3279,
											"end": 3284,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3279,
											"end": 3284,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3279,
											"end": 3284,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3136,
											"end": 3291,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 14666,
											"end": 15403,
											"name": "tag",
											"source": 2,
											"value": "238"
										},
										{
											"begin": 14666,
											"end": 15403,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14716,
											"end": 14733,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14736,
											"end": 14747,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "386"
										},
										{
											"begin": 14736,
											"end": 14739,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14744,
											"end": 14746,
											"name": "PUSH",
											"source": 2,
											"value": "A"
										},
										{
											"begin": 14736,
											"end": 14743,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "223"
										},
										{
											"begin": 14736,
											"end": 14747,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 14736,
											"end": 14747,
											"name": "tag",
											"source": 2,
											"value": "386"
										},
										{
											"begin": 14736,
											"end": 14747,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14716,
											"end": 14747,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14716,
											"end": 14747,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14758,
											"end": 14774,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14778,
											"end": 14800,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "387"
										},
										{
											"begin": 14792,
											"end": 14799,
											"name": "PUSH",
											"source": 2,
											"value": "E"
										},
										{
											"begin": 14792,
											"end": 14799,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 14778,
											"end": 14787,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14778,
											"end": 14791,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "222"
										},
										{
											"begin": 14778,
											"end": 14791,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14778,
											"end": 14800,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 14778,
											"end": 14800,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14778,
											"end": 14800,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 14778,
											"end": 14800,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 14778,
											"end": 14800,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 14778,
											"end": 14800,
											"name": "tag",
											"source": 2,
											"value": "387"
										},
										{
											"begin": 14778,
											"end": 14800,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14758,
											"end": 14801,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14758,
											"end": 14801,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14832,
											"end": 14848,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14852,
											"end": 14874,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "388"
										},
										{
											"begin": 14866,
											"end": 14873,
											"name": "PUSH",
											"source": 2,
											"value": "F"
										},
										{
											"begin": 14866,
											"end": 14873,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 14852,
											"end": 14861,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 14852,
											"end": 14865,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "222"
										},
										{
											"begin": 14852,
											"end": 14865,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14852,
											"end": 14874,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 14852,
											"end": 14874,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14852,
											"end": 14874,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 14852,
											"end": 14874,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 14852,
											"end": 14874,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 14852,
											"end": 14874,
											"name": "tag",
											"source": 2,
											"value": "388"
										},
										{
											"begin": 14852,
											"end": 14874,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14924,
											"end": 14939,
											"name": "PUSH",
											"source": 2,
											"value": "C"
										},
										{
											"begin": 14924,
											"end": 14939,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 14832,
											"end": 14875,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14832,
											"end": 14875,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14924,
											"end": 14953,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "389"
										},
										{
											"begin": 14924,
											"end": 14953,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14944,
											"end": 14952,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14924,
											"end": 14943,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "262"
										},
										{
											"begin": 14924,
											"end": 14953,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 14924,
											"end": 14953,
											"name": "tag",
											"source": 2,
											"value": "389"
										},
										{
											"begin": 14924,
											"end": 14953,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14906,
											"end": 14921,
											"name": "PUSH",
											"source": 2,
											"value": "C"
										},
										{
											"begin": 14906,
											"end": 14953,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 15032,
											"end": 15050,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 15032,
											"end": 15050,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 15032,
											"end": 15054,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 15028,
											"end": 15397,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "390"
										},
										{
											"begin": 15028,
											"end": 15397,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 15136,
											"end": 15256,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "391"
										},
										{
											"begin": 15166,
											"end": 15181,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 15166,
											"end": 15181,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 15224,
											"end": 15242,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 15224,
											"end": 15242,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15200,
											"end": 15208,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 15200,
											"end": 15220,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 15199,
											"end": 15242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 15199,
											"end": 15242,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "392"
										},
										{
											"begin": 15199,
											"end": 15242,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 15199,
											"end": 15242,
											"name": "INVALID",
											"source": 2
										},
										{
											"begin": 15199,
											"end": 15242,
											"name": "tag",
											"source": 2,
											"value": "392"
										},
										{
											"begin": 15199,
											"end": 15242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 15199,
											"end": 15242,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 15136,
											"end": 15148,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "262"
										},
										{
											"begin": 15136,
											"end": 15256,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 15136,
											"end": 15256,
											"name": "tag",
											"source": 2,
											"value": "391"
										},
										{
											"begin": 15136,
											"end": 15256,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 15118,
											"end": 15133,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 15118,
											"end": 15256,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 15028,
											"end": 15397,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "393"
										},
										{
											"begin": 15028,
											"end": 15397,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 15028,
											"end": 15397,
											"name": "tag",
											"source": 2,
											"value": "390"
										},
										{
											"begin": 15028,
											"end": 15397,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 15359,
											"end": 15374,
											"name": "PUSH",
											"source": 2,
											"value": "C"
										},
										{
											"begin": 15359,
											"end": 15386,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 15359,
											"end": 15386,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 15359,
											"end": 15386,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 15359,
											"end": 15386,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 15359,
											"end": 15386,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 15359,
											"end": 15386,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 15028,
											"end": 15397,
											"name": "tag",
											"source": 2,
											"value": "393"
										},
										{
											"begin": 15028,
											"end": 15397,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14666,
											"end": 15403,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14666,
											"end": 15403,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14666,
											"end": 15403,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14666,
											"end": 15403,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14666,
											"end": 15403,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 15444,
											"end": 16684,
											"name": "tag",
											"source": 2,
											"value": "240"
										},
										{
											"begin": 15444,
											"end": 16684,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 15617,
											"end": 15631,
											"name": "PUSH",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 15617,
											"end": 15631,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 15510,
											"end": 15525,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 15510,
											"end": 15525,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1597,
											"end": 1606,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1597,
											"end": 1606,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 15591,
											"end": 15632,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "395"
										},
										{
											"begin": 15591,
											"end": 15632,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 15510,
											"end": 15525,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 15510,
											"end": 15525,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 15591,
											"end": 15616,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "396"
										},
										{
											"begin": 15591,
											"end": 15632,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 15591,
											"end": 15632,
											"name": "tag",
											"source": 2,
											"value": "395"
										},
										{
											"begin": 15591,
											"end": 15632,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 15591,
											"end": 15650,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 15587,
											"end": 15865,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 15587,
											"end": 15865,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "397"
										},
										{
											"begin": 15587,
											"end": 15865,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 15706,
											"end": 15749,
											"name": "PUSH",
											"source": 2,
											"value": "2CFCE469A63F2E9972B7F23DA751E6943ED2B091C10E40B5C43B5F6105BF20EA"
										},
										{
											"begin": 15715,
											"end": 15729,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "398"
										},
										{
											"begin": 15715,
											"end": 15727,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "148"
										},
										{
											"begin": 15715,
											"end": 15729,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 15715,
											"end": 15729,
											"name": "tag",
											"source": 2,
											"value": "398"
										},
										{
											"begin": 15715,
											"end": 15729,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 15706,
											"end": 15749,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 15706,
											"end": 15749,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 15706,
											"end": 15749,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 15706,
											"end": 15749,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 15706,
											"end": 15749,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 15706,
											"end": 15749,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 15706,
											"end": 15749,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 15706,
											"end": 15749,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 15706,
											"end": 15749,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 15706,
											"end": 15749,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 15706,
											"end": 15749,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 15706,
											"end": 15749,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 15706,
											"end": 15749,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 15706,
											"end": 15749,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 15706,
											"end": 15749,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 15706,
											"end": 15749,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 15706,
											"end": 15749,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 15706,
											"end": 15749,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 15706,
											"end": 15749,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 15706,
											"end": 15749,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 15706,
											"end": 15749,
											"name": "LOG1",
											"source": 2
										},
										{
											"begin": 15820,
											"end": 15834,
											"name": "PUSH",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 15820,
											"end": 15854,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 15820,
											"end": 15854,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 15820,
											"end": 15854,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 15587,
											"end": 15865,
											"name": "tag",
											"source": 2,
											"value": "397"
										},
										{
											"begin": 15587,
											"end": 15865,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1654,
											"end": 1663,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 15937,
											"end": 15984,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "399"
										},
										{
											"begin": 15954,
											"end": 15971,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 15973,
											"end": 15983,
											"name": "PUSH",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 15973,
											"end": 15983,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 15937,
											"end": 15953,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "396"
										},
										{
											"begin": 15937,
											"end": 15984,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 15937,
											"end": 15984,
											"name": "tag",
											"source": 2,
											"value": "399"
										},
										{
											"begin": 15937,
											"end": 15984,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 15937,
											"end": 16002,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 15937,
											"end": 16040,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 15937,
											"end": 16040,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 15937,
											"end": 16040,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "400"
										},
										{
											"begin": 15937,
											"end": 16040,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 15937,
											"end": 16040,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 16039,
											"end": 16040,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 16018,
											"end": 16036,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 16018,
											"end": 16036,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 16018,
											"end": 16040,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 15937,
											"end": 16040,
											"name": "tag",
											"source": 2,
											"value": "400"
										},
										{
											"begin": 15937,
											"end": 16040,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 15920,
											"end": 16678,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 15920,
											"end": 16678,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "331"
										},
										{
											"begin": 15920,
											"end": 16678,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 16148,
											"end": 16156,
											"name": "PUSH",
											"source": 2,
											"value": "D"
										},
										{
											"begin": 16148,
											"end": 16156,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 16128,
											"end": 16143,
											"name": "PUSH",
											"source": 2,
											"value": "C"
										},
										{
											"begin": 16128,
											"end": 16143,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 16112,
											"end": 16125,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 16112,
											"end": 16125,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 16128,
											"end": 16208,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "402"
										},
										{
											"begin": 16128,
											"end": 16208,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 16186,
											"end": 16194,
											"name": "PUSH",
											"source": 2,
											"value": "15180"
										},
										{
											"begin": 16186,
											"end": 16194,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 16128,
											"end": 16164,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "359"
										},
										{
											"begin": 16128,
											"end": 16164,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 16162,
											"end": 16163,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 16162,
											"end": 16163,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 16128,
											"end": 16164,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 16128,
											"end": 16164,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 16128,
											"end": 16143,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16148,
											"end": 16156,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 16148,
											"end": 16156,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 16128,
											"end": 16147,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "222"
										},
										{
											"begin": 16128,
											"end": 16157,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 16128,
											"end": 16208,
											"name": "tag",
											"source": 2,
											"value": "402"
										},
										{
											"begin": 16128,
											"end": 16208,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16112,
											"end": 16208,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16112,
											"end": 16208,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 16222,
											"end": 16236,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 16247,
											"end": 16284,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "405"
										},
										{
											"begin": 16273,
											"end": 16283,
											"name": "PUSH",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 16273,
											"end": 16283,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 16247,
											"end": 16264,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 16247,
											"end": 16272,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "396"
										},
										{
											"begin": 16247,
											"end": 16272,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16247,
											"end": 16284,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 16247,
											"end": 16284,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16247,
											"end": 16284,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 16247,
											"end": 16284,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 16247,
											"end": 16284,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 16247,
											"end": 16284,
											"name": "tag",
											"source": 2,
											"value": "405"
										},
										{
											"begin": 16247,
											"end": 16284,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16393,
											"end": 16408,
											"name": "PUSH",
											"source": 2,
											"value": "C"
										},
										{
											"begin": 16393,
											"end": 16408,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 16239,
											"end": 16284,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16239,
											"end": 16284,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 16239,
											"end": 16284,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 16239,
											"end": 16284,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 16393,
											"end": 16424,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "406"
										},
										{
											"begin": 16393,
											"end": 16424,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16239,
											"end": 16284,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 16393,
											"end": 16416,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "396"
										},
										{
											"begin": 16393,
											"end": 16424,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 16393,
											"end": 16424,
											"name": "tag",
											"source": 2,
											"value": "406"
										},
										{
											"begin": 16393,
											"end": 16424,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16375,
											"end": 16390,
											"name": "PUSH",
											"source": 2,
											"value": "C"
										},
										{
											"begin": 16375,
											"end": 16424,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 16486,
											"end": 16501,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 16486,
											"end": 16501,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 16542,
											"end": 16560,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 16542,
											"end": 16560,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 16456,
											"end": 16574,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "407"
										},
										{
											"begin": 16456,
											"end": 16574,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 16486,
											"end": 16501,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 16520,
											"end": 16538,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 16520,
											"end": 16538,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 16542,
											"end": 16560,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 16519,
											"end": 16560,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "392"
										},
										{
											"begin": 16519,
											"end": 16560,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 16519,
											"end": 16560,
											"name": "INVALID",
											"source": 2
										},
										{
											"begin": 16456,
											"end": 16574,
											"name": "tag",
											"source": 2,
											"value": "407"
										},
										{
											"begin": 16456,
											"end": 16574,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16438,
											"end": 16453,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 16438,
											"end": 16574,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 16637,
											"end": 16647,
											"name": "PUSH",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 16637,
											"end": 16667,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 15444,
											"end": 16684,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "tag",
											"source": 8,
											"value": "262"
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2748,
											"end": 2755,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2779,
											"end": 2784,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2779,
											"end": 2784,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2779,
											"end": 2784,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2802,
											"end": 2808,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2802,
											"end": 2808,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2802,
											"end": 2808,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 2802,
											"end": 2808,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "299"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 8,
											"value": "1B"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 8,
											"value": "536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 598,
											"end": 702,
											"name": "tag",
											"source": 1,
											"value": "271"
										},
										{
											"begin": 598,
											"end": 702,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 685,
											"end": 695,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 598,
											"end": 702,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 598,
											"end": 702,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 19571,
											"end": 21540,
											"name": "tag",
											"source": 2,
											"value": "300"
										},
										{
											"begin": 19571,
											"end": 21540,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 19716,
											"end": 19726,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 19673,
											"end": 19686,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 19755,
											"end": 19774,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 19755,
											"end": 19774,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 19755,
											"end": 19774,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19755,
											"end": 19765,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 19755,
											"end": 19774,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 19755,
											"end": 19774,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19755,
											"end": 19774,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 19755,
											"end": 19774,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 19755,
											"end": 19774,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 19755,
											"end": 19774,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 19673,
											"end": 19686,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19673,
											"end": 19686,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 19716,
											"end": 19726,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19744,
											"end": 19774,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 19744,
											"end": 19774,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 19744,
											"end": 19774,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 19736,
											"end": 19775,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "413"
										},
										{
											"begin": 19736,
											"end": 19775,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 19736,
											"end": 19775,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 19736,
											"end": 19775,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 19736,
											"end": 19775,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 19736,
											"end": 19775,
											"name": "tag",
											"source": 2,
											"value": "413"
										},
										{
											"begin": 19736,
											"end": 19775,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 19890,
											"end": 19891,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 19875,
											"end": 19887,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "414"
										},
										{
											"begin": 19875,
											"end": 19885,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 19875,
											"end": 19887,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 19875,
											"end": 19887,
											"name": "tag",
											"source": 2,
											"value": "414"
										},
										{
											"begin": 19875,
											"end": 19887,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 19875,
											"end": 19891,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 19871,
											"end": 19927,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 19871,
											"end": 19927,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "416"
										},
										{
											"begin": 19871,
											"end": 19927,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 19907,
											"end": 19916,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "416"
										},
										{
											"begin": 19907,
											"end": 19914,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 19907,
											"end": 19916,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 19907,
											"end": 19916,
											"name": "tag",
											"source": 2,
											"value": "416"
										},
										{
											"begin": 19907,
											"end": 19916,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 20004,
											"end": 20023,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20004,
											"end": 20023,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 20004,
											"end": 20023,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 20004,
											"end": 20023,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20004,
											"end": 20023,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20004,
											"end": 20023,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20004,
											"end": 20014,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 20004,
											"end": 20023,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 20004,
											"end": 20023,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20004,
											"end": 20023,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 20004,
											"end": 20023,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20004,
											"end": 20023,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 20004,
											"end": 20023,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 19991,
											"end": 20033,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "417"
										},
										{
											"begin": 19991,
											"end": 20033,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20025,
											"end": 20032,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 19991,
											"end": 20003,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "225"
										},
										{
											"begin": 19991,
											"end": 20033,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 19991,
											"end": 20033,
											"name": "tag",
											"source": 2,
											"value": "417"
										},
										{
											"begin": 19991,
											"end": 20033,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 19969,
											"end": 19988,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 19969,
											"end": 19988,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 19969,
											"end": 19988,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 19969,
											"end": 19988,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 19969,
											"end": 19988,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19969,
											"end": 19988,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 19969,
											"end": 19988,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19969,
											"end": 19979,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 19969,
											"end": 19988,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 19969,
											"end": 19988,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19969,
											"end": 19988,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 19969,
											"end": 19988,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 19969,
											"end": 19988,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 19969,
											"end": 19988,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 19969,
											"end": 20033,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 19969,
											"end": 20033,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19969,
											"end": 20033,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 19969,
											"end": 20033,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 20081,
											"end": 20103,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20081,
											"end": 20103,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 20081,
											"end": 20103,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 20081,
											"end": 20103,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20081,
											"end": 20103,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20081,
											"end": 20103,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 20081,
											"end": 20103,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20068,
											"end": 20113,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "418"
										},
										{
											"begin": 20068,
											"end": 20113,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20105,
											"end": 20112,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 20068,
											"end": 20080,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "262"
										},
										{
											"begin": 20068,
											"end": 20113,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 20068,
											"end": 20113,
											"name": "tag",
											"source": 2,
											"value": "418"
										},
										{
											"begin": 20068,
											"end": 20113,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 20043,
											"end": 20065,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 20043,
											"end": 20065,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20043,
											"end": 20065,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 20043,
											"end": 20065,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 20043,
											"end": 20065,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20043,
											"end": 20065,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20043,
											"end": 20065,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20043,
											"end": 20053,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 20043,
											"end": 20065,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 20043,
											"end": 20065,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20043,
											"end": 20065,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20043,
											"end": 20065,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20043,
											"end": 20065,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 20043,
											"end": 20065,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20043,
											"end": 20065,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 20043,
											"end": 20065,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 20043,
											"end": 20113,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 20043,
											"end": 20113,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20043,
											"end": 20113,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 20043,
											"end": 20113,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 20217,
											"end": 20232,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 20217,
											"end": 20232,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20217,
											"end": 20232,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20185,
											"end": 20204,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 20185,
											"end": 20204,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 20185,
											"end": 20204,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 20185,
											"end": 20204,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 20185,
											"end": 20204,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20185,
											"end": 20195,
											"name": "PUSH",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 20185,
											"end": 20204,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 20185,
											"end": 20204,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20185,
											"end": 20204,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 20185,
											"end": 20204,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 20185,
											"end": 20204,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 20185,
											"end": 20243,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20185,
											"end": 20243,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20217,
											"end": 20242,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 20217,
											"end": 20242,
											"name": "DUP11",
											"source": 2
										},
										{
											"begin": 20217,
											"end": 20242,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 20185,
											"end": 20243,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20185,
											"end": 20243,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 20185,
											"end": 20243,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 20185,
											"end": 20243,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20185,
											"end": 20243,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 20185,
											"end": 20243,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 20288,
											"end": 20303,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 20288,
											"end": 20303,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20253,
											"end": 20275,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 20253,
											"end": 20275,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20253,
											"end": 20275,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20253,
											"end": 20275,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 20253,
											"end": 20275,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20253,
											"end": 20275,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 20253,
											"end": 20314,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20253,
											"end": 20314,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20288,
											"end": 20313,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 20288,
											"end": 20313,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 20288,
											"end": 20313,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 20253,
											"end": 20314,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20253,
											"end": 20314,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 20253,
											"end": 20314,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20253,
											"end": 20314,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20253,
											"end": 20314,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 20253,
											"end": 20314,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 20417,
											"end": 20427,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 20417,
											"end": 20439,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20417,
											"end": 20439,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 20417,
											"end": 20439,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20417,
											"end": 20439,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 20417,
											"end": 20449,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20417,
											"end": 20454,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 20417,
											"end": 20512,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20417,
											"end": 20512,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 20417,
											"end": 20512,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "419"
										},
										{
											"begin": 20417,
											"end": 20512,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 20470,
											"end": 20492,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 20470,
											"end": 20492,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 20470,
											"end": 20492,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 20470,
											"end": 20492,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20470,
											"end": 20492,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20470,
											"end": 20492,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20470,
											"end": 20480,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 20470,
											"end": 20492,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 20470,
											"end": 20492,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20470,
											"end": 20492,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 20470,
											"end": 20492,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20470,
											"end": 20492,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 20470,
											"end": 20507,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 20470,
											"end": 20507,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20470,
											"end": 20507,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20470,
											"end": 20512,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 20417,
											"end": 20512,
											"name": "tag",
											"source": 2,
											"value": "419"
										},
										{
											"begin": 20417,
											"end": 20512,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 20400,
											"end": 20558,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 20400,
											"end": 20558,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "420"
										},
										{
											"begin": 20400,
											"end": 20558,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 20537,
											"end": 20542,
											"name": "PUSH",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 20537,
											"end": 20547,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20537,
											"end": 20547,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20546,
											"end": 20547,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 20537,
											"end": 20547,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20537,
											"end": 20547,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20537,
											"end": 20547,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 20400,
											"end": 20558,
											"name": "tag",
											"source": 2,
											"value": "420"
										},
										{
											"begin": 20400,
											"end": 20558,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 20594,
											"end": 20613,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20594,
											"end": 20613,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 20594,
											"end": 20613,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 20594,
											"end": 20613,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 20594,
											"end": 20613,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20594,
											"end": 20613,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20594,
											"end": 20613,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20594,
											"end": 20604,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 20594,
											"end": 20613,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 20594,
											"end": 20613,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20594,
											"end": 20613,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20594,
											"end": 20613,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20594,
											"end": 20613,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 20594,
											"end": 20613,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20594,
											"end": 20613,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 20594,
											"end": 20613,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 20594,
											"end": 20632,
											"name": "PUSH",
											"source": 2,
											"value": "C"
										},
										{
											"begin": 20594,
											"end": 20632,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20594,
											"end": 20632,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20594,
											"end": 20637,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20594,
											"end": 20637,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20636,
											"end": 20637,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 20594,
											"end": 20637,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20594,
											"end": 20637,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20594,
											"end": 20637,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20594,
											"end": 20637,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20594,
											"end": 20637,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 20594,
											"end": 20637,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 20647,
											"end": 20684,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 20647,
											"end": 20684,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20647,
											"end": 20684,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 20647,
											"end": 20684,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20647,
											"end": 20695,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20647,
											"end": 20695,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20647,
											"end": 20695,
											"name": "DUP11",
											"source": 2
										},
										{
											"begin": 20647,
											"end": 20695,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20647,
											"end": 20695,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20647,
											"end": 20695,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 20705,
											"end": 20727,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 20705,
											"end": 20727,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 20705,
											"end": 20727,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 20705,
											"end": 20727,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20705,
											"end": 20727,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 20705,
											"end": 20727,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20705,
											"end": 20727,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 20705,
											"end": 20727,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20705,
											"end": 20727,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20705,
											"end": 20727,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 20705,
											"end": 20742,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 20705,
											"end": 20742,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20705,
											"end": 20742,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20705,
											"end": 20753,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20705,
											"end": 20753,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20705,
											"end": 20753,
											"name": "DUP11",
											"source": 2
										},
										{
											"begin": 20705,
											"end": 20753,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20705,
											"end": 20753,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20705,
											"end": 20753,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 20763,
											"end": 20801,
											"name": "PUSH",
											"source": 2,
											"value": "D"
										},
										{
											"begin": 20763,
											"end": 20801,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20763,
											"end": 20806,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20763,
											"end": 20806,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20763,
											"end": 20806,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 20763,
											"end": 20806,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20763,
											"end": 20806,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20763,
											"end": 20806,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 20858,
											"end": 20866,
											"name": "PUSH",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 20858,
											"end": 20871,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20858,
											"end": 20871,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20858,
											"end": 20871,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20858,
											"end": 20871,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 20858,
											"end": 20871,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20858,
											"end": 20871,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20858,
											"end": 20871,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 20858,
											"end": 20871,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 20937,
											"end": 20994,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 20937,
											"end": 20994,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 20937,
											"end": 20994,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 20937,
											"end": 20994,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20937,
											"end": 20994,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20978,
											"end": 20993,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 20937,
											"end": 20994,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 20937,
											"end": 20994,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20937,
											"end": 20994,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20937,
											"end": 20994,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 20937,
											"end": 20994,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20937,
											"end": 20994,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 20937,
											"end": 20994,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20937,
											"end": 20994,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 20937,
											"end": 20994,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 20705,
											"end": 20727,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 20705,
											"end": 20727,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 20937,
											"end": 20994,
											"name": "PUSH",
											"source": 2,
											"value": "91C7D71A3AE3FB7CF61E00517BF4868E9E23D0BACE5E304CBC3B68DE5D85350E"
										},
										{
											"begin": 20937,
											"end": 20994,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 20937,
											"end": 20994,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 20937,
											"end": 20994,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 20937,
											"end": 20994,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20937,
											"end": 20994,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 20937,
											"end": 20994,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20937,
											"end": 20994,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20937,
											"end": 20994,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 21101,
											"end": 21120,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 21101,
											"end": 21120,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21101,
											"end": 21120,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21101,
											"end": 21120,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21101,
											"end": 21111,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 21101,
											"end": 21120,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 21101,
											"end": 21120,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21101,
											"end": 21120,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21101,
											"end": 21120,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21101,
											"end": 21120,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 21101,
											"end": 21120,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 21101,
											"end": 21120,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 21101,
											"end": 21120,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 21101,
											"end": 21130,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 21101,
											"end": 21130,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 21144,
											"end": 21154,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 21144,
											"end": 21163,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 21144,
											"end": 21163,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21144,
											"end": 21163,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 21144,
											"end": 21163,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 21144,
											"end": 21163,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 21144,
											"end": 21163,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 21144,
											"end": 21163,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 21177,
											"end": 21196,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 21177,
											"end": 21196,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 21177,
											"end": 21196,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21177,
											"end": 21206,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 21177,
											"end": 21206,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 21177,
											"end": 21206,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21220,
											"end": 21235,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "27CC9C295B15A532BB1B5F9308F1D54813E694C2EBDD1C2CED210BFE52DCD57E"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 21058,
											"end": 21245,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 21358,
											"end": 21380,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 21358,
											"end": 21380,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21358,
											"end": 21380,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21358,
											"end": 21380,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21358,
											"end": 21368,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 21358,
											"end": 21380,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 21358,
											"end": 21380,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21358,
											"end": 21380,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21358,
											"end": 21380,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21358,
											"end": 21380,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 21358,
											"end": 21380,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 21358,
											"end": 21380,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 21358,
											"end": 21380,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 21358,
											"end": 21390,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 21358,
											"end": 21390,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 21404,
											"end": 21414,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 21404,
											"end": 21426,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 21404,
											"end": 21426,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21404,
											"end": 21426,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 21404,
											"end": 21426,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 21404,
											"end": 21426,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 21404,
											"end": 21426,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 21404,
											"end": 21426,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 21440,
											"end": 21462,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 21440,
											"end": 21462,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 21440,
											"end": 21462,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21440,
											"end": 21472,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 21440,
											"end": 21472,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 21440,
											"end": 21472,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21486,
											"end": 21501,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "27CC9C295B15A532BB1B5F9308F1D54813E694C2EBDD1C2CED210BFE52DCD57E"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 21312,
											"end": 21511,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 21529,
											"end": 21533,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 21529,
											"end": 21533,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 19571,
											"end": 21540,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 19571,
											"end": 21540,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 18346,
											"end": 19524,
											"name": "tag",
											"source": 2,
											"value": "332"
										},
										{
											"begin": 18346,
											"end": 19524,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 18391,
											"end": 18398,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 18426,
											"end": 18436,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 18391,
											"end": 18398,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18533,
											"end": 18551,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "422"
										},
										{
											"begin": 18426,
											"end": 18436,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 18533,
											"end": 18544,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 18533,
											"end": 18551,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 18533,
											"end": 18551,
											"name": "tag",
											"source": 2,
											"value": "422"
										},
										{
											"begin": 18533,
											"end": 18551,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 18561,
											"end": 18578,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 18561,
											"end": 18578,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 18561,
											"end": 18578,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 18561,
											"end": 18578,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18561,
											"end": 18578,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18561,
											"end": 18578,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18561,
											"end": 18571,
											"name": "PUSH",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 18561,
											"end": 18578,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 18561,
											"end": 18578,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18561,
											"end": 18578,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 18561,
											"end": 18578,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18561,
											"end": 18578,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 18561,
											"end": 18614,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18561,
											"end": 18614,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 18591,
											"end": 18613,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 18591,
											"end": 18613,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 18561,
											"end": 18614,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18561,
											"end": 18614,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18561,
											"end": 18614,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 18512,
											"end": 18551,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18512,
											"end": 18551,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 18787,
											"end": 18825,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "423"
										},
										{
											"begin": 18802,
											"end": 18812,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 18512,
											"end": 18551,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 18787,
											"end": 18801,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "371"
										},
										{
											"begin": 18787,
											"end": 18825,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 18787,
											"end": 18825,
											"name": "tag",
											"source": 2,
											"value": "423"
										},
										{
											"begin": 18787,
											"end": 18825,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18911,
											"end": 18926,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 18769,
											"end": 18825,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 18769,
											"end": 18825,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "PUSH",
											"source": 2,
											"value": "193A876AC91D11A4A0A71EBEF73B195BA55AA7C16D6755C93C21D973E692A02C"
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18872,
											"end": 18927,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 19031,
											"end": 19048,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 19031,
											"end": 19048,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 19031,
											"end": 19048,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 19031,
											"end": 19048,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19031,
											"end": 19048,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 19031,
											"end": 19048,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19031,
											"end": 19041,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 19031,
											"end": 19048,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 19031,
											"end": 19048,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19031,
											"end": 19048,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 19031,
											"end": 19048,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19031,
											"end": 19048,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 19031,
											"end": 19059,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 19031,
											"end": 19059,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 19031,
											"end": 19059,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 19005,
											"end": 19093,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "424"
										},
										{
											"begin": 19005,
											"end": 19093,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19073,
											"end": 19083,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 19005,
											"end": 19017,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "262"
										},
										{
											"begin": 19005,
											"end": 19093,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 19005,
											"end": 19093,
											"name": "tag",
											"source": 2,
											"value": "424"
										},
										{
											"begin": 19005,
											"end": 19093,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 18974,
											"end": 18991,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 18974,
											"end": 18991,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 18974,
											"end": 18991,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 18974,
											"end": 18991,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18974,
											"end": 18991,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18974,
											"end": 18991,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18974,
											"end": 18984,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 18974,
											"end": 18991,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 18974,
											"end": 18991,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18974,
											"end": 18991,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18974,
											"end": 18991,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18974,
											"end": 18991,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 18974,
											"end": 18991,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18974,
											"end": 18991,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 18974,
											"end": 18991,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 18974,
											"end": 19002,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 18974,
											"end": 19002,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18974,
											"end": 19002,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18974,
											"end": 19093,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 18974,
											"end": 19093,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18974,
											"end": 19093,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 18974,
											"end": 19093,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 19103,
											"end": 19132,
											"name": "PUSH",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 19103,
											"end": 19132,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 19103,
											"end": 19132,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 19103,
											"end": 19137,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 19103,
											"end": 19137,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 19136,
											"end": 19137,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 19103,
											"end": 19137,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19103,
											"end": 19137,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 19103,
											"end": 19137,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 19103,
											"end": 19137,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19103,
											"end": 19137,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 19103,
											"end": 19137,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 19231,
											"end": 19258,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 19231,
											"end": 19258,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 19272,
											"end": 19282,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 19272,
											"end": 19289,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 19272,
											"end": 19289,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19272,
											"end": 19289,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 19272,
											"end": 19289,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 19272,
											"end": 19289,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19272,
											"end": 19289,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 19272,
											"end": 19289,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19320,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19320,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19320,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19330,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19330,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19330,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19330,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19344,
											"end": 19359,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 18974,
											"end": 18991,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18974,
											"end": 18991,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "27CC9C295B15A532BB1B5F9308F1D54813E694C2EBDD1C2CED210BFE52DCD57E"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19190,
											"end": 19369,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": 19448,
											"end": 19460,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "425"
										},
										{
											"begin": 19448,
											"end": 19458,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "240"
										},
										{
											"begin": 19448,
											"end": 19460,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 19448,
											"end": 19460,
											"name": "tag",
											"source": 2,
											"value": "425"
										},
										{
											"begin": 19448,
											"end": 19460,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 19510,
											"end": 19517,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 18346,
											"end": 19524,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18346,
											"end": 19524,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 16730,
											"end": 18306,
											"name": "tag",
											"source": 2,
											"value": "371"
										},
										{
											"begin": 16730,
											"end": 18306,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 16942,
											"end": 16964,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 16942,
											"end": 16964,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 16831,
											"end": 16838,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 16942,
											"end": 16964,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16942,
											"end": 16964,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 16942,
											"end": 16964,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 16942,
											"end": 16952,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 16942,
											"end": 16964,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 16942,
											"end": 16964,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 16942,
											"end": 16964,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 16942,
											"end": 16964,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 16942,
											"end": 16964,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 16942,
											"end": 16974,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 16942,
											"end": 16979,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 16942,
											"end": 17037,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 16942,
											"end": 17037,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 16942,
											"end": 17037,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "427"
										},
										{
											"begin": 16942,
											"end": 17037,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 16995,
											"end": 17017,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 16995,
											"end": 17017,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 16995,
											"end": 17017,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 16995,
											"end": 17017,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16995,
											"end": 17017,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 16995,
											"end": 17017,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 16995,
											"end": 17005,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 16995,
											"end": 17017,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 16995,
											"end": 17017,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 16995,
											"end": 17017,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 16995,
											"end": 17017,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16995,
											"end": 17017,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 16995,
											"end": 17032,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 16995,
											"end": 17032,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 16995,
											"end": 17032,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 16995,
											"end": 17037,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 16942,
											"end": 17037,
											"name": "tag",
											"source": 2,
											"value": "427"
										},
										{
											"begin": 16942,
											"end": 17037,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16925,
											"end": 17083,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 16925,
											"end": 17083,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "428"
										},
										{
											"begin": 16925,
											"end": 17083,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 17062,
											"end": 17067,
											"name": "PUSH",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 17062,
											"end": 17072,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17062,
											"end": 17072,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 17071,
											"end": 17072,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 17062,
											"end": 17072,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 17062,
											"end": 17072,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17062,
											"end": 17072,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 16925,
											"end": 17083,
											"name": "tag",
											"source": 2,
											"value": "428"
										},
										{
											"begin": 16925,
											"end": 17083,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17121,
											"end": 17129,
											"name": "PUSH",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 17121,
											"end": 17134,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17121,
											"end": 17134,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 17133,
											"end": 17134,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 17121,
											"end": 17134,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 17121,
											"end": 17134,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17121,
											"end": 17134,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 17121,
											"end": 17129,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17213,
											"end": 17216,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 17180,
											"end": 17210,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "429"
										},
										{
											"begin": 17193,
											"end": 17200,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 17121,
											"end": 17129,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 17180,
											"end": 17192,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "222"
										},
										{
											"begin": 17180,
											"end": 17210,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 17180,
											"end": 17210,
											"name": "tag",
											"source": 2,
											"value": "429"
										},
										{
											"begin": 17180,
											"end": 17210,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17180,
											"end": 17216,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17180,
											"end": 17216,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "430"
										},
										{
											"begin": 17180,
											"end": 17216,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 17180,
											"end": 17216,
											"name": "INVALID",
											"source": 2
										},
										{
											"begin": 17180,
											"end": 17216,
											"name": "tag",
											"source": 2,
											"value": "430"
										},
										{
											"begin": 17180,
											"end": 17216,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17180,
											"end": 17216,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 17150,
											"end": 17216,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17150,
											"end": 17216,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 17228,
											"end": 17245,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17248,
											"end": 17290,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "431"
										},
										{
											"begin": 17261,
											"end": 17268,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 17270,
											"end": 17289,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 17248,
											"end": 17260,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "225"
										},
										{
											"begin": 17248,
											"end": 17290,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 17248,
											"end": 17290,
											"name": "tag",
											"source": 2,
											"value": "431"
										},
										{
											"begin": 17248,
											"end": 17290,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 17385,
											"end": 17400,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 17228,
											"end": 17290,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 17228,
											"end": 17290,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "PUSH",
											"source": 2,
											"value": "B49BB132260F6AA1C86E2D2A3957C097216E6EC9B5FA15867289F058B4D297AC"
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17345,
											"end": 17401,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": 17510,
											"end": 17511,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17500,
											"end": 17507,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17500,
											"end": 17511,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 17500,
											"end": 17593,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17500,
											"end": 17593,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 17500,
											"end": 17593,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "432"
										},
										{
											"begin": 17500,
											"end": 17593,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 17575,
											"end": 17593,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 17575,
											"end": 17593,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 17531,
											"end": 17572,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "433"
										},
										{
											"begin": 17544,
											"end": 17551,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 17575,
											"end": 17593,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 17531,
											"end": 17543,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "262"
										},
										{
											"begin": 17531,
											"end": 17572,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 17531,
											"end": 17572,
											"name": "tag",
											"source": 2,
											"value": "433"
										},
										{
											"begin": 17531,
											"end": 17572,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17531,
											"end": 17593,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 17500,
											"end": 17593,
											"name": "tag",
											"source": 2,
											"value": "432"
										},
										{
											"begin": 17500,
											"end": 17593,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17479,
											"end": 17603,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "434"
										},
										{
											"begin": 17479,
											"end": 17603,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 17479,
											"end": 17603,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17479,
											"end": 17603,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17479,
											"end": 17603,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 17479,
											"end": 17603,
											"name": "tag",
											"source": 2,
											"value": "434"
										},
										{
											"begin": 17479,
											"end": 17603,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17617,
											"end": 17635,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 17617,
											"end": 17635,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 17617,
											"end": 17639,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 17613,
											"end": 17754,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "435"
										},
										{
											"begin": 17613,
											"end": 17754,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 17655,
											"end": 17673,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 17655,
											"end": 17684,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17655,
											"end": 17684,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 17655,
											"end": 17684,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 17655,
											"end": 17684,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 17655,
											"end": 17684,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17655,
											"end": 17684,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 17613,
											"end": 17754,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "436"
										},
										{
											"begin": 17613,
											"end": 17754,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 17613,
											"end": 17754,
											"name": "tag",
											"source": 2,
											"value": "435"
										},
										{
											"begin": 17613,
											"end": 17754,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17715,
											"end": 17733,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 17715,
											"end": 17743,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17715,
											"end": 17743,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17715,
											"end": 17743,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 17613,
											"end": 17754,
											"name": "tag",
											"source": 2,
											"value": "436"
										},
										{
											"begin": 17613,
											"end": 17754,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17819,
											"end": 17852,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "437"
										},
										{
											"begin": 17832,
											"end": 17851,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 17819,
											"end": 17831,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "238"
										},
										{
											"begin": 17819,
											"end": 17852,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 17819,
											"end": 17852,
											"name": "tag",
											"source": 2,
											"value": "437"
										},
										{
											"begin": 17819,
											"end": 17852,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 17900,
											"end": 17922,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 17900,
											"end": 17922,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 17900,
											"end": 17922,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17900,
											"end": 17922,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17900,
											"end": 17922,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17900,
											"end": 17922,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 17900,
											"end": 17910,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 17900,
											"end": 17922,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 17900,
											"end": 17922,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 17900,
											"end": 17922,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 17900,
											"end": 17922,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17900,
											"end": 17922,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 17900,
											"end": 17922,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 17887,
											"end": 17932,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "438"
										},
										{
											"begin": 17887,
											"end": 17932,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17924,
											"end": 17931,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 17887,
											"end": 17899,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "262"
										},
										{
											"begin": 17887,
											"end": 17932,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 17887,
											"end": 17932,
											"name": "tag",
											"source": 2,
											"value": "438"
										},
										{
											"begin": 17887,
											"end": 17932,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 17862,
											"end": 17884,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 17862,
											"end": 17884,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 17862,
											"end": 17884,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17862,
											"end": 17884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17862,
											"end": 17884,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17862,
											"end": 17884,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 17862,
											"end": 17872,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 17862,
											"end": 17884,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 17862,
											"end": 17884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17862,
											"end": 17884,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17862,
											"end": 17884,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 17862,
											"end": 17884,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 17862,
											"end": 17884,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17862,
											"end": 17884,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 17862,
											"end": 17884,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 17862,
											"end": 17932,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 17862,
											"end": 17932,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17862,
											"end": 17932,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 17862,
											"end": 17932,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 18007,
											"end": 18022,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 18007,
											"end": 18022,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 18071,
											"end": 18081,
											"name": "PUSH",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 18071,
											"end": 18093,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 18071,
											"end": 18093,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18071,
											"end": 18093,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 18071,
											"end": 18093,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 18071,
											"end": 18093,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 18071,
											"end": 18112,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18071,
											"end": 18112,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 18007,
											"end": 18032,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 18007,
											"end": 18032,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 18007,
											"end": 18032,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 18071,
											"end": 18112,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 18071,
											"end": 18112,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18071,
											"end": 18112,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 18071,
											"end": 18112,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18071,
											"end": 18112,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18071,
											"end": 18112,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 18122,
											"end": 18132,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 18122,
											"end": 18144,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18122,
											"end": 18144,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18122,
											"end": 18144,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 18122,
											"end": 18165,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18122,
											"end": 18165,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 18122,
											"end": 18165,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 18122,
											"end": 18165,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18122,
											"end": 18165,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18122,
											"end": 18165,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 18175,
											"end": 18207,
											"name": "PUSH",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 18175,
											"end": 18207,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18175,
											"end": 18212,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18175,
											"end": 18212,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 18175,
											"end": 18212,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18175,
											"end": 18212,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18175,
											"end": 18212,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 18025,
											"end": 18032,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 16730,
											"end": 18306,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 16730,
											"end": 18306,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 16730,
											"end": 18306,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 16730,
											"end": 18306,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 16730,
											"end": 18306,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 7288,
											"end": 7453,
											"name": "tag",
											"source": 8,
											"value": "396"
										},
										{
											"begin": 7288,
											"end": 7453,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7344,
											"end": 7348,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7368,
											"end": 7369,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7364,
											"end": 7365,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7364,
											"end": 7369,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 7360,
											"end": 7447,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 7360,
											"end": 7447,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "440"
										},
										{
											"begin": 7360,
											"end": 7447,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7392,
											"end": 7393,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7385,
											"end": 7393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "279"
										},
										{
											"begin": 7385,
											"end": 7393,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7360,
											"end": 7447,
											"name": "tag",
											"source": 8,
											"value": "440"
										},
										{
											"begin": 7360,
											"end": 7447,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7431,
											"end": 7436,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7431,
											"end": 7436,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7431,
											"end": 7436,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 7424,
											"end": 7436,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "279"
										},
										{
											"begin": 7424,
											"end": 7436,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "283"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1C0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CALLDATASIZE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CALLDATACOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "286"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1C0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "350"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "KECCAK256",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "444"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "443"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "444"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "OR",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "443"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "444"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "445"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "446"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "445"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "446"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "447"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "445"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "447"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										}
									],
									".data": {
										"245F15FF17F551913A7A18385165551503906A406F905AC1C2437281A7CD0CFE": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
										"27CC9C295B15A532BB1B5F9308F1D54813E694C2EBDD1C2CED210BFE52DCD57E": "29f64f6f46c82c5ecfa955fe7d093e63b4106b6dbe5193e00efd62c7384ef177",
										"51DDAA38748C0A1144620FB5BFE8EDAB31EA437571AD591A7734BBFD0429AEAE": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
										"9113BB53C2876A3805B2C9242029423FC540A728243CE887AB24C82CF119FBA3": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
										"9924EBDF1ADD33D25D4EF888E16131F0A5687B0580A36C21B5C301A6C462EFFE": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572"
									}
								}
							}
						},
						"methodIdentifiers": {
							"accountOf(address)": "8086b8ba",
							"balanceOf(address)": "70a08231",
							"bnbReceiver()": "d7c3771d",
							"buyPrice()": "8620410b",
							"calculateSharesReceived(uint256)": "e02e1e9c",
							"calculateTokensReceived(uint256)": "10d0ffdd",
							"checkImmunity(address)": "36599ead",
							"compound()": "f69e2046",
							"dailyEstimate(address)": "fbaf1bbd",
							"deposit(uint256)": "b6b55f25",
							"depositTo(address,uint256)": "ffaad6a5",
							"dividendsOf(address)": "0065318b",
							"donate(uint256)": "f14faf6f",
							"dripPoolBalance()": "aecb6d28",
							"dripRate()": "d3261592",
							"forDivs()": "1f38b9cd",
							"forPool()": "a01496de",
							"harvest()": "4641257d",
							"jpeg(uint256)": "b03cf5a7",
							"lastPayout()": "b9db102a",
							"lastRebaseTime()": "1924063e",
							"myEarnings()": "ffe6bbd8",
							"myTokens()": "949e8acd",
							"owner()": "8da5cb5b",
							"payoutFrequency()": "81fce645",
							"rebaseFrequency()": "89375abf",
							"renounceOwnership()": "715018a6",
							"requiredBalance()": "08560ace",
							"sellPrice()": "4b750334",
							"setFeeSplit(uint256,uint256)": "7e6335c7",
							"setImmunityToken(address[])": "f6db0da0",
							"stakingToken()": "72f702f3",
							"tokenAddress()": "9d76ea58",
							"tokenBalance(address)": "eedc966a",
							"totalBalance()": "ad7a672f",
							"totalClaims()": "41c61383",
							"totalDeposits()": "7d882097",
							"totalSupply()": "18160ddd",
							"totalTxs()": "537a39bb",
							"transfer(address,uint256)": "a9059cbb",
							"transferOwnership(address)": "f2fde38b",
							"users()": "f2020275",
							"withdraw(uint256)": "2e1a7d4d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_dripRate\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_compounded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onCompound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_deposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_contributed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onDonate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onDonateBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_divs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onSetFeeSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC721[]\",\"name\":\"oldOne\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"contract IERC721[]\",\"name\":\"newOne\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onSetImmunityToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"soldTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"accountOf\",\"outputs\":[{\"internalType\":\"uint256[14]\",\"name\":\"\",\"type\":\"uint256[14]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateSharesReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkImmunity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isImmune\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"dailyEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripRate\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forDivs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jpeg\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_divs\",\"type\":\"uint256\"}],\"name\":\"setFeeSplit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721[]\",\"name\":\"_contract\",\"type\":\"address[]\"}],\"name\":\"setImmunityToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTxs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DiamodSafe.sol\":\"DiamondSafe\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Address.sol\":{\"keccak256\":\"0xf6ef080fad8534f258b526768063c666e701b135ec3bde9bdffc77254e399515\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://043eada9acabd207d4aaa1706ca581c514ba75e8ec9183a805ff8d1f25ccd445\",\"dweb:/ipfs/QmU6fLUSyR7YSMVtcGtj5epEvpxDBERGMS5L92WG7JKQVH\"]},\"contracts/Context.sol\":{\"keccak256\":\"0xd3e88da8695a1d63936f7bbf3b3441056c44d167e679a80f9a1b5ffafb11fad9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://587786c556944a0a561b5f5ab16716263b42ca8dd6cc1102b75f4c4d1a802325\",\"dweb:/ipfs/QmU9Y13bBrVy2uE4TiHfPSTFQXV2BeUnxrMo135zRy7wJT\"]},\"contracts/DiamodSafe.sol\":{\"keccak256\":\"0x5204fc05d736c54fed0040bd8d830de3f89e77b4084e1065f9f0dee0a3a0aee3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://88d94bb67c728b7f9385bb4cad72aac694d29efbe5ae63e89ca34ee4ab96141a\",\"dweb:/ipfs/QmdvBZGZKm95WwVwp8cvukbkcGoTwBx555EDC4MwFQ6QiD\"]},\"contracts/IERC20.sol\":{\"keccak256\":\"0x8435e8230e900d716b4261cebc91985b70e406e6fd433e9751b46a2f0553401a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0a82e9a70916b84548d3dcad593027da45cbcda310e5b07d3aa56cfa4f97628c\",\"dweb:/ipfs/Qmatc1Bx5fqGNoa9tnDFedThGaLQm69pB8Z7B85uxpacJv\"]},\"contracts/IERC721.sol\":{\"keccak256\":\"0xeb8c011452adc20505919f8025380c2c92a96417e37754891a124efe26d06104\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e5812d283c1ee0a50269953cc3978f60a6f5bf4892943a4351813631c786656f\",\"dweb:/ipfs/QmZED8YeS22yqkV86rYsR3CPSkLMD4S1m22DWChZD4jce5\"]},\"contracts/Ownable.sol\":{\"keccak256\":\"0xb00b01076641e395e084d4d608fa07c800b43d2e2e693da6c548144085ac58ef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3fa763a7012ab18e0949a4dc631033e2c95d6c877f8be570ef474d6a3f81ae6a\",\"dweb:/ipfs/QmauEsZiHVs7yjJrUjMb1oxCwJiBtjuuSDBoExaP63xMtD\"]},\"contracts/ReentrancyGuard.sol\":{\"keccak256\":\"0x1708aca5d9f35560a41b69378bd448df70eb7ae285a75cd87b10a2d037248cb6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2466087ea7d07fa6acced31fb9478109b880466f785ee1c6e707c257edff671b\",\"dweb:/ipfs/QmbzpJYc7cbG7BqPWD9sQYBi1ayPEnDKTfhJSPsa6BYme7\"]},\"contracts/SafeERC20.sol\":{\"keccak256\":\"0x018e2f7fedfb39f2695564356081fb76a5432c71f17ffa3a8bcd4b1af97f4daa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9630329ce796ce63e271c8b15492abf4553832ed1a1686001d98cc55889396cb\",\"dweb:/ipfs/QmQ1V92HceZ8nWVtj9nMw5eKDA7mFima3xb5WKriPvRwK9\"]},\"contracts/SafeMath.sol\":{\"keccak256\":\"0x7b40d5f6514615b0c86150398de33504aa339e8410905a4a19d7e337786355a6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1569afc3e523080ade628f2fa1c9460231d6c95722e250ee137f5f028508bdad\",\"dweb:/ipfs/QmTLLcqtALDcns5sMTPuK23pEACZCgoqu3VNpAs2fQkjrJ\"]},\"lib/utils/introspection/IERC165.sol\":{\"keccak256\":\"0xd7fb250e2e4263d67b5a44b6d2bfa04a28599e2e3f5691e68a0cf5dc21743604\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb0ba356d486a3efeab5c7db11efcbdd65a31e1bd832b522e12276ed8782c8c5\",\"dweb:/ipfs/QmeE3Y1WJu1SfjADtmZnm91neyQ2ukRvjAUeK36vVq71nK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2185,
								"contract": "contracts/DiamodSafe.sol:DiamondSafe",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 2298,
								"contract": "contracts/DiamodSafe.sol:DiamondSafe",
								"label": "_status",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 339,
								"contract": "contracts/DiamodSafe.sol:DiamondSafe",
								"label": "stakingToken",
								"offset": 0,
								"slot": "2",
								"type": "t_contract(IERC20)2061"
							},
							{
								"astId": 341,
								"contract": "contracts/DiamodSafe.sol:DiamondSafe",
								"label": "requiredBalance",
								"offset": 0,
								"slot": "3",
								"type": "t_uint256"
							},
							{
								"astId": 343,
								"contract": "contracts/DiamodSafe.sol:DiamondSafe",
								"label": "tokenAddress",
								"offset": 0,
								"slot": "4",
								"type": "t_address"
							},
							{
								"astId": 345,
								"contract": "contracts/DiamodSafe.sol:DiamondSafe",
								"label": "bnbReceiver",
								"offset": 0,
								"slot": "5",
								"type": "t_address_payable"
							},
							{
								"astId": 348,
								"contract": "contracts/DiamodSafe.sol:DiamondSafe",
								"label": "jpeg",
								"offset": 0,
								"slot": "6",
								"type": "t_array(t_contract(IERC721)2177)dyn_storage"
							},
							{
								"astId": 350,
								"contract": "contracts/DiamodSafe.sol:DiamondSafe",
								"label": "users",
								"offset": 0,
								"slot": "7",
								"type": "t_uint256"
							},
							{
								"astId": 352,
								"contract": "contracts/DiamodSafe.sol:DiamondSafe",
								"label": "totalTxs",
								"offset": 0,
								"slot": "8",
								"type": "t_uint256"
							},
							{
								"astId": 354,
								"contract": "contracts/DiamodSafe.sol:DiamondSafe",
								"label": "lastPayout",
								"offset": 0,
								"slot": "9",
								"type": "t_uint256"
							},
							{
								"astId": 356,
								"contract": "contracts/DiamodSafe.sol:DiamondSafe",
								"label": "totalClaims",
								"offset": 0,
								"slot": "10",
								"type": "t_uint256"
							},
							{
								"astId": 358,
								"contract": "contracts/DiamodSafe.sol:DiamondSafe",
								"label": "totalDeposits",
								"offset": 0,
								"slot": "11",
								"type": "t_uint256"
							},
							{
								"astId": 360,
								"contract": "contracts/DiamodSafe.sol:DiamondSafe",
								"label": "dripPoolBalance",
								"offset": 0,
								"slot": "12",
								"type": "t_uint256"
							},
							{
								"astId": 362,
								"contract": "contracts/DiamodSafe.sol:DiamondSafe",
								"label": "dripRate",
								"offset": 0,
								"slot": "13",
								"type": "t_uint8"
							},
							{
								"astId": 372,
								"contract": "contracts/DiamodSafe.sol:DiamondSafe",
								"label": "forPool",
								"offset": 0,
								"slot": "14",
								"type": "t_uint256"
							},
							{
								"astId": 374,
								"contract": "contracts/DiamodSafe.sol:DiamondSafe",
								"label": "forDivs",
								"offset": 0,
								"slot": "15",
								"type": "t_uint256"
							},
							{
								"astId": 382,
								"contract": "contracts/DiamodSafe.sol:DiamondSafe",
								"label": "lastRebaseTime",
								"offset": 0,
								"slot": "16",
								"type": "t_uint256"
							},
							{
								"astId": 384,
								"contract": "contracts/DiamodSafe.sol:DiamondSafe",
								"label": "currentTotalStaked",
								"offset": 0,
								"slot": "17",
								"type": "t_uint256"
							},
							{
								"astId": 386,
								"contract": "contracts/DiamodSafe.sol:DiamondSafe",
								"label": "profitPerShare_",
								"offset": 0,
								"slot": "18",
								"type": "t_uint256"
							},
							{
								"astId": 441,
								"contract": "contracts/DiamodSafe.sol:DiamondSafe",
								"label": "payoutsOf_",
								"offset": 0,
								"slot": "19",
								"type": "t_mapping(t_address,t_int256)"
							},
							{
								"astId": 445,
								"contract": "contracts/DiamodSafe.sol:DiamondSafe",
								"label": "balanceOf_",
								"offset": 0,
								"slot": "20",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 449,
								"contract": "contracts/DiamodSafe.sol:DiamondSafe",
								"label": "accountOf_",
								"offset": 0,
								"slot": "21",
								"type": "t_mapping(t_address,t_struct(Account)437_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_address_payable": {
								"encoding": "inplace",
								"label": "address payable",
								"numberOfBytes": "20"
							},
							"t_array(t_contract(IERC721)2177)dyn_storage": {
								"base": "t_contract(IERC721)2177",
								"encoding": "dynamic_array",
								"label": "contract IERC721[]",
								"numberOfBytes": "32"
							},
							"t_contract(IERC20)2061": {
								"encoding": "inplace",
								"label": "contract IERC20",
								"numberOfBytes": "20"
							},
							"t_contract(IERC721)2177": {
								"encoding": "inplace",
								"label": "contract IERC721",
								"numberOfBytes": "20"
							},
							"t_int256": {
								"encoding": "inplace",
								"label": "int256",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_int256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => int256)",
								"numberOfBytes": "32",
								"value": "t_int256"
							},
							"t_mapping(t_address,t_struct(Account)437_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct DiamondSafe.Account)",
								"numberOfBytes": "32",
								"value": "t_struct(Account)437_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_struct(Account)437_storage": {
								"encoding": "inplace",
								"label": "struct DiamondSafe.Account",
								"members": [
									{
										"astId": 410,
										"contract": "contracts/DiamodSafe.sol:DiamondSafe",
										"label": "deposited",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 412,
										"contract": "contracts/DiamodSafe.sol:DiamondSafe",
										"label": "withdrawn",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 414,
										"contract": "contracts/DiamodSafe.sol:DiamondSafe",
										"label": "compounded",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 416,
										"contract": "contracts/DiamodSafe.sol:DiamondSafe",
										"label": "rewarded",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 418,
										"contract": "contracts/DiamodSafe.sol:DiamondSafe",
										"label": "contributed",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									},
									{
										"astId": 420,
										"contract": "contracts/DiamodSafe.sol:DiamondSafe",
										"label": "transferredShares",
										"offset": 0,
										"slot": "5",
										"type": "t_uint256"
									},
									{
										"astId": 422,
										"contract": "contracts/DiamodSafe.sol:DiamondSafe",
										"label": "receivedShares",
										"offset": 0,
										"slot": "6",
										"type": "t_uint256"
									},
									{
										"astId": 424,
										"contract": "contracts/DiamodSafe.sol:DiamondSafe",
										"label": "xInvested",
										"offset": 0,
										"slot": "7",
										"type": "t_uint256"
									},
									{
										"astId": 426,
										"contract": "contracts/DiamodSafe.sol:DiamondSafe",
										"label": "xCompounded",
										"offset": 0,
										"slot": "8",
										"type": "t_uint256"
									},
									{
										"astId": 428,
										"contract": "contracts/DiamodSafe.sol:DiamondSafe",
										"label": "xRewarded",
										"offset": 0,
										"slot": "9",
										"type": "t_uint256"
									},
									{
										"astId": 430,
										"contract": "contracts/DiamodSafe.sol:DiamondSafe",
										"label": "xContributed",
										"offset": 0,
										"slot": "10",
										"type": "t_uint256"
									},
									{
										"astId": 432,
										"contract": "contracts/DiamodSafe.sol:DiamondSafe",
										"label": "xWithdrawn",
										"offset": 0,
										"slot": "11",
										"type": "t_uint256"
									},
									{
										"astId": 434,
										"contract": "contracts/DiamodSafe.sol:DiamondSafe",
										"label": "xTransferredShares",
										"offset": 0,
										"slot": "12",
										"type": "t_uint256"
									},
									{
										"astId": 436,
										"contract": "contracts/DiamodSafe.sol:DiamondSafe",
										"label": "xReceivedShares",
										"offset": 0,
										"slot": "13",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "448"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IERC20.sol\":{\"keccak256\":\"0x8435e8230e900d716b4261cebc91985b70e406e6fd433e9751b46a2f0553401a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0a82e9a70916b84548d3dcad593027da45cbcda310e5b07d3aa56cfa4f97628c\",\"dweb:/ipfs/Qmatc1Bx5fqGNoa9tnDFedThGaLQm69pB8Z7B85uxpacJv\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IERC721.sol\":{\"keccak256\":\"0xeb8c011452adc20505919f8025380c2c92a96417e37754891a124efe26d06104\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e5812d283c1ee0a50269953cc3978f60a6f5bf4892943a4351813631c786656f\",\"dweb:/ipfs/QmZED8YeS22yqkV86rYsR3CPSkLMD4S1m22DWChZD4jce5\"]},\"lib/utils/introspection/IERC165.sol\":{\"keccak256\":\"0xd7fb250e2e4263d67b5a44b6d2bfa04a28599e2e3f5691e68a0cf5dc21743604\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb0ba356d486a3efeab5c7db11efcbdd65a31e1bd832b522e12276ed8782c8c5\",\"dweb:/ipfs/QmeE3Y1WJu1SfjADtmZnm91neyQ2ukRvjAUeK36vVq71nK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Context.sol\":{\"keccak256\":\"0xd3e88da8695a1d63936f7bbf3b3441056c44d167e679a80f9a1b5ffafb11fad9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://587786c556944a0a561b5f5ab16716263b42ca8dd6cc1102b75f4c4d1a802325\",\"dweb:/ipfs/QmU9Y13bBrVy2uE4TiHfPSTFQXV2BeUnxrMo135zRy7wJT\"]},\"contracts/Ownable.sol\":{\"keccak256\":\"0xb00b01076641e395e084d4d608fa07c800b43d2e2e693da6c548144085ac58ef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3fa763a7012ab18e0949a4dc631033e2c95d6c877f8be570ef474d6a3f81ae6a\",\"dweb:/ipfs/QmauEsZiHVs7yjJrUjMb1oxCwJiBtjuuSDBoExaP63xMtD\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2185,
								"contract": "contracts/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ReentrancyGuard.sol\":{\"keccak256\":\"0x1708aca5d9f35560a41b69378bd448df70eb7ae285a75cd87b10a2d037248cb6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2466087ea7d07fa6acced31fb9478109b880466f785ee1c6e707c257edff671b\",\"dweb:/ipfs/QmbzpJYc7cbG7BqPWD9sQYBi1ayPEnDKTfhJSPsa6BYme7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2298,
								"contract": "contracts/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/SafeERC20.sol\":597:3701  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/SafeERC20.sol\":597:3701  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220f63def9b74c7776361776ac7770f1c288af52317bbbbb733d598e757e7c07d8764736f6c63430007040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f63def9b74c7776361776ac7770f1c288af52317bbbbb733d598e757e7c07d8764736f6c63430007040033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF6 RETURNDATASIZE 0xEF SWAP12 PUSH21 0xC7776361776AC7770F1C288AF52317BBBBB733D598 0xE7 JUMPI 0xE7 0xC0 PUSH30 0x8764736F6C63430007040033000000000000000000000000000000000000 ",
							"sourceMap": "597:3104:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f63def9b74c7776361776ac7770f1c288af52317bbbbb733d598e757e7c07d8764736f6c63430007040033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF6 RETURNDATASIZE 0xEF SWAP12 PUSH21 0xC7776361776AC7770F1C288AF52317BBBBB733D598 0xE7 JUMPI 0xE7 0xC0 PUSH30 0x8764736F6C63430007040033000000000000000000000000000000000000 ",
							"sourceMap": "597:3104:7:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 597,
									"end": 3701,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "PUSH",
									"source": 7,
									"value": "B"
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "BYTE",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "INVALID",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "MSTORE8",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f63def9b74c7776361776ac7770f1c288af52317bbbbb733d598e757e7c07d8764736f6c63430007040033",
									".code": [
										{
											"begin": 597,
											"end": 3701,
											"name": "PUSHDEPLOYADDRESS",
											"source": 7
										},
										{
											"begin": 597,
											"end": 3701,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 597,
											"end": 3701,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 597,
											"end": 3701,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 597,
											"end": 3701,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 597,
											"end": 3701,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 597,
											"end": 3701,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 597,
											"end": 3701,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 597,
											"end": 3701,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Address.sol\":{\"keccak256\":\"0xf6ef080fad8534f258b526768063c666e701b135ec3bde9bdffc77254e399515\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://043eada9acabd207d4aaa1706ca581c514ba75e8ec9183a805ff8d1f25ccd445\",\"dweb:/ipfs/QmU6fLUSyR7YSMVtcGtj5epEvpxDBERGMS5L92WG7JKQVH\"]},\"contracts/IERC20.sol\":{\"keccak256\":\"0x8435e8230e900d716b4261cebc91985b70e406e6fd433e9751b46a2f0553401a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0a82e9a70916b84548d3dcad593027da45cbcda310e5b07d3aa56cfa4f97628c\",\"dweb:/ipfs/Qmatc1Bx5fqGNoa9tnDFedThGaLQm69pB8Z7B85uxpacJv\"]},\"contracts/SafeERC20.sol\":{\"keccak256\":\"0x018e2f7fedfb39f2695564356081fb76a5432c71f17ffa3a8bcd4b1af97f4daa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9630329ce796ce63e271c8b15492abf4553832ed1a1686001d98cc55889396cb\",\"dweb:/ipfs/QmQ1V92HceZ8nWVtj9nMw5eKDA7mFima3xb5WKriPvRwK9\"]},\"contracts/SafeMath.sol\":{\"keccak256\":\"0x7b40d5f6514615b0c86150398de33504aa339e8410905a4a19d7e337786355a6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1569afc3e523080ade628f2fa1c9460231d6c95722e250ee137f5f028508bdad\",\"dweb:/ipfs/QmTLLcqtALDcns5sMTPuK23pEACZCgoqu3VNpAs2fQkjrJ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/SafeMath.sol\":630:7455  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/SafeMath.sol\":630:7455  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122045d65c3e38c393f34dd775b0471b94f64c55752f9b5a0d0f5827d56dbb16747764736f6c63430007040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122045d65c3e38c393f34dd775b0471b94f64c55752f9b5a0d0f5827d56dbb16747764736f6c63430007040033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GASLIMIT 0xD6 0x5C RETURNDATACOPY CODESIZE 0xC3 SWAP4 RETURN 0x4D 0xD7 PUSH22 0xB0471B94F64C55752F9B5A0D0F5827D56DBB16747764 PUSH20 0x6F6C634300070400330000000000000000000000 ",
							"sourceMap": "630:6825:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122045d65c3e38c393f34dd775b0471b94f64c55752f9b5a0d0f5827d56dbb16747764736f6c63430007040033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GASLIMIT 0xD6 0x5C RETURNDATACOPY CODESIZE 0xC3 SWAP4 RETURN 0x4D 0xD7 PUSH22 0xB0471B94F64C55752F9B5A0D0F5827D56DBB16747764 PUSH20 0x6F6C634300070400330000000000000000000000 ",
							"sourceMap": "630:6825:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"safeSub(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 630,
									"end": 7455,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "INVALID",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122045d65c3e38c393f34dd775b0471b94f64c55752f9b5a0d0f5827d56dbb16747764736f6c63430007040033",
									".code": [
										{
											"begin": 630,
											"end": 7455,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 630,
											"end": 7455,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 630,
											"end": 7455,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 630,
											"end": 7455,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 630,
											"end": 7455,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 630,
											"end": 7455,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 630,
											"end": 7455,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 630,
											"end": 7455,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 630,
											"end": 7455,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SafeMath.sol\":{\"keccak256\":\"0x7b40d5f6514615b0c86150398de33504aa339e8410905a4a19d7e337786355a6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1569afc3e523080ade628f2fa1c9460231d6c95722e250ee137f5f028508bdad\",\"dweb:/ipfs/QmTLLcqtALDcns5sMTPuK23pEACZCgoqu3VNpAs2fQkjrJ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/utils/introspection/IERC165.sol\":{\"keccak256\":\"0xd7fb250e2e4263d67b5a44b6d2bfa04a28599e2e3f5691e68a0cf5dc21743604\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb0ba356d486a3efeab5c7db11efcbdd65a31e1bd832b522e12276ed8782c8c5\",\"dweb:/ipfs/QmeE3Y1WJu1SfjADtmZnm91neyQ2ukRvjAUeK36vVq71nK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "2462",
				"formattedMessage": "contracts/Ownable.sol:26:5: Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.\n    constructor () internal {\n    ^ (Relevant source part starts here and spans across multiple lines).\n",
				"message": "Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.",
				"severity": "warning",
				"sourceLocation": {
					"end": 1002,
					"file": "contracts/Ownable.sol",
					"start": 843
				},
				"type": "Warning"
			}
		],
		"sources": {
			"contracts/Address.sol": {
				"ast": {
					"absolutePath": "contracts/Address.sol",
					"exportedSymbols": {
						"Address": [
							295
						]
					},
					"id": 296,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".2",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "66:67:0",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 295,
							"linearizedBaseContracts": [
								295
							],
							"name": "Address",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 18,
										"nodeType": "Block",
										"src": "792:347:0",
										"statements": [
											{
												"assignments": [
													11
												],
												"declarations": [
													{
														"constant": false,
														"id": 11,
														"mutability": "mutable",
														"name": "size",
														"nodeType": "VariableDeclaration",
														"scope": 18,
														"src": "989:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 10,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "989:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 12,
												"nodeType": "VariableDeclarationStatement",
												"src": "989:12:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1076:32:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1078:28:0",
															"value": {
																"arguments": [
																	{
																		"name": "account",
																		"nodeType": "YulIdentifier",
																		"src": "1098:7:0"
																	}
																],
																"functionName": {
																	"name": "extcodesize",
																	"nodeType": "YulIdentifier",
																	"src": "1086:11:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "1086:20:0"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "1078:4:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 5,
														"isOffset": false,
														"isSlot": false,
														"src": "1098:7:0",
														"valueSize": 1
													},
													{
														"declaration": 11,
														"isOffset": false,
														"isSlot": false,
														"src": "1078:4:0",
														"valueSize": 1
													}
												],
												"id": 13,
												"nodeType": "InlineAssembly",
												"src": "1067:41:0"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 16,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 14,
														"name": "size",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 11,
														"src": "1124:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 15,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1131:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1124:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 9,
												"id": 17,
												"nodeType": "Return",
												"src": "1117:15:0"
											}
										]
									},
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "156:565:0",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ===="
									},
									"id": 19,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 19,
												"src": "746:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "746:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "745:17:0"
									},
									"returnParameters": {
										"id": 9,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 8,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 19,
												"src": "786:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 7,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "786:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "785:6:0"
									},
									"scope": 295,
									"src": "726:413:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 52,
										"nodeType": "Block",
										"src": "2127:320:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 34,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 30,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "2153:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$295",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$295",
																				"typeString": "library Address"
																			}
																		],
																		"id": 29,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2145:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 28,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2145:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 31,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2145:13:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 32,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2145:21:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 33,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 24,
																"src": "2170:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2145:31:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 35,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2178:31:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 27,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2137:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 36,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2137:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 37,
												"nodeType": "ExpressionStatement",
												"src": "2137:73:0"
											},
											{
												"assignments": [
													39,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 39,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 52,
														"src": "2299:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 38,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2299:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 46,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 44,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2349:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 40,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 22,
																"src": "2317:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2317:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 43,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 42,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 24,
																"src": "2340:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2317:31:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 45,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2317:35:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2298:54:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 48,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 39,
															"src": "2370:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2379:60:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 47,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2362:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 50,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2362:78:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 51,
												"nodeType": "ExpressionStatement",
												"src": "2362:78:0"
											}
										]
									},
									"documentation": {
										"id": 20,
										"nodeType": "StructuredDocumentation",
										"src": "1145:906:0",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 53,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 22,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 53,
												"src": "2075:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2075:15:0",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 53,
												"src": "2102:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 23,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2102:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2074:43:0"
									},
									"returnParameters": {
										"id": 26,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2127:0:0"
									},
									"scope": 295,
									"src": "2056:391:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 69,
										"nodeType": "Block",
										"src": "3277:82:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 64,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 56,
															"src": "3305:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 65,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 58,
															"src": "3313:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 66,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3319:32:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 63,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															70,
															90
														],
														"referencedDeclaration": 90,
														"src": "3292:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 67,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3292:60:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 62,
												"id": 68,
												"nodeType": "Return",
												"src": "3285:67:0"
											}
										]
									},
									"documentation": {
										"id": 54,
										"nodeType": "StructuredDocumentation",
										"src": "2453:730:0",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain`call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 70,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 56,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "3210:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 55,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3210:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 58,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "3226:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 57,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3226:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3209:35:0"
									},
									"returnParameters": {
										"id": 62,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 61,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "3263:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 60,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3263:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3262:14:0"
									},
									"scope": 295,
									"src": "3188:171:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 89,
										"nodeType": "Block",
										"src": "3698:76:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 83,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 73,
															"src": "3737:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 84,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 75,
															"src": "3745:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 85,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3751:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 86,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 77,
															"src": "3754:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 82,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															110,
															160
														],
														"referencedDeclaration": 160,
														"src": "3715:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 87,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3715:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 81,
												"id": 88,
												"nodeType": "Return",
												"src": "3708:59:0"
											}
										]
									},
									"documentation": {
										"id": 71,
										"nodeType": "StructuredDocumentation",
										"src": "3365:211:0",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 90,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 78,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 73,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "3603:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 72,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3603:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 75,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "3619:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 74,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3619:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 77,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "3638:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 76,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3638:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3602:63:0"
									},
									"returnParameters": {
										"id": 81,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "3684:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 79,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3684:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3683:14:0"
									},
									"scope": 295,
									"src": "3581:193:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 109,
										"nodeType": "Block",
										"src": "4249:111:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 103,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 93,
															"src": "4288:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 104,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 95,
															"src": "4296:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 105,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 97,
															"src": "4302:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 106,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4309:43:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 102,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															110,
															160
														],
														"referencedDeclaration": 160,
														"src": "4266:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 107,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4266:87:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 101,
												"id": 108,
												"nodeType": "Return",
												"src": "4259:94:0"
											}
										]
									},
									"documentation": {
										"id": 91,
										"nodeType": "StructuredDocumentation",
										"src": "3780:351:0",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 110,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 98,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "4167:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 92,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4167:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 95,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "4183:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 94,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4183:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "4202:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 96,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4202:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4166:50:0"
									},
									"returnParameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 100,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "4235:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 99,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4235:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4234:14:0"
									},
									"scope": 295,
									"src": "4136:224:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 159,
										"nodeType": "Block",
										"src": "4749:382:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 131,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 127,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "4775:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$295",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$295",
																				"typeString": "library Address"
																			}
																		],
																		"id": 126,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4767:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 125,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4767:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 128,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4767:13:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 129,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "4767:21:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 130,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 117,
																"src": "4792:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4767:30:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 132,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4799:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 124,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4759:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 133,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4759:81:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 134,
												"nodeType": "ExpressionStatement",
												"src": "4759:81:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 137,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 113,
																	"src": "4869:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 136,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 19,
																"src": "4858:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 138,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4858:18:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 139,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4878:31:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 135,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4850:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 140,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4850:60:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 141,
												"nodeType": "ExpressionStatement",
												"src": "4850:60:0"
											},
											{
												"assignments": [
													143,
													145
												],
												"declarations": [
													{
														"constant": false,
														"id": 143,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 159,
														"src": "4981:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 142,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4981:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 145,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 159,
														"src": "4995:23:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 144,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4995:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 152,
												"initialValue": {
													"arguments": [
														{
															"id": 150,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 115,
															"src": "5050:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 146,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 113,
																"src": "5022:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 147,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5022:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 149,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 148,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 117,
																"src": "5042:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5022:27:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 151,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5022:33:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4980:75:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 154,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 143,
															"src": "5090:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 155,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 145,
															"src": "5099:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 156,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 119,
															"src": "5111:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 153,
														"name": "_verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 294,
														"src": "5072:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 157,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5072:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 123,
												"id": 158,
												"nodeType": "Return",
												"src": "5065:59:0"
											}
										]
									},
									"documentation": {
										"id": 111,
										"nodeType": "StructuredDocumentation",
										"src": "4366:237:0",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 160,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 113,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "4639:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 112,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4639:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 115,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "4655:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 114,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4655:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 117,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "4674:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4674:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 119,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "4689:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 118,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4689:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4638:78:0"
									},
									"returnParameters": {
										"id": 123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 122,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "4735:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 121,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4735:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4734:14:0"
									},
									"scope": 295,
									"src": "4608:523:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 176,
										"nodeType": "Block",
										"src": "5408:97:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 171,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 163,
															"src": "5444:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 172,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 165,
															"src": "5452:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 173,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5458:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 170,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															177,
															212
														],
														"referencedDeclaration": 212,
														"src": "5425:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 174,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5425:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 169,
												"id": 175,
												"nodeType": "Return",
												"src": "5418:80:0"
											}
										]
									},
									"documentation": {
										"id": 161,
										"nodeType": "StructuredDocumentation",
										"src": "5137:166:0",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 177,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "5336:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 162,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5336:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 165,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "5352:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 164,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5352:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5335:35:0"
									},
									"returnParameters": {
										"id": 169,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 168,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "5394:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 167,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5394:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5393:14:0"
									},
									"scope": 295,
									"src": "5308:197:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 211,
										"nodeType": "Block",
										"src": "5817:288:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 191,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 180,
																	"src": "5846:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 190,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 19,
																"src": "5835:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 192,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5835:18:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 193,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5855:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 189,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "5827:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 194,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5827:67:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 195,
												"nodeType": "ExpressionStatement",
												"src": "5827:67:0"
											},
											{
												"assignments": [
													197,
													199
												],
												"declarations": [
													{
														"constant": false,
														"id": 197,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 211,
														"src": "5965:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 196,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5965:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 199,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 211,
														"src": "5979:23:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 198,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5979:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 204,
												"initialValue": {
													"arguments": [
														{
															"id": 202,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 182,
															"src": "6024:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 200,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 180,
															"src": "6006:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 201,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6006:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 203,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6006:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5964:65:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 206,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 197,
															"src": "6064:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 207,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 199,
															"src": "6073:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 208,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 184,
															"src": "6085:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 205,
														"name": "_verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 294,
														"src": "6046:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 209,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6046:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 188,
												"id": 210,
												"nodeType": "Return",
												"src": "6039:59:0"
											}
										]
									},
									"documentation": {
										"id": 178,
										"nodeType": "StructuredDocumentation",
										"src": "5511:173:0",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 212,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "5717:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 179,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5717:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 182,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "5733:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 181,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5733:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "5752:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 183,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5752:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5716:63:0"
									},
									"returnParameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "5803:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 186,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5803:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5802:14:0"
									},
									"scope": 295,
									"src": "5689:416:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 228,
										"nodeType": "Block",
										"src": "6381:101:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 223,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 215,
															"src": "6419:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 224,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 217,
															"src": "6427:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 225,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6433:41:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 222,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															229,
															264
														],
														"referencedDeclaration": 264,
														"src": "6398:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 226,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6398:77:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 221,
												"id": 227,
												"nodeType": "Return",
												"src": "6391:84:0"
											}
										]
									},
									"documentation": {
										"id": 213,
										"nodeType": "StructuredDocumentation",
										"src": "6111:168:0",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 229,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "6314:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 214,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6314:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "6330:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 216,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6330:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6313:35:0"
									},
									"returnParameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "6367:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 219,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6367:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6366:14:0"
									},
									"scope": 295,
									"src": "6284:198:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 263,
										"nodeType": "Block",
										"src": "6793:292:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 243,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 232,
																	"src": "6822:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 242,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 19,
																"src": "6811:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 244,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6811:18:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 245,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6831:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															},
															"value": "Address: delegate call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															}
														],
														"id": 241,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "6803:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 246,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6803:69:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 247,
												"nodeType": "ExpressionStatement",
												"src": "6803:69:0"
											},
											{
												"assignments": [
													249,
													251
												],
												"declarations": [
													{
														"constant": false,
														"id": 249,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 263,
														"src": "6943:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 248,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6943:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 251,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 263,
														"src": "6957:23:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 250,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6957:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 256,
												"initialValue": {
													"arguments": [
														{
															"id": 254,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 234,
															"src": "7004:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 252,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 232,
															"src": "6984:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 253,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "6984:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6984:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6942:67:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 258,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 249,
															"src": "7044:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 259,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 251,
															"src": "7053:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 260,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 236,
															"src": "7065:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 257,
														"name": "_verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 294,
														"src": "7026:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 261,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7026:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 240,
												"id": 262,
												"nodeType": "Return",
												"src": "7019:59:0"
											}
										]
									},
									"documentation": {
										"id": 230,
										"nodeType": "StructuredDocumentation",
										"src": "6488:175:0",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 264,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 232,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "6698:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 231,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6698:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "6714:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 233,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6714:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "6733:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 235,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6733:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6697:63:0"
									},
									"returnParameters": {
										"id": 240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "6779:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 238,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6779:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6778:14:0"
									},
									"scope": 295,
									"src": "6668:417:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 293,
										"nodeType": "Block",
										"src": "7220:596:0",
										"statements": [
											{
												"condition": {
													"id": 275,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 266,
													"src": "7234:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 291,
													"nodeType": "Block",
													"src": "7291:519:0",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 282,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 279,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 268,
																		"src": "7375:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 280,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7375:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 281,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7395:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7375:21:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 289,
																"nodeType": "Block",
																"src": "7747:53:0",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 286,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 270,
																					"src": "7772:12:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 285,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					-19,
																					-19
																				],
																				"referencedDeclaration": -19,
																				"src": "7765:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 287,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7765:20:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 288,
																		"nodeType": "ExpressionStatement",
																		"src": "7765:20:0"
																	}
																]
															},
															"id": 290,
															"nodeType": "IfStatement",
															"src": "7371:429:0",
															"trueBody": {
																"id": 284,
																"nodeType": "Block",
																"src": "7398:343:0",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "7582:145:0",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "7604:40:0",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "7633:10:0"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "7627:5:0"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7627:17:0"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "7608:15:0",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "7676:2:0",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "7680:10:0"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "7672:3:0"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "7672:19:0"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "7693:15:0"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "7665:6:0"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7665:44:0"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "7665:44:0"
																				}
																			]
																		},
																		"evmVersion": "istanbul",
																		"externalReferences": [
																			{
																				"declaration": 268,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "7633:10:0",
																				"valueSize": 1
																			},
																			{
																				"declaration": 268,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "7680:10:0",
																				"valueSize": 1
																			}
																		],
																		"id": 283,
																		"nodeType": "InlineAssembly",
																		"src": "7573:154:0"
																	}
																]
															}
														}
													]
												},
												"id": 292,
												"nodeType": "IfStatement",
												"src": "7230:580:0",
												"trueBody": {
													"id": 278,
													"nodeType": "Block",
													"src": "7243:42:0",
													"statements": [
														{
															"expression": {
																"id": 276,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 268,
																"src": "7264:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 274,
															"id": 277,
															"nodeType": "Return",
															"src": "7257:17:0"
														}
													]
												}
											}
										]
									},
									"id": 294,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_verifyCallResult",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 266,
												"mutability": "mutable",
												"name": "success",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "7118:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 265,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7118:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 268,
												"mutability": "mutable",
												"name": "returndata",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "7132:23:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 267,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7132:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "7157:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 269,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7157:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7117:67:0"
									},
									"returnParameters": {
										"id": 274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 273,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "7206:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 272,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7206:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7205:14:0"
									},
									"scope": 295,
									"src": "7091:725:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 296,
							"src": "134:7684:0"
						}
					],
					"src": "33:7785:0"
				},
				"id": 0
			},
			"contracts/Context.sol": {
				"ast": {
					"absolutePath": "contracts/Context.sol",
					"exportedSymbols": {
						"Context": [
							318
						]
					},
					"id": 319,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 297,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 318,
							"linearizedBaseContracts": [
								318
							],
							"name": "Context",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 305,
										"nodeType": "Block",
										"src": "668:34:1",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 302,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -15,
														"src": "685:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 303,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "685:10:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"functionReturnParameters": 301,
												"id": 304,
												"nodeType": "Return",
												"src": "678:17:1"
											}
										]
									},
									"id": 306,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 298,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "617:2:1"
									},
									"returnParameters": {
										"id": 301,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 300,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 306,
												"src": "651:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 299,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "651:15:1",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "650:17:1"
									},
									"scope": 318,
									"src": "598:104:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 316,
										"nodeType": "Block",
										"src": "773:165:1",
										"statements": [
											{
												"expression": {
													"id": 311,
													"name": "this",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": -28,
													"src": "783:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_Context_$318",
														"typeString": "contract Context"
													}
												},
												"id": 312,
												"nodeType": "ExpressionStatement",
												"src": "783:4:1"
											},
											{
												"expression": {
													"expression": {
														"id": 313,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -15,
														"src": "923:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 314,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "923:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 310,
												"id": 315,
												"nodeType": "Return",
												"src": "916:15:1"
											}
										]
									},
									"id": 317,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 307,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "725:2:1"
									},
									"returnParameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "759:12:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 308,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "759:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "758:14:1"
									},
									"scope": 318,
									"src": "708:230:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 319,
							"src": "566:374:1"
						}
					],
					"src": "33:907:1"
				},
				"id": 1
			},
			"contracts/DiamodSafe.sol": {
				"ast": {
					"absolutePath": "contracts/DiamodSafe.sol",
					"exportedSymbols": {
						"Address": [
							295
						],
						"Context": [
							318
						],
						"DiamondSafe": [
							1983
						],
						"IERC165": [
							2954
						],
						"IERC20": [
							2061
						],
						"IERC721": [
							2177
						],
						"Ownable": [
							2287
						],
						"ReentrancyGuard": [
							2352
						],
						"SafeERC20": [
							2565
						],
						"SafeMath": [
							2942
						]
					},
					"id": 1984,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 320,
							"literals": [
								"solidity",
								"0.7",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:22:2"
						},
						{
							"absolutePath": "contracts/Address.sol",
							"file": "./Address.sol",
							"id": 321,
							"nodeType": "ImportDirective",
							"scope": 1984,
							"sourceUnit": 296,
							"src": "56:23:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/SafeMath.sol",
							"file": "./SafeMath.sol",
							"id": 322,
							"nodeType": "ImportDirective",
							"scope": 1984,
							"sourceUnit": 2943,
							"src": "80:24:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/SafeERC20.sol",
							"file": "./SafeERC20.sol",
							"id": 323,
							"nodeType": "ImportDirective",
							"scope": 1984,
							"sourceUnit": 2566,
							"src": "105:25:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 324,
							"nodeType": "ImportDirective",
							"scope": 1984,
							"sourceUnit": 2062,
							"src": "132:22:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/Ownable.sol",
							"file": "./Ownable.sol",
							"id": 325,
							"nodeType": "ImportDirective",
							"scope": 1984,
							"sourceUnit": 2288,
							"src": "156:23:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/IERC721.sol",
							"file": "./IERC721.sol",
							"id": 326,
							"nodeType": "ImportDirective",
							"scope": 1984,
							"sourceUnit": 2178,
							"src": "180:23:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/ReentrancyGuard.sol",
							"file": "./ReentrancyGuard.sol",
							"id": 327,
							"nodeType": "ImportDirective",
							"scope": 1984,
							"sourceUnit": 2353,
							"src": "204:31:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 328,
										"name": "Ownable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2287,
										"src": "261:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Ownable_$2287",
											"typeString": "contract Ownable"
										}
									},
									"id": 329,
									"nodeType": "InheritanceSpecifier",
									"src": "261:7:2"
								},
								{
									"baseName": {
										"id": 330,
										"name": "ReentrancyGuard",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2352,
										"src": "270:15:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ReentrancyGuard_$2352",
											"typeString": "contract ReentrancyGuard"
										}
									},
									"id": 331,
									"nodeType": "InheritanceSpecifier",
									"src": "270:15:2"
								}
							],
							"contractDependencies": [
								318,
								2287,
								2352
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1983,
							"linearizedBaseContracts": [
								1983,
								2352,
								2287,
								318
							],
							"name": "DiamondSafe",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 334,
									"libraryName": {
										"id": 332,
										"name": "SafeERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2565,
										"src": "298:9:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeERC20_$2565",
											"typeString": "library SafeERC20"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "292:27:2",
									"typeName": {
										"id": 333,
										"name": "IERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2061,
										"src": "312:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$2061",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"id": 337,
									"libraryName": {
										"id": 335,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2942,
										"src": "330:8:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$2942",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "324:24:2",
									"typeName": {
										"id": 336,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "343:4:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "72f702f3",
									"id": 339,
									"mutability": "mutable",
									"name": "stakingToken",
									"nodeType": "VariableDeclaration",
									"scope": 1983,
									"src": "394:26:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$2061",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 338,
										"name": "IERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2061,
										"src": "394:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$2061",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "08560ace",
									"id": 341,
									"mutability": "mutable",
									"name": "requiredBalance",
									"nodeType": "VariableDeclaration",
									"scope": 1983,
									"src": "587:30:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 340,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "587:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "9d76ea58",
									"id": 343,
									"mutability": "mutable",
									"name": "tokenAddress",
									"nodeType": "VariableDeclaration",
									"scope": 1983,
									"src": "699:27:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 342,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "699:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "d7c3771d",
									"id": 345,
									"mutability": "mutable",
									"name": "bnbReceiver",
									"nodeType": "VariableDeclaration",
									"scope": 1983,
									"src": "732:34:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address_payable",
										"typeString": "address payable"
									},
									"typeName": {
										"id": 344,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "732:15:2",
										"stateMutability": "payable",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b03cf5a7",
									"id": 348,
									"mutability": "mutable",
									"name": "jpeg",
									"nodeType": "VariableDeclaration",
									"scope": 1983,
									"src": "772:21:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_contract$_IERC721_$2177_$dyn_storage",
										"typeString": "contract IERC721[]"
									},
									"typeName": {
										"baseType": {
											"id": 346,
											"name": "IERC721",
											"nodeType": "UserDefinedTypeName",
											"referencedDeclaration": 2177,
											"src": "772:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_IERC721_$2177",
												"typeString": "contract IERC721"
											}
										},
										"id": 347,
										"nodeType": "ArrayTypeName",
										"src": "772:9:2",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_contract$_IERC721_$2177_$dyn_storage_ptr",
											"typeString": "contract IERC721[]"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "f2020275",
									"id": 350,
									"mutability": "mutable",
									"name": "users",
									"nodeType": "VariableDeclaration",
									"scope": 1983,
									"src": "854:17:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 349,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "854:4:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "537a39bb",
									"id": 352,
									"mutability": "mutable",
									"name": "totalTxs",
									"nodeType": "VariableDeclaration",
									"scope": 1983,
									"src": "877:20:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 351,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "877:4:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b9db102a",
									"id": 354,
									"mutability": "mutable",
									"name": "lastPayout",
									"nodeType": "VariableDeclaration",
									"scope": 1983,
									"src": "975:22:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 353,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "975:4:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "41c61383",
									"id": 356,
									"mutability": "mutable",
									"name": "totalClaims",
									"nodeType": "VariableDeclaration",
									"scope": 1983,
									"src": "1102:23:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 355,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "1102:4:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "7d882097",
									"id": 358,
									"mutability": "mutable",
									"name": "totalDeposits",
									"nodeType": "VariableDeclaration",
									"scope": 1983,
									"src": "1131:25:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 357,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "1131:4:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "aecb6d28",
									"id": 360,
									"mutability": "mutable",
									"name": "dripPoolBalance",
									"nodeType": "VariableDeclaration",
									"scope": 1983,
									"src": "1213:27:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 359,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "1213:4:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "d3261592",
									"id": 362,
									"mutability": "mutable",
									"name": "dripRate",
									"nodeType": "VariableDeclaration",
									"scope": 1983,
									"src": "1246:21:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 361,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "1246:5:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 365,
									"mutability": "constant",
									"name": "divsFee",
									"nodeType": "VariableDeclaration",
									"scope": 1983,
									"src": "1315:35:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 363,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "1315:5:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "30",
										"id": 364,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1349:1:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_0_by_1",
											"typeString": "int_const 0"
										},
										"value": "0"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 370,
									"mutability": "constant",
									"name": "magnitude",
									"nodeType": "VariableDeclaration",
									"scope": 1983,
									"src": "1356:45:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 366,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1356:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_18446744073709551616_by_1",
											"typeString": "int_const 18446744073709551616"
										},
										"id": 369,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "32",
											"id": 367,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1394:1:2",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_2_by_1",
												"typeString": "int_const 2"
											},
											"value": "2"
										},
										"nodeType": "BinaryOperation",
										"operator": "**",
										"rightExpression": {
											"hexValue": "3634",
											"id": 368,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1399:2:2",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_64_by_1",
												"typeString": "int_const 64"
											},
											"value": "64"
										},
										"src": "1394:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_18446744073709551616_by_1",
											"typeString": "int_const 18446744073709551616"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "a01496de",
									"id": 372,
									"mutability": "mutable",
									"name": "forPool",
									"nodeType": "VariableDeclaration",
									"scope": 1983,
									"src": "1469:19:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 371,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "1469:4:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "1f38b9cd",
									"id": 374,
									"mutability": "mutable",
									"name": "forDivs",
									"nodeType": "VariableDeclaration",
									"scope": 1983,
									"src": "1494:19:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 373,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "1494:4:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "89375abf",
									"id": 377,
									"mutability": "constant",
									"name": "rebaseFrequency",
									"nodeType": "VariableDeclaration",
									"scope": 1983,
									"src": "1555:51:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 375,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1555:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 376,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1597:9:2",
										"subdenomination": "seconds",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "81fce645",
									"id": 380,
									"mutability": "constant",
									"name": "payoutFrequency",
									"nodeType": "VariableDeclaration",
									"scope": 1983,
									"src": "1612:51:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 378,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1612:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 379,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1654:9:2",
										"subdenomination": "seconds",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "1924063e",
									"id": 382,
									"mutability": "mutable",
									"name": "lastRebaseTime",
									"nodeType": "VariableDeclaration",
									"scope": 1983,
									"src": "1702:29:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 381,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1702:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 384,
									"mutability": "mutable",
									"name": "currentTotalStaked",
									"nodeType": "VariableDeclaration",
									"scope": 1983,
									"src": "1795:34:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 383,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1795:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 386,
									"mutability": "mutable",
									"name": "profitPerShare_",
									"nodeType": "VariableDeclaration",
									"scope": 1983,
									"src": "1835:31:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 385,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1835:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 396,
										"nodeType": "Block",
										"src": "2076:51:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 392,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 389,
																	"name": "myTokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1034,
																	"src": "2094:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 390,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2094:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 391,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2107:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2094:14:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 388,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2086:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 393,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2086:23:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 394,
												"nodeType": "ExpressionStatement",
												"src": "2086:23:2"
											},
											{
												"id": 395,
												"nodeType": "PlaceholderStatement",
												"src": "2119:1:2"
											}
										]
									},
									"id": 397,
									"name": "onlyHolders",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 387,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2073:2:2"
									},
									"src": "2053:74:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 407,
										"nodeType": "Block",
										"src": "2209:53:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 403,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 400,
																	"name": "myEarnings",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1045,
																	"src": "2227:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 401,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2227:12:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 402,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2242:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2227:16:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 399,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2219:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 404,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2219:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 405,
												"nodeType": "ExpressionStatement",
												"src": "2219:25:2"
											},
											{
												"id": 406,
												"nodeType": "PlaceholderStatement",
												"src": "2254:1:2"
											}
										]
									},
									"id": 408,
									"name": "onlyEarners",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 398,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2206:2:2"
									},
									"src": "2186:76:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"canonicalName": "DiamondSafe.Account",
									"id": 437,
									"members": [
										{
											"constant": false,
											"id": 410,
											"mutability": "mutable",
											"name": "deposited",
											"nodeType": "VariableDeclaration",
											"scope": 437,
											"src": "2423:14:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 409,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2423:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 412,
											"mutability": "mutable",
											"name": "withdrawn",
											"nodeType": "VariableDeclaration",
											"scope": 437,
											"src": "2447:14:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 411,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2447:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 414,
											"mutability": "mutable",
											"name": "compounded",
											"nodeType": "VariableDeclaration",
											"scope": 437,
											"src": "2471:15:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 413,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2471:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 416,
											"mutability": "mutable",
											"name": "rewarded",
											"nodeType": "VariableDeclaration",
											"scope": 437,
											"src": "2496:13:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 415,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2496:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 418,
											"mutability": "mutable",
											"name": "contributed",
											"nodeType": "VariableDeclaration",
											"scope": 437,
											"src": "2519:16:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 417,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2519:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 420,
											"mutability": "mutable",
											"name": "transferredShares",
											"nodeType": "VariableDeclaration",
											"scope": 437,
											"src": "2545:22:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 419,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2545:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 422,
											"mutability": "mutable",
											"name": "receivedShares",
											"nodeType": "VariableDeclaration",
											"scope": 437,
											"src": "2577:19:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 421,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2577:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 424,
											"mutability": "mutable",
											"name": "xInvested",
											"nodeType": "VariableDeclaration",
											"scope": 437,
											"src": "2606:14:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 423,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2606:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 426,
											"mutability": "mutable",
											"name": "xCompounded",
											"nodeType": "VariableDeclaration",
											"scope": 437,
											"src": "2630:16:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 425,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2630:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 428,
											"mutability": "mutable",
											"name": "xRewarded",
											"nodeType": "VariableDeclaration",
											"scope": 437,
											"src": "2656:14:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 427,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2656:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 430,
											"mutability": "mutable",
											"name": "xContributed",
											"nodeType": "VariableDeclaration",
											"scope": 437,
											"src": "2680:17:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 429,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2680:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 432,
											"mutability": "mutable",
											"name": "xWithdrawn",
											"nodeType": "VariableDeclaration",
											"scope": 437,
											"src": "2707:15:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 431,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2707:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 434,
											"mutability": "mutable",
											"name": "xTransferredShares",
											"nodeType": "VariableDeclaration",
											"scope": 437,
											"src": "2732:23:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 433,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2732:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 436,
											"mutability": "mutable",
											"name": "xReceivedShares",
											"nodeType": "VariableDeclaration",
											"scope": 437,
											"src": "2765:20:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 435,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2765:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Account",
									"nodeType": "StructDefinition",
									"scope": 1983,
									"src": "2398:394:2",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 441,
									"mutability": "mutable",
									"name": "payoutsOf_",
									"nodeType": "VariableDeclaration",
									"scope": 1983,
									"src": "2924:37:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_int256_$",
										"typeString": "mapping(address => int256)"
									},
									"typeName": {
										"id": 440,
										"keyType": {
											"id": 438,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "2932:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2924:26:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_int256_$",
											"typeString": "mapping(address => int256)"
										},
										"valueType": {
											"id": 439,
											"name": "int256",
											"nodeType": "ElementaryTypeName",
											"src": "2943:6:2",
											"typeDescriptions": {
												"typeIdentifier": "t_int256",
												"typeString": "int256"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 445,
									"mutability": "mutable",
									"name": "balanceOf_",
									"nodeType": "VariableDeclaration",
									"scope": 1983,
									"src": "2967:38:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 444,
										"keyType": {
											"id": 442,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "2975:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2967:27:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 443,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "2986:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 449,
									"mutability": "mutable",
									"name": "accountOf_",
									"nodeType": "VariableDeclaration",
									"scope": 1983,
									"src": "3011:38:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
										"typeString": "mapping(address => struct DiamondSafe.Account)"
									},
									"typeName": {
										"id": 448,
										"keyType": {
											"id": 446,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "3019:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "3011:27:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
											"typeString": "mapping(address => struct DiamondSafe.Account)"
										},
										"valueType": {
											"id": 447,
											"name": "Account",
											"nodeType": "UserDefinedTypeName",
											"referencedDeclaration": 437,
											"src": "3030:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Account_$437_storage_ptr",
												"typeString": "struct DiamondSafe.Account"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"id": 459,
									"name": "onDeposit",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 458,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 451,
												"indexed": true,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 459,
												"src": "3207:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 450,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3207:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 453,
												"indexed": false,
												"mutability": "mutable",
												"name": "_deposited",
												"nodeType": "VariableDeclaration",
												"scope": 459,
												"src": "3238:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 452,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3238:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 455,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokensMinted",
												"nodeType": "VariableDeclaration",
												"scope": 459,
												"src": "3266:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 454,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3266:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 457,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 459,
												"src": "3296:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 456,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3296:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3197:119:2"
									},
									"src": "3182:135:2"
								},
								{
									"anonymous": false,
									"id": 469,
									"name": "onWithdraw",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 468,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 461,
												"indexed": true,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "3348:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 460,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3348:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 463,
												"indexed": false,
												"mutability": "mutable",
												"name": "_liquidated",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "3379:19:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 462,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3379:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 465,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokensEarned",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "3408:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 464,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3408:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 467,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "3438:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 466,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3438:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3338:120:2"
									},
									"src": "3322:137:2"
								},
								{
									"anonymous": false,
									"id": 479,
									"name": "onCompound",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 478,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 471,
												"indexed": true,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 479,
												"src": "3490:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 470,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3490:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 473,
												"indexed": false,
												"mutability": "mutable",
												"name": "_compounded",
												"nodeType": "VariableDeclaration",
												"scope": 479,
												"src": "3521:19:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 472,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3521:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 475,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokensMinted",
												"nodeType": "VariableDeclaration",
												"scope": 479,
												"src": "3550:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 474,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3550:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 477,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 479,
												"src": "3580:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 476,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3580:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3480:120:2"
									},
									"src": "3464:137:2"
								},
								{
									"anonymous": false,
									"id": 487,
									"name": "onWithdraw",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 486,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 481,
												"indexed": true,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 487,
												"src": "3623:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 480,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3623:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 483,
												"indexed": false,
												"mutability": "mutable",
												"name": "_withdrawn",
												"nodeType": "VariableDeclaration",
												"scope": 487,
												"src": "3646:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 482,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3646:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 485,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 487,
												"src": "3666:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 484,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3666:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3622:59:2"
									},
									"src": "3606:76:2"
								},
								{
									"anonymous": false,
									"id": 497,
									"name": "onTransfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 489,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "3713:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 488,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3713:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 491,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "3743:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 490,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3743:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 493,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokens",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "3771:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 492,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3771:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 495,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "3795:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 494,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3795:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3703:112:2"
									},
									"src": "3687:129:2"
								},
								{
									"anonymous": false,
									"id": 509,
									"name": "onUpdate",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 508,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 499,
												"indexed": true,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "3845:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 498,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3845:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 501,
												"indexed": false,
												"mutability": "mutable",
												"name": "invested",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "3876:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 500,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3876:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 503,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokens",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "3902:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 502,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3902:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 505,
												"indexed": false,
												"mutability": "mutable",
												"name": "soldTokens",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "3926:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 504,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3926:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 507,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "3954:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 506,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3954:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3835:139:2"
									},
									"src": "3821:154:2"
								},
								{
									"anonymous": false,
									"id": 515,
									"name": "onRebase",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 514,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 511,
												"indexed": false,
												"mutability": "mutable",
												"name": "balance",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "3996:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 510,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3996:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 513,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "4013:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 512,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4013:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3995:36:2"
									},
									"src": "3981:51:2"
								},
								{
									"anonymous": false,
									"id": 523,
									"name": "onDonate",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 522,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 517,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "4053:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 516,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4053:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 519,
												"indexed": false,
												"mutability": "mutable",
												"name": "_contributed",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "4075:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 518,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4075:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 521,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "4097:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 520,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "4097:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4052:60:2"
									},
									"src": "4038:75:2"
								},
								{
									"anonymous": false,
									"id": 531,
									"name": "onDonateBNB",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 530,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 525,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "4136:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 524,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4136:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 527,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "4158:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 526,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4158:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 529,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "4174:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 528,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "4174:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4135:54:2"
									},
									"src": "4118:72:2"
								},
								{
									"anonymous": false,
									"id": 539,
									"name": "onSetFeeSplit",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 538,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 533,
												"indexed": false,
												"mutability": "mutable",
												"name": "_pool",
												"nodeType": "VariableDeclaration",
												"scope": 539,
												"src": "4216:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 532,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "4216:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 535,
												"indexed": false,
												"mutability": "mutable",
												"name": "_divs",
												"nodeType": "VariableDeclaration",
												"scope": 539,
												"src": "4228:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 534,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "4228:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 537,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 539,
												"src": "4240:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 536,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4240:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4215:43:2"
									},
									"src": "4196:63:2"
								},
								{
									"anonymous": false,
									"id": 551,
									"name": "onSetImmunityToken",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 550,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 541,
												"indexed": true,
												"mutability": "mutable",
												"name": "_caller",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "4298:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 540,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4298:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 544,
												"indexed": false,
												"mutability": "mutable",
												"name": "oldOne",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "4331:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC721_$2177_$dyn_memory_ptr",
													"typeString": "contract IERC721[]"
												},
												"typeName": {
													"baseType": {
														"id": 542,
														"name": "IERC721",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 2177,
														"src": "4331:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC721_$2177",
															"typeString": "contract IERC721"
														}
													},
													"id": 543,
													"nodeType": "ArrayTypeName",
													"src": "4331:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC721_$2177_$dyn_storage_ptr",
														"typeString": "contract IERC721[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 547,
												"indexed": false,
												"mutability": "mutable",
												"name": "newOne",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "4357:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC721_$2177_$dyn_memory_ptr",
													"typeString": "contract IERC721[]"
												},
												"typeName": {
													"baseType": {
														"id": 545,
														"name": "IERC721",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 2177,
														"src": "4357:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC721_$2177",
															"typeString": "contract IERC721"
														}
													},
													"id": 546,
													"nodeType": "ArrayTypeName",
													"src": "4357:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC721_$2177_$dyn_storage_ptr",
														"typeString": "contract IERC721[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 549,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "4383:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 548,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4383:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4288:118:2"
									},
									"src": "4264:143:2"
								},
								{
									"body": {
										"id": 612,
										"nodeType": "Block",
										"src": "4601:500:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 571,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 566,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 561,
																	"name": "_tokenAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 553,
																	"src": "4632:13:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 564,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4657:1:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 563,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4649:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 562,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4649:7:2",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 565,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4649:10:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"src": "4632:27:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 569,
																		"name": "_tokenAddress",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 553,
																		"src": "4682:13:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"id": 567,
																		"name": "Address",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 295,
																		"src": "4663:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Address_$295_$",
																			"typeString": "type(library Address)"
																		}
																	},
																	"id": 568,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "isContract",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 19,
																	"src": "4663:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																		"typeString": "function (address) view returns (bool)"
																	}
																},
																"id": 570,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4663:33:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4632:64:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "494e56414c49445f41444452455353",
															"id": 572,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4710:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0c9aa80f6df0d7d66f29f9faed5ce34d8bae3d216a4ab057cfd7af24bdab39cb",
																"typeString": "literal_string \"INVALID_ADDRESS\""
															},
															"value": "INVALID_ADDRESS"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0c9aa80f6df0d7d66f29f9faed5ce34d8bae3d216a4ab057cfd7af24bdab39cb",
																"typeString": "literal_string \"INVALID_ADDRESS\""
															}
														],
														"id": 560,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4611:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 573,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4611:126:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 574,
												"nodeType": "ExpressionStatement",
												"src": "4611:126:2"
											},
											{
												"expression": {
													"id": 577,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 575,
														"name": "tokenAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 343,
														"src": "4748:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 576,
														"name": "_tokenAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 553,
														"src": "4763:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4748:28:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 578,
												"nodeType": "ExpressionStatement",
												"src": "4748:28:2"
											},
											{
												"expression": {
													"id": 583,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 579,
														"name": "stakingToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 339,
														"src": "4786:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$2061",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 581,
																"name": "_tokenAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 553,
																"src": "4808:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 580,
															"name": "IERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2061,
															"src": "4801:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC20_$2061_$",
																"typeString": "type(contract IERC20)"
															}
														},
														"id": 582,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4801:21:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$2061",
															"typeString": "contract IERC20"
														}
													},
													"src": "4786:36:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$2061",
														"typeString": "contract IERC20"
													}
												},
												"id": 584,
												"nodeType": "ExpressionStatement",
												"src": "4786:36:2"
											},
											{
												"expression": {
													"id": 588,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 585,
														"name": "bnbReceiver",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 345,
														"src": "4833:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 586,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": -15,
															"src": "4847:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 587,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "4847:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "4833:24:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"id": 589,
												"nodeType": "ExpressionStatement",
												"src": "4833:24:2"
											},
											{
												"expression": {
													"id": 592,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 590,
														"name": "dripRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 362,
														"src": "4937:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 591,
														"name": "_dripRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 555,
														"src": "4948:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "4937:20:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 593,
												"nodeType": "ExpressionStatement",
												"src": "4937:20:2"
											},
											{
												"expression": {
													"id": 598,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 594,
														"name": "lastPayout",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 354,
														"src": "4967:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"components": [
															{
																"expression": {
																	"id": 595,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -4,
																	"src": "4981:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 596,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "4981:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 597,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "4980:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4967:30:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 599,
												"nodeType": "ExpressionStatement",
												"src": "4967:30:2"
											},
											{
												"expression": {
													"id": 602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 600,
														"name": "forPool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 372,
														"src": "5032:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "32",
														"id": 601,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5042:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"src": "5032:11:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 603,
												"nodeType": "ExpressionStatement",
												"src": "5032:11:2"
											},
											{
												"expression": {
													"id": 606,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 604,
														"name": "forDivs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 374,
														"src": "5053:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 605,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5063:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "5053:11:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 607,
												"nodeType": "ExpressionStatement",
												"src": "5053:11:2"
											},
											{
												"expression": {
													"id": 610,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 608,
														"name": "requiredBalance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 341,
														"src": "5075:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 609,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5093:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "5075:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 611,
												"nodeType": "ExpressionStatement",
												"src": "5075:19:2"
											}
										]
									},
									"id": 613,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [],
											"id": 558,
											"modifierName": {
												"id": 557,
												"name": "Ownable",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 2287,
												"src": "4591:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_contract$_Ownable_$2287_$",
													"typeString": "type(contract Ownable)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "4591:9:2"
										}
									],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 556,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 553,
												"mutability": "mutable",
												"name": "_tokenAddress",
												"nodeType": "VariableDeclaration",
												"scope": 613,
												"src": "4551:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 552,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4551:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 555,
												"mutability": "mutable",
												"name": "_dripRate",
												"nodeType": "VariableDeclaration",
												"scope": 613,
												"src": "4574:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 554,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4574:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4550:40:2"
									},
									"returnParameters": {
										"id": 559,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4601:0:2"
									},
									"scope": 1983,
									"src": "4539:562:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 633,
										"nodeType": "Block",
										"src": "5260:124:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 619,
															"name": "bnbReceiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 345,
															"src": "5288:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"expression": {
																"id": 620,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "5301:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 621,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "5301:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 616,
															"name": "Address",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 295,
															"src": "5270:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_Address_$295_$",
																"typeString": "type(library Address)"
															}
														},
														"id": 618,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sendValue",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 53,
														"src": "5270:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$",
															"typeString": "function (address payable,uint256)"
														}
													},
													"id": 622,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5270:41:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 623,
												"nodeType": "ExpressionStatement",
												"src": "5270:41:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 625,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "5338:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 626,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5338:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"expression": {
																"id": 627,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "5350:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 628,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "5350:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 629,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "5361:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 630,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "5361:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 624,
														"name": "onDonateBNB",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 531,
														"src": "5326:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256)"
														}
													},
													"id": 631,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5326:51:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 632,
												"nodeType": "EmitStatement",
												"src": "5321:56:2"
											}
										]
									},
									"id": 634,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 614,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5240:2:2"
									},
									"returnParameters": {
										"id": 615,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5260:0:2"
									},
									"scope": 1983,
									"src": "5233:151:2",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 684,
										"nodeType": "Block",
										"src": "5585:521:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 644,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -15,
																		"src": "5699:3:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 645,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "5699:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 648,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "5719:4:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_DiamondSafe_$1983",
																				"typeString": "contract DiamondSafe"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_DiamondSafe_$1983",
																				"typeString": "contract DiamondSafe"
																			}
																		],
																		"id": 647,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5711:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 646,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5711:7:2",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 649,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5711:13:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																{
																	"id": 650,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 636,
																	"src": "5726:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	},
																	{
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 642,
																	"name": "stakingToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 339,
																	"src": "5673:12:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$2061",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 643,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "transferFrom",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2042,
																"src": "5673:25:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256) external returns (bool)"
																}
															},
															"id": 651,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5673:61:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 641,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "5665:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 652,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5665:70:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 653,
												"nodeType": "ExpressionStatement",
												"src": "5665:70:2"
											},
											{
												"expression": {
													"id": 656,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 654,
														"name": "dripPoolBalance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 360,
														"src": "5797:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 655,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 636,
														"src": "5816:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5797:26:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 657,
												"nodeType": "ExpressionStatement",
												"src": "5797:26:2"
											},
											{
												"expression": {
													"id": 664,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 658,
																"name": "accountOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 449,
																"src": "5833:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																	"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																}
															},
															"id": 661,
															"indexExpression": {
																"expression": {
																	"id": 659,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -15,
																	"src": "5844:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 660,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "5844:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5833:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$437_storage",
																"typeString": "struct DiamondSafe.Account storage ref"
															}
														},
														"id": 662,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "xContributed",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 430,
														"src": "5833:35:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 663,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5872:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "5833:40:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 665,
												"nodeType": "ExpressionStatement",
												"src": "5833:40:2"
											},
											{
												"expression": {
													"id": 672,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 666,
																"name": "accountOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 449,
																"src": "5883:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																	"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																}
															},
															"id": 669,
															"indexExpression": {
																"expression": {
																	"id": 667,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -15,
																	"src": "5894:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 668,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "5894:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5883:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$437_storage",
																"typeString": "struct DiamondSafe.Account storage ref"
															}
														},
														"id": 670,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "contributed",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 418,
														"src": "5883:34:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 671,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 636,
														"src": "5921:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5883:45:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 673,
												"nodeType": "ExpressionStatement",
												"src": "5883:45:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 675,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "6030:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 676,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "6030:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 677,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 636,
															"src": "6042:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 678,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "6051:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 679,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "6051:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 674,
														"name": "onDonate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 523,
														"src": "6021:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256)"
														}
													},
													"id": 680,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6021:46:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 681,
												"nodeType": "EmitStatement",
												"src": "6016:51:2"
											},
											{
												"expression": {
													"id": 682,
													"name": "dripPoolBalance",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 360,
													"src": "6084:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 640,
												"id": 683,
												"nodeType": "Return",
												"src": "6077:22:2"
											}
										]
									},
									"functionSelector": "f14faf6f",
									"id": 685,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "donate",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 637,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 636,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 685,
												"src": "5546:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 635,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "5546:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5545:14:2"
									},
									"returnParameters": {
										"id": 640,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 639,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 685,
												"src": "5576:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 638,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5576:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5575:9:2"
									},
									"scope": 1983,
									"src": "5530:576:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 698,
										"nodeType": "Block",
										"src": "6183:54:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 693,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "6210:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 694,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "6210:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 695,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 687,
															"src": "6222:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 692,
														"name": "depositTo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 755,
														"src": "6200:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (address,uint256) returns (uint256)"
														}
													},
													"id": 696,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6200:30:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 691,
												"id": 697,
												"nodeType": "Return",
												"src": "6193:37:2"
											}
										]
									},
									"functionSelector": "b6b55f25",
									"id": 699,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 688,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 687,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 699,
												"src": "6144:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 686,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "6144:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6143:14:2"
									},
									"returnParameters": {
										"id": 691,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 690,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 699,
												"src": "6174:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 689,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6174:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6173:9:2"
									},
									"scope": 1983,
									"src": "6127:110:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 754,
										"nodeType": "Block",
										"src": "6333:769:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 711,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -15,
																		"src": "6447:3:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 712,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "6447:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 715,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "6467:4:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_DiamondSafe_$1983",
																				"typeString": "contract DiamondSafe"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_DiamondSafe_$1983",
																				"typeString": "contract DiamondSafe"
																			}
																		],
																		"id": 714,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "6459:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 713,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "6459:7:2",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 716,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6459:13:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																{
																	"id": 717,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 703,
																	"src": "6474:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	},
																	{
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 709,
																	"name": "stakingToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 339,
																	"src": "6421:12:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$2061",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 710,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "transferFrom",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2042,
																"src": "6421:25:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256) external returns (bool)"
																}
															},
															"id": 718,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6421:61:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 708,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "6413:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 719,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6413:70:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 720,
												"nodeType": "ExpressionStatement",
												"src": "6413:70:2"
											},
											{
												"expression": {
													"id": 723,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 721,
														"name": "totalDeposits",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 358,
														"src": "6545:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 722,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 703,
														"src": "6562:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6545:24:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 724,
												"nodeType": "ExpressionStatement",
												"src": "6545:24:2"
											},
											{
												"assignments": [
													726
												],
												"declarations": [
													{
														"constant": false,
														"id": 726,
														"mutability": "mutable",
														"name": "amount",
														"nodeType": "VariableDeclaration",
														"scope": 754,
														"src": "6632:11:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 725,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "6632:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 731,
												"initialValue": {
													"arguments": [
														{
															"id": 728,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 701,
															"src": "6661:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 729,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 703,
															"src": "6668:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 727,
														"name": "_depositTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1719,
														"src": "6646:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (address,uint256) returns (uint256)"
														}
													},
													"id": 730,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6646:30:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6632:44:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 733,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 701,
															"src": "6751:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 734,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 449,
																	"src": "6770:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 736,
																"indexExpression": {
																	"id": 735,
																	"name": "_user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 701,
																	"src": "6781:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6770:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 737,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "deposited",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 410,
															"src": "6770:27:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"baseExpression": {
																"id": 738,
																"name": "balanceOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 445,
																"src": "6811:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																	"typeString": "mapping(address => uint256)"
																}
															},
															"id": 740,
															"indexExpression": {
																"id": 739,
																"name": "_user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 701,
																"src": "6822:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "6811:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 741,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 449,
																	"src": "6842:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 743,
																"indexExpression": {
																	"id": 742,
																	"name": "_user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 701,
																	"src": "6853:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6842:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 744,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "withdrawn",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 412,
															"src": "6842:27:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 745,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "6883:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 746,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "6883:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 732,
														"name": "onUpdate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 509,
														"src": "6729:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256,uint256)"
														}
													},
													"id": 747,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6729:179:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 748,
												"nodeType": "EmitStatement",
												"src": "6724:184:2"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 749,
														"name": "distribute",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1584,
														"src": "6983:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 750,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6983:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 751,
												"nodeType": "ExpressionStatement",
												"src": "6983:12:2"
											},
											{
												"expression": {
													"id": 752,
													"name": "amount",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 726,
													"src": "7089:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 707,
												"id": 753,
												"nodeType": "Return",
												"src": "7082:13:2"
											}
										]
									},
									"functionSelector": "ffaad6a5",
									"id": 755,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "depositTo",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 704,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 701,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 755,
												"src": "6279:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 700,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6279:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 703,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 755,
												"src": "6294:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 702,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "6294:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6278:29:2"
									},
									"returnParameters": {
										"id": 707,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 706,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 755,
												"src": "6324:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 705,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6324:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6323:9:2"
									},
									"scope": 1983,
									"src": "6260:842:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 763,
										"nodeType": "Block",
										"src": "7163:34:2",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 760,
														"name": "_compoundTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1807,
														"src": "7173:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$_t_uint256_$",
															"typeString": "function () returns (uint256)"
														}
													},
													"id": 761,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7173:17:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 762,
												"nodeType": "ExpressionStatement",
												"src": "7173:17:2"
											}
										]
									},
									"functionSelector": "f69e2046",
									"id": 764,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 758,
											"modifierName": {
												"id": 757,
												"name": "onlyEarners",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 408,
												"src": "7151:11:2",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "7151:11:2"
										}
									],
									"name": "compound",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 756,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7141:2:2"
									},
									"returnParameters": {
										"id": 759,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7163:0:2"
									},
									"scope": 1983,
									"src": "7124:73:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 837,
										"nodeType": "Block",
										"src": "7256:852:2",
										"statements": [
											{
												"assignments": [
													770
												],
												"declarations": [
													{
														"constant": false,
														"id": 770,
														"mutability": "mutable",
														"name": "_user",
														"nodeType": "VariableDeclaration",
														"scope": 837,
														"src": "7266:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 769,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7266:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 773,
												"initialValue": {
													"expression": {
														"id": 771,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -15,
														"src": "7282:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 772,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "7282:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7266:26:2"
											},
											{
												"assignments": [
													775
												],
												"declarations": [
													{
														"constant": false,
														"id": 775,
														"mutability": "mutable",
														"name": "_dividends",
														"nodeType": "VariableDeclaration",
														"scope": 837,
														"src": "7302:18:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 774,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7302:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 778,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 776,
														"name": "myEarnings",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1045,
														"src": "7323:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
															"typeString": "function () view returns (uint256)"
														}
													},
													"id": 777,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7323:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7302:33:2"
											},
											{
												"expression": {
													"id": 789,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 779,
															"name": "payoutsOf_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 441,
															"src": "7429:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_int256_$",
																"typeString": "mapping(address => int256)"
															}
														},
														"id": 781,
														"indexExpression": {
															"id": 780,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 770,
															"src": "7440:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7429:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 787,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 785,
																	"name": "_dividends",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 775,
																	"src": "7459:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 786,
																	"name": "magnitude",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 370,
																	"src": "7472:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7459:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"components": [
																{
																	"id": 783,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7451:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_int256_$",
																		"typeString": "type(int256)"
																	},
																	"typeName": {
																		"id": 782,
																		"name": "int256",
																		"nodeType": "ElementaryTypeName",
																		"src": "7451:6:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"id": 784,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "7450:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int256_$",
																"typeString": "type(int256)"
															}
														},
														"id": 788,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7450:32:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "7429:53:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"id": 790,
												"nodeType": "ExpressionStatement",
												"src": "7429:53:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 794,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 770,
															"src": "7568:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 795,
															"name": "_dividends",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 775,
															"src": "7575:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 791,
															"name": "stakingToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 339,
															"src": "7546:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$2061",
																"typeString": "contract IERC20"
															}
														},
														"id": 793,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2010,
														"src": "7546:21:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 796,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7546:40:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 797,
												"nodeType": "ExpressionStatement",
												"src": "7546:40:2"
											},
											{
												"expression": {
													"id": 810,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 798,
																"name": "accountOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 449,
																"src": "7661:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																	"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																}
															},
															"id": 800,
															"indexExpression": {
																"id": 799,
																"name": "_user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 770,
																"src": "7672:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "7661:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$437_storage",
																"typeString": "struct DiamondSafe.Account storage ref"
															}
														},
														"id": 801,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "withdrawn",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 412,
														"src": "7661:27:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 804,
																		"name": "accountOf_",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 449,
																		"src": "7717:10:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																			"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																		}
																	},
																	"id": 806,
																	"indexExpression": {
																		"id": 805,
																		"name": "_user",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 770,
																		"src": "7728:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "7717:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Account_$437_storage",
																		"typeString": "struct DiamondSafe.Account storage ref"
																	}
																},
																"id": 807,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "withdrawn",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 412,
																"src": "7717:27:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 808,
																"name": "_dividends",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 775,
																"src": "7758:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 802,
																"name": "SafeMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2942,
																"src": "7691:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																	"typeString": "type(library SafeMath)"
																}
															},
															"id": 803,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2747,
															"src": "7691:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 809,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7691:87:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7661:117:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 811,
												"nodeType": "ExpressionStatement",
												"src": "7661:117:2"
											},
											{
												"expression": {
													"id": 817,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 812,
																"name": "accountOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 449,
																"src": "7788:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																	"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																}
															},
															"id": 814,
															"indexExpression": {
																"id": 813,
																"name": "_user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 770,
																"src": "7799:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "7788:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$437_storage",
																"typeString": "struct DiamondSafe.Account storage ref"
															}
														},
														"id": 815,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "xWithdrawn",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 432,
														"src": "7788:28:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 816,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7820:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "7788:33:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 818,
												"nodeType": "ExpressionStatement",
												"src": "7788:33:2"
											},
											{
												"expression": {
													"id": 821,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 819,
														"name": "totalTxs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 352,
														"src": "7878:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 820,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7890:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "7878:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 822,
												"nodeType": "ExpressionStatement",
												"src": "7878:13:2"
											},
											{
												"expression": {
													"id": 825,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 823,
														"name": "totalClaims",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 356,
														"src": "7901:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 824,
														"name": "_dividends",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 775,
														"src": "7916:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7901:25:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 826,
												"nodeType": "ExpressionStatement",
												"src": "7901:25:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 828,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 770,
															"src": "7984:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 829,
															"name": "_dividends",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 775,
															"src": "7991:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 830,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "8003:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 831,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "8003:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 827,
														"name": "onWithdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															469,
															487
														],
														"referencedDeclaration": 487,
														"src": "7973:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256)"
														}
													},
													"id": 832,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7973:46:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 833,
												"nodeType": "EmitStatement",
												"src": "7968:51:2"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 834,
														"name": "distribute",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1584,
														"src": "8089:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 835,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8089:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 836,
												"nodeType": "ExpressionStatement",
												"src": "8089:12:2"
											}
										]
									},
									"functionSelector": "4641257d",
									"id": 838,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 767,
											"modifierName": {
												"id": 766,
												"name": "onlyEarners",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 408,
												"src": "7244:11:2",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "7244:11:2"
										}
									],
									"name": "harvest",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 765,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7234:2:2"
									},
									"returnParameters": {
										"id": 768,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7256:0:2"
									},
									"scope": 1983,
									"src": "7218:890:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 953,
										"nodeType": "Block",
										"src": "8184:1477:2",
										"statements": [
											{
												"assignments": [
													846
												],
												"declarations": [
													{
														"constant": false,
														"id": 846,
														"mutability": "mutable",
														"name": "_user",
														"nodeType": "VariableDeclaration",
														"scope": 953,
														"src": "8194:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 845,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "8194:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 849,
												"initialValue": {
													"expression": {
														"id": 847,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -15,
														"src": "8210:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 848,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "8210:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8194:26:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 855,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 851,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 840,
																"src": "8238:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"baseExpression": {
																	"id": 852,
																	"name": "balanceOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 445,
																	"src": "8249:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 854,
																"indexExpression": {
																	"id": 853,
																	"name": "_user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 846,
																	"src": "8260:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "8249:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8238:28:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 850,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "8230:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 856,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8230:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 857,
												"nodeType": "ExpressionStatement",
												"src": "8230:37:2"
											},
											{
												"assignments": [
													859
												],
												"declarations": [
													{
														"constant": false,
														"id": 859,
														"mutability": "mutable",
														"name": "_undividedDividends",
														"nodeType": "VariableDeclaration",
														"scope": 953,
														"src": "8278:27:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 858,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8278:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 867,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 866,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 862,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 840,
																"src": "8321:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 863,
																"name": "divsFee",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 365,
																"src": "8330:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															],
															"expression": {
																"id": 860,
																"name": "SafeMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2942,
																"src": "8308:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																	"typeString": "type(library SafeMath)"
																}
															},
															"id": 861,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "mul",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2803,
															"src": "8308:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 864,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8308:30:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "313030",
														"id": 865,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8341:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100_by_1",
															"typeString": "int_const 100"
														},
														"value": "100"
													},
													"src": "8308:36:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8278:66:2"
											},
											{
												"expression": {
													"id": 870,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 868,
														"name": "_undividedDividends",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 859,
														"src": "8542:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 869,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8564:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8542:23:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 871,
												"nodeType": "ExpressionStatement",
												"src": "8542:23:2"
											},
											{
												"assignments": [
													873
												],
												"declarations": [
													{
														"constant": false,
														"id": 873,
														"mutability": "mutable",
														"name": "_taxedTokens",
														"nodeType": "VariableDeclaration",
														"scope": 953,
														"src": "8647:21:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 872,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8647:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 879,
												"initialValue": {
													"arguments": [
														{
															"id": 876,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 840,
															"src": "8684:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 877,
															"name": "_undividedDividends",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 859,
															"src": "8693:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 874,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2942,
															"src": "8671:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 875,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2769,
														"src": "8671:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 878,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8671:42:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8647:66:2"
											},
											{
												"expression": {
													"id": 886,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 880,
														"name": "currentTotalStaked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 384,
														"src": "8723:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 883,
																"name": "currentTotalStaked",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 384,
																"src": "8757:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 884,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 840,
																"src": "8777:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 881,
																"name": "SafeMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2942,
																"src": "8744:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																	"typeString": "type(library SafeMath)"
																}
															},
															"id": 882,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2769,
															"src": "8744:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 885,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8744:41:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8723:62:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 887,
												"nodeType": "ExpressionStatement",
												"src": "8723:62:2"
											},
											{
												"expression": {
													"id": 898,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 888,
															"name": "balanceOf_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 445,
															"src": "8795:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 890,
														"indexExpression": {
															"id": 889,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 846,
															"src": "8806:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8795:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"baseExpression": {
																	"id": 893,
																	"name": "balanceOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 445,
																	"src": "8828:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 895,
																"indexExpression": {
																	"id": 894,
																	"name": "_user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 846,
																	"src": "8839:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "8828:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 896,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 840,
																"src": "8847:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 891,
																"name": "SafeMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2942,
																"src": "8815:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																	"typeString": "type(library SafeMath)"
																}
															},
															"id": 892,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2769,
															"src": "8815:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 897,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8815:40:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8795:60:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 899,
												"nodeType": "ExpressionStatement",
												"src": "8795:60:2"
											},
											{
												"assignments": [
													901
												],
												"declarations": [
													{
														"constant": false,
														"id": 901,
														"mutability": "mutable",
														"name": "_updatedPayouts",
														"nodeType": "VariableDeclaration",
														"scope": 953,
														"src": "8937:22:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 900,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "8937:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 914,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 912,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 907,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 905,
																	"name": "profitPerShare_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 386,
																	"src": "8984:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 906,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 840,
																	"src": "9002:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8984:25:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 910,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 908,
																			"name": "_taxedTokens",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 873,
																			"src": "9013:12:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 909,
																			"name": "magnitude",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 370,
																			"src": "9028:9:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "9013:24:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 911,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "9012:26:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8984:54:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"components": [
															{
																"id": 903,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8963:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_int256_$",
																	"typeString": "type(int256)"
																},
																"typeName": {
																	"id": 902,
																	"name": "int256",
																	"nodeType": "ElementaryTypeName",
																	"src": "8963:6:2",
																	"typeDescriptions": {}
																}
															}
														],
														"id": 904,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "8962:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int256_$",
															"typeString": "type(int256)"
														}
													},
													"id": 913,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8962:86:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8937:111:2"
											},
											{
												"expression": {
													"id": 919,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 915,
															"name": "payoutsOf_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 441,
															"src": "9058:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_int256_$",
																"typeString": "mapping(address => int256)"
															}
														},
														"id": 917,
														"indexExpression": {
															"id": 916,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 846,
															"src": "9069:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9058:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 918,
														"name": "_updatedPayouts",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 901,
														"src": "9079:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "9058:36:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"id": 920,
												"nodeType": "ExpressionStatement",
												"src": "9058:36:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 922,
															"name": "_undividedDividends",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 859,
															"src": "9188:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 921,
														"name": "allocateFees",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1497,
														"src": "9175:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 923,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9175:33:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 924,
												"nodeType": "ExpressionStatement",
												"src": "9175:33:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 926,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 846,
															"src": "9291:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 927,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 840,
															"src": "9298:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 928,
															"name": "_taxedTokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 873,
															"src": "9307:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 929,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "9321:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 930,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "9321:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 925,
														"name": "onWithdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															469,
															487
														],
														"referencedDeclaration": 469,
														"src": "9280:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256)"
														}
													},
													"id": 931,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9280:57:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 932,
												"nodeType": "EmitStatement",
												"src": "9275:62:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 934,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 846,
															"src": "9412:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 935,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 449,
																	"src": "9431:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 937,
																"indexExpression": {
																	"id": 936,
																	"name": "_user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 846,
																	"src": "9442:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "9431:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 938,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "deposited",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 410,
															"src": "9431:27:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"baseExpression": {
																"id": 939,
																"name": "balanceOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 445,
																"src": "9472:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																	"typeString": "mapping(address => uint256)"
																}
															},
															"id": 941,
															"indexExpression": {
																"id": 940,
																"name": "_user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 846,
																"src": "9483:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9472:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 942,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 449,
																	"src": "9503:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 944,
																"indexExpression": {
																	"id": 943,
																	"name": "_user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 846,
																	"src": "9514:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "9503:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 945,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "withdrawn",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 412,
															"src": "9503:27:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 946,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "9544:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 947,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "9544:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 933,
														"name": "onUpdate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 509,
														"src": "9390:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256,uint256)"
														}
													},
													"id": 948,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9390:179:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 949,
												"nodeType": "EmitStatement",
												"src": "9385:184:2"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 950,
														"name": "distribute",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1584,
														"src": "9638:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 951,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9638:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 952,
												"nodeType": "ExpressionStatement",
												"src": "9638:12:2"
											}
										]
									},
									"functionSelector": "2e1a7d4d",
									"id": 954,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 843,
											"modifierName": {
												"id": 842,
												"name": "onlyHolders",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 397,
												"src": "8172:11:2",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "8172:11:2"
										}
									],
									"name": "withdraw",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 841,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 840,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 954,
												"src": "8148:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 839,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8148:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8147:17:2"
									},
									"returnParameters": {
										"id": 844,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8184:0:2"
									},
									"scope": 1983,
									"src": "8130:1531:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 970,
										"nodeType": "Block",
										"src": "9789:53:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 966,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 956,
															"src": "9822:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 967,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 958,
															"src": "9827:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 965,
														"name": "_transferTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1982,
														"src": "9806:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) returns (bool)"
														}
													},
													"id": 968,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9806:29:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 964,
												"id": 969,
												"nodeType": "Return",
												"src": "9799:36:2"
											}
										]
									},
									"functionSelector": "a9059cbb",
									"id": 971,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 961,
											"modifierName": {
												"id": 960,
												"name": "onlyHolders",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 397,
												"src": "9762:11:2",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "9762:11:2"
										}
									],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 959,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 956,
												"mutability": "mutable",
												"name": "_to",
												"nodeType": "VariableDeclaration",
												"scope": 971,
												"src": "9710:11:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 955,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9710:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 958,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 971,
												"src": "9731:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 957,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9731:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9700:52:2"
									},
									"returnParameters": {
										"id": 964,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 963,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 971,
												"src": "9783:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 962,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9783:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9782:6:2"
									},
									"scope": 1983,
									"src": "9683:159:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1022,
										"nodeType": "Block",
										"src": "10105:293:2",
										"statements": [
											{
												"assignments": [
													979
												],
												"declarations": [
													{
														"constant": false,
														"id": 979,
														"mutability": "mutable",
														"name": "x",
														"nodeType": "VariableDeclaration",
														"scope": 1022,
														"src": "10115:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 978,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10115:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 981,
												"initialValue": {
													"hexValue": "30",
													"id": 980,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10127:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10115:13:2"
											},
											{
												"assignments": [
													983
												],
												"declarations": [
													{
														"constant": false,
														"id": 983,
														"mutability": "mutable",
														"name": "jpegTest1",
														"nodeType": "VariableDeclaration",
														"scope": 1022,
														"src": "10138:17:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC721_$2177",
															"typeString": "contract IERC721"
														},
														"typeName": {
															"id": 982,
															"name": "IERC721",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 2177,
															"src": "10138:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721_$2177",
																"typeString": "contract IERC721"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 984,
												"nodeType": "VariableDeclarationStatement",
												"src": "10138:17:2"
											},
											{
												"body": {
													"id": 1011,
													"nodeType": "Block",
													"src": "10201:99:2",
													"statements": [
														{
															"expression": {
																"id": 1002,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 996,
																	"name": "jpegTest1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 983,
																	"src": "10215:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC721_$2177",
																		"typeString": "contract IERC721"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"baseExpression": {
																				"id": 998,
																				"name": "jpeg",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 348,
																				"src": "10235:4:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_contract$_IERC721_$2177_$dyn_storage",
																					"typeString": "contract IERC721[] storage ref"
																				}
																			},
																			"id": 1000,
																			"indexExpression": {
																				"id": 999,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 986,
																				"src": "10240:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "10235:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC721_$2177",
																				"typeString": "contract IERC721"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IERC721_$2177",
																				"typeString": "contract IERC721"
																			}
																		],
																		"id": 997,
																		"name": "IERC721",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2177,
																		"src": "10227:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_IERC721_$2177_$",
																			"typeString": "type(contract IERC721)"
																		}
																	},
																	"id": 1001,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10227:16:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC721_$2177",
																		"typeString": "contract IERC721"
																	}
																},
																"src": "10215:28:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC721_$2177",
																	"typeString": "contract IERC721"
																}
															},
															"id": 1003,
															"nodeType": "ExpressionStatement",
															"src": "10215:28:2"
														},
														{
															"expression": {
																"id": 1009,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1004,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 979,
																	"src": "10258:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1007,
																			"name": "_user",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 973,
																			"src": "10283:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"expression": {
																			"id": 1005,
																			"name": "jpegTest1",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 983,
																			"src": "10263:9:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC721_$2177",
																				"typeString": "contract IERC721"
																			}
																		},
																		"id": 1006,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "balanceOf",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2102,
																		"src": "10263:19:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) view external returns (uint256)"
																		}
																	},
																	"id": 1008,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10263:26:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10258:31:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1010,
															"nodeType": "ExpressionStatement",
															"src": "10258:31:2"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 992,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 989,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 986,
														"src": "10180:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 990,
															"name": "jpeg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 348,
															"src": "10184:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_contract$_IERC721_$2177_$dyn_storage",
																"typeString": "contract IERC721[] storage ref"
															}
														},
														"id": 991,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "10184:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10180:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1012,
												"initializationExpression": {
													"assignments": [
														986
													],
													"declarations": [
														{
															"constant": false,
															"id": 986,
															"mutability": "mutable",
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 1012,
															"src": "10169:6:2",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 985,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "10169:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 988,
													"initialValue": {
														"hexValue": "30",
														"id": 987,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10177:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "10169:9:2"
												},
												"loopExpression": {
													"expression": {
														"id": 994,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "10197:3:2",
														"subExpression": {
															"id": 993,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 986,
															"src": "10197:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 995,
													"nodeType": "ExpressionStatement",
													"src": "10197:3:2"
												},
												"nodeType": "ForStatement",
												"src": "10165:135:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1015,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1013,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 979,
														"src": "10312:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"id": 1014,
														"name": "requiredBalance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 341,
														"src": "10317:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10312:20:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1019,
												"nodeType": "IfStatement",
												"src": "10308:62:2",
												"trueBody": {
													"id": 1018,
													"nodeType": "Block",
													"src": "10334:36:2",
													"statements": [
														{
															"expression": {
																"hexValue": "74727565",
																"id": 1016,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10355:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 977,
															"id": 1017,
															"nodeType": "Return",
															"src": "10348:11:2"
														}
													]
												}
											},
											{
												"expression": {
													"hexValue": "66616c7365",
													"id": 1020,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10386:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "false"
												},
												"functionReturnParameters": 977,
												"id": 1021,
												"nodeType": "Return",
												"src": "10379:12:2"
											}
										]
									},
									"functionSelector": "36599ead",
									"id": 1023,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "checkImmunity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 974,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 973,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "10054:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 972,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10054:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10053:15:2"
									},
									"returnParameters": {
										"id": 977,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 976,
												"mutability": "mutable",
												"name": "isImmune",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "10090:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 975,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10090:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10089:15:2"
									},
									"scope": 1983,
									"src": "10031:367:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1033,
										"nodeType": "Block",
										"src": "10454:45:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1029,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "10481:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1030,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "10481:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"id": 1028,
														"name": "balanceOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1057,
														"src": "10471:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1031,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10471:21:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1027,
												"id": 1032,
												"nodeType": "Return",
												"src": "10464:28:2"
											}
										]
									},
									"functionSelector": "949e8acd",
									"id": 1034,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "myTokens",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1024,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10421:2:2"
									},
									"returnParameters": {
										"id": 1027,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1026,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1034,
												"src": "10445:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1025,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10445:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10444:9:2"
									},
									"scope": 1983,
									"src": "10404:95:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1044,
										"nodeType": "Block",
										"src": "10557:47:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1040,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "10586:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1041,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "10586:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"id": 1039,
														"name": "dividendsOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1118,
														"src": "10574:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1042,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10574:23:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1038,
												"id": 1043,
												"nodeType": "Return",
												"src": "10567:30:2"
											}
										]
									},
									"functionSelector": "ffe6bbd8",
									"id": 1045,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "myEarnings",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1035,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10524:2:2"
									},
									"returnParameters": {
										"id": 1038,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1037,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1045,
												"src": "10548:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1036,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10548:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10547:9:2"
									},
									"scope": 1983,
									"src": "10505:99:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1056,
										"nodeType": "Block",
										"src": "10674:41:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 1052,
														"name": "balanceOf_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "10691:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1054,
													"indexExpression": {
														"id": 1053,
														"name": "_user",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1047,
														"src": "10702:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "10691:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1051,
												"id": 1055,
												"nodeType": "Return",
												"src": "10684:24:2"
											}
										]
									},
									"functionSelector": "70a08231",
									"id": 1057,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1048,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1047,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 1057,
												"src": "10629:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1046,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10629:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10628:15:2"
									},
									"returnParameters": {
										"id": 1051,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1050,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1057,
												"src": "10665:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1049,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10665:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10664:9:2"
									},
									"scope": 1983,
									"src": "10610:105:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1067,
										"nodeType": "Block",
										"src": "10788:37:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1064,
														"name": "_user",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1059,
														"src": "10805:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1065,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"src": "10805:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1063,
												"id": 1066,
												"nodeType": "Return",
												"src": "10798:20:2"
											}
										]
									},
									"functionSelector": "eedc966a",
									"id": 1068,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tokenBalance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1060,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1059,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 1068,
												"src": "10743:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1058,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10743:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10742:15:2"
									},
									"returnParameters": {
										"id": 1063,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1062,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1068,
												"src": "10779:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1061,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10779:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10778:9:2"
									},
									"scope": 1983,
									"src": "10721:104:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1081,
										"nodeType": "Block",
										"src": "10885:61:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1077,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -28,
																	"src": "10933:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_DiamondSafe_$1983",
																		"typeString": "contract DiamondSafe"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_DiamondSafe_$1983",
																		"typeString": "contract DiamondSafe"
																	}
																],
																"id": 1076,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10925:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1075,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10925:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 1078,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10925:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"expression": {
															"id": 1073,
															"name": "stakingToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 339,
															"src": "10902:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$2061",
																"typeString": "contract IERC20"
															}
														},
														"id": 1074,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2000,
														"src": "10902:22:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 1079,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10902:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1072,
												"id": 1080,
												"nodeType": "Return",
												"src": "10895:44:2"
											}
										]
									},
									"functionSelector": "ad7a672f",
									"id": 1082,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalBalance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1069,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10852:2:2"
									},
									"returnParameters": {
										"id": 1072,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1071,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1082,
												"src": "10876:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1070,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10876:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10875:9:2"
									},
									"scope": 1983,
									"src": "10831:115:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1089,
										"nodeType": "Block",
										"src": "11005:42:2",
										"statements": [
											{
												"expression": {
													"id": 1087,
													"name": "currentTotalStaked",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 384,
													"src": "11022:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1086,
												"id": 1088,
												"nodeType": "Return",
												"src": "11015:25:2"
											}
										]
									},
									"functionSelector": "18160ddd",
									"id": 1090,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1083,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10972:2:2"
									},
									"returnParameters": {
										"id": 1086,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1085,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1090,
												"src": "10996:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1084,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10996:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10995:9:2"
									},
									"scope": 1983,
									"src": "10952:95:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1117,
										"nodeType": "Block",
										"src": "11119:174:2",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1115,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1112,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1107,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1103,
																				"name": "profitPerShare_",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 386,
																				"src": "11184:15:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"baseExpression": {
																					"id": 1104,
																					"name": "balanceOf_",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 445,
																					"src": "11202:10:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																						"typeString": "mapping(address => uint256)"
																					}
																				},
																				"id": 1106,
																				"indexExpression": {
																					"id": 1105,
																					"name": "_user",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1092,
																					"src": "11213:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "11202:17:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "11184:35:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"components": [
																			{
																				"id": 1101,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "11176:6:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_int256_$",
																					"typeString": "type(int256)"
																				},
																				"typeName": {
																					"id": 1100,
																					"name": "int256",
																					"nodeType": "ElementaryTypeName",
																					"src": "11176:6:2",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"id": 1102,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "11175:8:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		}
																	},
																	"id": 1108,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "11175:45:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"baseExpression": {
																		"id": 1109,
																		"name": "payoutsOf_",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 441,
																		"src": "11243:10:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_int256_$",
																			"typeString": "mapping(address => int256)"
																		}
																	},
																	"id": 1111,
																	"indexExpression": {
																		"id": 1110,
																		"name": "_user",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1092,
																		"src": "11254:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "11243:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "11175:85:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"components": [
																{
																	"id": 1098,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11149:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1097,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "11149:7:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"id": 1099,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "11148:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															}
														},
														"id": 1113,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11148:126:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 1114,
														"name": "magnitude",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 370,
														"src": "11277:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11148:138:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1096,
												"id": 1116,
												"nodeType": "Return",
												"src": "11129:157:2"
											}
										]
									},
									"functionSelector": "0065318b",
									"id": 1118,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "dividendsOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1093,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1092,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 1118,
												"src": "11074:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1091,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11074:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11073:15:2"
									},
									"returnParameters": {
										"id": 1096,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1118,
												"src": "11110:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1094,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11110:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11109:9:2"
									},
									"scope": 1983,
									"src": "11053:240:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1149,
										"nodeType": "Block",
										"src": "11351:214:2",
										"statements": [
											{
												"assignments": [
													1124
												],
												"declarations": [
													{
														"constant": false,
														"id": 1124,
														"mutability": "mutable",
														"name": "_tokens",
														"nodeType": "VariableDeclaration",
														"scope": 1149,
														"src": "11361:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1123,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11361:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1126,
												"initialValue": {
													"hexValue": "31653138",
													"id": 1125,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "11379:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_1000000000000000000_by_1",
														"typeString": "int_const 1000000000000000000"
													},
													"value": "1e18"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11361:22:2"
											},
											{
												"assignments": [
													1128
												],
												"declarations": [
													{
														"constant": false,
														"id": 1128,
														"mutability": "mutable",
														"name": "_dividends",
														"nodeType": "VariableDeclaration",
														"scope": 1149,
														"src": "11393:18:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1127,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11393:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1138,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1133,
																	"name": "_tokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1124,
																	"src": "11440:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1134,
																	"name": "divsFee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 365,
																	"src": "11449:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																],
																"expression": {
																	"id": 1131,
																	"name": "SafeMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2942,
																	"src": "11427:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																		"typeString": "type(library SafeMath)"
																	}
																},
																"id": 1132,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mul",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2803,
																"src": "11427:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1135,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11427:30:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "313030",
															"id": 1136,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11459:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															},
															"value": "100"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															}
														],
														"expression": {
															"id": 1129,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2942,
															"src": "11414:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 1130,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2825,
														"src": "11414:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1137,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11414:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11393:70:2"
											},
											{
												"assignments": [
													1140
												],
												"declarations": [
													{
														"constant": false,
														"id": 1140,
														"mutability": "mutable",
														"name": "_taxedTokens",
														"nodeType": "VariableDeclaration",
														"scope": 1149,
														"src": "11473:20:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1139,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11473:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1146,
												"initialValue": {
													"arguments": [
														{
															"id": 1143,
															"name": "_tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1124,
															"src": "11509:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1144,
															"name": "_dividends",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1128,
															"src": "11518:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1141,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2942,
															"src": "11496:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 1142,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2769,
														"src": "11496:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1145,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11496:33:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11473:56:2"
											},
											{
												"expression": {
													"id": 1147,
													"name": "_taxedTokens",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1140,
													"src": "11546:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1122,
												"id": 1148,
												"nodeType": "Return",
												"src": "11539:19:2"
											}
										]
									},
									"functionSelector": "4b750334",
									"id": 1150,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sellPrice",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1119,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11317:2:2"
									},
									"returnParameters": {
										"id": 1122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1121,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1150,
												"src": "11342:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1120,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11342:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11341:9:2"
									},
									"scope": 1983,
									"src": "11299:266:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1181,
										"nodeType": "Block",
										"src": "11621:214:2",
										"statements": [
											{
												"assignments": [
													1156
												],
												"declarations": [
													{
														"constant": false,
														"id": 1156,
														"mutability": "mutable",
														"name": "_tokens",
														"nodeType": "VariableDeclaration",
														"scope": 1181,
														"src": "11631:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1155,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11631:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1158,
												"initialValue": {
													"hexValue": "31653138",
													"id": 1157,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "11649:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_1000000000000000000_by_1",
														"typeString": "int_const 1000000000000000000"
													},
													"value": "1e18"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11631:22:2"
											},
											{
												"assignments": [
													1160
												],
												"declarations": [
													{
														"constant": false,
														"id": 1160,
														"mutability": "mutable",
														"name": "_dividends",
														"nodeType": "VariableDeclaration",
														"scope": 1181,
														"src": "11663:18:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1159,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11663:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1170,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1165,
																	"name": "_tokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1156,
																	"src": "11710:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1166,
																	"name": "divsFee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 365,
																	"src": "11719:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																],
																"expression": {
																	"id": 1163,
																	"name": "SafeMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2942,
																	"src": "11697:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																		"typeString": "type(library SafeMath)"
																	}
																},
																"id": 1164,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mul",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2803,
																"src": "11697:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1167,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11697:30:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "313030",
															"id": 1168,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11729:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															},
															"value": "100"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															}
														],
														"expression": {
															"id": 1161,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2942,
															"src": "11684:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 1162,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2825,
														"src": "11684:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1169,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11684:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11663:70:2"
											},
											{
												"assignments": [
													1172
												],
												"declarations": [
													{
														"constant": false,
														"id": 1172,
														"mutability": "mutable",
														"name": "_taxedTokens",
														"nodeType": "VariableDeclaration",
														"scope": 1181,
														"src": "11743:20:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1171,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11743:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1178,
												"initialValue": {
													"arguments": [
														{
															"id": 1175,
															"name": "_tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1156,
															"src": "11779:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1176,
															"name": "_dividends",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1160,
															"src": "11788:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1173,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2942,
															"src": "11766:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 1174,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "add",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2747,
														"src": "11766:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1177,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11766:33:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11743:56:2"
											},
											{
												"expression": {
													"id": 1179,
													"name": "_taxedTokens",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1172,
													"src": "11816:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1154,
												"id": 1180,
												"nodeType": "Return",
												"src": "11809:19:2"
											}
										]
									},
									"functionSelector": "8620410b",
									"id": 1182,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "buyPrice",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1151,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11588:2:2"
									},
									"returnParameters": {
										"id": 1154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1153,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1182,
												"src": "11612:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1152,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11612:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11611:9:2"
									},
									"scope": 1983,
									"src": "11571:264:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1215,
										"nodeType": "Block",
										"src": "11935:203:2",
										"statements": [
											{
												"assignments": [
													1190
												],
												"declarations": [
													{
														"constant": false,
														"id": 1190,
														"mutability": "mutable",
														"name": "_divies",
														"nodeType": "VariableDeclaration",
														"scope": 1215,
														"src": "11945:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1189,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11945:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1200,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1195,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1184,
																	"src": "11989:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1196,
																	"name": "divsFee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 365,
																	"src": "11998:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																],
																"expression": {
																	"id": 1193,
																	"name": "SafeMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2942,
																	"src": "11976:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																		"typeString": "type(library SafeMath)"
																	}
																},
																"id": 1194,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mul",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2803,
																"src": "11976:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1197,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11976:30:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "313030",
															"id": 1198,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "12008:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															},
															"value": "100"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															}
														],
														"expression": {
															"id": 1191,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2942,
															"src": "11963:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 1192,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2825,
														"src": "11963:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1199,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11963:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11945:67:2"
											},
											{
												"assignments": [
													1202
												],
												"declarations": [
													{
														"constant": false,
														"id": 1202,
														"mutability": "mutable",
														"name": "_remains",
														"nodeType": "VariableDeclaration",
														"scope": 1215,
														"src": "12022:16:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1201,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12022:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1208,
												"initialValue": {
													"arguments": [
														{
															"id": 1205,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1184,
															"src": "12054:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1206,
															"name": "_divies",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1190,
															"src": "12063:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1203,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2942,
															"src": "12041:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 1204,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2769,
														"src": "12041:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1207,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12041:30:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12022:49:2"
											},
											{
												"assignments": [
													1210
												],
												"declarations": [
													{
														"constant": false,
														"id": 1210,
														"mutability": "mutable",
														"name": "_result",
														"nodeType": "VariableDeclaration",
														"scope": 1215,
														"src": "12081:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1209,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12081:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1212,
												"initialValue": {
													"id": 1211,
													"name": "_remains",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1202,
													"src": "12099:8:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12081:26:2"
											},
											{
												"expression": {
													"id": 1213,
													"name": "_result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1210,
													"src": "12124:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1188,
												"id": 1214,
												"nodeType": "Return",
												"src": "12117:14:2"
											}
										]
									},
									"functionSelector": "e02e1e9c",
									"id": 1216,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateSharesReceived",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1184,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 1216,
												"src": "11883:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1183,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11883:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11873:31:2"
									},
									"returnParameters": {
										"id": 1188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1187,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1216,
												"src": "11926:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1186,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11926:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11925:9:2"
									},
									"scope": 1983,
									"src": "11841:297:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1255,
										"nodeType": "Block",
										"src": "12238:251:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1226,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1224,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1218,
																"src": "12256:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1225,
																"name": "currentTotalStaked",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 384,
																"src": "12267:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "12256:29:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1223,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "12248:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12248:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1228,
												"nodeType": "ExpressionStatement",
												"src": "12248:38:2"
											},
											{
												"assignments": [
													1230
												],
												"declarations": [
													{
														"constant": false,
														"id": 1230,
														"mutability": "mutable",
														"name": "_tokens",
														"nodeType": "VariableDeclaration",
														"scope": 1255,
														"src": "12296:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1229,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12296:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1232,
												"initialValue": {
													"id": 1231,
													"name": "_amount",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1218,
													"src": "12314:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12296:25:2"
											},
											{
												"assignments": [
													1234
												],
												"declarations": [
													{
														"constant": false,
														"id": 1234,
														"mutability": "mutable",
														"name": "_divies",
														"nodeType": "VariableDeclaration",
														"scope": 1255,
														"src": "12331:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1233,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12331:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1244,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1239,
																	"name": "_tokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1230,
																	"src": "12375:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1240,
																	"name": "divsFee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 365,
																	"src": "12384:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																],
																"expression": {
																	"id": 1237,
																	"name": "SafeMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2942,
																	"src": "12362:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																		"typeString": "type(library SafeMath)"
																	}
																},
																"id": 1238,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mul",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2803,
																"src": "12362:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1241,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12362:30:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "313030",
															"id": 1242,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "12394:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															},
															"value": "100"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															}
														],
														"expression": {
															"id": 1235,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2942,
															"src": "12349:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 1236,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2825,
														"src": "12349:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1243,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12349:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12331:67:2"
											},
											{
												"assignments": [
													1246
												],
												"declarations": [
													{
														"constant": false,
														"id": 1246,
														"mutability": "mutable",
														"name": "_remains",
														"nodeType": "VariableDeclaration",
														"scope": 1255,
														"src": "12408:16:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1245,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12408:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1252,
												"initialValue": {
													"arguments": [
														{
															"id": 1249,
															"name": "_tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1230,
															"src": "12440:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1250,
															"name": "_divies",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1234,
															"src": "12449:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1247,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2942,
															"src": "12427:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 1248,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2769,
														"src": "12427:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1251,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12427:30:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12408:49:2"
											},
											{
												"expression": {
													"id": 1253,
													"name": "_remains",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1246,
													"src": "12474:8:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1222,
												"id": 1254,
												"nodeType": "Return",
												"src": "12467:15:2"
											}
										]
									},
									"functionSelector": "10d0ffdd",
									"id": 1256,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateTokensReceived",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1218,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 1256,
												"src": "12186:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1217,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12186:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12176:31:2"
									},
									"returnParameters": {
										"id": 1222,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1221,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1256,
												"src": "12229:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1220,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12229:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12228:9:2"
									},
									"scope": 1983,
									"src": "12144:345:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1309,
										"nodeType": "Block",
										"src": "12570:522:2",
										"statements": [
											{
												"assignments": [
													1266
												],
												"declarations": [
													{
														"constant": false,
														"id": 1266,
														"mutability": "mutable",
														"name": "a",
														"nodeType": "VariableDeclaration",
														"scope": 1309,
														"src": "12580:16:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Account_$437_memory_ptr",
															"typeString": "struct DiamondSafe.Account"
														},
														"typeName": {
															"id": 1265,
															"name": "Account",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 437,
															"src": "12580:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$437_storage_ptr",
																"typeString": "struct DiamondSafe.Account"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1270,
												"initialValue": {
													"baseExpression": {
														"id": 1267,
														"name": "accountOf_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 449,
														"src": "12599:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
															"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
														}
													},
													"id": 1269,
													"indexExpression": {
														"id": 1268,
														"name": "_user",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1258,
														"src": "12610:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "12599:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Account_$437_storage",
														"typeString": "struct DiamondSafe.Account storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12580:36:2"
											},
											{
												"assignments": [
													1276
												],
												"declarations": [
													{
														"constant": false,
														"id": 1276,
														"mutability": "mutable",
														"name": "accountArray",
														"nodeType": "VariableDeclaration",
														"scope": 1309,
														"src": "12626:31:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$14_memory_ptr",
															"typeString": "uint256[14]"
														},
														"typeName": {
															"baseType": {
																"id": 1274,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "12626:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1275,
															"length": {
																"hexValue": "3134",
																"id": 1273,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12634:2:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_14_by_1",
																	"typeString": "int_const 14"
																},
																"value": "14"
															},
															"nodeType": "ArrayTypeName",
															"src": "12626:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$14_storage_ptr",
																"typeString": "uint256[14]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1306,
												"initialValue": {
													"components": [
														{
															"expression": {
																"id": 1277,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1266,
																"src": "12674:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1278,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "deposited",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 410,
															"src": "12674:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1279,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1266,
																"src": "12699:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1280,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "withdrawn",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 412,
															"src": "12699:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1281,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1266,
																"src": "12724:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1282,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "rewarded",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 416,
															"src": "12724:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1283,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1266,
																"src": "12748:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1284,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "compounded",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 414,
															"src": "12748:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1285,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1266,
																"src": "12774:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1286,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "contributed",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 418,
															"src": "12774:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1287,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1266,
																"src": "12801:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1288,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "transferredShares",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 420,
															"src": "12801:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1289,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1266,
																"src": "12834:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1290,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "receivedShares",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 422,
															"src": "12834:16:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1291,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1266,
																"src": "12864:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1292,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "xInvested",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 424,
															"src": "12864:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1293,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1266,
																"src": "12889:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1294,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "xRewarded",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 428,
															"src": "12889:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1295,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1266,
																"src": "12914:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1296,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "xContributed",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 430,
															"src": "12914:14:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1297,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1266,
																"src": "12942:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1298,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "xWithdrawn",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 432,
															"src": "12942:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1299,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1266,
																"src": "12968:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1300,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "xTransferredShares",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 434,
															"src": "12968:20:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1301,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1266,
																"src": "13002:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1302,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "xReceivedShares",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 436,
															"src": "13002:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1303,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1266,
																"src": "13033:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1304,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "xCompounded",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 426,
															"src": "13033:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1305,
													"isConstant": false,
													"isInlineArray": true,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "12660:396:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$14_memory_ptr",
														"typeString": "uint256[14] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12626:430:2"
											},
											{
												"expression": {
													"id": 1307,
													"name": "accountArray",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1276,
													"src": "13073:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$14_memory_ptr",
														"typeString": "uint256[14] memory"
													}
												},
												"functionReturnParameters": 1264,
												"id": 1308,
												"nodeType": "Return",
												"src": "13066:19:2"
											}
										]
									},
									"functionSelector": "8086b8ba",
									"id": 1310,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "accountOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1259,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1258,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 1310,
												"src": "12514:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1257,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12514:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12513:15:2"
									},
									"returnParameters": {
										"id": 1264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1263,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1310,
												"src": "12550:18:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$14_memory_ptr",
													"typeString": "uint256[14]"
												},
												"typeName": {
													"baseType": {
														"id": 1260,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "12550:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1262,
													"length": {
														"hexValue": "3134",
														"id": 1261,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12558:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_14_by_1",
															"typeString": "int_const 14"
														},
														"value": "14"
													},
													"nodeType": "ArrayTypeName",
													"src": "12550:11:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$14_storage_ptr",
														"typeString": "uint256[14]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12549:20:2"
									},
									"scope": 1983,
									"src": "12495:597:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1343,
										"nodeType": "Block",
										"src": "13166:213:2",
										"statements": [
											{
												"assignments": [
													1318
												],
												"declarations": [
													{
														"constant": false,
														"id": 1318,
														"mutability": "mutable",
														"name": "share",
														"nodeType": "VariableDeclaration",
														"scope": 1343,
														"src": "13176:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1317,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13176:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1326,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "31",
															"id": 1324,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13226:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1321,
																	"name": "dripRate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 362,
																	"src": "13212:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																],
																"expression": {
																	"id": 1319,
																	"name": "dripPoolBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 360,
																	"src": "13192:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1320,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mul",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2803,
																"src": "13192:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1322,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13192:29:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1323,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2825,
														"src": "13192:33:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1325,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13192:36:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13176:52:2"
											},
											{
												"expression": {
													"condition": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1329,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1327,
																	"name": "currentTotalStaked",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 384,
																	"src": "13258:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1328,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13279:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "13258:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 1330,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "13257:24:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "30",
														"id": 1340,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "13371:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"id": 1341,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "13257:115:2",
													"trueExpression": {
														"arguments": [
															{
																"id": 1338,
																"name": "currentTotalStaked",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 384,
																"src": "13333:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"baseExpression": {
																			"id": 1333,
																			"name": "balanceOf_",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 445,
																			"src": "13310:10:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																				"typeString": "mapping(address => uint256)"
																			}
																		},
																		"id": 1335,
																		"indexExpression": {
																			"id": 1334,
																			"name": "_user",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1312,
																			"src": "13321:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "13310:17:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1331,
																		"name": "share",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1318,
																		"src": "13300:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1332,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "mul",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2803,
																	"src": "13300:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 1336,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "13300:28:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1337,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "div",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2825,
															"src": "13300:32:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1339,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "13300:52:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1316,
												"id": 1342,
												"nodeType": "Return",
												"src": "13238:134:2"
											}
										]
									},
									"functionSelector": "fbaf1bbd",
									"id": 1344,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "dailyEstimate",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1312,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 1344,
												"src": "13121:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1311,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13121:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13120:15:2"
									},
									"returnParameters": {
										"id": 1316,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1315,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1344,
												"src": "13157:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1314,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13157:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13156:9:2"
									},
									"scope": 1983,
									"src": "13098:281:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1382,
										"nodeType": "Block",
										"src": "13615:295:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1361,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1358,
																		"name": "_divs",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1348,
																		"src": "13643:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1356,
																		"name": "_pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1346,
																		"src": "13633:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1357,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "add",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2747,
																	"src": "13633:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 1359,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "13633:16:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "33",
																"id": 1360,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13653:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_3_by_1",
																	"typeString": "int_const 3"
																},
																"value": "3"
															},
															"src": "13633:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54454e5f504f5254494f4e535f524551554952455f4449564953494f4e",
															"id": 1362,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13656:31:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4c70c5fa0b5c0d2773598ee22ede93a0b89d086249c68ce8bc880fe634a056ae",
																"typeString": "literal_string \"TEN_PORTIONS_REQUIRE_DIVISION\""
															},
															"value": "TEN_PORTIONS_REQUIRE_DIVISION"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4c70c5fa0b5c0d2773598ee22ede93a0b89d086249c68ce8bc880fe634a056ae",
																"typeString": "literal_string \"TEN_PORTIONS_REQUIRE_DIVISION\""
															}
														],
														"id": 1355,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "13625:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1363,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13625:63:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1364,
												"nodeType": "ExpressionStatement",
												"src": "13625:63:2"
											},
											{
												"expression": {
													"id": 1367,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1365,
														"name": "forPool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 372,
														"src": "13732:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1366,
														"name": "_pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1346,
														"src": "13742:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "13732:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1368,
												"nodeType": "ExpressionStatement",
												"src": "13732:15:2"
											},
											{
												"expression": {
													"id": 1371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1369,
														"name": "forDivs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 374,
														"src": "13757:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1370,
														"name": "_divs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1348,
														"src": "13767:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "13757:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1372,
												"nodeType": "ExpressionStatement",
												"src": "13757:15:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1374,
															"name": "_pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1346,
															"src": "13852:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1375,
															"name": "_divs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1348,
															"src": "13859:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1376,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "13866:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1377,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "13866:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1373,
														"name": "onSetFeeSplit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 539,
														"src": "13838:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (uint256,uint256,uint256)"
														}
													},
													"id": 1378,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13838:44:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1379,
												"nodeType": "EmitStatement",
												"src": "13833:49:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1380,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "13899:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1354,
												"id": 1381,
												"nodeType": "Return",
												"src": "13892:11:2"
											}
										]
									},
									"functionSelector": "7e6335c7",
									"id": 1383,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1351,
											"modifierName": {
												"id": 1350,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 2236,
												"src": "13581:9:2",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "13581:9:2"
										}
									],
									"name": "setFeeSplit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1346,
												"mutability": "mutable",
												"name": "_pool",
												"nodeType": "VariableDeclaration",
												"scope": 1383,
												"src": "13531:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1345,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13531:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1348,
												"mutability": "mutable",
												"name": "_divs",
												"nodeType": "VariableDeclaration",
												"scope": 1383,
												"src": "13554:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1347,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13554:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13521:52:2"
									},
									"returnParameters": {
										"id": 1354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1353,
												"mutability": "mutable",
												"name": "_success",
												"nodeType": "VariableDeclaration",
												"scope": 1383,
												"src": "13600:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1352,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "13600:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13599:15:2"
									},
									"scope": 1983,
									"src": "13501:409:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1437,
										"nodeType": "Block",
										"src": "14081:415:2",
										"statements": [
											{
												"body": {
													"id": 1414,
													"nodeType": "Block",
													"src": "14123:130:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30783830616335386364",
																				"id": 1409,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "14216:10:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2158778573_by_1",
																					"typeString": "int_const 2158778573"
																				},
																				"value": "0x80ac58cd"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_2158778573_by_1",
																					"typeString": "int_const 2158778573"
																				}
																			],
																			"expression": {
																				"baseExpression": {
																					"id": 1405,
																					"name": "_contract",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1386,
																					"src": "14185:9:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_contract$_IERC721_$2177_$dyn_memory_ptr",
																						"typeString": "contract IERC721[] memory"
																					}
																				},
																				"id": 1407,
																				"indexExpression": {
																					"id": 1406,
																					"name": "i",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1394,
																					"src": "14195:1:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "14185:12:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IERC721_$2177",
																					"typeString": "contract IERC721"
																				}
																			},
																			"id": 1408,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "supportsInterface",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 2953,
																			"src": "14185:30:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_external_view$_t_bytes4_$returns$_t_bool_$",
																				"typeString": "function (bytes4) view external returns (bool)"
																			}
																		},
																		"id": 1410,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "14185:42:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "4e4f545f455243373231",
																		"id": 1411,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "14229:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_d74553be9cf5182c4eb87cee7703c25a8fb7e946d1fe89483a54f86d57680453",
																			"typeString": "literal_string \"NOT_ERC721\""
																		},
																		"value": "NOT_ERC721"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_d74553be9cf5182c4eb87cee7703c25a8fb7e946d1fe89483a54f86d57680453",
																			"typeString": "literal_string \"NOT_ERC721\""
																		}
																	],
																	"id": 1404,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		-18,
																		-18
																	],
																	"referencedDeclaration": -18,
																	"src": "14177:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1412,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "14177:65:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1413,
															"nodeType": "ExpressionStatement",
															"src": "14177:65:2"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1400,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1397,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1394,
														"src": "14102:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1398,
															"name": "jpeg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 348,
															"src": "14106:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_contract$_IERC721_$2177_$dyn_storage",
																"typeString": "contract IERC721[] storage ref"
															}
														},
														"id": 1399,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "14106:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "14102:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1415,
												"initializationExpression": {
													"assignments": [
														1394
													],
													"declarations": [
														{
															"constant": false,
															"id": 1394,
															"mutability": "mutable",
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 1415,
															"src": "14091:6:2",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1393,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "14091:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1396,
													"initialValue": {
														"hexValue": "30",
														"id": 1395,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "14099:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "14091:9:2"
												},
												"loopExpression": {
													"expression": {
														"id": 1402,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "14119:3:2",
														"subExpression": {
															"id": 1401,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1394,
															"src": "14119:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1403,
													"nodeType": "ExpressionStatement",
													"src": "14119:3:2"
												},
												"nodeType": "ForStatement",
												"src": "14087:166:2"
											},
											{
												"assignments": [
													1419
												],
												"declarations": [
													{
														"constant": false,
														"id": 1419,
														"mutability": "mutable",
														"name": "oldContract",
														"nodeType": "VariableDeclaration",
														"scope": 1437,
														"src": "14262:28:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_contract$_IERC721_$2177_$dyn_memory_ptr",
															"typeString": "contract IERC721[]"
														},
														"typeName": {
															"baseType": {
																"id": 1417,
																"name": "IERC721",
																"nodeType": "UserDefinedTypeName",
																"referencedDeclaration": 2177,
																"src": "14262:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC721_$2177",
																	"typeString": "contract IERC721"
																}
															},
															"id": 1418,
															"nodeType": "ArrayTypeName",
															"src": "14262:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_contract$_IERC721_$2177_$dyn_storage_ptr",
																"typeString": "contract IERC721[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1421,
												"initialValue": {
													"id": 1420,
													"name": "jpeg",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 348,
													"src": "14293:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC721_$2177_$dyn_storage",
														"typeString": "contract IERC721[] storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14262:35:2"
											},
											{
												"expression": {
													"id": 1424,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1422,
														"name": "jpeg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 348,
														"src": "14307:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_contract$_IERC721_$2177_$dyn_storage",
															"typeString": "contract IERC721[] storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1423,
														"name": "_contract",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1386,
														"src": "14314:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_contract$_IERC721_$2177_$dyn_memory_ptr",
															"typeString": "contract IERC721[] memory"
														}
													},
													"src": "14307:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC721_$2177_$dyn_storage",
														"typeString": "contract IERC721[] storage ref"
													}
												},
												"id": 1425,
												"nodeType": "ExpressionStatement",
												"src": "14307:16:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1427,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "14371:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1428,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "14371:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 1429,
															"name": "oldContract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1419,
															"src": "14395:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_contract$_IERC721_$2177_$dyn_memory_ptr",
																"typeString": "contract IERC721[] memory"
															}
														},
														{
															"id": 1430,
															"name": "_contract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1386,
															"src": "14420:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_contract$_IERC721_$2177_$dyn_memory_ptr",
																"typeString": "contract IERC721[] memory"
															}
														},
														{
															"expression": {
																"id": 1431,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "14443:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1432,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "14443:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_array$_t_contract$_IERC721_$2177_$dyn_memory_ptr",
																"typeString": "contract IERC721[] memory"
															},
															{
																"typeIdentifier": "t_array$_t_contract$_IERC721_$2177_$dyn_memory_ptr",
																"typeString": "contract IERC721[] memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1426,
														"name": "onSetImmunityToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 551,
														"src": "14339:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_array$_t_contract$_IERC721_$2177_$dyn_memory_ptr_$_t_array$_t_contract$_IERC721_$2177_$dyn_memory_ptr_$_t_uint256_$returns$__$",
															"typeString": "function (address,contract IERC721[] memory,contract IERC721[] memory,uint256)"
														}
													},
													"id": 1433,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14339:129:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1434,
												"nodeType": "EmitStatement",
												"src": "14334:134:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1435,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "14485:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1392,
												"id": 1436,
												"nodeType": "Return",
												"src": "14478:11:2"
											}
										]
									},
									"functionSelector": "f6db0da0",
									"id": 1438,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1389,
											"modifierName": {
												"id": 1388,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 2236,
												"src": "14047:9:2",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "14047:9:2"
										}
									],
									"name": "setImmunityToken",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1387,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1386,
												"mutability": "mutable",
												"name": "_contract",
												"nodeType": "VariableDeclaration",
												"scope": 1438,
												"src": "14007:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC721_$2177_$dyn_memory_ptr",
													"typeString": "contract IERC721[]"
												},
												"typeName": {
													"baseType": {
														"id": 1384,
														"name": "IERC721",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 2177,
														"src": "14007:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC721_$2177",
															"typeString": "contract IERC721"
														}
													},
													"id": 1385,
													"nodeType": "ArrayTypeName",
													"src": "14007:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC721_$2177_$dyn_storage_ptr",
														"typeString": "contract IERC721[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13997:42:2"
									},
									"returnParameters": {
										"id": 1392,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1391,
												"mutability": "mutable",
												"name": "_success",
												"nodeType": "VariableDeclaration",
												"scope": 1438,
												"src": "14066:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1390,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "14066:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14065:15:2"
									},
									"scope": 1983,
									"src": "13972:524:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1496,
										"nodeType": "Block",
										"src": "14706:697:2",
										"statements": [
											{
												"assignments": [
													1444
												],
												"declarations": [
													{
														"constant": false,
														"id": 1444,
														"mutability": "mutable",
														"name": "_onePiece",
														"nodeType": "VariableDeclaration",
														"scope": 1496,
														"src": "14716:17:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1443,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "14716:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1449,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "3130",
															"id": 1447,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "14744:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_10_by_1",
																"typeString": "int_const 10"
															},
															"value": "10"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_10_by_1",
																"typeString": "int_const 10"
															}
														],
														"expression": {
															"id": 1445,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1440,
															"src": "14736:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1446,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2825,
														"src": "14736:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1448,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14736:11:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14716:31:2"
											},
											{
												"assignments": [
													1451
												],
												"declarations": [
													{
														"constant": false,
														"id": 1451,
														"mutability": "mutable",
														"name": "_forPool",
														"nodeType": "VariableDeclaration",
														"scope": 1496,
														"src": "14758:16:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1450,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "14758:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1457,
												"initialValue": {
													"components": [
														{
															"arguments": [
																{
																	"id": 1454,
																	"name": "forPool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 372,
																	"src": "14792:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1452,
																	"name": "_onePiece",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1444,
																	"src": "14778:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1453,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mul",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2803,
																"src": "14778:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1455,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14778:22:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1456,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "14777:24:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14758:43:2"
											},
											{
												"assignments": [
													1459
												],
												"declarations": [
													{
														"constant": false,
														"id": 1459,
														"mutability": "mutable",
														"name": "_forDivs",
														"nodeType": "VariableDeclaration",
														"scope": 1496,
														"src": "14832:16:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1458,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "14832:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1465,
												"initialValue": {
													"components": [
														{
															"arguments": [
																{
																	"id": 1462,
																	"name": "forDivs",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 374,
																	"src": "14866:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1460,
																	"name": "_onePiece",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1444,
																	"src": "14852:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1461,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mul",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2803,
																"src": "14852:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1463,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14852:22:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1464,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "14851:24:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14832:43:2"
											},
											{
												"expression": {
													"id": 1471,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1466,
														"name": "dripPoolBalance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 360,
														"src": "14906:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1469,
																"name": "_forPool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1451,
																"src": "14944:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 1467,
																"name": "dripPoolBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 360,
																"src": "14924:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1468,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2747,
															"src": "14924:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1470,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "14924:29:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "14906:47:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1472,
												"nodeType": "ExpressionStatement",
												"src": "14906:47:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1475,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1473,
														"name": "currentTotalStaked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 384,
														"src": "15032:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1474,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "15053:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "15032:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1494,
													"nodeType": "Block",
													"src": "15273:124:2",
													"statements": [
														{
															"expression": {
																"id": 1492,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1490,
																	"name": "dripPoolBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 360,
																	"src": "15359:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 1491,
																	"name": "_forDivs",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1459,
																	"src": "15378:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "15359:27:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1493,
															"nodeType": "ExpressionStatement",
															"src": "15359:27:2"
														}
													]
												},
												"id": 1495,
												"nodeType": "IfStatement",
												"src": "15028:369:2",
												"trueBody": {
													"id": 1489,
													"nodeType": "Block",
													"src": "15056:211:2",
													"statements": [
														{
															"expression": {
																"id": 1487,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1476,
																	"name": "profitPerShare_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 386,
																	"src": "15118:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1479,
																			"name": "profitPerShare_",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 386,
																			"src": "15166:15:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1485,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1482,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 1480,
																							"name": "_forDivs",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1459,
																							"src": "15200:8:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"id": 1481,
																							"name": "magnitude",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 370,
																							"src": "15211:9:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "15200:20:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 1483,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "15199:22:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "/",
																			"rightExpression": {
																				"id": 1484,
																				"name": "currentTotalStaked",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 384,
																				"src": "15224:18:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "15199:43:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1477,
																			"name": "SafeMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2942,
																			"src": "15136:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																				"typeString": "type(library SafeMath)"
																			}
																		},
																		"id": 1478,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "add",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2747,
																		"src": "15136:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1486,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "15136:120:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "15118:138:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1488,
															"nodeType": "ExpressionStatement",
															"src": "15118:138:2"
														}
													]
												}
											}
										]
									},
									"id": 1497,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allocateFees",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1441,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1440,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 1497,
												"src": "14688:8:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1439,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "14688:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14687:10:2"
									},
									"returnParameters": {
										"id": 1442,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14706:0:2"
									},
									"scope": 1983,
									"src": "14666:737:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1583,
										"nodeType": "Block",
										"src": "15474:1210:2",
										"statements": [
											{
												"assignments": [
													1501
												],
												"declarations": [
													{
														"constant": false,
														"id": 1501,
														"mutability": "mutable",
														"name": "_currentTimestamp",
														"nodeType": "VariableDeclaration",
														"scope": 1583,
														"src": "15484:22:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1500,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "15484:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1505,
												"initialValue": {
													"components": [
														{
															"expression": {
																"id": 1502,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "15510:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1503,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "15510:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1504,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "15509:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "15484:42:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1511,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1508,
																"name": "lastRebaseTime",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 382,
																"src": "15617:14:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 1506,
																"name": "_currentTimestamp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1501,
																"src": "15591:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1507,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "safeSub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2941,
															"src": "15591:25:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1509,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "15591:41:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1510,
														"name": "rebaseFrequency",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 377,
														"src": "15635:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "15591:59:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1523,
												"nodeType": "IfStatement",
												"src": "15587:278:2",
												"trueBody": {
													"id": 1522,
													"nodeType": "Block",
													"src": "15652:213:2",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 1513,
																			"name": "totalBalance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1082,
																			"src": "15715:12:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																				"typeString": "function () view returns (uint256)"
																			}
																		},
																		"id": 1514,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "15715:14:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1515,
																		"name": "_currentTimestamp",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1501,
																		"src": "15731:17:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1512,
																	"name": "onRebase",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 515,
																	"src": "15706:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (uint256,uint256)"
																	}
																},
																"id": 1516,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "15706:43:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1517,
															"nodeType": "EmitStatement",
															"src": "15701:48:2"
														},
														{
															"expression": {
																"id": 1520,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1518,
																	"name": "lastRebaseTime",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 382,
																	"src": "15820:14:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1519,
																	"name": "_currentTimestamp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1501,
																	"src": "15837:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "15820:34:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1521,
															"nodeType": "ExpressionStatement",
															"src": "15820:34:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1534,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1530,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 1526,
																	"name": "_currentTimestamp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1501,
																	"src": "15954:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1527,
																	"name": "lastPayout",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 354,
																	"src": "15973:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1524,
																	"name": "SafeMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2942,
																	"src": "15937:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																		"typeString": "type(library SafeMath)"
																	}
																},
																"id": 1525,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "safeSub",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2941,
																"src": "15937:16:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1528,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15937:47:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 1529,
															"name": "payoutFrequency",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 380,
															"src": "15987:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "15937:65:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1533,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1531,
															"name": "currentTotalStaked",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 384,
															"src": "16018:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1532,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "16039:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "16018:22:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "15937:103:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1582,
												"nodeType": "IfStatement",
												"src": "15920:758:2",
												"trueBody": {
													"id": 1581,
													"nodeType": "Block",
													"src": "16051:627:2",
													"statements": [
														{
															"assignments": [
																1536
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1536,
																	"mutability": "mutable",
																	"name": "share",
																	"nodeType": "VariableDeclaration",
																	"scope": 1581,
																	"src": "16112:13:2",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1535,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "16112:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1547,
															"initialValue": {
																"arguments": [
																	{
																		"hexValue": "3234",
																		"id": 1545,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "16186:8:2",
																		"subdenomination": "hours",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_86400_by_1",
																			"typeString": "int_const 86400"
																		},
																		"value": "24"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_86400_by_1",
																			"typeString": "int_const 86400"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"hexValue": "31",
																				"id": 1542,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "16162:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				}
																			],
																			"expression": {
																				"arguments": [
																					{
																						"id": 1539,
																						"name": "dripRate",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 362,
																						"src": "16148:8:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					],
																					"expression": {
																						"id": 1537,
																						"name": "dripPoolBalance",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 360,
																						"src": "16128:15:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 1538,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "mul",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2803,
																					"src": "16128:19:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																						"typeString": "function (uint256,uint256) pure returns (uint256)"
																					}
																				},
																				"id": 1540,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "16128:29:2",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1541,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "div",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 2825,
																			"src": "16128:33:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																				"typeString": "function (uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1543,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "16128:36:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1544,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "div",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2825,
																	"src": "16128:40:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 1546,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "16128:80:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "16112:96:2"
														},
														{
															"assignments": [
																1549
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1549,
																	"mutability": "mutable",
																	"name": "profit",
																	"nodeType": "VariableDeclaration",
																	"scope": 1581,
																	"src": "16222:14:2",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1548,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "16222:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1556,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1555,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1550,
																	"name": "share",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1536,
																	"src": "16239:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"arguments": [
																		{
																			"id": 1553,
																			"name": "lastPayout",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 354,
																			"src": "16273:10:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1551,
																			"name": "_currentTimestamp",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1501,
																			"src": "16247:17:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1552,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "safeSub",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2941,
																		"src": "16247:25:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1554,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "16247:37:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "16239:45:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "16222:62:2"
														},
														{
															"expression": {
																"id": 1562,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1557,
																	"name": "dripPoolBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 360,
																	"src": "16375:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1560,
																			"name": "profit",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1549,
																			"src": "16417:6:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1558,
																			"name": "dripPoolBalance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 360,
																			"src": "16393:15:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1559,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "safeSub",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2941,
																		"src": "16393:23:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1561,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "16393:31:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "16375:49:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1563,
															"nodeType": "ExpressionStatement",
															"src": "16375:49:2"
														},
														{
															"expression": {
																"id": 1575,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1564,
																	"name": "profitPerShare_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 386,
																	"src": "16438:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1567,
																			"name": "profitPerShare_",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 386,
																			"src": "16486:15:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1573,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1570,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 1568,
																							"name": "profit",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1549,
																							"src": "16520:6:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"id": 1569,
																							"name": "magnitude",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 370,
																							"src": "16529:9:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "16520:18:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 1571,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "16519:20:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "/",
																			"rightExpression": {
																				"id": 1572,
																				"name": "currentTotalStaked",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 384,
																				"src": "16542:18:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "16519:41:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1565,
																			"name": "SafeMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2942,
																			"src": "16456:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																				"typeString": "type(library SafeMath)"
																			}
																		},
																		"id": 1566,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "add",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2747,
																		"src": "16456:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1574,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "16456:118:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "16438:136:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1576,
															"nodeType": "ExpressionStatement",
															"src": "16438:136:2"
														},
														{
															"expression": {
																"id": 1579,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1577,
																	"name": "lastPayout",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 354,
																	"src": "16637:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1578,
																	"name": "_currentTimestamp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1501,
																	"src": "16650:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "16637:30:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1580,
															"nodeType": "ExpressionStatement",
															"src": "16637:30:2"
														}
													]
												}
											}
										]
									},
									"id": 1584,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "distribute",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1498,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15463:2:2"
									},
									"returnParameters": {
										"id": 1499,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15474:0:2"
									},
									"scope": 1983,
									"src": "15444:1240:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1718,
										"nodeType": "Block",
										"src": "16840:1466:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1605,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1598,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1593,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 449,
																	"src": "16942:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 1595,
																"indexExpression": {
																	"id": 1594,
																	"name": "_recipient",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1586,
																	"src": "16953:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "16942:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 1596,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "deposited",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 410,
															"src": "16942:32:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 1597,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "16978:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "16942:37:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1604,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1599,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 449,
																	"src": "16995:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 1601,
																"indexExpression": {
																	"id": 1600,
																	"name": "_recipient",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1586,
																	"src": "17006:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "16995:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 1602,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "receivedShares",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 422,
															"src": "16995:37:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 1603,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "17036:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "16995:42:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "16942:95:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1611,
												"nodeType": "IfStatement",
												"src": "16925:158:2",
												"trueBody": {
													"id": 1610,
													"nodeType": "Block",
													"src": "17048:35:2",
													"statements": [
														{
															"expression": {
																"id": 1608,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1606,
																	"name": "users",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 350,
																	"src": "17062:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 1607,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "17071:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "17062:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1609,
															"nodeType": "ExpressionStatement",
															"src": "17062:10:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1614,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1612,
														"name": "totalTxs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 352,
														"src": "17121:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1613,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "17133:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "17121:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1615,
												"nodeType": "ExpressionStatement",
												"src": "17121:13:2"
											},
											{
												"assignments": [
													1617
												],
												"declarations": [
													{
														"constant": false,
														"id": 1617,
														"mutability": "mutable",
														"name": "_undividedDividends",
														"nodeType": "VariableDeclaration",
														"scope": 1718,
														"src": "17150:27:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1616,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "17150:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1625,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1624,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1620,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1588,
																"src": "17193:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1621,
																"name": "divsFee",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 365,
																"src": "17202:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															],
															"expression": {
																"id": 1618,
																"name": "SafeMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2942,
																"src": "17180:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																	"typeString": "type(library SafeMath)"
																}
															},
															"id": 1619,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "mul",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2803,
															"src": "17180:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1622,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "17180:30:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "313030",
														"id": 1623,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "17213:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100_by_1",
															"typeString": "int_const 100"
														},
														"value": "100"
													},
													"src": "17180:36:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "17150:66:2"
											},
											{
												"assignments": [
													1627
												],
												"declarations": [
													{
														"constant": false,
														"id": 1627,
														"mutability": "mutable",
														"name": "_tokens",
														"nodeType": "VariableDeclaration",
														"scope": 1718,
														"src": "17228:17:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1626,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "17228:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1633,
												"initialValue": {
													"arguments": [
														{
															"id": 1630,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1588,
															"src": "17261:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1631,
															"name": "_undividedDividends",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1617,
															"src": "17270:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1628,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2942,
															"src": "17248:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 1629,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2769,
														"src": "17248:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1632,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17248:42:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "17228:62:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1635,
															"name": "_recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1586,
															"src": "17355:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1636,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1588,
															"src": "17367:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1637,
															"name": "_tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1627,
															"src": "17376:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1638,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "17385:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1639,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "17385:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1634,
														"name": "onDeposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 459,
														"src": "17345:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256)"
														}
													},
													"id": 1640,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17345:56:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1641,
												"nodeType": "EmitStatement",
												"src": "17340:61:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1653,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1645,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1643,
																	"name": "_tokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1627,
																	"src": "17500:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1644,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "17510:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "17500:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1652,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1648,
																			"name": "_tokens",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1627,
																			"src": "17544:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 1649,
																			"name": "currentTotalStaked",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 384,
																			"src": "17553:18:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1646,
																			"name": "SafeMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2942,
																			"src": "17531:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																				"typeString": "type(library SafeMath)"
																			}
																		},
																		"id": 1647,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "add",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2747,
																		"src": "17531:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1650,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "17531:41:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"id": 1651,
																	"name": "currentTotalStaked",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 384,
																	"src": "17575:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "17531:62:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "17500:93:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1642,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "17479:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1654,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17479:124:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1655,
												"nodeType": "ExpressionStatement",
												"src": "17479:124:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1658,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1656,
														"name": "currentTotalStaked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 384,
														"src": "17617:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1657,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "17638:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "17617:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1668,
													"nodeType": "Block",
													"src": "17701:53:2",
													"statements": [
														{
															"expression": {
																"id": 1666,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1664,
																	"name": "currentTotalStaked",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 384,
																	"src": "17715:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1665,
																	"name": "_tokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1627,
																	"src": "17736:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "17715:28:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1667,
															"nodeType": "ExpressionStatement",
															"src": "17715:28:2"
														}
													]
												},
												"id": 1669,
												"nodeType": "IfStatement",
												"src": "17613:141:2",
												"trueBody": {
													"id": 1663,
													"nodeType": "Block",
													"src": "17641:54:2",
													"statements": [
														{
															"expression": {
																"id": 1661,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1659,
																	"name": "currentTotalStaked",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 384,
																	"src": "17655:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 1660,
																	"name": "_tokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1627,
																	"src": "17677:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "17655:29:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1662,
															"nodeType": "ExpressionStatement",
															"src": "17655:29:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1671,
															"name": "_undividedDividends",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1617,
															"src": "17832:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1670,
														"name": "allocateFees",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1497,
														"src": "17819:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1672,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17819:33:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1673,
												"nodeType": "ExpressionStatement",
												"src": "17819:33:2"
											},
											{
												"expression": {
													"id": 1684,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1674,
															"name": "balanceOf_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 445,
															"src": "17862:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1676,
														"indexExpression": {
															"id": 1675,
															"name": "_recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1586,
															"src": "17873:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "17862:22:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"baseExpression": {
																	"id": 1679,
																	"name": "balanceOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 445,
																	"src": "17900:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1681,
																"indexExpression": {
																	"id": 1680,
																	"name": "_recipient",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1586,
																	"src": "17911:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "17900:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1682,
																"name": "_tokens",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1627,
																"src": "17924:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 1677,
																"name": "SafeMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2942,
																"src": "17887:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																	"typeString": "type(library SafeMath)"
																}
															},
															"id": 1678,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2747,
															"src": "17887:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1683,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "17887:45:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "17862:70:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1685,
												"nodeType": "ExpressionStatement",
												"src": "17862:70:2"
											},
											{
												"assignments": [
													1687
												],
												"declarations": [
													{
														"constant": false,
														"id": 1687,
														"mutability": "mutable",
														"name": "_updatedPayouts",
														"nodeType": "VariableDeclaration",
														"scope": 1718,
														"src": "17973:22:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1686,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "17973:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1695,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1693,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1691,
																"name": "profitPerShare_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 386,
																"src": "18007:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1692,
																"name": "_tokens",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1627,
																"src": "18025:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "18007:25:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"components": [
															{
																"id": 1689,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "17999:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_int256_$",
																	"typeString": "type(int256)"
																},
																"typeName": {
																	"id": 1688,
																	"name": "int256",
																	"nodeType": "ElementaryTypeName",
																	"src": "17999:6:2",
																	"typeDescriptions": {}
																}
															}
														],
														"id": 1690,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "17998:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int256_$",
															"typeString": "type(int256)"
														}
													},
													"id": 1694,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17998:35:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "17973:60:2"
											},
											{
												"expression": {
													"id": 1700,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1696,
															"name": "payoutsOf_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 441,
															"src": "18071:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_int256_$",
																"typeString": "mapping(address => int256)"
															}
														},
														"id": 1698,
														"indexExpression": {
															"id": 1697,
															"name": "_recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1586,
															"src": "18082:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "18071:22:2",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1699,
														"name": "_updatedPayouts",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1687,
														"src": "18097:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "18071:41:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"id": 1701,
												"nodeType": "ExpressionStatement",
												"src": "18071:41:2"
											},
											{
												"expression": {
													"id": 1707,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1702,
																"name": "accountOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 449,
																"src": "18122:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																	"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																}
															},
															"id": 1704,
															"indexExpression": {
																"id": 1703,
																"name": "_recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1586,
																"src": "18133:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "18122:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$437_storage",
																"typeString": "struct DiamondSafe.Account storage ref"
															}
														},
														"id": 1705,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "deposited",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 410,
														"src": "18122:32:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1706,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1588,
														"src": "18158:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "18122:43:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1708,
												"nodeType": "ExpressionStatement",
												"src": "18122:43:2"
											},
											{
												"expression": {
													"id": 1714,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1709,
																"name": "accountOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 449,
																"src": "18175:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																	"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																}
															},
															"id": 1711,
															"indexExpression": {
																"id": 1710,
																"name": "_recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1586,
																"src": "18186:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "18175:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$437_storage",
																"typeString": "struct DiamondSafe.Account storage ref"
															}
														},
														"id": 1712,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "xInvested",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 424,
														"src": "18175:32:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1713,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "18211:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "18175:37:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1715,
												"nodeType": "ExpressionStatement",
												"src": "18175:37:2"
											},
											{
												"expression": {
													"id": 1716,
													"name": "_tokens",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1627,
													"src": "18292:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1592,
												"id": 1717,
												"nodeType": "Return",
												"src": "18285:14:2"
											}
										]
									},
									"id": 1719,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_depositTokens",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1589,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1586,
												"mutability": "mutable",
												"name": "_recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1719,
												"src": "16763:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1585,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16763:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1588,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 1719,
												"src": "16791:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1587,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16791:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16753:59:2"
									},
									"returnParameters": {
										"id": 1592,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1591,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1719,
												"src": "16831:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1590,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16831:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16830:9:2"
									},
									"scope": 1983,
									"src": "16730:1576:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1806,
										"nodeType": "Block",
										"src": "18400:1124:2",
										"statements": [
											{
												"assignments": [
													1725
												],
												"declarations": [
													{
														"constant": false,
														"id": 1725,
														"mutability": "mutable",
														"name": "_user",
														"nodeType": "VariableDeclaration",
														"scope": 1806,
														"src": "18410:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1724,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "18410:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1728,
												"initialValue": {
													"expression": {
														"id": 1726,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -15,
														"src": "18426:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1727,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "18426:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18410:26:2"
											},
											{
												"assignments": [
													1730
												],
												"declarations": [
													{
														"constant": false,
														"id": 1730,
														"mutability": "mutable",
														"name": "_dividends",
														"nodeType": "VariableDeclaration",
														"scope": 1806,
														"src": "18512:18:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1729,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "18512:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1734,
												"initialValue": {
													"arguments": [
														{
															"id": 1732,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1725,
															"src": "18545:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1731,
														"name": "dividendsOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1118,
														"src": "18533:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1733,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18533:18:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18512:39:2"
											},
											{
												"expression": {
													"id": 1745,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1735,
															"name": "payoutsOf_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 441,
															"src": "18561:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_int256_$",
																"typeString": "mapping(address => int256)"
															}
														},
														"id": 1737,
														"indexExpression": {
															"id": 1736,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1725,
															"src": "18572:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "18561:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1743,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1741,
																	"name": "_dividends",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1730,
																	"src": "18591:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1742,
																	"name": "magnitude",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 370,
																	"src": "18604:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "18591:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"components": [
																{
																	"id": 1739,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "18583:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_int256_$",
																		"typeString": "type(int256)"
																	},
																	"typeName": {
																		"id": 1738,
																		"name": "int256",
																		"nodeType": "ElementaryTypeName",
																		"src": "18583:6:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"id": 1740,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "18582:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int256_$",
																"typeString": "type(int256)"
															}
														},
														"id": 1744,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "18582:32:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "18561:53:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"id": 1746,
												"nodeType": "ExpressionStatement",
												"src": "18561:53:2"
											},
											{
												"assignments": [
													1748
												],
												"declarations": [
													{
														"constant": false,
														"id": 1748,
														"mutability": "mutable",
														"name": "_tokens",
														"nodeType": "VariableDeclaration",
														"scope": 1806,
														"src": "18769:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1747,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "18769:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1754,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 1750,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "18802:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1751,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "18802:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 1752,
															"name": "_dividends",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1730,
															"src": "18814:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1749,
														"name": "_depositTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1719,
														"src": "18787:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (address,uint256) returns (uint256)"
														}
													},
													"id": 1753,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18787:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18769:56:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1756,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1725,
															"src": "18883:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1757,
															"name": "_dividends",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1730,
															"src": "18890:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1758,
															"name": "_tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1748,
															"src": "18902:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1759,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "18911:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1760,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "18911:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1755,
														"name": "onCompound",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 479,
														"src": "18872:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256)"
														}
													},
													"id": 1761,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18872:55:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1762,
												"nodeType": "EmitStatement",
												"src": "18867:60:2"
											},
											{
												"expression": {
													"id": 1775,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1763,
																"name": "accountOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 449,
																"src": "18974:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																	"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																}
															},
															"id": 1765,
															"indexExpression": {
																"id": 1764,
																"name": "_user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1725,
																"src": "18985:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "18974:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$437_storage",
																"typeString": "struct DiamondSafe.Account storage ref"
															}
														},
														"id": 1766,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "compounded",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 414,
														"src": "18974:28:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1769,
																		"name": "accountOf_",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 449,
																		"src": "19031:10:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																			"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																		}
																	},
																	"id": 1771,
																	"indexExpression": {
																		"id": 1770,
																		"name": "_user",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1725,
																		"src": "19042:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19031:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Account_$437_storage",
																		"typeString": "struct DiamondSafe.Account storage ref"
																	}
																},
																"id": 1772,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "compounded",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 414,
																"src": "19031:28:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1773,
																"name": "_dividends",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1730,
																"src": "19073:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 1767,
																"name": "SafeMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2942,
																"src": "19005:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																	"typeString": "type(library SafeMath)"
																}
															},
															"id": 1768,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2747,
															"src": "19005:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1774,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "19005:88:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "18974:119:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1776,
												"nodeType": "ExpressionStatement",
												"src": "18974:119:2"
											},
											{
												"expression": {
													"id": 1782,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1777,
																"name": "accountOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 449,
																"src": "19103:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																	"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																}
															},
															"id": 1779,
															"indexExpression": {
																"id": 1778,
																"name": "_user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1725,
																"src": "19114:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "19103:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$437_storage",
																"typeString": "struct DiamondSafe.Account storage ref"
															}
														},
														"id": 1780,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "xCompounded",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 426,
														"src": "19103:29:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1781,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "19136:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "19103:34:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1783,
												"nodeType": "ExpressionStatement",
												"src": "19103:34:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1785,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1725,
															"src": "19212:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 1786,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 449,
																	"src": "19231:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 1788,
																"indexExpression": {
																	"id": 1787,
																	"name": "_user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1725,
																	"src": "19242:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "19231:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 1789,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "deposited",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 410,
															"src": "19231:27:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"baseExpression": {
																"id": 1790,
																"name": "balanceOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 445,
																"src": "19272:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																	"typeString": "mapping(address => uint256)"
																}
															},
															"id": 1792,
															"indexExpression": {
																"id": 1791,
																"name": "_user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1725,
																"src": "19283:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "19272:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 1793,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 449,
																	"src": "19303:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 1795,
																"indexExpression": {
																	"id": 1794,
																	"name": "_user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1725,
																	"src": "19314:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "19303:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 1796,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "withdrawn",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 412,
															"src": "19303:27:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1797,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "19344:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1798,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "19344:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1784,
														"name": "onUpdate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 509,
														"src": "19190:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256,uint256)"
														}
													},
													"id": 1799,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19190:179:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1800,
												"nodeType": "EmitStatement",
												"src": "19185:184:2"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1801,
														"name": "distribute",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1584,
														"src": "19448:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1802,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19448:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1803,
												"nodeType": "ExpressionStatement",
												"src": "19448:12:2"
											},
											{
												"expression": {
													"id": 1804,
													"name": "_tokens",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1748,
													"src": "19510:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1723,
												"id": 1805,
												"nodeType": "Return",
												"src": "19503:14:2"
											}
										]
									},
									"id": 1807,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_compoundTokens",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1720,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18370:2:2"
									},
									"returnParameters": {
										"id": 1723,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1722,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1807,
												"src": "18391:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1721,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18391:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18390:9:2"
									},
									"scope": 1983,
									"src": "18346:1178:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1981,
										"nodeType": "Block",
										"src": "19688:1852:2",
										"statements": [
											{
												"assignments": [
													1817
												],
												"declarations": [
													{
														"constant": false,
														"id": 1817,
														"mutability": "mutable",
														"name": "_sender",
														"nodeType": "VariableDeclaration",
														"scope": 1981,
														"src": "19698:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1816,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "19698:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1820,
												"initialValue": {
													"expression": {
														"id": 1818,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -15,
														"src": "19716:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1819,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "19716:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "19698:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1826,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1822,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1811,
																"src": "19744:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"baseExpression": {
																	"id": 1823,
																	"name": "balanceOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 445,
																	"src": "19755:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1825,
																"indexExpression": {
																	"id": 1824,
																	"name": "_sender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1817,
																	"src": "19766:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "19755:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "19744:30:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1821,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "19736:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1827,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19736:39:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1828,
												"nodeType": "ExpressionStatement",
												"src": "19736:39:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1832,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1829,
															"name": "myEarnings",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1045,
															"src": "19875:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																"typeString": "function () view returns (uint256)"
															}
														},
														"id": 1830,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "19875:12:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1831,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "19890:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "19875:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1837,
												"nodeType": "IfStatement",
												"src": "19871:56:2",
												"trueBody": {
													"id": 1836,
													"nodeType": "Block",
													"src": "19893:34:2",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1833,
																	"name": "harvest",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 838,
																	"src": "19907:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
																		"typeString": "function ()"
																	}
																},
																"id": 1834,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "19907:9:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1835,
															"nodeType": "ExpressionStatement",
															"src": "19907:9:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1848,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1838,
															"name": "balanceOf_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 445,
															"src": "19969:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1840,
														"indexExpression": {
															"id": 1839,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1817,
															"src": "19980:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "19969:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"baseExpression": {
																	"id": 1843,
																	"name": "balanceOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 445,
																	"src": "20004:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1845,
																"indexExpression": {
																	"id": 1844,
																	"name": "_sender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1817,
																	"src": "20015:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "20004:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1846,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1811,
																"src": "20025:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 1841,
																"name": "SafeMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2942,
																"src": "19991:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																	"typeString": "type(library SafeMath)"
																}
															},
															"id": 1842,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2769,
															"src": "19991:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1847,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "19991:42:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "19969:64:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1849,
												"nodeType": "ExpressionStatement",
												"src": "19969:64:2"
											},
											{
												"expression": {
													"id": 1860,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1850,
															"name": "balanceOf_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 445,
															"src": "20043:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1852,
														"indexExpression": {
															"id": 1851,
															"name": "_recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1809,
															"src": "20054:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "20043:22:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"baseExpression": {
																	"id": 1855,
																	"name": "balanceOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 445,
																	"src": "20081:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1857,
																"indexExpression": {
																	"id": 1856,
																	"name": "_recipient",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1809,
																	"src": "20092:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "20081:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1858,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1811,
																"src": "20105:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 1853,
																"name": "SafeMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2942,
																"src": "20068:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_SafeMath_$2942_$",
																	"typeString": "type(library SafeMath)"
																}
															},
															"id": 1854,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2747,
															"src": "20068:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1859,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "20068:45:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "20043:70:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1861,
												"nodeType": "ExpressionStatement",
												"src": "20043:70:2"
											},
											{
												"expression": {
													"id": 1872,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1862,
															"name": "payoutsOf_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 441,
															"src": "20185:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_int256_$",
																"typeString": "mapping(address => int256)"
															}
														},
														"id": 1864,
														"indexExpression": {
															"id": 1863,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1817,
															"src": "20196:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "20185:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1870,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1868,
																	"name": "profitPerShare_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 386,
																	"src": "20217:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1869,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1811,
																	"src": "20235:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "20217:25:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"components": [
																{
																	"id": 1866,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "20209:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_int256_$",
																		"typeString": "type(int256)"
																	},
																	"typeName": {
																		"id": 1865,
																		"name": "int256",
																		"nodeType": "ElementaryTypeName",
																		"src": "20209:6:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"id": 1867,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "20208:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int256_$",
																"typeString": "type(int256)"
															}
														},
														"id": 1871,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "20208:35:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "20185:58:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"id": 1873,
												"nodeType": "ExpressionStatement",
												"src": "20185:58:2"
											},
											{
												"expression": {
													"id": 1884,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1874,
															"name": "payoutsOf_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 441,
															"src": "20253:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_int256_$",
																"typeString": "mapping(address => int256)"
															}
														},
														"id": 1876,
														"indexExpression": {
															"id": 1875,
															"name": "_recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1809,
															"src": "20264:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "20253:22:2",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1882,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1880,
																	"name": "profitPerShare_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 386,
																	"src": "20288:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1881,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1811,
																	"src": "20306:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "20288:25:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"components": [
																{
																	"id": 1878,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "20280:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_int256_$",
																		"typeString": "type(int256)"
																	},
																	"typeName": {
																		"id": 1877,
																		"name": "int256",
																		"nodeType": "ElementaryTypeName",
																		"src": "20280:6:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"id": 1879,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "20279:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int256_$",
																"typeString": "type(int256)"
															}
														},
														"id": 1883,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "20279:35:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "20253:61:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"id": 1885,
												"nodeType": "ExpressionStatement",
												"src": "20253:61:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1898,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1891,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1886,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 449,
																	"src": "20417:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 1888,
																"indexExpression": {
																	"id": 1887,
																	"name": "_recipient",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1809,
																	"src": "20428:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "20417:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 1889,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "deposited",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 410,
															"src": "20417:32:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 1890,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "20453:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "20417:37:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1897,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1892,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 449,
																	"src": "20470:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 1894,
																"indexExpression": {
																	"id": 1893,
																	"name": "_recipient",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1809,
																	"src": "20481:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "20470:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 1895,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "receivedShares",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 422,
															"src": "20470:37:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 1896,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "20511:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "20470:42:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "20417:95:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1904,
												"nodeType": "IfStatement",
												"src": "20400:158:2",
												"trueBody": {
													"id": 1903,
													"nodeType": "Block",
													"src": "20523:35:2",
													"statements": [
														{
															"expression": {
																"id": 1901,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1899,
																	"name": "users",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 350,
																	"src": "20537:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 1900,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "20546:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "20537:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1902,
															"nodeType": "ExpressionStatement",
															"src": "20537:10:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1910,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1905,
																"name": "accountOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 449,
																"src": "20594:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																	"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																}
															},
															"id": 1907,
															"indexExpression": {
																"id": 1906,
																"name": "_sender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1817,
																"src": "20605:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "20594:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$437_storage",
																"typeString": "struct DiamondSafe.Account storage ref"
															}
														},
														"id": 1908,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "xTransferredShares",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 434,
														"src": "20594:38:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1909,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "20636:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "20594:43:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1911,
												"nodeType": "ExpressionStatement",
												"src": "20594:43:2"
											},
											{
												"expression": {
													"id": 1917,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1912,
																"name": "accountOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 449,
																"src": "20647:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																	"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																}
															},
															"id": 1914,
															"indexExpression": {
																"id": 1913,
																"name": "_sender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1817,
																"src": "20658:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "20647:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$437_storage",
																"typeString": "struct DiamondSafe.Account storage ref"
															}
														},
														"id": 1915,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "transferredShares",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 420,
														"src": "20647:37:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1916,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1811,
														"src": "20688:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "20647:48:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1918,
												"nodeType": "ExpressionStatement",
												"src": "20647:48:2"
											},
											{
												"expression": {
													"id": 1924,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1919,
																"name": "accountOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 449,
																"src": "20705:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																	"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																}
															},
															"id": 1921,
															"indexExpression": {
																"id": 1920,
																"name": "_recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1809,
																"src": "20716:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "20705:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$437_storage",
																"typeString": "struct DiamondSafe.Account storage ref"
															}
														},
														"id": 1922,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "receivedShares",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 422,
														"src": "20705:37:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1923,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1811,
														"src": "20746:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "20705:48:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1925,
												"nodeType": "ExpressionStatement",
												"src": "20705:48:2"
											},
											{
												"expression": {
													"id": 1931,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1926,
																"name": "accountOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 449,
																"src": "20763:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																	"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																}
															},
															"id": 1928,
															"indexExpression": {
																"id": 1927,
																"name": "_recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1809,
																"src": "20774:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "20763:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$437_storage",
																"typeString": "struct DiamondSafe.Account storage ref"
															}
														},
														"id": 1929,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "xReceivedShares",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 436,
														"src": "20763:38:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1930,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "20805:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "20763:43:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1932,
												"nodeType": "ExpressionStatement",
												"src": "20763:43:2"
											},
											{
												"expression": {
													"id": 1935,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1933,
														"name": "totalTxs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 352,
														"src": "20858:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1934,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "20870:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "20858:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1936,
												"nodeType": "ExpressionStatement",
												"src": "20858:13:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1938,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1817,
															"src": "20948:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1939,
															"name": "_recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1809,
															"src": "20957:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1940,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1811,
															"src": "20969:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1941,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "20978:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1942,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "20978:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1937,
														"name": "onTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 497,
														"src": "20937:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1943,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "20937:57:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1944,
												"nodeType": "EmitStatement",
												"src": "20932:62:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1946,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1817,
															"src": "21080:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 1947,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 449,
																	"src": "21101:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 1949,
																"indexExpression": {
																	"id": 1948,
																	"name": "_sender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1817,
																	"src": "21112:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "21101:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 1950,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "deposited",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 410,
															"src": "21101:29:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"baseExpression": {
																"id": 1951,
																"name": "balanceOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 445,
																"src": "21144:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																	"typeString": "mapping(address => uint256)"
																}
															},
															"id": 1953,
															"indexExpression": {
																"id": 1952,
																"name": "_sender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1817,
																"src": "21155:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "21144:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 1954,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 449,
																	"src": "21177:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 1956,
																"indexExpression": {
																	"id": 1955,
																	"name": "_sender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1817,
																	"src": "21188:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "21177:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 1957,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "withdrawn",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 412,
															"src": "21177:29:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1958,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "21220:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1959,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "21220:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1945,
														"name": "onUpdate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 509,
														"src": "21058:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256,uint256)"
														}
													},
													"id": 1960,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "21058:187:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1961,
												"nodeType": "EmitStatement",
												"src": "21053:192:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1963,
															"name": "_recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1809,
															"src": "21334:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 1964,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 449,
																	"src": "21358:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 1966,
																"indexExpression": {
																	"id": 1965,
																	"name": "_recipient",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1809,
																	"src": "21369:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "21358:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 1967,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "deposited",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 410,
															"src": "21358:32:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"baseExpression": {
																"id": 1968,
																"name": "balanceOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 445,
																"src": "21404:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																	"typeString": "mapping(address => uint256)"
																}
															},
															"id": 1970,
															"indexExpression": {
																"id": 1969,
																"name": "_recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1809,
																"src": "21415:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "21404:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 1971,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 449,
																	"src": "21440:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$437_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 1973,
																"indexExpression": {
																	"id": 1972,
																	"name": "_recipient",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1809,
																	"src": "21451:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "21440:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$437_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 1974,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "withdrawn",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 412,
															"src": "21440:32:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1975,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "21486:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1976,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "21486:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1962,
														"name": "onUpdate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 509,
														"src": "21312:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256,uint256)"
														}
													},
													"id": 1977,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "21312:199:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1978,
												"nodeType": "EmitStatement",
												"src": "21307:204:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1979,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "21529:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1815,
												"id": 1980,
												"nodeType": "Return",
												"src": "21522:11:2"
											}
										]
									},
									"id": 1982,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferTokens",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1812,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1809,
												"mutability": "mutable",
												"name": "_recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1982,
												"src": "19605:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1808,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19605:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1811,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 1982,
												"src": "19633:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1810,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "19633:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19595:59:2"
									},
									"returnParameters": {
										"id": 1815,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1814,
												"mutability": "mutable",
												"name": "_success",
												"nodeType": "VariableDeclaration",
												"scope": 1982,
												"src": "19673:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1813,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "19673:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19672:15:2"
									},
									"scope": 1983,
									"src": "19571:1969:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1984,
							"src": "237:21305:2"
						}
					],
					"src": "32:21511:2"
				},
				"id": 2
			},
			"contracts/IERC20.sol": {
				"ast": {
					"absolutePath": "contracts/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							2061
						]
					},
					"id": 2062,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1985,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1986,
								"nodeType": "StructuredDocumentation",
								"src": "66:70:3",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 2061,
							"linearizedBaseContracts": [
								2061
							],
							"name": "IERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1987,
										"nodeType": "StructuredDocumentation",
										"src": "160:66:3",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 1992,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1988,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "251:2:3"
									},
									"returnParameters": {
										"id": 1991,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1990,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1992,
												"src": "277:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1989,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "277:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "276:9:3"
									},
									"scope": 2061,
									"src": "231:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1993,
										"nodeType": "StructuredDocumentation",
										"src": "292:72:3",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 2000,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1996,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1995,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 2000,
												"src": "388:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1994,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "388:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "387:17:3"
									},
									"returnParameters": {
										"id": 1999,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1998,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2000,
												"src": "428:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1997,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "428:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "427:9:3"
									},
									"scope": 2061,
									"src": "369:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2001,
										"nodeType": "StructuredDocumentation",
										"src": "443:209:3",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 2010,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2006,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2003,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 2010,
												"src": "675:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2002,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "675:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2005,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 2010,
												"src": "694:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2004,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "694:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "674:35:3"
									},
									"returnParameters": {
										"id": 2009,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2008,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2010,
												"src": "728:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2007,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "728:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "727:6:3"
									},
									"scope": 2061,
									"src": "657:77:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2011,
										"nodeType": "StructuredDocumentation",
										"src": "740:264:3",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 2020,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2016,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2013,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 2020,
												"src": "1028:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2012,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1028:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2015,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 2020,
												"src": "1043:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2014,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1043:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1027:32:3"
									},
									"returnParameters": {
										"id": 2019,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2018,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2020,
												"src": "1083:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2017,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1083:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1082:9:3"
									},
									"scope": 2061,
									"src": "1009:83:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2021,
										"nodeType": "StructuredDocumentation",
										"src": "1098:642:3",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 2030,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2026,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2023,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 2030,
												"src": "1762:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2022,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1762:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2025,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 2030,
												"src": "1779:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2024,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1779:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1761:33:3"
									},
									"returnParameters": {
										"id": 2029,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2028,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2030,
												"src": "1813:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2027,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1813:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1812:6:3"
									},
									"scope": 2061,
									"src": "1745:74:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2031,
										"nodeType": "StructuredDocumentation",
										"src": "1825:296:3",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 2042,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2038,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2033,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 2042,
												"src": "2148:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2032,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2148:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2035,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 2042,
												"src": "2164:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2034,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2164:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2037,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 2042,
												"src": "2183:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2036,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2183:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2147:51:3"
									},
									"returnParameters": {
										"id": 2041,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2040,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2042,
												"src": "2217:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2039,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2217:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2216:6:3"
									},
									"scope": 2061,
									"src": "2126:97:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2043,
										"nodeType": "StructuredDocumentation",
										"src": "2229:158:3",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 2051,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2050,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2045,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 2051,
												"src": "2407:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2044,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2407:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2047,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2051,
												"src": "2429:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2046,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2429:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2049,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2051,
												"src": "2449:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2048,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2449:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2406:57:3"
									},
									"src": "2392:72:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2052,
										"nodeType": "StructuredDocumentation",
										"src": "2470:148:3",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 2060,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2059,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2054,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 2060,
												"src": "2638:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2053,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2638:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2056,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 2060,
												"src": "2661:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2055,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2661:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2058,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2060,
												"src": "2686:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2057,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2686:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2637:63:3"
									},
									"src": "2623:78:3"
								}
							],
							"scope": 2062,
							"src": "137:2566:3"
						}
					],
					"src": "33:2670:3"
				},
				"id": 3
			},
			"contracts/IERC721.sol": {
				"ast": {
					"absolutePath": "contracts/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							2954
						],
						"IERC721": [
							2177
						]
					},
					"id": 2178,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2063,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:4"
						},
						{
							"absolutePath": "lib/utils/introspection/IERC165.sol",
							"file": "../lib/utils/introspection/IERC165.sol",
							"id": 2064,
							"nodeType": "ImportDirective",
							"scope": 2178,
							"sourceUnit": 2955,
							"src": "133:48:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2066,
										"name": "IERC165",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2954,
										"src": "272:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC165_$2954",
											"typeString": "contract IERC165"
										}
									},
									"id": 2067,
									"nodeType": "InheritanceSpecifier",
									"src": "272:7:4"
								}
							],
							"contractDependencies": [
								2954
							],
							"contractKind": "interface",
							"documentation": {
								"id": 2065,
								"nodeType": "StructuredDocumentation",
								"src": "183:67:4",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 2177,
							"linearizedBaseContracts": [
								2177,
								2954
							],
							"name": "IERC721",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 2068,
										"nodeType": "StructuredDocumentation",
										"src": "286:88:4",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"id": 2076,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2075,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2070,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 2076,
												"src": "394:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2069,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "394:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2072,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2076,
												"src": "416:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2071,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "416:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2074,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 2076,
												"src": "436:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2073,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "436:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "393:67:4"
									},
									"src": "379:82:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2077,
										"nodeType": "StructuredDocumentation",
										"src": "467:94:4",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"id": 2085,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2084,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2079,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 2085,
												"src": "581:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2078,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "581:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2081,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 2085,
												"src": "604:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2080,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "604:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2083,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 2085,
												"src": "630:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2082,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "630:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "580:74:4"
									},
									"src": "566:89:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2086,
										"nodeType": "StructuredDocumentation",
										"src": "661:117:4",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"id": 2094,
									"name": "ApprovalForAll",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2093,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2088,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 2094,
												"src": "804:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2087,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "804:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2090,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 2094,
												"src": "827:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2089,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "827:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2092,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 2094,
												"src": "853:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2091,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "853:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "803:64:4"
									},
									"src": "783:85:4"
								},
								{
									"documentation": {
										"id": 2095,
										"nodeType": "StructuredDocumentation",
										"src": "874:76:4",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 2102,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2098,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2097,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 2102,
												"src": "974:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2096,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "974:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "973:15:4"
									},
									"returnParameters": {
										"id": 2101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2100,
												"mutability": "mutable",
												"name": "balance",
												"nodeType": "VariableDeclaration",
												"scope": 2102,
												"src": "1012:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2099,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1012:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1011:17:4"
									},
									"scope": 2177,
									"src": "955:74:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2103,
										"nodeType": "StructuredDocumentation",
										"src": "1035:131:4",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 2110,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2106,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2105,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 2110,
												"src": "1188:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2104,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1188:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1187:17:4"
									},
									"returnParameters": {
										"id": 2109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2108,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 2110,
												"src": "1228:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2107,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1228:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1227:15:4"
									},
									"scope": 2177,
									"src": "1171:72:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2111,
										"nodeType": "StructuredDocumentation",
										"src": "1249:556:4",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 2122,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2113,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 2122,
												"src": "1845:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2112,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1845:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2115,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2122,
												"src": "1867:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2114,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1867:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2117,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 2122,
												"src": "1887:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1887:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2119,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 2122,
												"src": "1912:19:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2118,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1912:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1835:102:4"
									},
									"returnParameters": {
										"id": 2121,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1946:0:4"
									},
									"scope": 2177,
									"src": "1810:137:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2123,
										"nodeType": "StructuredDocumentation",
										"src": "1953:687:4",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 2132,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2125,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 2132,
												"src": "2680:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2124,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2680:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2127,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2132,
												"src": "2702:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2126,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2702:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2129,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 2132,
												"src": "2722:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2128,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2722:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2670:73:4"
									},
									"returnParameters": {
										"id": 2131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2752:0:4"
									},
									"scope": 2177,
									"src": "2645:108:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2133,
										"nodeType": "StructuredDocumentation",
										"src": "2759:732:4",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 2142,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2135,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 2142,
												"src": "3527:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2134,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3527:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2137,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2142,
												"src": "3549:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2136,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3549:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2139,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 2142,
												"src": "3569:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2138,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3569:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3517:73:4"
									},
									"returnParameters": {
										"id": 2141,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3599:0:4"
									},
									"scope": 2177,
									"src": "3496:104:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2143,
										"nodeType": "StructuredDocumentation",
										"src": "3606:452:4",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 2150,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2145,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2150,
												"src": "4080:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2144,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4080:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2147,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 2150,
												"src": "4092:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2146,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4092:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4079:29:4"
									},
									"returnParameters": {
										"id": 2149,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4117:0:4"
									},
									"scope": 2177,
									"src": "4063:55:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2151,
										"nodeType": "StructuredDocumentation",
										"src": "4124:309:4",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 2158,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2153,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 2158,
												"src": "4465:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2152,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4465:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2155,
												"mutability": "mutable",
												"name": "_approved",
												"nodeType": "VariableDeclaration",
												"scope": 2158,
												"src": "4483:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2154,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4483:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4464:34:4"
									},
									"returnParameters": {
										"id": 2157,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4507:0:4"
									},
									"scope": 2177,
									"src": "4438:70:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2159,
										"nodeType": "StructuredDocumentation",
										"src": "4514:139:4",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 2166,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2161,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 2166,
												"src": "4679:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4679:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4678:17:4"
									},
									"returnParameters": {
										"id": 2165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2164,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 2166,
												"src": "4719:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2163,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4719:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4718:18:4"
									},
									"scope": 2177,
									"src": "4658:79:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2167,
										"nodeType": "StructuredDocumentation",
										"src": "4743:138:4",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 2176,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2169,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 2176,
												"src": "4912:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2168,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4912:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2171,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 2176,
												"src": "4927:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2170,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4927:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4911:33:4"
									},
									"returnParameters": {
										"id": 2175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2174,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2176,
												"src": "4968:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2173,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4968:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4967:6:4"
									},
									"scope": 2177,
									"src": "4886:88:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2178,
							"src": "251:4725:4"
						}
					],
					"src": "108:4868:4"
				},
				"id": 4
			},
			"contracts/Ownable.sol": {
				"ast": {
					"absolutePath": "contracts/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							318
						],
						"Ownable": [
							2287
						]
					},
					"id": 2288,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2179,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:5"
						},
						{
							"absolutePath": "contracts/Context.sol",
							"file": "./Context.sol",
							"id": 2180,
							"nodeType": "ImportDirective",
							"scope": 2288,
							"sourceUnit": 319,
							"src": "66:23:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 2182,
										"name": "Context",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 318,
										"src": "614:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Context_$318",
											"typeString": "contract Context"
										}
									},
									"id": 2183,
									"nodeType": "InheritanceSpecifier",
									"src": "614:7:5"
								}
							],
							"contractDependencies": [
								318
							],
							"contractKind": "contract",
							"documentation": {
								"id": 2181,
								"nodeType": "StructuredDocumentation",
								"src": "90:494:5",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 2287,
							"linearizedBaseContracts": [
								2287,
								318
							],
							"name": "Ownable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 2185,
									"mutability": "mutable",
									"name": "_owner",
									"nodeType": "VariableDeclaration",
									"scope": 2287,
									"src": "628:22:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2184,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "628:7:5",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 2191,
									"name": "OwnershipTransferred",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2187,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nodeType": "VariableDeclaration",
												"scope": 2191,
												"src": "684:29:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2186,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "684:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2189,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 2191,
												"src": "715:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2188,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "715:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "683:57:5"
									},
									"src": "657:84:5"
								},
								{
									"body": {
										"id": 2212,
										"nodeType": "Block",
										"src": "867:135:5",
										"statements": [
											{
												"assignments": [
													2196
												],
												"declarations": [
													{
														"constant": false,
														"id": 2196,
														"mutability": "mutable",
														"name": "msgSender",
														"nodeType": "VariableDeclaration",
														"scope": 2212,
														"src": "877:17:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2195,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "877:7:5",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2199,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2197,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 306,
														"src": "897:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
															"typeString": "function () view returns (address payable)"
														}
													},
													"id": 2198,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "897:12:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "877:32:5"
											},
											{
												"expression": {
													"id": 2202,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2200,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2185,
														"src": "919:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2201,
														"name": "msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2196,
														"src": "928:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "919:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2203,
												"nodeType": "ExpressionStatement",
												"src": "919:18:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2207,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "981:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2206,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "973:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2205,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "973:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 2208,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "973:10:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 2209,
															"name": "msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2196,
															"src": "985:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2204,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2191,
														"src": "952:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 2210,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "952:43:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2211,
												"nodeType": "EmitStatement",
												"src": "947:48:5"
											}
										]
									},
									"documentation": {
										"id": 2192,
										"nodeType": "StructuredDocumentation",
										"src": "747:91:5",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 2213,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2193,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "855:2:5"
									},
									"returnParameters": {
										"id": 2194,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "867:0:5"
									},
									"scope": 2287,
									"src": "843:159:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2221,
										"nodeType": "Block",
										"src": "1133:30:5",
										"statements": [
											{
												"expression": {
													"id": 2219,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2185,
													"src": "1150:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2218,
												"id": 2220,
												"nodeType": "Return",
												"src": "1143:13:5"
											}
										]
									},
									"documentation": {
										"id": 2214,
										"nodeType": "StructuredDocumentation",
										"src": "1008:65:5",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 2222,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2215,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1092:2:5"
									},
									"returnParameters": {
										"id": 2218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2217,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2222,
												"src": "1124:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2216,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1124:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1123:9:5"
									},
									"scope": 2287,
									"src": "1078:85:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2235,
										"nodeType": "Block",
										"src": "1272:96:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2230,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2226,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2222,
																	"src": "1290:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 2227,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1290:7:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2228,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 306,
																	"src": "1301:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																		"typeString": "function () view returns (address payable)"
																	}
																},
																"id": 2229,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1301:12:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "1290:23:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 2231,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1315:34:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 2225,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1282:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1282:68:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2233,
												"nodeType": "ExpressionStatement",
												"src": "1282:68:5"
											},
											{
												"id": 2234,
												"nodeType": "PlaceholderStatement",
												"src": "1360:1:5"
											}
										]
									},
									"documentation": {
										"id": 2223,
										"nodeType": "StructuredDocumentation",
										"src": "1169:77:5",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 2236,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 2224,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1269:2:5"
									},
									"src": "1251:117:5",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2257,
										"nodeType": "Block",
										"src": "1764:91:5",
										"statements": [
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2243,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2185,
															"src": "1800:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2246,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1816:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2245,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1808:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2244,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1808:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 2247,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1808:10:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"id": 2242,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2191,
														"src": "1779:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 2248,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1779:40:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2249,
												"nodeType": "EmitStatement",
												"src": "1774:45:5"
											},
											{
												"expression": {
													"id": 2255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2250,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2185,
														"src": "1829:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 2253,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1846:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 2252,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1838:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2251,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1838:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 2254,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1838:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "1829:19:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2256,
												"nodeType": "ExpressionStatement",
												"src": "1829:19:5"
											}
										]
									},
									"documentation": {
										"id": 2237,
										"nodeType": "StructuredDocumentation",
										"src": "1374:331:5",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 2258,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2240,
											"modifierName": {
												"id": 2239,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 2236,
												"src": "1754:9:5",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "1754:9:5"
										}
									],
									"name": "renounceOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2238,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1736:2:5"
									},
									"returnParameters": {
										"id": 2241,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1764:0:5"
									},
									"scope": 2287,
									"src": "1710:145:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2285,
										"nodeType": "Block",
										"src": "2074:170:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2272,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2267,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2261,
																"src": "2092:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 2270,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2112:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 2269,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2104:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2268,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2104:7:5",
																		"typeDescriptions": {}
																	}
																},
																"id": 2271,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2104:10:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "2092:22:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 2273,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2116:40:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 2266,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2084:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2274,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2084:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2275,
												"nodeType": "ExpressionStatement",
												"src": "2084:73:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2277,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2185,
															"src": "2193:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2278,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2261,
															"src": "2201:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2276,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2191,
														"src": "2172:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 2279,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2172:38:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2280,
												"nodeType": "EmitStatement",
												"src": "2167:43:5"
											},
											{
												"expression": {
													"id": 2283,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2281,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2185,
														"src": "2220:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2282,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2261,
														"src": "2229:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2220:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2284,
												"nodeType": "ExpressionStatement",
												"src": "2220:17:5"
											}
										]
									},
									"documentation": {
										"id": 2259,
										"nodeType": "StructuredDocumentation",
										"src": "1861:138:5",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 2286,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2264,
											"modifierName": {
												"id": 2263,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 2236,
												"src": "2064:9:5",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "2064:9:5"
										}
									],
									"name": "transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2262,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2261,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 2286,
												"src": "2031:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2260,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2031:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2030:18:5"
									},
									"returnParameters": {
										"id": 2265,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2074:0:5"
									},
									"scope": 2287,
									"src": "2004:240:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 2288,
							"src": "585:1661:5"
						}
					],
					"src": "33:2213:5"
				},
				"id": 5
			},
			"contracts/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "contracts/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							2352
						]
					},
					"id": 2353,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2289,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:6"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2290,
								"nodeType": "StructuredDocumentation",
								"src": "137:750:6",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 2352,
							"linearizedBaseContracts": [
								2352
							],
							"name": "ReentrancyGuard",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 2293,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nodeType": "VariableDeclaration",
									"scope": 2352,
									"src": "1676:41:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2291,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1676:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 2292,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1716:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 2296,
									"mutability": "constant",
									"name": "_ENTERED",
									"nodeType": "VariableDeclaration",
									"scope": 2352,
									"src": "1723:37:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2294,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1723:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 2295,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1759:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2298,
									"mutability": "mutable",
									"name": "_status",
									"nodeType": "VariableDeclaration",
									"scope": 2352,
									"src": "1767:23:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2297,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1767:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 2305,
										"nodeType": "Block",
										"src": "1811:39:6",
										"statements": [
											{
												"expression": {
													"id": 2303,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2301,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2298,
														"src": "1821:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2302,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2293,
														"src": "1831:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1821:22:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2304,
												"nodeType": "ExpressionStatement",
												"src": "1821:22:6"
											}
										]
									},
									"id": 2306,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2299,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1808:2:6"
									},
									"returnParameters": {
										"id": 2300,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1811:0:6"
									},
									"scope": 2352,
									"src": "1797:53:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2316,
										"nodeType": "Block",
										"src": "2251:79:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2309,
														"name": "_nonReentrantBefore",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2332,
														"src": "2261:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 2310,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2261:21:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2311,
												"nodeType": "ExpressionStatement",
												"src": "2261:21:6"
											},
											{
												"id": 2312,
												"nodeType": "PlaceholderStatement",
												"src": "2292:1:6"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2313,
														"name": "_nonReentrantAfter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2340,
														"src": "2303:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 2314,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2303:20:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2315,
												"nodeType": "ExpressionStatement",
												"src": "2303:20:6"
											}
										]
									},
									"documentation": {
										"id": 2307,
										"nodeType": "StructuredDocumentation",
										"src": "1856:366:6",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 2317,
									"name": "nonReentrant",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 2308,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2248:2:6"
									},
									"src": "2227:103:6",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2331,
										"nodeType": "Block",
										"src": "2375:248:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2323,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2321,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2298,
																"src": "2468:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 2322,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2296,
																"src": "2479:8:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2468:19:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 2324,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2489:33:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 2320,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2460:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2325,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2460:63:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2326,
												"nodeType": "ExpressionStatement",
												"src": "2460:63:6"
											},
											{
												"expression": {
													"id": 2329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2327,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2298,
														"src": "2598:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2328,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2296,
														"src": "2608:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2598:18:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2330,
												"nodeType": "ExpressionStatement",
												"src": "2598:18:6"
											}
										]
									},
									"id": 2332,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantBefore",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2318,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2364:2:6"
									},
									"returnParameters": {
										"id": 2319,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2375:0:6"
									},
									"scope": 2352,
									"src": "2336:287:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2339,
										"nodeType": "Block",
										"src": "2667:171:6",
										"statements": [
											{
												"expression": {
													"id": 2337,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2335,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2298,
														"src": "2809:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2336,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2293,
														"src": "2819:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2809:22:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2338,
												"nodeType": "ExpressionStatement",
												"src": "2809:22:6"
											}
										]
									},
									"id": 2340,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantAfter",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2333,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2656:2:6"
									},
									"returnParameters": {
										"id": 2334,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2667:0:6"
									},
									"scope": 2352,
									"src": "2629:209:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2350,
										"nodeType": "Block",
										"src": "3081:43:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2348,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2346,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2298,
														"src": "3098:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 2347,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2296,
														"src": "3109:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3098:19:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2345,
												"id": 2349,
												"nodeType": "Return",
												"src": "3091:26:6"
											}
										]
									},
									"documentation": {
										"id": 2341,
										"nodeType": "StructuredDocumentation",
										"src": "2844:168:6",
										"text": " @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."
									},
									"id": 2351,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_reentrancyGuardEntered",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2342,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3049:2:6"
									},
									"returnParameters": {
										"id": 2345,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2344,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2351,
												"src": "3075:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2343,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3075:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3074:6:6"
									},
									"scope": 2352,
									"src": "3017:107:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2353,
							"src": "888:2238:6"
						}
					],
					"src": "112:3015:6"
				},
				"id": 6
			},
			"contracts/SafeERC20.sol": {
				"ast": {
					"absolutePath": "contracts/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							295
						],
						"IERC20": [
							2061
						],
						"SafeERC20": [
							2565
						],
						"SafeMath": [
							2942
						]
					},
					"id": 2566,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2354,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:7"
						},
						{
							"absolutePath": "contracts/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 2355,
							"nodeType": "ImportDirective",
							"scope": 2566,
							"sourceUnit": 2062,
							"src": "66:22:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/SafeMath.sol",
							"file": "./SafeMath.sol",
							"id": 2356,
							"nodeType": "ImportDirective",
							"scope": 2566,
							"sourceUnit": 2943,
							"src": "89:24:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/Address.sol",
							"file": "./Address.sol",
							"id": 2357,
							"nodeType": "ImportDirective",
							"scope": 2566,
							"sourceUnit": 296,
							"src": "114:23:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2358,
								"nodeType": "StructuredDocumentation",
								"src": "139:457:7",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 2565,
							"linearizedBaseContracts": [
								2565
							],
							"name": "SafeERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 2361,
									"libraryName": {
										"id": 2359,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2942,
										"src": "627:8:7",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$2942",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "621:27:7",
									"typeName": {
										"id": 2360,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "640:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"id": 2364,
									"libraryName": {
										"id": 2362,
										"name": "Address",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 295,
										"src": "659:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Address_$295",
											"typeString": "library Address"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "653:26:7",
									"typeName": {
										"id": 2363,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "671:7:7",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 2385,
										"nodeType": "Block",
										"src": "757:103:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2374,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2366,
															"src": "787:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$2061",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 2377,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2366,
																			"src": "817:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$2061",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 2378,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2010,
																		"src": "817:14:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 2379,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "817:23:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 2380,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2368,
																	"src": "842:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2381,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2370,
																	"src": "846:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2375,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "794:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2376,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "794:22:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2382,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "794:58:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$2061",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2373,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2564,
														"src": "767:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$2061_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 2383,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "767:86:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2384,
												"nodeType": "ExpressionStatement",
												"src": "767:86:7"
											}
										]
									},
									"id": 2386,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2366,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2386,
												"src": "707:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$2061",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2365,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2061,
													"src": "707:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$2061",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2368,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2386,
												"src": "721:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2367,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "721:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2370,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2386,
												"src": "733:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2369,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "733:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "706:41:7"
									},
									"returnParameters": {
										"id": 2372,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "757:0:7"
									},
									"scope": 2565,
									"src": "685:175:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2410,
										"nodeType": "Block",
										"src": "956:113:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2398,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2388,
															"src": "986:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$2061",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 2401,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2388,
																			"src": "1016:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$2061",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 2402,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2042,
																		"src": "1016:18:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 2403,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1016:27:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 2404,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2390,
																	"src": "1045:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2405,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2392,
																	"src": "1051:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2406,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2394,
																	"src": "1055:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2399,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "993:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2400,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "993:22:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2407,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "993:68:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$2061",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2397,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2564,
														"src": "966:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$2061_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 2408,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "966:96:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2409,
												"nodeType": "ExpressionStatement",
												"src": "966:96:7"
											}
										]
									},
									"id": 2411,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2388,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2411,
												"src": "892:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$2061",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2387,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2061,
													"src": "892:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$2061",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2390,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 2411,
												"src": "906:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2389,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "906:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2392,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2411,
												"src": "920:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2391,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "920:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2394,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2411,
												"src": "932:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2393,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "932:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "891:55:7"
									},
									"returnParameters": {
										"id": 2396,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "956:0:7"
									},
									"scope": 2565,
									"src": "866:203:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2453,
										"nodeType": "Block",
										"src": "1405:537:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2437,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2424,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2422,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2418,
																			"src": "1694:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2423,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1703:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1694:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2425,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1693:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2435,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 2430,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": -28,
																							"src": "1734:4:7",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$2565",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$2565",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 2429,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1726:7:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 2428,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1726:7:7",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 2431,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1726:13:7",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 2432,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2416,
																					"src": "1741:7:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 2426,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2414,
																					"src": "1710:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$2061",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 2427,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2020,
																				"src": "1710:15:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 2433,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1710:39:7",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2434,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1753:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1710:44:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2436,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1709:46:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1693:62:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 2438,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1769:56:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 2421,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1685:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2439,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1685:150:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2440,
												"nodeType": "ExpressionStatement",
												"src": "1685:150:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2442,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2414,
															"src": "1865:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$2061",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 2445,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2414,
																			"src": "1895:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$2061",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 2446,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2030,
																		"src": "1895:13:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 2447,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1895:22:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 2448,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2416,
																	"src": "1919:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2449,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2418,
																	"src": "1928:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2443,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "1872:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2444,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1872:22:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2450,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1872:62:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$2061",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2441,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2564,
														"src": "1845:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$2061_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 2451,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1845:90:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2452,
												"nodeType": "ExpressionStatement",
												"src": "1845:90:7"
											}
										]
									},
									"documentation": {
										"id": 2412,
										"nodeType": "StructuredDocumentation",
										"src": "1075:249:7",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 2454,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2419,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2414,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2454,
												"src": "1350:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$2061",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2413,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2061,
													"src": "1350:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$2061",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2416,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 2454,
												"src": "1364:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2415,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1364:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2418,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2454,
												"src": "1381:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2417,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1381:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1349:46:7"
									},
									"returnParameters": {
										"id": 2420,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1405:0:7"
									},
									"scope": 2565,
									"src": "1329:613:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2489,
										"nodeType": "Block",
										"src": "2034:197:7",
										"statements": [
											{
												"assignments": [
													2464
												],
												"declarations": [
													{
														"constant": false,
														"id": 2464,
														"mutability": "mutable",
														"name": "newAllowance",
														"nodeType": "VariableDeclaration",
														"scope": 2489,
														"src": "2044:20:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2463,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2044:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2476,
												"initialValue": {
													"arguments": [
														{
															"id": 2474,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2460,
															"src": "2111:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2469,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "2091:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$2565",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$2565",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 2468,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2083:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2467,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2083:7:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2470,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2083:13:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2471,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2458,
																	"src": "2098:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 2465,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2456,
																	"src": "2067:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$2061",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 2466,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2020,
																"src": "2067:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 2472,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2067:39:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2473,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "add",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2747,
														"src": "2067:43:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 2475,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2067:50:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2044:73:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2478,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2456,
															"src": "2147:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$2061",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 2481,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2456,
																			"src": "2177:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$2061",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 2482,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2030,
																		"src": "2177:13:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 2483,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2177:22:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 2484,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2458,
																	"src": "2201:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2485,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2464,
																	"src": "2210:12:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2479,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "2154:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2480,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2154:22:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2486,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2154:69:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$2061",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2477,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2564,
														"src": "2127:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$2061_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 2487,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2127:97:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2488,
												"nodeType": "ExpressionStatement",
												"src": "2127:97:7"
											}
										]
									},
									"id": 2490,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2461,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2456,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2490,
												"src": "1979:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$2061",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2455,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2061,
													"src": "1979:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$2061",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2458,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 2490,
												"src": "1993:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2457,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1993:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2460,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2490,
												"src": "2010:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2459,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2010:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1978:46:7"
									},
									"returnParameters": {
										"id": 2462,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2034:0:7"
									},
									"scope": 2565,
									"src": "1948:283:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2526,
										"nodeType": "Block",
										"src": "2323:242:7",
										"statements": [
											{
												"assignments": [
													2500
												],
												"declarations": [
													{
														"constant": false,
														"id": 2500,
														"mutability": "mutable",
														"name": "newAllowance",
														"nodeType": "VariableDeclaration",
														"scope": 2526,
														"src": "2333:20:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2499,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2333:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2513,
												"initialValue": {
													"arguments": [
														{
															"id": 2510,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2496,
															"src": "2400:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 2511,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2407:43:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
															},
															"value": "SafeERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2505,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "2380:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$2565",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$2565",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 2504,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2372:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2503,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2372:7:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2506,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2372:13:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2507,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2494,
																	"src": "2387:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 2501,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2492,
																	"src": "2356:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$2061",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 2502,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2020,
																"src": "2356:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 2508,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2356:39:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2509,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2871,
														"src": "2356:43:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 2512,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2356:95:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2333:118:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2515,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2492,
															"src": "2481:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$2061",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 2518,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2492,
																			"src": "2511:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$2061",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 2519,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2030,
																		"src": "2511:13:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 2520,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2511:22:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 2521,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2494,
																	"src": "2535:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2522,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2500,
																	"src": "2544:12:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2516,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "2488:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2517,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2488:22:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2523,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2488:69:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$2061",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2514,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2564,
														"src": "2461:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$2061_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 2524,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2461:97:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2525,
												"nodeType": "ExpressionStatement",
												"src": "2461:97:7"
											}
										]
									},
									"id": 2527,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2497,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2492,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2527,
												"src": "2268:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$2061",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2491,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2061,
													"src": "2268:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$2061",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2494,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 2527,
												"src": "2282:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2493,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2282:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2496,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2527,
												"src": "2299:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2495,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2299:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2267:46:7"
									},
									"returnParameters": {
										"id": 2498,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2323:0:7"
									},
									"scope": 2565,
									"src": "2237:328:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2563,
										"nodeType": "Block",
										"src": "3018:681:7",
										"statements": [
											{
												"assignments": [
													2536
												],
												"declarations": [
													{
														"constant": false,
														"id": 2536,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 2563,
														"src": "3367:23:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2535,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3367:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2545,
												"initialValue": {
													"arguments": [
														{
															"id": 2542,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2532,
															"src": "3421:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 2543,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3427:34:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2539,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2530,
																	"src": "3401:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$2061",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$2061",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 2538,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3393:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2537,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3393:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 2540,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3393:14:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2541,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 90,
														"src": "3393:27:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 2544,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3393:69:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3367:95:7"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2549,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 2546,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2536,
															"src": "3476:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2547,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3476:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2548,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3496:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3476:21:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2562,
												"nodeType": "IfStatement",
												"src": "3472:221:7",
												"trueBody": {
													"id": 2561,
													"nodeType": "Block",
													"src": "3499:194:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 2553,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2536,
																				"src": "3616:10:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 2555,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "3629:4:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 2554,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "3629:4:7",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 2556,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3628:6:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 2551,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": -1,
																				"src": "3605:3:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 2552,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "3605:10:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 2557,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3605:30:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 2558,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3637:44:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 2550,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		-18,
																		-18
																	],
																	"referencedDeclaration": -18,
																	"src": "3597:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 2559,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3597:85:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2560,
															"nodeType": "ExpressionStatement",
															"src": "3597:85:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2528,
										"nodeType": "StructuredDocumentation",
										"src": "2571:372:7",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 2564,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2533,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2530,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2564,
												"src": "2977:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$2061",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2529,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2061,
													"src": "2977:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$2061",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2532,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 2564,
												"src": "2991:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2531,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2991:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2976:33:7"
									},
									"returnParameters": {
										"id": 2534,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3018:0:7"
									},
									"scope": 2565,
									"src": "2948:751:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 2566,
							"src": "597:3104:7"
						}
					],
					"src": "33:3668:7"
				},
				"id": 7
			},
			"contracts/SafeMath.sol": {
				"ast": {
					"absolutePath": "contracts/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							2942
						]
					},
					"id": 2943,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2567,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2568,
								"nodeType": "StructuredDocumentation",
								"src": "66:563:8",
								"text": " @dev Wrappers over Solidity's arithmetic operations with added overflow\n checks.\n Arithmetic operations in Solidity wrap on overflow. This can easily result\n in bugs, because programmers usually assume that an overflow raises an\n error, which is the standard behavior in high level programming languages.\n `SafeMath` restores this intuition by reverting the transaction when an\n operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."
							},
							"fullyImplemented": true,
							"id": 2942,
							"linearizedBaseContracts": [
								2942
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2598,
										"nodeType": "Block",
										"src": "865:98:8",
										"statements": [
											{
												"assignments": [
													2581
												],
												"declarations": [
													{
														"constant": false,
														"id": 2581,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 2598,
														"src": "875:9:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2580,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "875:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2585,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2584,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2582,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2571,
														"src": "887:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 2583,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2573,
														"src": "891:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "887:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "875:17:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2588,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2586,
														"name": "c",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2581,
														"src": "906:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 2587,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2571,
														"src": "910:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "906:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2593,
												"nodeType": "IfStatement",
												"src": "902:28:8",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 2589,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "921:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 2590,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "928:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 2591,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "920:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 2579,
													"id": 2592,
													"nodeType": "Return",
													"src": "913:17:8"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 2594,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "948:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"id": 2595,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2581,
															"src": "954:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 2596,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "947:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 2579,
												"id": 2597,
												"nodeType": "Return",
												"src": "940:16:8"
											}
										]
									},
									"documentation": {
										"id": 2569,
										"nodeType": "StructuredDocumentation",
										"src": "653:131:8",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 2599,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2574,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2571,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2599,
												"src": "805:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2570,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "805:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2573,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2599,
												"src": "816:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2572,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "816:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "804:22:8"
									},
									"returnParameters": {
										"id": 2579,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2576,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2599,
												"src": "850:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2575,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "850:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2578,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2599,
												"src": "856:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2577,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "856:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "849:15:8"
									},
									"scope": 2942,
									"src": "789:174:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2625,
										"nodeType": "Block",
										"src": "1185:75:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2613,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2611,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2604,
														"src": "1199:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 2612,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2602,
														"src": "1203:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1199:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2618,
												"nodeType": "IfStatement",
												"src": "1195:28:8",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 2614,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1214:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 2615,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1221:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 2616,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1213:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 2610,
													"id": 2617,
													"nodeType": "Return",
													"src": "1206:17:8"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 2619,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1241:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2622,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2620,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2602,
																"src": "1247:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 2621,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2604,
																"src": "1251:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1247:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 2623,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1240:13:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 2610,
												"id": 2624,
												"nodeType": "Return",
												"src": "1233:20:8"
											}
										]
									},
									"documentation": {
										"id": 2600,
										"nodeType": "StructuredDocumentation",
										"src": "969:135:8",
										"text": " @dev Returns the substraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 2626,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2605,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2602,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2626,
												"src": "1125:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2601,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1125:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2604,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2626,
												"src": "1136:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2603,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1136:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1124:22:8"
									},
									"returnParameters": {
										"id": 2610,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2607,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2626,
												"src": "1170:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2606,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1170:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2609,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2626,
												"src": "1176:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2608,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1176:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1169:15:8"
									},
									"scope": 2942,
									"src": "1109:151:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2666,
										"nodeType": "Block",
										"src": "1484:359:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2640,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2638,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2629,
														"src": "1716:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2639,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1721:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1716:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2645,
												"nodeType": "IfStatement",
												"src": "1712:28:8",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "74727565",
																"id": 2641,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1732:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															{
																"hexValue": "30",
																"id": 2642,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1738:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 2643,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1731:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 2637,
													"id": 2644,
													"nodeType": "Return",
													"src": "1724:16:8"
												}
											},
											{
												"assignments": [
													2647
												],
												"declarations": [
													{
														"constant": false,
														"id": 2647,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 2666,
														"src": "1750:9:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2646,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1750:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2651,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2650,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2648,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2629,
														"src": "1762:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 2649,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2631,
														"src": "1766:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1762:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1750:17:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2656,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2654,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2652,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2647,
															"src": "1781:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"id": 2653,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2629,
															"src": "1785:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1781:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 2655,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2631,
														"src": "1790:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1781:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2661,
												"nodeType": "IfStatement",
												"src": "1777:33:8",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 2657,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1801:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 2658,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1808:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 2659,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1800:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 2637,
													"id": 2660,
													"nodeType": "Return",
													"src": "1793:17:8"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 2662,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1828:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"id": 2663,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2647,
															"src": "1834:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 2664,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1827:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 2637,
												"id": 2665,
												"nodeType": "Return",
												"src": "1820:16:8"
											}
										]
									},
									"documentation": {
										"id": 2627,
										"nodeType": "StructuredDocumentation",
										"src": "1266:137:8",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 2667,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2632,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2629,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2667,
												"src": "1424:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2628,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1424:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2631,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2667,
												"src": "1435:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2630,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1435:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1423:22:8"
									},
									"returnParameters": {
										"id": 2637,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2634,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2667,
												"src": "1469:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2633,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1469:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2636,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2667,
												"src": "1475:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2635,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1475:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1468:15:8"
									},
									"scope": 2942,
									"src": "1408:435:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2693,
										"nodeType": "Block",
										"src": "2068:76:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2681,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2679,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2672,
														"src": "2082:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2680,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2087:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2082:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2686,
												"nodeType": "IfStatement",
												"src": "2078:29:8",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 2682,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2098:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 2683,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2105:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 2684,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2097:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 2678,
													"id": 2685,
													"nodeType": "Return",
													"src": "2090:17:8"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 2687,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2125:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2690,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2688,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2670,
																"src": "2131:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2689,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2672,
																"src": "2135:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2131:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 2691,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2124:13:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 2678,
												"id": 2692,
												"nodeType": "Return",
												"src": "2117:20:8"
											}
										]
									},
									"documentation": {
										"id": 2668,
										"nodeType": "StructuredDocumentation",
										"src": "1849:138:8",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 2694,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2673,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2670,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2694,
												"src": "2008:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2669,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2008:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2672,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2694,
												"src": "2019:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2671,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2019:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2007:22:8"
									},
									"returnParameters": {
										"id": 2678,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2675,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2694,
												"src": "2053:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2674,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2053:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2677,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2694,
												"src": "2059:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2676,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2059:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2052:15:8"
									},
									"scope": 2942,
									"src": "1992:152:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2720,
										"nodeType": "Block",
										"src": "2379:76:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2708,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2706,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2699,
														"src": "2393:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2707,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2398:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2393:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2713,
												"nodeType": "IfStatement",
												"src": "2389:29:8",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 2709,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2409:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 2710,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2416:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 2711,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2408:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 2705,
													"id": 2712,
													"nodeType": "Return",
													"src": "2401:17:8"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 2714,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2436:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2717,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2715,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2697,
																"src": "2442:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 2716,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2699,
																"src": "2446:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2442:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 2718,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2435:13:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 2705,
												"id": 2719,
												"nodeType": "Return",
												"src": "2428:20:8"
											}
										]
									},
									"documentation": {
										"id": 2695,
										"nodeType": "StructuredDocumentation",
										"src": "2150:148:8",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 2721,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2700,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2697,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2721,
												"src": "2319:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2696,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2319:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2699,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2721,
												"src": "2330:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2698,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2330:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2318:22:8"
									},
									"returnParameters": {
										"id": 2705,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2702,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2721,
												"src": "2364:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2701,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2364:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2704,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2721,
												"src": "2370:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2703,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2370:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2363:15:8"
									},
									"scope": 2942,
									"src": "2303:152:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2746,
										"nodeType": "Block",
										"src": "2757:108:8",
										"statements": [
											{
												"assignments": [
													2732
												],
												"declarations": [
													{
														"constant": false,
														"id": 2732,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 2746,
														"src": "2767:9:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2731,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2767:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2736,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2735,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2733,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2724,
														"src": "2779:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 2734,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2726,
														"src": "2783:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2779:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2767:17:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2740,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2738,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2732,
																"src": "2802:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 2739,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2724,
																"src": "2807:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2802:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 2741,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2810:29:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 2737,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2794:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2742,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2794:46:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2743,
												"nodeType": "ExpressionStatement",
												"src": "2794:46:8"
											},
											{
												"expression": {
													"id": 2744,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2732,
													"src": "2857:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2730,
												"id": 2745,
												"nodeType": "Return",
												"src": "2850:8:8"
											}
										]
									},
									"documentation": {
										"id": 2722,
										"nodeType": "StructuredDocumentation",
										"src": "2461:224:8",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 2747,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2727,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2724,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2747,
												"src": "2703:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2723,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2703:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2726,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2747,
												"src": "2714:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2725,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2714:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2702:22:8"
									},
									"returnParameters": {
										"id": 2730,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2729,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2747,
												"src": "2748:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2728,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2748:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2747:9:8"
									},
									"scope": 2942,
									"src": "2690:175:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2768,
										"nodeType": "Block",
										"src": "3203:88:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2760,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2758,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2752,
																"src": "3221:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 2759,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2750,
																"src": "3226:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3221:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 2761,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3229:32:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 2757,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "3213:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2762,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3213:49:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2763,
												"nodeType": "ExpressionStatement",
												"src": "3213:49:8"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2766,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2764,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2750,
														"src": "3279:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 2765,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2752,
														"src": "3283:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3279:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2756,
												"id": 2767,
												"nodeType": "Return",
												"src": "3272:12:8"
											}
										]
									},
									"documentation": {
										"id": 2748,
										"nodeType": "StructuredDocumentation",
										"src": "2871:260:8",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 2769,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2753,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2750,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2769,
												"src": "3149:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2749,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3149:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2752,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2769,
												"src": "3160:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2751,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3160:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3148:22:8"
									},
									"returnParameters": {
										"id": 2756,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2755,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2769,
												"src": "3194:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2754,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3194:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3193:9:8"
									},
									"scope": 2942,
									"src": "3136:155:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2802,
										"nodeType": "Block",
										"src": "3605:148:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2781,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2779,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2772,
														"src": "3619:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2780,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3624:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3619:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2784,
												"nodeType": "IfStatement",
												"src": "3615:20:8",
												"trueBody": {
													"expression": {
														"hexValue": "30",
														"id": 2782,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3634:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"functionReturnParameters": 2778,
													"id": 2783,
													"nodeType": "Return",
													"src": "3627:8:8"
												}
											},
											{
												"assignments": [
													2786
												],
												"declarations": [
													{
														"constant": false,
														"id": 2786,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 2802,
														"src": "3645:9:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2785,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3645:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2790,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2789,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2787,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2772,
														"src": "3657:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 2788,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2774,
														"src": "3661:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3657:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3645:17:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2796,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2794,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2792,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2786,
																	"src": "3680:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2793,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2772,
																	"src": "3684:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3680:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 2795,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2774,
																"src": "3689:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3680:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 2797,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3692:35:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 2791,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "3672:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2798,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3672:56:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2799,
												"nodeType": "ExpressionStatement",
												"src": "3672:56:8"
											},
											{
												"expression": {
													"id": 2800,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2786,
													"src": "3745:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2778,
												"id": 2801,
												"nodeType": "Return",
												"src": "3738:8:8"
											}
										]
									},
									"documentation": {
										"id": 2770,
										"nodeType": "StructuredDocumentation",
										"src": "3297:236:8",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 2803,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2775,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2772,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2803,
												"src": "3551:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2771,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3551:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2774,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2803,
												"src": "3562:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2773,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3562:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3550:22:8"
									},
									"returnParameters": {
										"id": 2778,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2777,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2803,
												"src": "3596:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2776,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3596:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3595:9:8"
									},
									"scope": 2942,
									"src": "3538:215:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2824,
										"nodeType": "Block",
										"src": "4284:83:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2816,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2814,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2808,
																"src": "4302:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2815,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4306:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4302:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 2817,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4309:28:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 2813,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4294:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2818,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4294:44:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2819,
												"nodeType": "ExpressionStatement",
												"src": "4294:44:8"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2822,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2820,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2806,
														"src": "4355:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 2821,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2808,
														"src": "4359:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4355:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2812,
												"id": 2823,
												"nodeType": "Return",
												"src": "4348:12:8"
											}
										]
									},
									"documentation": {
										"id": 2804,
										"nodeType": "StructuredDocumentation",
										"src": "3759:453:8",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2825,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2809,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2806,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2825,
												"src": "4230:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2805,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4230:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2808,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2825,
												"src": "4241:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2807,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4241:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4229:22:8"
									},
									"returnParameters": {
										"id": 2812,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2811,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2825,
												"src": "4275:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2810,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4275:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4274:9:8"
									},
									"scope": 2942,
									"src": "4217:150:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2846,
										"nodeType": "Block",
										"src": "4887:81:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2838,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2836,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2830,
																"src": "4905:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2837,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4909:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4905:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 2839,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4912:26:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 2835,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4897:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2840,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4897:42:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2841,
												"nodeType": "ExpressionStatement",
												"src": "4897:42:8"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2844,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2842,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2828,
														"src": "4956:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 2843,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2830,
														"src": "4960:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4956:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2834,
												"id": 2845,
												"nodeType": "Return",
												"src": "4949:12:8"
											}
										]
									},
									"documentation": {
										"id": 2826,
										"nodeType": "StructuredDocumentation",
										"src": "4373:442:8",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2847,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2831,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2828,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2847,
												"src": "4833:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2827,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4833:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2830,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2847,
												"src": "4844:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2829,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4844:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4832:22:8"
									},
									"returnParameters": {
										"id": 2834,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2833,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2847,
												"src": "4878:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2832,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4878:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4877:9:8"
									},
									"scope": 2942,
									"src": "4820:148:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2870,
										"nodeType": "Block",
										"src": "5527:68:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2862,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2860,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2852,
																"src": "5545:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 2861,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2850,
																"src": "5550:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5545:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2863,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2854,
															"src": "5553:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 2859,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "5537:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2864,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5537:29:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2865,
												"nodeType": "ExpressionStatement",
												"src": "5537:29:8"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2868,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2866,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2850,
														"src": "5583:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 2867,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2852,
														"src": "5587:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5583:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2858,
												"id": 2869,
												"nodeType": "Return",
												"src": "5576:12:8"
											}
										]
									},
									"documentation": {
										"id": 2848,
										"nodeType": "StructuredDocumentation",
										"src": "4974:453:8",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 2871,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2855,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2850,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2871,
												"src": "5445:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2849,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5445:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2852,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2871,
												"src": "5456:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2851,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5456:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2854,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 2871,
												"src": "5467:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2853,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5467:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5444:50:8"
									},
									"returnParameters": {
										"id": 2858,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2857,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2871,
												"src": "5518:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2856,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5518:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5517:9:8"
									},
									"scope": 2942,
									"src": "5432:163:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2894,
										"nodeType": "Block",
										"src": "6347:67:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2886,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2884,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2876,
																"src": "6365:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2885,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6369:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6365:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2887,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2878,
															"src": "6372:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 2883,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "6357:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2888,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6357:28:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2889,
												"nodeType": "ExpressionStatement",
												"src": "6357:28:8"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2892,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2890,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2874,
														"src": "6402:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 2891,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2876,
														"src": "6406:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6402:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2882,
												"id": 2893,
												"nodeType": "Return",
												"src": "6395:12:8"
											}
										]
									},
									"documentation": {
										"id": 2872,
										"nodeType": "StructuredDocumentation",
										"src": "5601:646:8",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryDiv}.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2895,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2879,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2874,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2895,
												"src": "6265:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2873,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6265:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2876,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2895,
												"src": "6276:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2875,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6276:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2878,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 2895,
												"src": "6287:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2877,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6287:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6264:50:8"
									},
									"returnParameters": {
										"id": 2882,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2881,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2895,
												"src": "6338:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2880,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6338:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6337:9:8"
									},
									"scope": 2942,
									"src": "6252:162:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2918,
										"nodeType": "Block",
										"src": "7155:67:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2910,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2908,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2900,
																"src": "7173:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2909,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7177:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "7173:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2911,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2902,
															"src": "7180:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 2907,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "7165:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2912,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7165:28:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2913,
												"nodeType": "ExpressionStatement",
												"src": "7165:28:8"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2916,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2914,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2898,
														"src": "7210:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 2915,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2900,
														"src": "7214:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7210:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2906,
												"id": 2917,
												"nodeType": "Return",
												"src": "7203:12:8"
											}
										]
									},
									"documentation": {
										"id": 2896,
										"nodeType": "StructuredDocumentation",
										"src": "6420:635:8",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2919,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2903,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2898,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2919,
												"src": "7073:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2897,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7073:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2900,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2919,
												"src": "7084:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2899,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7084:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2902,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 2919,
												"src": "7095:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2901,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7095:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7072:50:8"
									},
									"returnParameters": {
										"id": 2906,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2905,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2919,
												"src": "7146:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2904,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7146:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7145:9:8"
									},
									"scope": 2942,
									"src": "7060:162:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2940,
										"nodeType": "Block",
										"src": "7350:103:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2930,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2928,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2923,
														"src": "7364:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 2929,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2921,
														"src": "7368:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7364:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2938,
													"nodeType": "Block",
													"src": "7410:37:8",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2936,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2934,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2921,
																	"src": "7431:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 2935,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2923,
																	"src": "7435:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7431:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 2927,
															"id": 2937,
															"nodeType": "Return",
															"src": "7424:12:8"
														}
													]
												},
												"id": 2939,
												"nodeType": "IfStatement",
												"src": "7360:87:8",
												"trueBody": {
													"id": 2933,
													"nodeType": "Block",
													"src": "7371:33:8",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 2931,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7392:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 2927,
															"id": 2932,
															"nodeType": "Return",
															"src": "7385:8:8"
														}
													]
												}
											}
										]
									},
									"id": 2941,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeSub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2924,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2921,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2941,
												"src": "7305:6:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2920,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "7305:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2923,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2941,
												"src": "7313:6:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2922,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "7313:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7304:16:8"
									},
									"returnParameters": {
										"id": 2927,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2926,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2941,
												"src": "7344:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2925,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "7344:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7343:6:8"
									},
									"scope": 2942,
									"src": "7288:165:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2943,
							"src": "630:6825:8"
						}
					],
					"src": "33:7422:8"
				},
				"id": 8
			},
			"lib/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "lib/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							2954
						]
					},
					"id": 2955,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2944,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2945,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:9",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 2954,
							"linearizedBaseContracts": [
								2954
							],
							"name": "IERC165",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2946,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:9",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 2953,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2949,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2948,
												"mutability": "mutable",
												"name": "interfaceId",
												"nodeType": "VariableDeclaration",
												"scope": 2953,
												"src": "801:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 2947,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:9"
									},
									"returnParameters": {
										"id": 2952,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2951,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2953,
												"src": "844:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2950,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:9"
									},
									"scope": 2954,
									"src": "774:76:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2955,
							"src": "405:447:9"
						}
					],
					"src": "100:753:9"
				},
				"id": 9
			}
		}
	}
}