{
	"id": "ab040b94ca4bfc8177033553a953522f",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.4",
	"solcLongVersion": "0.7.4+commit.3f05b770",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/DiamodSafe copy.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.4;\n\nimport \"./Address.sol\";\nimport \"./SafeMath.sol\";\nimport \"./SafeERC20.sol\";\n\nimport \"./IERC20.sol\";\n\nimport \"./Ownable.sol\";\nimport \"./IERC721.sol\";\nimport \"./ReentrancyGuard.sol\";\n\ncontract DiamondSafe is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint;\n\n    // Import the BEP20 token interface\n    IERC20 public stakingToken;\n    \n    /*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n    $$$CONFIGURABLES AND VARIABLES$$$\n    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/\n    //NFT amount to hold for immunity\n    uint256 public requiredBalance;\n\n    // Store the token address and the reserve address as well as the NFTs\n    address public tokenAddress;\n    address payable public bnbReceiver;\n    IERC721[] public jpeg;\n    // Store the number of unique users and total Tx's\n    uint public users;\n    uint public totalTxs;\n\n    // Store the starting time & block number and the last payout time\n    uint public lastPayout; // What time was the last payout (timestamp)?\n\n    // Store the details of total deposits & claims\n    uint public totalClaims;\n    uint public totalDeposits;\n\n    // Store the total drip pool balance and rate\n    uint public dripPoolBalance;\n    uint8 public dripRate;\n    IERC20 public rewardToken;\n\n    // 10% fee on deposit and withdrawal\n    uint8 internal constant divsFee = 3;\n    uint256 internal constant magnitude = 2 ** 64;\n\n    // How many portions of the fees does each receiver get?\n    uint public forPool;\n    uint public forDivs;\n\n    // Rebase and payout frequency\n    uint256 public constant rebaseFrequency = 6 hours;\n    uint256 public constant payoutFrequency = 2 seconds;\n\n    // Timestamp of last rebase\n    uint256 public lastRebaseTime;\n\n    // Current total tokens staked, and profit per share\n    uint256 private currentTotalStaked;\n    uint256 private profitPerShare_;\n\n    /*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n    $$ MODIFIERS                    $$\n    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/\n\n    // Only holders - Caller must have funds in the vault\n    modifier onlyHolders() {\n        require(myTokens() > 0);\n        _;\n    }\n\n    // Only earners - Caller must have some earnings\n    modifier onlyEarners() {\n        require(myEarnings() > 0);\n        _;\n    }\n\n    /*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n     $$ ACCOUNT STRUCT                 $$\n     $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/\n\n    struct Account {\n        uint deposited;\n        uint rewards;\n        uint withdrawn;\n        uint compounded;\n        uint rewarded;\n        uint contributed;\n        uint transferredShares;\n        uint receivedShares;\n        uint xInvested;\n        uint xCompounded;\n        uint xRewarded;\n        uint xContributed;\n        uint xWithdrawn;\n        uint xTransferredShares;\n        uint xReceivedShares;\n    }\n\n    /*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n    $$ MAPPINGS                       $$\n    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/\n\n    mapping(address => int256) payoutsOf_;\n    mapping(address => uint256) balanceOf_;\n    mapping(address => Account) accountOf_;\n\n    /*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n    $$ EVENTS                         $$\n    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/\n\n    event onDeposit(\n        address indexed _user,\n        uint256 _deposited,\n        uint256 tokensMinted,\n        uint timestamp\n    );\n    event onWithdraw(\n        address indexed _user,\n        uint256 _liquidated,\n        uint256 tokensEarned,\n        uint timestamp\n    );\n    event onCompound(\n        address indexed _user,\n        uint256 _compounded,\n        uint256 tokensMinted,\n        uint timestamp\n    );\n    event onWithdraw(address indexed _user, uint256 _withdrawn, uint timestamp);\n    event onTransfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens,\n        uint timestamp\n    );\n    event onUpdate(\n        address indexed _user,\n        uint256 invested,\n        uint256 tokens,\n        uint256 soldTokens,\n        uint timestamp\n    );\n\n    event onRebase(uint256 balance, uint256 timestamp);\n\n    event onDonate(address indexed from, uint256 _contributed, uint timestamp);\n    event onDonateBNB(address indexed from, uint256 amount, uint timestamp);\n\n    event onSetFeeSplit(uint _pool, uint _divs, uint256 timestamp);\n    event onSetImmunityToken(\n        address indexed _caller,\n        IERC721 []oldOne,\n        IERC721 []newOne,\n        uint256 timestamp\n    );\n\n    /*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n    $$ CONSTRUCTOR                    $$\n    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/\n\n    constructor(address _tokenAddress, address _rewardToken, uint8 _dripRate) Ownable() {\n        require(\n            _tokenAddress != address(0) && Address.isContract(_tokenAddress),\n            \"INVALID_ADDRESS\"\n        );\n        rewardToken = IERC20(_rewardToken);\n        tokenAddress = _tokenAddress;\n        stakingToken = IERC20(_tokenAddress);\n\n        bnbReceiver = msg.sender;\n\n        // Set Drip Rate and last payout date (first time around)...\n        dripRate = _dripRate;\n        lastPayout = (block.timestamp);\n\n        // Fee portions\n        forPool = 2;\n        forDivs = 1;\n\n        requiredBalance = 1;\n    }\n\n    /*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n    $$ FALLBACK                       $$\n    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/\n\n    receive() external payable {\n        Address.sendValue(bnbReceiver, msg.value);\n        emit onDonateBNB(msg.sender, msg.value, block.timestamp);\n    }\n\n    /*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n    $$ WRITE FUNCTIONS                $$\n    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/\n\n    // Donate\n    function donate(uint _amount) public returns (uint256) {\n        // Move the tokens from the caller's wallet to this contract.\n        require(rewardToken.transferFrom(msg.sender, address(this), _amount));\n\n        // Add the tokens to the drip pool balance\n        dripPoolBalance += _amount;\n        accountOf_[msg.sender].xContributed += 1;\n        accountOf_[msg.sender].contributed += _amount;\n\n        // Tell the network, successful function - how much in the pool now?\n        emit onDonate(msg.sender, _amount, block.timestamp);\n        return dripPoolBalance;\n    }\n\n    // Deposit\n    function deposit(uint _amount) public returns (uint256) {\n        return depositTo(msg.sender, _amount);\n    }\n\n    // DepositTo\n    function depositTo(address _user, uint _amount) public returns (uint256) {\n        // Move the tokens from the caller's wallet to this contract.\n        require(stakingToken.transferFrom(msg.sender, address(this), _amount));\n\n        // Add the deposit to the totalDeposits...\n        totalDeposits += _amount;\n\n        // Then actually call the deposit method...\n        uint amount = _depositTokens(_user, _amount);\n\n        // Update the leaderboard...\n        emit onUpdate(\n            _user,\n            accountOf_[_user].deposited,\n            balanceOf_[_user],\n            accountOf_[_user].withdrawn,\n            block.timestamp\n        );\n\n        // Then trigger a distribution for everyone, kind soul!\n        distribute();\n\n        // Successful function - how many 'shares' (tokens) are the result?\n        return amount;\n    }\n\n    // Compound\n    function compound() public onlyEarners {\n        _compoundTokens();\n    }\n\n    // Harvest\n    function harvest() public onlyEarners {\n        address _user = msg.sender;\n        uint256 _dividends = myEarnings();\n\n        // Calculate the payout, add it to the user's total paid out accounting...\n        payoutsOf_[_user] += (int256)(_dividends * magnitude);\n\n        // Pay the user their tokens to their wallet\n        stakingToken.transfer(_user, _dividends);\n\n        // Update accounting for user/total withdrawal stats...\n        accountOf_[_user].withdrawn = SafeMath.add(\n            accountOf_[_user].withdrawn,\n            _dividends\n        );\n        accountOf_[_user].xWithdrawn += 1;\n\n        // Update total Tx's and claims stats\n        totalTxs += 1;\n        totalClaims += _dividends;\n\n        // Tell the network...\n        emit onWithdraw(_user, _dividends, block.timestamp);\n\n        // Trigger a distribution for everyone, kind soul!\n        distribute();\n    }\n\n    // Withdraw\n    function withdraw(uint256 _amount) public onlyHolders {\n        address _user = msg.sender;\n        require(_amount <= balanceOf_[_user]);\n         uint256 _undividedDividends = SafeMath.mul(_amount, divsFee) / 100;\n                \n        bool isImmune = checkImmunity(msg.sender);\n        //Checks immunity\n        if (isImmune) {\n            //Sets amount of tokens to be taxed to 0 of immune\n           _undividedDividends = 0;  \n           } \n         // Calculate dividends and 'shares' (tokens)\n        uint256  _taxedTokens = SafeMath.sub(_amount, _undividedDividends);\n        currentTotalStaked = SafeMath.sub(currentTotalStaked, _amount);\n        balanceOf_[_user] = SafeMath.sub(balanceOf_[_user], _amount);\n\n        // Update the payment ratios for the user and everyone else...\n        int256 _updatedPayouts = (int256)(\n            profitPerShare_ * _amount + (_taxedTokens * magnitude)\n        );\n        payoutsOf_[_user] -= _updatedPayouts;\n\n        // Serve dividends between the drip and instant divs (4:1)...\n        allocateFees(_undividedDividends);\n\n        // Tell the network, and trigger a distribution\n        emit onWithdraw(_user, _amount, _taxedTokens, block.timestamp);\n\n        // Update the leaderboard...\n        emit onUpdate(\n            _user,\n            accountOf_[_user].deposited,\n            balanceOf_[_user],\n            accountOf_[_user].withdrawn,\n            block.timestamp\n        );\n        // Trigger a distribution for everyone, kind soul!\n        distribute();\n        }\n     // Transfer\n    function transfer(\n        address _to,\n        uint256 _amount\n    ) external onlyHolders returns (bool) {\n        return _transferTokens(_to, _amount);\n    }\n\n    /*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n    $$VIEW FUNCTIONS                 $$\n    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/\n\n    // User is immune to withdraw fees when holding an item\n    function checkImmunity(address _user) public view returns (bool isImmune) {\n        uint256 x = 0;\n        IERC721 jpegTest1;\n        for(uint i =0; i < jpeg.length; i++){\n            jpegTest1 = IERC721(jpeg[i]);\n             x += jpegTest1.balanceOf(_user);\n        }\n       if (x >= requiredBalance) {\n            return true;\n        }\n        return false;\n    }\n\n    function myTokens() public view returns (uint256) {\n        return balanceOf(msg.sender);\n    }\n\n    function myEarnings() public view returns (uint256) {\n        return dividendsOf(msg.sender);\n    }\n\n    function balanceOf(address _user) public view returns (uint256) {\n        return balanceOf_[_user];\n    }\n\n    function tokenBalance(address _user) public view returns (uint256) {\n        return _user.balance;\n    }\n\n    function totalBalance() public view returns (uint256) {\n        return stakingToken.balanceOf(address(this));\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return currentTotalStaked;\n    }\n\n    function dividendsOf(address _user) public view returns (uint256) {\n        return\n            (uint256)(\n                (int256)(profitPerShare_ * balanceOf_[_user]) -\n                    payoutsOf_[_user]\n            ) / magnitude;\n    }\n\n    function sellPrice() public pure  returns (uint256) {\n        uint256 _tokens = 1e18;\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_tokens, divsFee), 100);\n        uint256 _taxedTokens = SafeMath.sub(_tokens, _dividends);\n        return _taxedTokens;\n    }\n\n    function buyPrice() public pure returns (uint256) {\n        uint256 _tokens = 1e18;\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_tokens, divsFee), 100);\n        uint256 _taxedTokens = SafeMath.add(_tokens, _dividends);\n        return _taxedTokens;\n    }\n\n    function calculateSharesReceived(\n        uint256 _amount\n    ) public pure returns (uint256) {\n        uint256 _divies = SafeMath.div(SafeMath.mul(_amount, divsFee), 100);\n        uint256 _remains = SafeMath.sub(_amount, _divies);\n        uint256 _result = _remains;\n        return _result;\n    }\n\n    function calculateTokensReceived(\n        uint256 _amount\n    ) public view returns (uint256) {\n        require(_amount <= currentTotalStaked);\n        uint256 _tokens = _amount;\n        uint256 _divies = SafeMath.div(SafeMath.mul(_tokens, divsFee), 100);\n        uint256 _remains = SafeMath.sub(_tokens, _divies);\n        return _remains;\n    }\n\n    function accountOf(address _user) public view returns (uint256[14] memory) {\n        Account memory a = accountOf_[_user];\n        uint256[14] memory accountArray = [\n            a.deposited,\n            a.withdrawn,\n            a.rewarded,\n            a.compounded,\n            a.contributed,\n            a.transferredShares,\n            a.receivedShares,\n            a.xInvested,\n            a.xRewarded,\n            a.xContributed,\n            a.xWithdrawn,\n            a.xTransferredShares,\n            a.xReceivedShares,\n            a.xCompounded\n        ];\n        return accountArray;\n    }\n\n    function dailyEstimate(address _user) public view returns (uint256) {\n        uint256 share = dripPoolBalance.mul(dripRate).div(100);\n        return\n            (currentTotalStaked > 0)\n                ? share.mul(balanceOf_[_user]).div(currentTotalStaked)\n                : 0;\n    }\n\n    /*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n    $$ PUBLIC OWNER-ONLY FUNCTIONS $$\n    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/\n    function setFeeSplit(\n        uint256 _pool,\n        uint256 _divs\n    ) public onlyOwner returns (bool _success) {\n        require(_pool.add(_divs) == 3, \"TEN_PORTIONS_REQUIRE_DIVISION\");\n\n        // Set the new values...\n        forPool = _pool;\n        forDivs = _divs;\n\n        // Tell the network, successful function!\n        emit onSetFeeSplit(_pool, _divs, block.timestamp);\n        return true;\n    }\n\n   // make a set of NFT available for immunity withdraw\n    function setImmunityToken(\n        IERC721[] memory _contract\n    ) public onlyOwner returns (bool _success) {\n    for(uint i =0; i < jpeg.length; i++){\n    // check to make sure they are ERC721 tokens\n   require(_contract[i].supportsInterface(0x80ac58cd), \"NOT_ERC721\");    \n    }\n        IERC721[] memory oldContract = jpeg;\n        jpeg = _contract;\n\n        emit onSetImmunityToken(\n            msg.sender,\n            oldContract,\n            _contract,\n            block.timestamp\n        );\n        return true;\n    }\n\n    /*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n    $$ PRIVATE / INTERNAL FUNCTIONS   $$\n    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/\n\n    // Allocate fees (private method)\n    function allocateFees(uint fee) private {\n        uint256 _onePiece = fee.div(10);\n\n        uint256 _forPool = (_onePiece.mul(forPool)); // for the Drip Pool\n        uint256 _forDivs = (_onePiece.mul(forDivs)); // for Instant Divs\n\n        dripPoolBalance = dripPoolBalance.add(_forPool);\n\n        // If there's more than 0 tokens staked in the vault...\n        if (currentTotalStaked > 0) {\n            // Distribute those instant divs...\n            profitPerShare_ = SafeMath.add(\n                profitPerShare_,\n                (_forDivs * magnitude) / currentTotalStaked\n            );\n        } else {\n            // Otherwise add the divs portion to the drip pool balance.\n            dripPoolBalance += _forDivs;\n        }\n    }\n\n    // Distribute (private method)\n    function distribute() private {\n        uint _currentTimestamp = (block.timestamp);\n\n        // Log a rebase, if it's time to do so...\n        if (_currentTimestamp.safeSub(lastRebaseTime) > rebaseFrequency) {\n            // Tell the network...\n            emit onRebase(totalBalance(), _currentTimestamp);\n\n            // Update the time this was last updated...\n            lastRebaseTime = _currentTimestamp;\n        }\n\n        // If there's any time difference...\n        if (\n            SafeMath.safeSub(_currentTimestamp, lastPayout) > payoutFrequency &&\n            currentTotalStaked > 0\n        ) {\n            // Calculate shares and profits...\n            uint256 share = dripPoolBalance.mul(dripRate).div(100).div(\n                24 hours\n            );\n            uint256 profit = share * _currentTimestamp.safeSub(lastPayout);\n\n            // Subtract from drip pool balance and add to all user earnings\n            dripPoolBalance = dripPoolBalance.safeSub(profit);\n            profitPerShare_ = SafeMath.add(\n                profitPerShare_,\n                (profit * magnitude) / currentTotalStaked\n            );\n\n            // Update the last payout timestamp\n            lastPayout = _currentTimestamp;\n        }\n    }\n\n    // Deposit Tokens (internal method)\n    function _depositTokens(\n        address _recipient,\n        uint256 _amount\n    ) internal returns (uint256) {\n        // If the recipient has zero activity, they're new - COUNT THEM!!!\n        if (\n            accountOf_[_recipient].deposited == 0 &&\n            accountOf_[_recipient].receivedShares == 0\n        ) {\n            users += 1;\n        }\n\n        // Count this tx...\n        totalTxs += 1;     \n         uint256 _undividedDividends = SafeMath.mul(_amount, divsFee) / 100;\n          uint256   _tokens = SafeMath.sub(_amount, _undividedDividends);\n\n       \n        // Tell the network...\n        emit onDeposit(_recipient, _amount, _tokens, block.timestamp);\n\n        // There needs to be something being added in this call...\n        require(\n            _tokens > 0 &&\n                SafeMath.add(_tokens, currentTotalStaked) > currentTotalStaked\n        );\n        if (currentTotalStaked > 0) {\n            currentTotalStaked += _tokens;\n        } else {\n            currentTotalStaked = _tokens;\n        }\n\n        // Allocate fees, and balance to the recipient\n        allocateFees(_undividedDividends);\n        balanceOf_[_recipient] = SafeMath.add(balanceOf_[_recipient], _tokens);\n\n        // Updated payouts...\n        int256 _updatedPayouts = (int256)(profitPerShare_ * _tokens);\n\n        // Update stats...\n        payoutsOf_[_recipient] += _updatedPayouts;\n        accountOf_[_recipient].deposited += _amount;\n        accountOf_[_recipient].xInvested += 1;\n\n        // Successful function - how many \"shares\" generated?\n        return _tokens;\n    }\n\n    // Compound (internal method)\n    function _compoundTokens() internal returns (uint256) {\n        address _user = msg.sender;\n\n        // Quickly roll the caller's earnings into their payouts\n        uint256 _dividends = dividendsOf(_user);\n        payoutsOf_[_user] += (int256)(_dividends * magnitude);\n\n        // Then actually trigger the deposit method\n        // (NOTE: No tokens required here, earnings are tokens already within the contract)\n        uint256 _tokens = _depositTokens(msg.sender, _dividends);\n\n        // Tell the network...\n        emit onCompound(_user, _dividends, _tokens, block.timestamp);\n\n        // Then update the stats...\n        accountOf_[_user].compounded = SafeMath.add(\n            accountOf_[_user].compounded,\n            _dividends\n        );\n        accountOf_[_user].xCompounded += 1;\n\n        // Update the leaderboard...\n        emit onUpdate(\n            _user,\n            accountOf_[_user].deposited,\n            balanceOf_[_user],\n            accountOf_[_user].withdrawn,\n            block.timestamp\n        );\n\n        // Then trigger a distribution for everyone, you kind soul!\n        distribute();\n\n        // Successful function!\n        return _tokens;\n    }\n\n    // Transfer Tokens (internal method)\n    function _transferTokens(\n        address _recipient,\n        uint256 _amount\n    ) internal returns (bool _success) {\n        address _sender = msg.sender;\n        require(_amount <= balanceOf_[_sender]);\n\n        // Harvest any earnings before transferring, to help with cleaner accounting\n        if (myEarnings() > 0) {\n            harvest();\n        }\n\n        // \"Move\" the tokens...\n        balanceOf_[_sender] = SafeMath.sub(balanceOf_[_sender], _amount);\n        balanceOf_[_recipient] = SafeMath.add(balanceOf_[_recipient], _amount);\n\n        // Adjust payout ratios to match the new balances...\n        payoutsOf_[_sender] -= (int256)(profitPerShare_ * _amount);\n        payoutsOf_[_recipient] += (int256)(profitPerShare_ * _amount);\n\n        // If the recipient has zero activity, they're new - COUNT THEM!!!\n        if (\n            accountOf_[_recipient].deposited == 0 &&\n            accountOf_[_recipient].receivedShares == 0\n        ) {\n            users += 1;\n        }\n        // Update stats...\n        accountOf_[_sender].xTransferredShares += 1;\n        accountOf_[_sender].transferredShares += _amount;\n        accountOf_[_recipient].receivedShares += _amount;\n        accountOf_[_recipient].xReceivedShares += 1;\n\n        // Add this to the Tx counter...\n        totalTxs += 1;\n\n        // Tell the network, successful function!\n        emit onTransfer(_sender, _recipient, _amount, block.timestamp);\n\n        // Update the leaderboard for sender...\n        emit onUpdate(\n            _sender,\n            accountOf_[_sender].deposited,\n            balanceOf_[_sender],\n            accountOf_[_sender].withdrawn,\n            block.timestamp\n        );\n\n        // Update the leaderboard for recipient...\n        emit onUpdate(\n            _recipient,\n            accountOf_[_recipient].deposited,\n            balanceOf_[_recipient],\n            accountOf_[_recipient].withdrawn,\n            block.timestamp\n        );\n\n        return true;\n    }\n}\n"
			},
			"contracts/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.7.4;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
			},
			"contracts/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.7.4;\n\nimport \"../lib/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}"
			},
			"contracts/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}"
			},
			"contracts/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
			},
			"contracts/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"
			},
			"contracts/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n\n        /* @dev Subtracts two numbers, else returns zero */\n    function safeSub(uint a, uint b) internal pure returns (uint) {\n        if (b > a) {\n            return 0;\n        } else {\n            return a - b;\n        }\n    }\n}"
			},
			"contracts/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"
			},
			"contracts/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"
			},
			"lib/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.7.4;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Address.sol\":134:7818  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Address.sol\":134:7818  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220439eb543ed6104a74b725b2b04a72531b5813299bda0c709dd800af907d425d964736f6c63430007040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220439eb543ed6104a74b725b2b04a72531b5813299bda0c709dd800af907d425d964736f6c63430007040033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NUMBER SWAP15 0xB5 NUMBER 0xED PUSH2 0x4A7 0x4B PUSH19 0x5B2B04A72531B5813299BDA0C709DD800AF907 0xD4 0x25 0xD9 PUSH5 0x736F6C6343 STOP SMOD DIV STOP CALLER ",
							"sourceMap": "134:7684:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220439eb543ed6104a74b725b2b04a72531b5813299bda0c709dd800af907d425d964736f6c63430007040033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NUMBER SWAP15 0xB5 NUMBER 0xED PUSH2 0x4A7 0x4B PUSH19 0x5B2B04A72531B5813299BDA0C709DD800AF907 0xD4 0x25 0xD9 PUSH5 0x736F6C6343 STOP SMOD DIV STOP CALLER ",
							"sourceMap": "134:7684:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 134,
									"end": 7818,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "INVALID",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220439eb543ed6104a74b725b2b04a72531b5813299bda0c709dd800af907d425d964736f6c63430007040033",
									".code": [
										{
											"begin": 134,
											"end": 7818,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 134,
											"end": 7818,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 134,
											"end": 7818,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 134,
											"end": 7818,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 134,
											"end": 7818,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 134,
											"end": 7818,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 134,
											"end": 7818,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 134,
											"end": 7818,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 134,
											"end": 7818,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Address.sol\":\"Address\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Address.sol\":{\"keccak256\":\"0xf6ef080fad8534f258b526768063c666e701b135ec3bde9bdffc77254e399515\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://043eada9acabd207d4aaa1706ca581c514ba75e8ec9183a805ff8d1f25ccd445\",\"dweb:/ipfs/QmU6fLUSyR7YSMVtcGtj5epEvpxDBERGMS5L92WG7JKQVH\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Context.sol\":{\"keccak256\":\"0xd3e88da8695a1d63936f7bbf3b3441056c44d167e679a80f9a1b5ffafb11fad9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://587786c556944a0a561b5f5ab16716263b42ca8dd6cc1102b75f4c4d1a802325\",\"dweb:/ipfs/QmU9Y13bBrVy2uE4TiHfPSTFQXV2BeUnxrMo135zRy7wJT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/DiamodSafe copy.sol": {
				"DiamondSafe": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_tokenAddress",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_rewardToken",
									"type": "address"
								},
								{
									"internalType": "uint8",
									"name": "_dripRate",
									"type": "uint8"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_compounded",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokensMinted",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "onCompound",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_deposited",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokensMinted",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "onDeposit",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_contributed",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "onDonate",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "onDonateBNB",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "onRebase",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_pool",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_divs",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "onSetFeeSplit",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_caller",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "contract IERC721[]",
									"name": "oldOne",
									"type": "address[]"
								},
								{
									"indexed": false,
									"internalType": "contract IERC721[]",
									"name": "newOne",
									"type": "address[]"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "onSetImmunityToken",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokens",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "onTransfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "invested",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokens",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "soldTokens",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "onUpdate",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_liquidated",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokensEarned",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "onWithdraw",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_withdrawn",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "onWithdraw",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "accountOf",
							"outputs": [
								{
									"internalType": "uint256[14]",
									"name": "",
									"type": "uint256[14]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "bnbReceiver",
							"outputs": [
								{
									"internalType": "address payable",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "buyPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "calculateSharesReceived",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "calculateTokensReceived",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "checkImmunity",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isImmune",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "compound",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "dailyEstimate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "deposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "depositTo",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "dividendsOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "donate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "dripPoolBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "dripRate",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "forDivs",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "forPool",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "harvest",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "jpeg",
							"outputs": [
								{
									"internalType": "contract IERC721",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "lastPayout",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "lastRebaseTime",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "myEarnings",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "myTokens",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "payoutFrequency",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rebaseFrequency",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "requiredBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardToken",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "sellPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_pool",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_divs",
									"type": "uint256"
								}
							],
							"name": "setFeeSplit",
							"outputs": [
								{
									"internalType": "bool",
									"name": "_success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC721[]",
									"name": "_contract",
									"type": "address[]"
								}
							],
							"name": "setImmunityToken",
							"outputs": [
								{
									"internalType": "bool",
									"name": "_success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "stakingToken",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tokenAddress",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "tokenBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalClaims",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalDeposits",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalTxs",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "users",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/DiamodSafe copy.sol\":237:21655  contract DiamondSafe is Ownable, ReentrancyGuard {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/DiamodSafe copy.sol\":4590:5217  constructor(address _tokenAddress, address _rewardToken, uint8 _dripRate) Ownable() {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  0x60\n  dup2\n  lt\n  iszero\n  tag_2\n  jumpi\n  0x00\n  dup1\n  revert\ntag_2:\n  pop\n  dup1\n  mload\n  0x20\n  dup3\n  add\n  mload\n  0x40\n  swap1\n  swap3\n  add\n  mload\n  swap1\n  swap2\n  swap1\n    /* \"contracts/Ownable.sol\":877:894  address msgSender */\n  0x00\n    /* \"contracts/Ownable.sol\":897:909  _msgSender() */\n  tag_7\n    /* \"contracts/Ownable.sol\":897:907  _msgSender */\n  tag_8\n    /* \"contracts/Ownable.sol\":897:909  _msgSender() */\n  jump\t// in\ntag_7:\n    /* \"contracts/Ownable.sol\":919:925  _owner */\n  0x00\n    /* \"contracts/Ownable.sol\":919:937  _owner = msgSender */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n  sub(shl(0xa0, 0x01), 0x01)\n  dup4\n  and\n  swap1\n  dup2\n  or\n  dup3\n  sstore\n    /* \"contracts/Ownable.sol\":952:995  OwnershipTransferred(address(0), msgSender) */\n  mload(0x40)\n    /* \"contracts/Ownable.sol\":919:937  _owner = msgSender */\n  swap3\n  swap4\n  pop\n  swap2\n    /* \"contracts/Ownable.sol\":952:995  OwnershipTransferred(address(0), msgSender) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"contracts/Ownable.sol\":919:925  _owner */\n  dup3\n  swap1\n    /* \"contracts/Ownable.sol\":952:995  OwnershipTransferred(address(0), msgSender) */\n  log3\n  pop\n    /* \"contracts/ReentrancyGuard.sol\":1716:1717  1 */\n  0x01\n    /* \"contracts/ReentrancyGuard.sol\":1821:1843  _status = _NOT_ENTERED */\n  dup1\n  sstore\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"contracts/DiamodSafe copy.sol\":4705:4732  _tokenAddress != address(0) */\n  dup4\n  and\n  iszero\n  dup1\n  iszero\n  swap1\n    /* \"contracts/DiamodSafe copy.sol\":4705:4769  _tokenAddress != address(0) && Address.isContract(_tokenAddress) */\n  tag_12\n  jumpi\n  pop\n    /* \"contracts/DiamodSafe copy.sol\":4736:4769  Address.isContract(_tokenAddress) */\n  tag_12\n    /* \"contracts/DiamodSafe copy.sol\":4755:4768  _tokenAddress */\n  dup4\n    /* \"contracts/DiamodSafe copy.sol\":4736:4754  Address.isContract */\n  or(tag_0_213, shl(0x20, tag_13))\n    /* \"contracts/DiamodSafe copy.sol\":4736:4769  Address.isContract(_tokenAddress) */\n  0x20\n  shr\n  jump\t// in\ntag_12:\n    /* \"contracts/DiamodSafe copy.sol\":4684:4810  require(... */\n  tag_14\n  jumpi\n  0x40\n  dup1\n  mload\n  shl(0xe5, 0x461bcd)\n  dup2\n  mstore\n  0x20\n  0x04\n  dup3\n  add\n  mstore\n  0x0f\n  0x24\n  dup3\n  add\n  mstore\n  shl(0x88, 0x494e56414c49445f41444452455353)\n  0x44\n  dup3\n  add\n  mstore\n  swap1\n  mload\n  swap1\n  dup2\n  swap1\n  sub\n  0x64\n  add\n  swap1\n  revert\ntag_14:\n    /* \"contracts/DiamodSafe copy.sol\":4820:4831  rewardToken */\n  0x0d\n    /* \"contracts/DiamodSafe copy.sol\":4820:4854  rewardToken = IERC20(_rewardToken) */\n  dup1\n  sload\n    /* \"contracts/DiamodSafe copy.sol\":4864:4876  tokenAddress */\n  0x04\n    /* \"contracts/DiamodSafe copy.sol\":4864:4892  tokenAddress = _tokenAddress */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n  swap7\n  dup8\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  swap2\n  dup3\n  and\n  dup2\n  or\n  swap1\n  swap3\n  sstore\n    /* \"contracts/DiamodSafe copy.sol\":4902:4914  stakingToken */\n  0x02\n    /* \"contracts/DiamodSafe copy.sol\":4902:4938  stakingToken = IERC20(_tokenAddress) */\n  dup1\n  sload\n  dup3\n  and\n  swap1\n  swap3\n  or\n  dup3\n  sstore\n    /* \"contracts/DiamodSafe copy.sol\":4949:4960  bnbReceiver */\n  0x05\n    /* \"contracts/DiamodSafe copy.sol\":4949:4973  bnbReceiver = msg.sender */\n  dup1\n  sload\n  swap1\n  swap2\n  and\n    /* \"contracts/DiamodSafe copy.sol\":4963:4973  msg.sender */\n  caller\n    /* \"contracts/DiamodSafe copy.sol\":4949:4973  bnbReceiver = msg.sender */\n  or\n  swap1\n  sstore\n    /* \"contracts/DiamodSafe copy.sol\":5053:5073  dripRate = _dripRate */\n  0xff\n  swap1\n  swap4\n  and\n  not(0xff)\n    /* \"contracts/DiamodSafe copy.sol\":4820:4854  rewardToken = IERC20(_rewardToken) */\n  swap6\n  swap1\n  swap5\n  and\n  0x0100\n  mul\n  not(sub(shl(0xa8, 0x01), 0x0100))\n  swap1\n  swap2\n  and\n  or\n    /* \"contracts/DiamodSafe copy.sol\":5053:5073  dripRate = _dripRate */\n  swap4\n  swap1\n  swap4\n  and\n  swap2\n  swap1\n  swap2\n  or\n  swap1\n  swap2\n  sstore\n    /* \"contracts/DiamodSafe copy.sol\":5097:5112  block.timestamp */\n  timestamp\n  0x09\n    /* \"contracts/DiamodSafe copy.sol\":5083:5113  lastPayout = (block.timestamp) */\n  sstore\n    /* \"contracts/DiamodSafe copy.sol\":5148:5155  forPool */\n  0x0e\n    /* \"contracts/DiamodSafe copy.sol\":5148:5159  forPool = 2 */\n  sstore\n    /* \"contracts/DiamodSafe copy.sol\":4820:4831  rewardToken */\n  0x01\n    /* \"contracts/DiamodSafe copy.sol\":5169:5176  forDivs */\n  0x0f\n    /* \"contracts/DiamodSafe copy.sol\":5169:5180  forDivs = 1 */\n  dup2\n  swap1\n  sstore\n    /* \"contracts/DiamodSafe copy.sol\":5191:5206  requiredBalance */\n  0x03\n    /* \"contracts/DiamodSafe copy.sol\":5191:5210  requiredBalance = 1 */\n  sstore\n    /* \"contracts/DiamodSafe copy.sol\":237:21655  contract DiamondSafe is Ownable, ReentrancyGuard {... */\n  jump(tag_15)\n    /* \"contracts/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\ntag_8:\n    /* \"contracts/Context.sol\":685:695  msg.sender */\n  caller\n    /* \"contracts/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\n  swap1\n  jump\t// out\n    /* \"contracts/Address.sol\":726:1139  function isContract(address account) internal view returns (bool) {... */\ntag_13:\n    /* \"contracts/Address.sol\":1086:1106  extcodesize(account) */\n  extcodesize\n    /* \"contracts/Address.sol\":1124:1132  size > 0 */\n  iszero\n  iszero\n  swap1\n    /* \"contracts/Address.sol\":726:1139  function isContract(address account) internal view returns (bool) {... */\n  jump\t// out\n    /* \"contracts/DiamodSafe copy.sol\":237:21655  contract DiamondSafe is Ownable, ReentrancyGuard {... */\ntag_15:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/DiamodSafe copy.sol\":237:21655  contract DiamondSafe is Ownable, ReentrancyGuard {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x949e8acd\n      gt\n      tag_47\n      jumpi\n      dup1\n      0xe02e1e9c\n      gt\n      tag_48\n      jumpi\n      dup1\n      0xf69e2046\n      gt\n      tag_49\n      jumpi\n      dup1\n      0xf69e2046\n      eq\n      tag_41\n      jumpi\n      dup1\n      0xf6db0da0\n      eq\n      tag_42\n      jumpi\n      dup1\n      0xf7c618c1\n      eq\n      tag_43\n      jumpi\n      dup1\n      0xfbaf1bbd\n      eq\n      tag_44\n      jumpi\n      dup1\n      0xffaad6a5\n      eq\n      tag_45\n      jumpi\n      dup1\n      0xffe6bbd8\n      eq\n      tag_46\n      jumpi\n      jump(tag_2)\n    tag_49:\n      dup1\n      0xe02e1e9c\n      eq\n      tag_36\n      jumpi\n      dup1\n      0xeedc966a\n      eq\n      tag_37\n      jumpi\n      dup1\n      0xf14faf6f\n      eq\n      tag_38\n      jumpi\n      dup1\n      0xf2020275\n      eq\n      tag_39\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_40\n      jumpi\n      jump(tag_2)\n    tag_48:\n      dup1\n      0xaecb6d28\n      gt\n      tag_50\n      jumpi\n      dup1\n      0xaecb6d28\n      eq\n      tag_30\n      jumpi\n      dup1\n      0xb03cf5a7\n      eq\n      tag_31\n      jumpi\n      dup1\n      0xb6b55f25\n      eq\n      tag_32\n      jumpi\n      dup1\n      0xb9db102a\n      eq\n      tag_33\n      jumpi\n      dup1\n      0xd3261592\n      eq\n      tag_34\n      jumpi\n      dup1\n      0xd7c3771d\n      eq\n      tag_35\n      jumpi\n      jump(tag_2)\n    tag_50:\n      dup1\n      0x949e8acd\n      eq\n      tag_25\n      jumpi\n      dup1\n      0x9d76ea58\n      eq\n      tag_26\n      jumpi\n      dup1\n      0xa01496de\n      eq\n      tag_27\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_28\n      jumpi\n      dup1\n      0xad7a672f\n      eq\n      tag_29\n      jumpi\n      jump(tag_2)\n    tag_47:\n      dup1\n      0x537a39bb\n      gt\n      tag_51\n      jumpi\n      dup1\n      0x7e6335c7\n      gt\n      tag_52\n      jumpi\n      dup1\n      0x7e6335c7\n      eq\n      tag_19\n      jumpi\n      dup1\n      0x8086b8ba\n      eq\n      tag_20\n      jumpi\n      dup1\n      0x81fce645\n      eq\n      tag_21\n      jumpi\n      dup1\n      0x8620410b\n      eq\n      tag_22\n      jumpi\n      dup1\n      0x89375abf\n      eq\n      tag_23\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_24\n      jumpi\n      jump(tag_2)\n    tag_52:\n      dup1\n      0x537a39bb\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x72f702f3\n      eq\n      tag_17\n      jumpi\n      dup1\n      0x7d882097\n      eq\n      tag_18\n      jumpi\n      jump(tag_2)\n    tag_51:\n      dup1\n      0x1f38b9cd\n      gt\n      tag_53\n      jumpi\n      dup1\n      0x1f38b9cd\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x2e1a7d4d\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x36599ead\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x41c61383\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x4641257d\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x4b750334\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_53:\n      dup1\n      0x65318b\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x08560ace\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x10d0ffdd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x1924063e\n      eq\n      tag_7\n      jumpi\n      jump(tag_2)\n    tag_1:\n      jumpi(tag_2, calldatasize)\n        /* \"contracts/DiamodSafe copy.sol\":5404:5415  bnbReceiver */\n      sload(0x05)\n        /* \"contracts/DiamodSafe copy.sol\":5386:5427  Address.sendValue(bnbReceiver, msg.value) */\n      tag_56\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":5404:5415  bnbReceiver */\n      and\n        /* \"contracts/DiamodSafe copy.sol\":5417:5426  msg.value */\n      callvalue\n        /* \"contracts/DiamodSafe copy.sol\":5386:5403  Address.sendValue */\n      tag_57\n        /* \"contracts/DiamodSafe copy.sol\":5386:5427  Address.sendValue(bnbReceiver, msg.value) */\n      jump\t// in\n    tag_56:\n        /* \"contracts/DiamodSafe copy.sol\":5442:5493  onDonateBNB(msg.sender, msg.value, block.timestamp) */\n      0x40\n      dup1\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":5466:5475  msg.value */\n      callvalue\n        /* \"contracts/DiamodSafe copy.sol\":5442:5493  onDonateBNB(msg.sender, msg.value, block.timestamp) */\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":5477:5492  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe copy.sol\":5442:5493  onDonateBNB(msg.sender, msg.value, block.timestamp) */\n      0x20\n      dup3\n      add\n      mstore\n      dup2\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":5454:5464  msg.sender */\n      caller\n      swap3\n        /* \"contracts/DiamodSafe copy.sol\":5442:5493  onDonateBNB(msg.sender, msg.value, block.timestamp) */\n      0x3c2bd1b3f5ca07afb09fbee41ac43da2b98d9c2e9832673052e546bd1d4c091d\n      swap3\n      dup3\n      swap1\n      sub\n      add\n      swap1\n      log2\n        /* \"contracts/DiamodSafe copy.sol\":237:21655  contract DiamondSafe is Ownable, ReentrancyGuard {... */\n      stop\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/DiamodSafe copy.sol\":11162:11402  function dividendsOf(address _user) public view returns (uint256) {... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_58\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_58:\n      pop\n      tag_59\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_60\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_60:\n      pop\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_61\n      jump\t// in\n    tag_59:\n      0x40\n      dup1\n      mload\n      swap2\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/DiamodSafe copy.sol\":587:617  uint256 public requiredBalance */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_62\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_62:\n      pop\n      tag_59\n      tag_64\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":12253:12598  function calculateTokensReceived(... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_65\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_65:\n      pop\n      tag_59\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_67\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_67:\n      pop\n      calldataload\n      tag_68\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":11061:11156  function totalSupply() public view returns (uint256) {... */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_69\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_69:\n      pop\n      tag_59\n      tag_71\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":1731:1760  uint256 public lastRebaseTime */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_72\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_72:\n      pop\n      tag_59\n      tag_74\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":1525:1544  uint public forDivs */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_75\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_75:\n      pop\n      tag_59\n      tag_77\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":8245:9770  function withdraw(uint256 _amount) public onlyHolders {... */\n    tag_9:\n      callvalue\n      dup1\n      iszero\n      tag_78\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_78:\n      pop\n      tag_79\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_80\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_80:\n      pop\n      calldataload\n      tag_81\n      jump\t// in\n    tag_79:\n      stop\n        /* \"contracts/DiamodSafe copy.sol\":10140:10507  function checkImmunity(address _user) public view returns (bool isImmune) {... */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_82\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_82:\n      pop\n      tag_83\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_84\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_84:\n      pop\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_85\n      jump\t// in\n    tag_83:\n      0x40\n      dup1\n      mload\n      swap2\n      iszero\n      iszero\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/DiamodSafe copy.sol\":1102:1125  uint public totalClaims */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_86\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_86:\n      pop\n      tag_59\n      tag_88\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":7333:8223  function harvest() public onlyEarners {... */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_89\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_89:\n      pop\n      tag_79\n      tag_91\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":11408:11674  function sellPrice() public pure  returns (uint256) {... */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_92\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_92:\n      pop\n      tag_59\n      tag_94\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":877:897  uint public totalTxs */\n    tag_14:\n      callvalue\n      dup1\n      iszero\n      tag_95\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_95:\n      pop\n      tag_59\n      tag_97\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":10719:10824  function balanceOf(address _user) public view returns (uint256) {... */\n    tag_15:\n      callvalue\n      dup1\n      iszero\n      tag_98\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_98:\n      pop\n      tag_59\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_100\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_100:\n      pop\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_101\n      jump\t// in\n        /* \"contracts/Ownable.sol\":1710:1855  function renounceOwnership() public virtual onlyOwner {... */\n    tag_16:\n      callvalue\n      dup1\n      iszero\n      tag_102\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_102:\n      pop\n      tag_79\n      tag_104\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":394:420  IERC20 public stakingToken */\n    tag_17:\n      callvalue\n      dup1\n      iszero\n      tag_105\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_105:\n      pop\n      tag_106\n      tag_107\n      jump\t// in\n    tag_106:\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap3\n      and\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/DiamodSafe copy.sol\":1131:1156  uint public totalDeposits */\n    tag_18:\n      callvalue\n      dup1\n      iszero\n      tag_108\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_108:\n      pop\n      tag_59\n      tag_110\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":13612:14021  function setFeeSplit(... */\n    tag_19:\n      callvalue\n      dup1\n      iszero\n      tag_111\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_111:\n      pop\n      tag_83\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_113\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_113:\n      pop\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      calldataload\n      tag_114\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":12604:13201  function accountOf(address _user) public view returns (uint256[14] memory) {... */\n    tag_20:\n      callvalue\n      dup1\n      iszero\n      tag_115\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_115:\n      pop\n      tag_116\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_117\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_117:\n      pop\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_118\n      jump\t// in\n    tag_116:\n      mload(0x40)\n      dup1\n      dup3\n      0x01c0\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_119:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_121\n      jumpi\n      dup2\n      dup2\n      add\n      mload\n      dup4\n      dup3\n      add\n      mstore\n      0x20\n      add\n      jump(tag_119)\n    tag_121:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/DiamodSafe copy.sol\":1641:1692  uint256 public constant payoutFrequency = 2 seconds */\n    tag_21:\n      callvalue\n      dup1\n      iszero\n      tag_122\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_122:\n      pop\n      tag_59\n      tag_124\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":11680:11944  function buyPrice() public pure returns (uint256) {... */\n    tag_22:\n      callvalue\n      dup1\n      iszero\n      tag_125\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_125:\n      pop\n      tag_59\n      tag_127\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":1586:1635  uint256 public constant rebaseFrequency = 6 hours */\n    tag_23:\n      callvalue\n      dup1\n      iszero\n      tag_128\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_128:\n      pop\n      tag_59\n      tag_130\n      jump\t// in\n        /* \"contracts/Ownable.sol\":1078:1163  function owner() public view virtual returns (address) {... */\n    tag_24:\n      callvalue\n      dup1\n      iszero\n      tag_131\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_131:\n      pop\n      tag_106\n      tag_133\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":10513:10608  function myTokens() public view returns (uint256) {... */\n    tag_25:\n      callvalue\n      dup1\n      iszero\n      tag_134\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_134:\n      pop\n      tag_59\n      tag_136\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":699:726  address public tokenAddress */\n    tag_26:\n      callvalue\n      dup1\n      iszero\n      tag_137\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_137:\n      pop\n      tag_106\n      tag_139\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":1500:1519  uint public forPool */\n    tag_27:\n      callvalue\n      dup1\n      iszero\n      tag_140\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_140:\n      pop\n      tag_59\n      tag_142\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":9792:9951  function transfer(... */\n    tag_28:\n      callvalue\n      dup1\n      iszero\n      tag_143\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_143:\n      pop\n      tag_83\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_145\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_145:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      calldataload\n      and\n      swap1\n      0x20\n      add\n      calldataload\n      tag_146\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":10940:11055  function totalBalance() public view returns (uint256) {... */\n    tag_29:\n      callvalue\n      dup1\n      iszero\n      tag_147\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_147:\n      pop\n      tag_59\n      tag_149\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":1213:1240  uint public dripPoolBalance */\n    tag_30:\n      callvalue\n      dup1\n      iszero\n      tag_150\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_150:\n      pop\n      tag_59\n      tag_152\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":772:793  IERC721[] public jpeg */\n    tag_31:\n      callvalue\n      dup1\n      iszero\n      tag_153\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_153:\n      pop\n      tag_106\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_155\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_155:\n      pop\n      calldataload\n      tag_156\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":6242:6352  function deposit(uint _amount) public returns (uint256) {... */\n    tag_32:\n      callvalue\n      dup1\n      iszero\n      tag_157\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_157:\n      pop\n      tag_59\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_159\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_159:\n      pop\n      calldataload\n      tag_160\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":975:997  uint public lastPayout */\n    tag_33:\n      callvalue\n      dup1\n      iszero\n      tag_161\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_161:\n      pop\n      tag_59\n      tag_163\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":1246:1267  uint8 public dripRate */\n    tag_34:\n      callvalue\n      dup1\n      iszero\n      tag_164\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_164:\n      pop\n      tag_165\n      tag_166\n      jump\t// in\n    tag_165:\n      0x40\n      dup1\n      mload\n      0xff\n      swap1\n      swap3\n      and\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/DiamodSafe copy.sol\":732:766  address payable public bnbReceiver */\n    tag_35:\n      callvalue\n      dup1\n      iszero\n      tag_167\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_167:\n      pop\n      tag_106\n      tag_169\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":11950:12247  function calculateSharesReceived(... */\n    tag_36:\n      callvalue\n      dup1\n      iszero\n      tag_170\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_170:\n      pop\n      tag_59\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_172\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_172:\n      pop\n      calldataload\n      tag_173\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":10830:10934  function tokenBalance(address _user) public view returns (uint256) {... */\n    tag_37:\n      callvalue\n      dup1\n      iszero\n      tag_174\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_174:\n      pop\n      tag_59\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_176\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_176:\n      pop\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_177\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":5646:6221  function donate(uint _amount) public returns (uint256) {... */\n    tag_38:\n      callvalue\n      dup1\n      iszero\n      tag_178\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_178:\n      pop\n      tag_59\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_180\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_180:\n      pop\n      calldataload\n      tag_181\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":854:871  uint public users */\n    tag_39:\n      callvalue\n      dup1\n      iszero\n      tag_182\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_182:\n      pop\n      tag_59\n      tag_184\n      jump\t// in\n        /* \"contracts/Ownable.sol\":2004:2244  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_40:\n      callvalue\n      dup1\n      iszero\n      tag_185\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_185:\n      pop\n      tag_79\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_187\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_187:\n      pop\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_188\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":7239:7312  function compound() public onlyEarners {... */\n    tag_41:\n      callvalue\n      dup1\n      iszero\n      tag_189\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_189:\n      pop\n      tag_79\n      tag_191\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":14083:14607  function setImmunityToken(... */\n    tag_42:\n      callvalue\n      dup1\n      iszero\n      tag_192\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_192:\n      pop\n      tag_83\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_194\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_194:\n      dup2\n      add\n      swap1\n      0x20\n      dup2\n      add\n      dup2\n      calldataload\n      0x0100000000\n      dup2\n      gt\n      iszero\n      tag_195\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_195:\n      dup3\n      add\n      dup4\n      0x20\n      dup3\n      add\n      gt\n      iszero\n      tag_196\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_196:\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap2\n      dup5\n      0x20\n      dup4\n      mul\n      dup5\n      add\n      gt\n      0x0100000000\n      dup4\n      gt\n      or\n      iszero\n      tag_197\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_197:\n      swap2\n      swap1\n      dup1\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      0x20\n      mul\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      pop\n      swap3\n      swap6\n      pop\n      tag_198\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":1273:1298  IERC20 public rewardToken */\n    tag_43:\n      callvalue\n      dup1\n      iszero\n      tag_199\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_199:\n      pop\n      tag_106\n      tag_201\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":13207:13490  function dailyEstimate(address _user) public view returns (uint256) {... */\n    tag_44:\n      callvalue\n      dup1\n      iszero\n      tag_202\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_202:\n      pop\n      tag_59\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_204\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_204:\n      pop\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_205\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":6375:7217  function depositTo(address _user, uint _amount) public returns (uint256) {... */\n    tag_45:\n      callvalue\n      dup1\n      iszero\n      tag_206\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_206:\n      pop\n      tag_59\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_208\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_208:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      calldataload\n      and\n      swap1\n      0x20\n      add\n      calldataload\n      tag_209\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":10614:10713  function myEarnings() public view returns (uint256) {... */\n    tag_46:\n      callvalue\n      dup1\n      iszero\n      tag_210\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_210:\n      pop\n      tag_59\n      tag_212\n      jump\t// in\n        /* \"contracts/Address.sol\":2056:2447  function sendValue(address payable recipient, uint256 amount) internal {... */\n    tag_57:\n        /* \"contracts/Address.sol\":2170:2176  amount */\n      dup1\n        /* \"contracts/Address.sol\":2145:2166  address(this).balance */\n      selfbalance\n        /* \"contracts/Address.sol\":2145:2176  address(this).balance >= amount */\n      lt\n      iszero\n        /* \"contracts/Address.sol\":2137:2210  require(address(this).balance >= amount, \"Address: insufficient balance\") */\n      tag_215\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1d\n      0x24\n      dup3\n      add\n      mstore\n      0x416464726573733a20696e73756666696369656e742062616c616e6365000000\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_215:\n        /* \"contracts/Address.sol\":2317:2352  recipient.call{ value: amount }(\"\") */\n      mload(0x40)\n        /* \"contracts/Address.sol\":2299:2311  bool success */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Address.sol\":2317:2331  recipient.call */\n      dup5\n      and\n      swap1\n        /* \"contracts/Address.sol\":2340:2346  amount */\n      dup4\n      swap1\n        /* \"contracts/Address.sol\":2299:2311  bool success */\n      dup4\n        /* \"contracts/Address.sol\":2317:2352  recipient.call{ value: amount }(\"\") */\n      dup2\n        /* \"contracts/Address.sol\":2299:2311  bool success */\n      dup2\n        /* \"contracts/Address.sol\":2317:2352  recipient.call{ value: amount }(\"\") */\n      dup2\n        /* \"contracts/Address.sol\":2340:2346  amount */\n      dup6\n        /* \"contracts/Address.sol\":2317:2331  recipient.call */\n      dup8\n        /* \"contracts/Address.sol\":2317:2352  recipient.call{ value: amount }(\"\") */\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_218\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_217)\n    tag_218:\n      0x60\n      swap2\n      pop\n    tag_217:\n      pop\n        /* \"contracts/Address.sol\":2298:2352  (bool success, ) = recipient.call{ value: amount }(\"\") */\n      pop\n      swap1\n      pop\n        /* \"contracts/Address.sol\":2370:2377  success */\n      dup1\n        /* \"contracts/Address.sol\":2362:2440  require(success, \"Address: unable to send value, recipient may have reverted\") */\n      tag_219\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x3a\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae\n      0x3a\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_219:\n        /* \"contracts/Address.sol\":2056:2447  function sendValue(address payable recipient, uint256 amount) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":11162:11402  function dividendsOf(address _user) public view returns (uint256) {... */\n    tag_61:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":11352:11369  payoutsOf_[_user] */\n      dup2\n      and\n        /* \"contracts/DiamodSafe copy.sol\":11219:11226  uint256 */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":11352:11369  payoutsOf_[_user] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":11352:11362  payoutsOf_ */\n      0x13\n        /* \"contracts/DiamodSafe copy.sol\":11352:11369  payoutsOf_[_user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":11311:11321  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe copy.sol\":11311:11328  balanceOf_[_user] */\n      swap1\n      swap3\n      mstore\n      dup3\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":11293:11308  profitPerShare_ */\n      sload(0x12)\n      shl(0x40, 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":1425:1432  2 ** 64 */\n      swap3\n        /* \"contracts/DiamodSafe copy.sol\":11293:11328  profitPerShare_ * balanceOf_[_user] */\n      swap2\n      mul\n        /* \"contracts/DiamodSafe copy.sol\":11284:11369  (int256)(profitPerShare_ * balanceOf_[_user]) -... */\n      sub\n        /* \"contracts/DiamodSafe copy.sol\":11257:11395  (uint256)(... */\n      div\n        /* \"contracts/DiamodSafe copy.sol\":11238:11395  return... */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":11162:11402  function dividendsOf(address _user) public view returns (uint256) {... */\n    tag_220:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":587:617  uint256 public requiredBalance */\n    tag_64:\n      sload(0x03)\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":12253:12598  function calculateTokensReceived(... */\n    tag_68:\n        /* \"contracts/DiamodSafe copy.sol\":12338:12345  uint256 */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":12376:12394  currentTotalStaked */\n      sload(0x11)\n        /* \"contracts/DiamodSafe copy.sol\":12365:12372  _amount */\n      dup3\n        /* \"contracts/DiamodSafe copy.sol\":12365:12394  _amount <= currentTotalStaked */\n      gt\n      iszero\n        /* \"contracts/DiamodSafe copy.sol\":12357:12395  require(_amount <= currentTotalStaked) */\n      tag_223\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_223:\n        /* \"contracts/DiamodSafe copy.sol\":12423:12430  _amount */\n      dup2\n        /* \"contracts/DiamodSafe copy.sol\":12405:12420  uint256 _tokens */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":12458:12507  SafeMath.div(SafeMath.mul(_tokens, divsFee), 100) */\n      tag_224\n        /* \"contracts/DiamodSafe copy.sol\":12471:12501  SafeMath.mul(_tokens, divsFee) */\n      tag_225\n        /* \"contracts/DiamodSafe copy.sol\":12423:12430  _amount */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":1380:1381  3 */\n      0x03\n        /* \"contracts/DiamodSafe copy.sol\":12471:12483  SafeMath.mul */\n      tag_226\n        /* \"contracts/DiamodSafe copy.sol\":12471:12501  SafeMath.mul(_tokens, divsFee) */\n      jump\t// in\n    tag_225:\n        /* \"contracts/DiamodSafe copy.sol\":12503:12506  100 */\n      0x64\n        /* \"contracts/DiamodSafe copy.sol\":12458:12470  SafeMath.div */\n      tag_227\n        /* \"contracts/DiamodSafe copy.sol\":12458:12507  SafeMath.div(SafeMath.mul(_tokens, divsFee), 100) */\n      jump\t// in\n    tag_224:\n        /* \"contracts/DiamodSafe copy.sol\":12440:12507  uint256 _divies = SafeMath.div(SafeMath.mul(_tokens, divsFee), 100) */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":12517:12533  uint256 _remains */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":12536:12566  SafeMath.sub(_tokens, _divies) */\n      tag_228\n        /* \"contracts/DiamodSafe copy.sol\":12549:12556  _tokens */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":12558:12565  _divies */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":12536:12548  SafeMath.sub */\n      tag_229\n        /* \"contracts/DiamodSafe copy.sol\":12536:12566  SafeMath.sub(_tokens, _divies) */\n      jump\t// in\n    tag_228:\n        /* \"contracts/DiamodSafe copy.sol\":12517:12566  uint256 _remains = SafeMath.sub(_tokens, _divies) */\n      swap6\n        /* \"contracts/DiamodSafe copy.sol\":12253:12598  function calculateTokensReceived(... */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":11061:11156  function totalSupply() public view returns (uint256) {... */\n    tag_71:\n        /* \"contracts/DiamodSafe copy.sol\":11131:11149  currentTotalStaked */\n      sload(0x11)\n        /* \"contracts/DiamodSafe copy.sol\":11061:11156  function totalSupply() public view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":1731:1760  uint256 public lastRebaseTime */\n    tag_74:\n      sload(0x10)\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":1525:1544  uint public forDivs */\n    tag_77:\n      sload(0x0f)\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":8245:9770  function withdraw(uint256 _amount) public onlyHolders {... */\n    tag_81:\n        /* \"contracts/DiamodSafe copy.sol\":2136:2137  0 */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":2123:2133  myTokens() */\n      tag_232\n        /* \"contracts/DiamodSafe copy.sol\":2123:2131  myTokens */\n      tag_136\n        /* \"contracts/DiamodSafe copy.sol\":2123:2133  myTokens() */\n      jump\t// in\n    tag_232:\n        /* \"contracts/DiamodSafe copy.sol\":2123:2137  myTokens() > 0 */\n      gt\n        /* \"contracts/DiamodSafe copy.sol\":2115:2138  require(myTokens() > 0) */\n      tag_233\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_233:\n        /* \"contracts/DiamodSafe copy.sol\":8325:8335  msg.sender */\n      caller\n        /* \"contracts/DiamodSafe copy.sol\":8309:8322  address _user */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":8364:8381  balanceOf_[_user] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":8364:8374  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe copy.sol\":8364:8381  balanceOf_[_user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":8353:8381  _amount <= balanceOf_[_user] */\n      dup3\n      gt\n      iszero\n        /* \"contracts/DiamodSafe copy.sol\":8345:8382  require(_amount <= balanceOf_[_user]) */\n      tag_235\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_235:\n        /* \"contracts/DiamodSafe copy.sol\":8393:8420  uint256 _undividedDividends */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":8456:8459  100 */\n      0x64\n        /* \"contracts/DiamodSafe copy.sol\":8423:8453  SafeMath.mul(_amount, divsFee) */\n      tag_236\n        /* \"contracts/DiamodSafe copy.sol\":8436:8443  _amount */\n      dup5\n        /* \"contracts/DiamodSafe copy.sol\":1380:1381  3 */\n      0x03\n        /* \"contracts/DiamodSafe copy.sol\":8423:8435  SafeMath.mul */\n      tag_226\n        /* \"contracts/DiamodSafe copy.sol\":8423:8453  SafeMath.mul(_amount, divsFee) */\n      jump\t// in\n    tag_236:\n        /* \"contracts/DiamodSafe copy.sol\":8423:8459  SafeMath.mul(_amount, divsFee) / 100 */\n      dup2\n      tag_237\n      jumpi\n      invalid\n    tag_237:\n      div\n        /* \"contracts/DiamodSafe copy.sol\":8393:8459  uint256 _undividedDividends = SafeMath.mul(_amount, divsFee) / 100 */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":8486:8499  bool isImmune */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":8502:8527  checkImmunity(msg.sender) */\n      tag_238\n        /* \"contracts/DiamodSafe copy.sol\":8516:8526  msg.sender */\n      caller\n        /* \"contracts/DiamodSafe copy.sol\":8502:8515  checkImmunity */\n      tag_85\n        /* \"contracts/DiamodSafe copy.sol\":8502:8527  checkImmunity(msg.sender) */\n      jump\t// in\n    tag_238:\n        /* \"contracts/DiamodSafe copy.sol\":8486:8527  bool isImmune = checkImmunity(msg.sender) */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":8567:8575  isImmune */\n      dup1\n        /* \"contracts/DiamodSafe copy.sol\":8563:8692  if (isImmune) {... */\n      iszero\n      tag_239\n      jumpi\n        /* \"contracts/DiamodSafe copy.sol\":8675:8676  0 */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":8653:8676  _undividedDividends = 0 */\n      swap2\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":8563:8692  if (isImmune) {... */\n    tag_239:\n        /* \"contracts/DiamodSafe copy.sol\":8756:8777  uint256  _taxedTokens */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":8780:8822  SafeMath.sub(_amount, _undividedDividends) */\n      tag_240\n        /* \"contracts/DiamodSafe copy.sol\":8793:8800  _amount */\n      dup6\n        /* \"contracts/DiamodSafe copy.sol\":8802:8821  _undividedDividends */\n      dup5\n        /* \"contracts/DiamodSafe copy.sol\":8780:8792  SafeMath.sub */\n      tag_229\n        /* \"contracts/DiamodSafe copy.sol\":8780:8822  SafeMath.sub(_amount, _undividedDividends) */\n      jump\t// in\n    tag_240:\n        /* \"contracts/DiamodSafe copy.sol\":8756:8822  uint256  _taxedTokens = SafeMath.sub(_amount, _undividedDividends) */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":8853:8894  SafeMath.sub(currentTotalStaked, _amount) */\n      tag_241\n        /* \"contracts/DiamodSafe copy.sol\":8866:8884  currentTotalStaked */\n      sload(0x11)\n        /* \"contracts/DiamodSafe copy.sol\":8886:8893  _amount */\n      dup7\n        /* \"contracts/DiamodSafe copy.sol\":8853:8865  SafeMath.sub */\n      tag_229\n        /* \"contracts/DiamodSafe copy.sol\":8853:8894  SafeMath.sub(currentTotalStaked, _amount) */\n      jump\t// in\n    tag_241:\n        /* \"contracts/DiamodSafe copy.sol\":8832:8850  currentTotalStaked */\n      0x11\n        /* \"contracts/DiamodSafe copy.sol\":8832:8894  currentTotalStaked = SafeMath.sub(currentTotalStaked, _amount) */\n      sstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":8937:8954  balanceOf_[_user] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":8937:8947  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe copy.sol\":8937:8954  balanceOf_[_user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":8924:8964  SafeMath.sub(balanceOf_[_user], _amount) */\n      tag_242\n      swap1\n        /* \"contracts/DiamodSafe copy.sol\":8956:8963  _amount */\n      dup7\n        /* \"contracts/DiamodSafe copy.sol\":8924:8936  SafeMath.sub */\n      tag_229\n        /* \"contracts/DiamodSafe copy.sol\":8924:8964  SafeMath.sub(balanceOf_[_user], _amount) */\n      jump\t// in\n    tag_242:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":8904:8921  balanceOf_[_user] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":8904:8914  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe copy.sol\":8904:8921  balanceOf_[_user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":8904:8964  balanceOf_[_user] = SafeMath.sub(balanceOf_[_user], _amount) */\n      swap4\n      swap1\n      swap4\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":9093:9108  profitPerShare_ */\n      sload(0x12)\n        /* \"contracts/DiamodSafe copy.sol\":9167:9177  payoutsOf_ */\n      0x13\n        /* \"contracts/DiamodSafe copy.sol\":9167:9184  payoutsOf_[_user] */\n      swap1\n      swap2\n      mstore\n      swap2\n      swap1\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":9167:9203  payoutsOf_[_user] -= _updatedPayouts */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":9093:9118  profitPerShare_ * _amount */\n      swap2\n      dup8\n      mul\n      shl(0x40, 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":9122:9146  _taxedTokens * magnitude */\n      dup5\n      mul\n        /* \"contracts/DiamodSafe copy.sol\":9093:9147  profitPerShare_ * _amount + (_taxedTokens * magnitude) */\n      add\n        /* \"contracts/DiamodSafe copy.sol\":9167:9203  payoutsOf_[_user] -= _updatedPayouts */\n      swap2\n      dup3\n      swap1\n      sub\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":9284:9317  allocateFees(_undividedDividends) */\n      tag_243\n        /* \"contracts/DiamodSafe copy.sol\":9297:9316  _undividedDividends */\n      dup5\n        /* \"contracts/DiamodSafe copy.sol\":9284:9296  allocateFees */\n      tag_244\n        /* \"contracts/DiamodSafe copy.sol\":9284:9317  allocateFees(_undividedDividends) */\n      jump\t// in\n    tag_243:\n        /* \"contracts/DiamodSafe copy.sol\":9389:9446  onWithdraw(_user, _amount, _taxedTokens, block.timestamp) */\n      0x40\n      dup1\n      mload\n      dup8\n      dup2\n      mstore\n      0x20\n      dup2\n      add\n      dup5\n      swap1\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":9430:9445  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe copy.sol\":9389:9446  onWithdraw(_user, _amount, _taxedTokens, block.timestamp) */\n      dup2\n      dup4\n      add\n      mstore\n      swap1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup8\n      and\n      swap2\n      0x90ebb005d68efee044927e1e77e1fd0cecc508368aa72c39250a787eed5f0a70\n      swap2\n      swap1\n      dup2\n      swap1\n      sub\n      0x60\n      add\n      swap1\n      log2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":9499:9678  onUpdate(... */\n      dup6\n      and\n        /* \"contracts/DiamodSafe copy.sol\":9540:9557  accountOf_[_user] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":9540:9550  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe copy.sol\":9540:9557  accountOf_[_user] */\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":9540:9567  accountOf_[_user].deposited */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":9581:9591  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe copy.sol\":9581:9598  balanceOf_[_user] */\n      dup5\n      mstore\n      swap5\n      dup3\n      swap1\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":9612:9629  accountOf_[_user] */\n      swap4\n      dup4\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":9612:9639  accountOf_[_user].withdrawn */\n      0x02\n      add\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":9499:9678  onUpdate(... */\n      dup2\n      mload\n      swap5\n      dup6\n      mstore\n      swap2\n      dup5\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      dup3\n      dup3\n      add\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":9653:9668  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe copy.sol\":9499:9678  onUpdate(... */\n      0x60\n      dup4\n      add\n      mstore\n      mload\n      0x00\n      dup1\n      mload\n      0x20\n      data_27cc9c295b15a532bb1b5f9308f1d54813e694c2ebdd1c2ced210bfe52dcd57e\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      swap2\n      dup2\n      swap1\n      sub\n      0x80\n      add\n      swap1\n      log2\n        /* \"contracts/DiamodSafe copy.sol\":9747:9759  distribute() */\n      tag_245\n        /* \"contracts/DiamodSafe copy.sol\":9747:9757  distribute */\n      tag_246\n        /* \"contracts/DiamodSafe copy.sol\":9747:9759  distribute() */\n      jump\t// in\n    tag_245:\n        /* \"contracts/DiamodSafe copy.sol\":2148:2149  _ */\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":8245:9770  function withdraw(uint256 _amount) public onlyHolders {... */\n      pop\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":10140:10507  function checkImmunity(address _user) public view returns (bool isImmune) {... */\n    tag_85:\n        /* \"contracts/DiamodSafe copy.sol\":10199:10212  bool isImmune */\n      0x00\n      dup1\n      dup1\n      dup1\n        /* \"contracts/DiamodSafe copy.sol\":10274:10409  for(uint i =0; i < jpeg.length; i++){... */\n    tag_248:\n        /* \"contracts/DiamodSafe copy.sol\":10293:10297  jpeg */\n      0x06\n        /* \"contracts/DiamodSafe copy.sol\":10293:10304  jpeg.length */\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":10289:10304  i < jpeg.length */\n      dup2\n      lt\n        /* \"contracts/DiamodSafe copy.sol\":10274:10409  for(uint i =0; i < jpeg.length; i++){... */\n      iszero\n      tag_249\n      jumpi\n        /* \"contracts/DiamodSafe copy.sol\":10344:10348  jpeg */\n      0x06\n        /* \"contracts/DiamodSafe copy.sol\":10349:10350  i */\n      dup2\n        /* \"contracts/DiamodSafe copy.sol\":10344:10351  jpeg[i] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_251\n      jumpi\n      invalid\n    tag_251:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap2\n      dup3\n      swap1\n      keccak256\n      add\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":10372:10398  jpegTest1.balanceOf(_user) */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n      dup10\n      dup2\n      and\n      0x04\n      dup4\n      add\n      mstore\n      swap2\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":10344:10351  jpeg[i] */\n      swap2\n      swap1\n      swap3\n      and\n      swap5\n      pop\n      dup5\n      swap3\n        /* \"contracts/DiamodSafe copy.sol\":10372:10391  jpegTest1.balanceOf */\n      0x70a08231\n      swap3\n        /* \"contracts/DiamodSafe copy.sol\":10372:10398  jpegTest1.balanceOf(_user) */\n      0x24\n      dup1\n      dup3\n      add\n      swap4\n      swap2\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"contracts/DiamodSafe copy.sol\":10344:10351  jpeg[i] */\n      dup7\n        /* \"contracts/DiamodSafe copy.sol\":10372:10398  jpegTest1.balanceOf(_user) */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_253\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_253:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_255\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_255:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_256\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_256:\n      pop\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":10367:10398  x += jpegTest1.balanceOf(_user) */\n      swap3\n      swap1\n      swap3\n      add\n      swap2\n        /* \"contracts/DiamodSafe copy.sol\":10306:10309  i++ */\n      0x01\n      add\n        /* \"contracts/DiamodSafe copy.sol\":10274:10409  for(uint i =0; i < jpeg.length; i++){... */\n      jump(tag_248)\n    tag_249:\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":10426:10441  requiredBalance */\n      sload(0x03)\n        /* \"contracts/DiamodSafe copy.sol\":10421:10422  x */\n      dup3\n        /* \"contracts/DiamodSafe copy.sol\":10421:10441  x >= requiredBalance */\n      lt\n        /* \"contracts/DiamodSafe copy.sol\":10417:10479  if (x >= requiredBalance) {... */\n      tag_257\n      jumpi\n        /* \"contracts/DiamodSafe copy.sol\":10464:10468  true */\n      0x01\n        /* \"contracts/DiamodSafe copy.sol\":10457:10468  return true */\n      swap3\n      pop\n      pop\n      pop\n      jump(tag_220)\n        /* \"contracts/DiamodSafe copy.sol\":10417:10479  if (x >= requiredBalance) {... */\n    tag_257:\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":10495:10500  false */\n      0x00\n      swap4\n        /* \"contracts/DiamodSafe copy.sol\":10140:10507  function checkImmunity(address _user) public view returns (bool isImmune) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":1102:1125  uint public totalClaims */\n    tag_88:\n      sload(0x0a)\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":7333:8223  function harvest() public onlyEarners {... */\n    tag_91:\n        /* \"contracts/DiamodSafe copy.sol\":2271:2272  0 */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":2256:2268  myEarnings() */\n      tag_259\n        /* \"contracts/DiamodSafe copy.sol\":2256:2266  myEarnings */\n      tag_212\n        /* \"contracts/DiamodSafe copy.sol\":2256:2268  myEarnings() */\n      jump\t// in\n    tag_259:\n        /* \"contracts/DiamodSafe copy.sol\":2256:2272  myEarnings() > 0 */\n      gt\n        /* \"contracts/DiamodSafe copy.sol\":2248:2273  require(myEarnings() > 0) */\n      tag_260\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_260:\n        /* \"contracts/DiamodSafe copy.sol\":7397:7407  msg.sender */\n      caller\n        /* \"contracts/DiamodSafe copy.sol\":7381:7394  address _user */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":7438:7450  myEarnings() */\n      tag_262\n        /* \"contracts/DiamodSafe copy.sol\":7438:7448  myEarnings */\n      tag_212\n        /* \"contracts/DiamodSafe copy.sol\":7438:7450  myEarnings() */\n      jump\t// in\n    tag_262:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":7544:7561  payoutsOf_[_user] */\n      dup1\n      dup5\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":7544:7554  payoutsOf_ */\n      0x13\n        /* \"contracts/DiamodSafe copy.sol\":7544:7561  payoutsOf_[_user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":7544:7597  payoutsOf_[_user] += (int256)(_dividends * magnitude) */\n      dup1\n      sload\n      shl(0x40, 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":7574:7596  _dividends * magnitude */\n      dup9\n      mul\n        /* \"contracts/DiamodSafe copy.sol\":7544:7597  payoutsOf_[_user] += (int256)(_dividends * magnitude) */\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":7661:7673  stakingToken */\n      sload(0x02)\n        /* \"contracts/DiamodSafe copy.sol\":7661:7701  stakingToken.transfer(_user, _dividends) */\n      dup2\n      mload\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n      swap6\n      swap1\n      swap6\n      mstore\n      0x24\n      dup6\n      add\n      dup8\n      swap1\n      mstore\n      swap1\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":7417:7450  uint256 _dividends = myEarnings() */\n      swap6\n      swap7\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":7661:7673  stakingToken */\n      swap1\n      swap4\n      and\n      swap4\n        /* \"contracts/DiamodSafe copy.sol\":7661:7682  stakingToken.transfer */\n      0xa9059cbb\n      swap4\n        /* \"contracts/DiamodSafe copy.sol\":7661:7701  stakingToken.transfer(_user, _dividends) */\n      0x44\n      dup1\n      dup6\n      add\n      swap5\n        /* \"contracts/DiamodSafe copy.sol\":7544:7561  payoutsOf_[_user] */\n      swap2\n      swap4\n        /* \"contracts/DiamodSafe copy.sol\":7661:7701  stakingToken.transfer(_user, _dividends) */\n      swap2\n      dup4\n      swap1\n      sub\n      add\n      swap1\n      dup3\n      swap1\n        /* \"contracts/DiamodSafe copy.sol\":7661:7673  stakingToken */\n      dup8\n        /* \"contracts/DiamodSafe copy.sol\":7661:7701  stakingToken.transfer(_user, _dividends) */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_263\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_263:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_265\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_265:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_266\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_266:\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":7832:7849  accountOf_[_user] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":7832:7842  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe copy.sol\":7661:7701  stakingToken.transfer(_user, _dividends) */\n      0x20\n        /* \"contracts/DiamodSafe copy.sol\":7832:7849  accountOf_[_user] */\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":7832:7859  accountOf_[_user].withdrawn */\n      0x02\n      add\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":7806:7893  SafeMath.add(... */\n      tag_267\n      swap1\n        /* \"contracts/DiamodSafe copy.sol\":7873:7883  _dividends */\n      dup3\n        /* \"contracts/DiamodSafe copy.sol\":7806:7818  SafeMath.add */\n      tag_268\n        /* \"contracts/DiamodSafe copy.sol\":7806:7893  SafeMath.add(... */\n      jump\t// in\n    tag_267:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":7776:7793  accountOf_[_user] */\n      dup4\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":7776:7786  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe copy.sol\":7776:7793  accountOf_[_user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":7776:7803  accountOf_[_user].withdrawn */\n      0x02\n      dup2\n      add\n        /* \"contracts/DiamodSafe copy.sol\":7776:7893  accountOf_[_user].withdrawn = SafeMath.add(... */\n      swap5\n      swap1\n      swap5\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":7903:7931  accountOf_[_user].xWithdrawn */\n      0x0c\n      swap1\n      swap4\n      add\n        /* \"contracts/DiamodSafe copy.sol\":7903:7936  accountOf_[_user].xWithdrawn += 1 */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":7935:7936  1 */\n      0x01\n        /* \"contracts/DiamodSafe copy.sol\":7903:7936  accountOf_[_user].xWithdrawn += 1 */\n      swap1\n      dup2\n      add\n      swap1\n      swap2\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":7993:8001  totalTxs */\n      0x08\n        /* \"contracts/DiamodSafe copy.sol\":7993:8006  totalTxs += 1 */\n      dup1\n      sload\n      swap1\n      swap2\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":8016:8027  totalClaims */\n      0x0a\n        /* \"contracts/DiamodSafe copy.sol\":8016:8041  totalClaims += _dividends */\n      dup1\n      sload\n      dup6\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":8088:8134  onWithdraw(_user, _dividends, block.timestamp) */\n      dup1\n      mload\n      dup5\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":8118:8133  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe copy.sol\":8088:8134  onWithdraw(_user, _dividends, block.timestamp) */\n      swap4\n      dup2\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      dup1\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":7776:7793  accountOf_[_user] */\n      swap2\n      swap3\n        /* \"contracts/DiamodSafe copy.sol\":8088:8134  onWithdraw(_user, _dividends, block.timestamp) */\n      0x1b091269e929df55d64d6ea7e9cadbe4fb38dce5ccdc995767bc515030dbfbbf\n      swap3\n      swap1\n      dup2\n      swap1\n      sub\n      swap1\n      swap2\n      add\n      swap1\n      log2\n        /* \"contracts/DiamodSafe copy.sol\":8204:8216  distribute() */\n      tag_269\n        /* \"contracts/DiamodSafe copy.sol\":8204:8214  distribute */\n      tag_246\n        /* \"contracts/DiamodSafe copy.sol\":8204:8216  distribute() */\n      jump\t// in\n    tag_269:\n        /* \"contracts/DiamodSafe copy.sol\":2283:2284  _ */\n      pop\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":7333:8223  function harvest() public onlyEarners {... */\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":11408:11674  function sellPrice() public pure  returns (uint256) {... */\n    tag_94:\n        /* \"contracts/DiamodSafe copy.sol\":11451:11458  uint256 */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":11488:11492  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/DiamodSafe copy.sol\":11451:11458  uint256 */\n      dup2\n        /* \"contracts/DiamodSafe copy.sol\":11523:11572  SafeMath.div(SafeMath.mul(_tokens, divsFee), 100) */\n      tag_271\n        /* \"contracts/DiamodSafe copy.sol\":11536:11566  SafeMath.mul(_tokens, divsFee) */\n      tag_225\n        /* \"contracts/DiamodSafe copy.sol\":11488:11492  1e18 */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":1380:1381  3 */\n      0x03\n        /* \"contracts/DiamodSafe copy.sol\":11536:11548  SafeMath.mul */\n      tag_226\n        /* \"contracts/DiamodSafe copy.sol\":11536:11566  SafeMath.mul(_tokens, divsFee) */\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":11523:11572  SafeMath.div(SafeMath.mul(_tokens, divsFee), 100) */\n    tag_271:\n        /* \"contracts/DiamodSafe copy.sol\":11502:11572  uint256 _dividends = SafeMath.div(SafeMath.mul(_tokens, divsFee), 100) */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":11582:11602  uint256 _taxedTokens */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":11605:11638  SafeMath.sub(_tokens, _dividends) */\n      tag_273\n        /* \"contracts/DiamodSafe copy.sol\":11618:11625  _tokens */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":11627:11637  _dividends */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":11605:11617  SafeMath.sub */\n      tag_229\n        /* \"contracts/DiamodSafe copy.sol\":11605:11638  SafeMath.sub(_tokens, _dividends) */\n      jump\t// in\n    tag_273:\n        /* \"contracts/DiamodSafe copy.sol\":11582:11638  uint256 _taxedTokens = SafeMath.sub(_tokens, _dividends) */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":11408:11674  function sellPrice() public pure  returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":877:897  uint public totalTxs */\n    tag_97:\n      sload(0x08)\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":10719:10824  function balanceOf(address _user) public view returns (uint256) {... */\n    tag_101:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":10800:10817  balanceOf_[_user] */\n      and\n        /* \"contracts/DiamodSafe copy.sol\":10774:10781  uint256 */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":10800:10817  balanceOf_[_user] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":10800:10810  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe copy.sol\":10800:10817  balanceOf_[_user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"contracts/DiamodSafe copy.sol\":10719:10824  function balanceOf(address _user) public view returns (uint256) {... */\n      jump\t// out\n        /* \"contracts/Ownable.sol\":1710:1855  function renounceOwnership() public virtual onlyOwner {... */\n    tag_104:\n        /* \"contracts/Ownable.sol\":1301:1313  _msgSender() */\n      tag_276\n        /* \"contracts/Ownable.sol\":1301:1311  _msgSender */\n      tag_277\n        /* \"contracts/Ownable.sol\":1301:1313  _msgSender() */\n      jump\t// in\n    tag_276:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Ownable.sol\":1290:1313  owner() == _msgSender() */\n      and\n        /* \"contracts/Ownable.sol\":1290:1297  owner() */\n      tag_278\n        /* \"contracts/Ownable.sol\":1290:1295  owner */\n      tag_133\n        /* \"contracts/Ownable.sol\":1290:1297  owner() */\n      jump\t// in\n    tag_278:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Ownable.sol\":1290:1313  owner() == _msgSender() */\n      and\n      eq\n        /* \"contracts/Ownable.sol\":1282:1350  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_279\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_279:\n        /* \"contracts/Ownable.sol\":1816:1817  0 */\n      0x00\n        /* \"contracts/Ownable.sol\":1800:1806  _owner */\n      dup1\n      sload\n        /* \"contracts/Ownable.sol\":1779:1819  OwnershipTransferred(_owner, address(0)) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Ownable.sol\":1800:1806  _owner */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/Ownable.sol\":1779:1819  OwnershipTransferred(_owner, address(0)) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"contracts/Ownable.sol\":1816:1817  0 */\n      dup4\n      swap1\n        /* \"contracts/Ownable.sol\":1779:1819  OwnershipTransferred(_owner, address(0)) */\n      log3\n        /* \"contracts/Ownable.sol\":1846:1847  0 */\n      0x00\n        /* \"contracts/Ownable.sol\":1829:1848  _owner = address(0) */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      swap1\n      sstore\n        /* \"contracts/Ownable.sol\":1710:1855  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":394:420  IERC20 public stakingToken */\n    tag_107:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":1131:1156  uint public totalDeposits */\n    tag_110:\n      sload(0x0b)\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":13612:14021  function setFeeSplit(... */\n    tag_114:\n        /* \"contracts/DiamodSafe copy.sol\":13711:13724  bool _success */\n      0x00\n        /* \"contracts/Ownable.sol\":1301:1313  _msgSender() */\n      tag_282\n        /* \"contracts/Ownable.sol\":1301:1311  _msgSender */\n      tag_277\n        /* \"contracts/Ownable.sol\":1301:1313  _msgSender() */\n      jump\t// in\n    tag_282:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Ownable.sol\":1290:1313  owner() == _msgSender() */\n      and\n        /* \"contracts/Ownable.sol\":1290:1297  owner() */\n      tag_283\n        /* \"contracts/Ownable.sol\":1290:1295  owner */\n      tag_133\n        /* \"contracts/Ownable.sol\":1290:1297  owner() */\n      jump\t// in\n    tag_283:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Ownable.sol\":1290:1313  owner() == _msgSender() */\n      and\n      eq\n        /* \"contracts/Ownable.sol\":1282:1350  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_284\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_284:\n        /* \"contracts/DiamodSafe copy.sol\":13744:13760  _pool.add(_divs) */\n      tag_286\n        /* \"contracts/DiamodSafe copy.sol\":13744:13749  _pool */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":13754:13759  _divs */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":13744:13753  _pool.add */\n      tag_268\n        /* \"contracts/DiamodSafe copy.sol\":13744:13760  _pool.add(_divs) */\n      jump\t// in\n    tag_286:\n        /* \"contracts/DiamodSafe copy.sol\":13764:13765  3 */\n      0x03\n        /* \"contracts/DiamodSafe copy.sol\":13744:13765  _pool.add(_divs) == 3 */\n      eq\n        /* \"contracts/DiamodSafe copy.sol\":13736:13799  require(_pool.add(_divs) == 3, \"TEN_PORTIONS_REQUIRE_DIVISION\") */\n      tag_287\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1d\n      0x24\n      dup3\n      add\n      mstore\n      0x54454e5f504f5254494f4e535f524551554952455f4449564953494f4e000000\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_287:\n        /* \"contracts/DiamodSafe copy.sol\":13843:13850  forPool */\n      0x0e\n        /* \"contracts/DiamodSafe copy.sol\":13843:13858  forPool = _pool */\n      dup4\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":13868:13875  forDivs */\n      0x0f\n        /* \"contracts/DiamodSafe copy.sol\":13868:13883  forDivs = _divs */\n      dup3\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":13949:13993  onSetFeeSplit(_pool, _divs, block.timestamp) */\n      0x40\n      dup1\n      mload\n      dup5\n      dup2\n      mstore\n      0x20\n      dup2\n      add\n      dup5\n      swap1\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":13977:13992  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe copy.sol\":13949:13993  onSetFeeSplit(_pool, _divs, block.timestamp) */\n      dup2\n      dup4\n      add\n      mstore\n      swap1\n      mload\n      0x677017fa3a0fe0f50a95e6024c5b688f2b14a4696c4a897c459715cabfc1c03a\n      swap2\n      dup2\n      swap1\n      sub\n      0x60\n      add\n      swap1\n      log1\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":14010:14014  true */\n      0x01\n        /* \"contracts/Ownable.sol\":1360:1361  _ */\n    tag_285:\n        /* \"contracts/DiamodSafe copy.sol\":13612:14021  function setFeeSplit(... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":12604:13201  function accountOf(address _user) public view returns (uint256[14] memory) {... */\n    tag_118:\n        /* \"contracts/DiamodSafe copy.sol\":12659:12677  uint256[14] memory */\n      tag_288\n      tag_289\n      jump\t// in\n    tag_288:\n        /* \"contracts/DiamodSafe copy.sol\":12689:12705  Account memory a */\n      tag_291\n      tag_292\n      jump\t// in\n    tag_291:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":12708:12725  accountOf_[_user] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":12708:12718  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe copy.sol\":12708:12725  accountOf_[_user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":12689:12725  Account memory a = accountOf_[_user] */\n      dup3\n      mload\n      0x01e0\n      dup2\n      add\n      dup5\n      mstore\n      dup2\n      sload\n      dup2\n      mstore\n      0x01\n      dup3\n      add\n      sload\n      swap3\n      dup2\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      0x02\n      dup2\n      add\n      sload\n      swap3\n      dup3\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      0x03\n      dup3\n      add\n      sload\n      0x60\n      dup3\n      add\n      mstore\n      0x04\n      dup3\n      add\n      sload\n      0x80\n      dup3\n      add\n      mstore\n      0x05\n      dup3\n      add\n      sload\n      0xa0\n      dup3\n      add\n      mstore\n      0x06\n      dup3\n      add\n      sload\n      0xc0\n      dup3\n      add\n      mstore\n      0x07\n      dup3\n      add\n      sload\n      0xe0\n      dup3\n      add\n      mstore\n      0x08\n      dup3\n      add\n      sload\n      0x0100\n      dup3\n      add\n      mstore\n      0x09\n      dup3\n      add\n      sload\n      0x0120\n      dup3\n      add\n      mstore\n      0x0a\n      dup3\n      add\n      sload\n      0x0140\n      dup3\n      add\n      mstore\n      0x0b\n      dup3\n      add\n      sload\n      0x0160\n      dup3\n      add\n      mstore\n      0x0c\n      dup3\n      add\n      sload\n      0x0180\n      dup3\n      add\n      mstore\n      0x0d\n      dup3\n      add\n      sload\n      0x01a0\n      dup3\n      add\n      mstore\n      0x0e\n      swap1\n      swap2\n      add\n      sload\n      0x01c0\n      dup3\n      add\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":12735:12766  uint256[14] memory accountArray */\n      tag_293\n      tag_289\n      jump\t// in\n    tag_293:\n        /* \"contracts/DiamodSafe copy.sol\":12735:13165  uint256[14] memory accountArray = [... */\n      mload(0x40)\n      dup1\n      0x01c0\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/DiamodSafe copy.sol\":12783:12784  a */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":12783:12794  a.deposited */\n      0x00\n      add\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":12735:13165  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe copy.sol\":12808:12809  a */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":12808:12819  a.withdrawn */\n      0x40\n      add\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":12735:13165  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe copy.sol\":12833:12834  a */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":12833:12843  a.rewarded */\n      0x80\n      add\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":12735:13165  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe copy.sol\":12857:12858  a */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":12857:12869  a.compounded */\n      0x60\n      add\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":12735:13165  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe copy.sol\":12883:12884  a */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":12883:12896  a.contributed */\n      0xa0\n      add\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":12735:13165  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe copy.sol\":12910:12911  a */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":12910:12929  a.transferredShares */\n      0xc0\n      add\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":12735:13165  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe copy.sol\":12943:12944  a */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":12943:12959  a.receivedShares */\n      0xe0\n      add\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":12735:13165  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe copy.sol\":12973:12974  a */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":12973:12984  a.xInvested */\n      0x0100\n      add\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":12735:13165  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe copy.sol\":12998:12999  a */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":12998:13009  a.xRewarded */\n      0x0140\n      add\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":12735:13165  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe copy.sol\":13023:13024  a */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":13023:13037  a.xContributed */\n      0x0160\n      add\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":12735:13165  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe copy.sol\":13051:13052  a */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":13051:13063  a.xWithdrawn */\n      0x0180\n      add\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":12735:13165  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe copy.sol\":13077:13078  a */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":13077:13097  a.xTransferredShares */\n      0x01a0\n      add\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":12735:13165  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe copy.sol\":13111:13112  a */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":13111:13128  a.xReceivedShares */\n      0x01c0\n      add\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":12735:13165  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/DiamodSafe copy.sol\":13142:13143  a */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":13142:13155  a.xCompounded */\n      0x0120\n      add\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":12735:13165  uint256[14] memory accountArray = [... */\n      dup2\n      mstore\n      pop\n      swap1\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":13182:13194  accountArray */\n      dup1\n        /* \"contracts/DiamodSafe copy.sol\":13175:13194  return accountArray */\n      swap3\n      pop\n      pop\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":12604:13201  function accountOf(address _user) public view returns (uint256[14] memory) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":1641:1692  uint256 public constant payoutFrequency = 2 seconds */\n    tag_124:\n        /* \"contracts/DiamodSafe copy.sol\":1683:1692  2 seconds */\n      0x02\n        /* \"contracts/DiamodSafe copy.sol\":1641:1692  uint256 public constant payoutFrequency = 2 seconds */\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":11680:11944  function buyPrice() public pure returns (uint256) {... */\n    tag_127:\n        /* \"contracts/DiamodSafe copy.sol\":11721:11728  uint256 */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":11758:11762  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/DiamodSafe copy.sol\":11721:11728  uint256 */\n      dup2\n        /* \"contracts/DiamodSafe copy.sol\":11793:11842  SafeMath.div(SafeMath.mul(_tokens, divsFee), 100) */\n      tag_295\n        /* \"contracts/DiamodSafe copy.sol\":11806:11836  SafeMath.mul(_tokens, divsFee) */\n      tag_225\n        /* \"contracts/DiamodSafe copy.sol\":11758:11762  1e18 */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":1380:1381  3 */\n      0x03\n        /* \"contracts/DiamodSafe copy.sol\":11806:11818  SafeMath.mul */\n      tag_226\n        /* \"contracts/DiamodSafe copy.sol\":11806:11836  SafeMath.mul(_tokens, divsFee) */\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":11793:11842  SafeMath.div(SafeMath.mul(_tokens, divsFee), 100) */\n    tag_295:\n        /* \"contracts/DiamodSafe copy.sol\":11772:11842  uint256 _dividends = SafeMath.div(SafeMath.mul(_tokens, divsFee), 100) */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":11852:11872  uint256 _taxedTokens */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":11875:11908  SafeMath.add(_tokens, _dividends) */\n      tag_273\n        /* \"contracts/DiamodSafe copy.sol\":11888:11895  _tokens */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":11897:11907  _dividends */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":11875:11887  SafeMath.add */\n      tag_268\n        /* \"contracts/DiamodSafe copy.sol\":11875:11908  SafeMath.add(_tokens, _dividends) */\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":1586:1635  uint256 public constant rebaseFrequency = 6 hours */\n    tag_130:\n        /* \"contracts/DiamodSafe copy.sol\":1628:1635  6 hours */\n      0x5460\n        /* \"contracts/DiamodSafe copy.sol\":1586:1635  uint256 public constant rebaseFrequency = 6 hours */\n      dup2\n      jump\t// out\n        /* \"contracts/Ownable.sol\":1078:1163  function owner() public view virtual returns (address) {... */\n    tag_133:\n        /* \"contracts/Ownable.sol\":1124:1131  address */\n      0x00\n        /* \"contracts/Ownable.sol\":1150:1156  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"contracts/Ownable.sol\":1078:1163  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":10513:10608  function myTokens() public view returns (uint256) {... */\n    tag_136:\n        /* \"contracts/DiamodSafe copy.sol\":10554:10561  uint256 */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":10580:10601  balanceOf(msg.sender) */\n      tag_300\n        /* \"contracts/DiamodSafe copy.sol\":10590:10600  msg.sender */\n      caller\n        /* \"contracts/DiamodSafe copy.sol\":10580:10589  balanceOf */\n      tag_101\n        /* \"contracts/DiamodSafe copy.sol\":10580:10601  balanceOf(msg.sender) */\n      jump\t// in\n    tag_300:\n        /* \"contracts/DiamodSafe copy.sol\":10573:10601  return balanceOf(msg.sender) */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":10513:10608  function myTokens() public view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":699:726  address public tokenAddress */\n    tag_139:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x04))\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":1500:1519  uint public forPool */\n    tag_142:\n      sload(0x0e)\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":9792:9951  function transfer(... */\n    tag_146:\n        /* \"contracts/DiamodSafe copy.sol\":9892:9896  bool */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":2136:2137  0 */\n      dup1\n        /* \"contracts/DiamodSafe copy.sol\":2123:2133  myTokens() */\n      tag_302\n        /* \"contracts/DiamodSafe copy.sol\":2123:2131  myTokens */\n      tag_136\n        /* \"contracts/DiamodSafe copy.sol\":2123:2133  myTokens() */\n      jump\t// in\n    tag_302:\n        /* \"contracts/DiamodSafe copy.sol\":2123:2137  myTokens() > 0 */\n      gt\n        /* \"contracts/DiamodSafe copy.sol\":2115:2138  require(myTokens() > 0) */\n      tag_303\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_303:\n        /* \"contracts/DiamodSafe copy.sol\":9915:9944  _transferTokens(_to, _amount) */\n      tag_305\n        /* \"contracts/DiamodSafe copy.sol\":9931:9934  _to */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":9936:9943  _amount */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":9915:9930  _transferTokens */\n      tag_306\n        /* \"contracts/DiamodSafe copy.sol\":9915:9944  _transferTokens(_to, _amount) */\n      jump\t// in\n    tag_305:\n        /* \"contracts/DiamodSafe copy.sol\":9908:9944  return _transferTokens(_to, _amount) */\n      swap4\n        /* \"contracts/DiamodSafe copy.sol\":9792:9951  function transfer(... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":10940:11055  function totalBalance() public view returns (uint256) {... */\n    tag_149:\n        /* \"contracts/DiamodSafe copy.sol\":11011:11023  stakingToken */\n      sload(0x02)\n        /* \"contracts/DiamodSafe copy.sol\":11011:11048  stakingToken.balanceOf(address(this)) */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":11042:11046  this */\n      address\n        /* \"contracts/DiamodSafe copy.sol\":11011:11048  stakingToken.balanceOf(address(this)) */\n      0x04\n      dup3\n      add\n      mstore\n      swap1\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":10985:10992  uint256 */\n      0x00\n      swap3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":11011:11023  stakingToken */\n      and\n      swap2\n        /* \"contracts/DiamodSafe copy.sol\":11011:11033  stakingToken.balanceOf */\n      0x70a08231\n      swap2\n        /* \"contracts/DiamodSafe copy.sol\":11011:11048  stakingToken.balanceOf(address(this)) */\n      0x24\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"contracts/DiamodSafe copy.sol\":11011:11023  stakingToken */\n      dup7\n        /* \"contracts/DiamodSafe copy.sol\":11011:11048  stakingToken.balanceOf(address(this)) */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_308\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_308:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_310\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_310:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_311\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_311:\n      pop\n      mload\n      swap1\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":10940:11055  function totalBalance() public view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":1213:1240  uint public dripPoolBalance */\n    tag_152:\n      sload(0x0c)\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":772:793  IERC721[] public jpeg */\n    tag_156:\n      0x06\n      dup2\n      dup2\n      sload\n      dup2\n      lt\n      tag_312\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_312:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n      pop\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":6242:6352  function deposit(uint _amount) public returns (uint256) {... */\n    tag_160:\n        /* \"contracts/DiamodSafe copy.sol\":6289:6296  uint256 */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":6315:6345  depositTo(msg.sender, _amount) */\n      tag_285\n        /* \"contracts/DiamodSafe copy.sol\":6325:6335  msg.sender */\n      caller\n        /* \"contracts/DiamodSafe copy.sol\":6337:6344  _amount */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":6315:6324  depositTo */\n      tag_209\n        /* \"contracts/DiamodSafe copy.sol\":6315:6345  depositTo(msg.sender, _amount) */\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":975:997  uint public lastPayout */\n    tag_163:\n      sload(0x09)\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":1246:1267  uint8 public dripRate */\n    tag_166:\n      and(0xff, sload(0x0d))\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":732:766  address payable public bnbReceiver */\n    tag_169:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x05))\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":11950:12247  function calculateSharesReceived(... */\n    tag_173:\n        /* \"contracts/DiamodSafe copy.sol\":12035:12042  uint256 */\n      0x00\n      dup1\n        /* \"contracts/DiamodSafe copy.sol\":12072:12121  SafeMath.div(SafeMath.mul(_amount, divsFee), 100) */\n      tag_317\n        /* \"contracts/DiamodSafe copy.sol\":12085:12115  SafeMath.mul(_amount, divsFee) */\n      tag_225\n        /* \"contracts/DiamodSafe copy.sol\":12098:12105  _amount */\n      dup5\n        /* \"contracts/DiamodSafe copy.sol\":1380:1381  3 */\n      0x03\n        /* \"contracts/DiamodSafe copy.sol\":12085:12097  SafeMath.mul */\n      tag_226\n        /* \"contracts/DiamodSafe copy.sol\":12085:12115  SafeMath.mul(_amount, divsFee) */\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":12072:12121  SafeMath.div(SafeMath.mul(_amount, divsFee), 100) */\n    tag_317:\n        /* \"contracts/DiamodSafe copy.sol\":12054:12121  uint256 _divies = SafeMath.div(SafeMath.mul(_amount, divsFee), 100) */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":12131:12147  uint256 _remains */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":12150:12180  SafeMath.sub(_amount, _divies) */\n      tag_319\n        /* \"contracts/DiamodSafe copy.sol\":12163:12170  _amount */\n      dup5\n        /* \"contracts/DiamodSafe copy.sol\":12172:12179  _divies */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":12150:12162  SafeMath.sub */\n      tag_229\n        /* \"contracts/DiamodSafe copy.sol\":12150:12180  SafeMath.sub(_amount, _divies) */\n      jump\t// in\n    tag_319:\n        /* \"contracts/DiamodSafe copy.sol\":12131:12180  uint256 _remains = SafeMath.sub(_amount, _divies) */\n      swap5\n        /* \"contracts/DiamodSafe copy.sol\":11950:12247  function calculateSharesReceived(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":10830:10934  function tokenBalance(address _user) public view returns (uint256) {... */\n    tag_177:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":10914:10927  _user.balance */\n      and\n      balance\n      swap1\n        /* \"contracts/DiamodSafe copy.sol\":10830:10934  function tokenBalance(address _user) public view returns (uint256) {... */\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":5646:6221  function donate(uint _amount) public returns (uint256) {... */\n    tag_181:\n        /* \"contracts/DiamodSafe copy.sol\":5789:5800  rewardToken */\n      sload(0x0d)\n        /* \"contracts/DiamodSafe copy.sol\":5789:5849  rewardToken.transferFrom(msg.sender, address(this), _amount) */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0x23b872dd)\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":5814:5824  msg.sender */\n      caller\n        /* \"contracts/DiamodSafe copy.sol\":5789:5849  rewardToken.transferFrom(msg.sender, address(this), _amount) */\n      0x04\n      dup3\n      add\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":5834:5838  this */\n      address\n        /* \"contracts/DiamodSafe copy.sol\":5789:5849  rewardToken.transferFrom(msg.sender, address(this), _amount) */\n      0x24\n      dup3\n      add\n      mstore\n      0x44\n      dup2\n      add\n      dup5\n      swap1\n      mstore\n      swap1\n      mload\n      0x00\n      swap3\n        /* \"contracts/DiamodSafe copy.sol\":5789:5800  rewardToken */\n      0x0100\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap2\n        /* \"contracts/DiamodSafe copy.sol\":5789:5813  rewardToken.transferFrom */\n      0x23b872dd\n      swap2\n        /* \"contracts/DiamodSafe copy.sol\":5789:5849  rewardToken.transferFrom(msg.sender, address(this), _amount) */\n      0x64\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n      dup8\n        /* \"contracts/DiamodSafe copy.sol\":5789:5800  rewardToken */\n      dup8\n        /* \"contracts/DiamodSafe copy.sol\":5789:5849  rewardToken.transferFrom(msg.sender, address(this), _amount) */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_322\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_322:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_324\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_324:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_325\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_325:\n      pop\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":5781:5850  require(rewardToken.transferFrom(msg.sender, address(this), _amount)) */\n      tag_326\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_326:\n        /* \"contracts/DiamodSafe copy.sol\":5912:5927  dripPoolBalance */\n      0x0c\n        /* \"contracts/DiamodSafe copy.sol\":5912:5938  dripPoolBalance += _amount */\n      dup1\n      sload\n      dup4\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":5959:5969  msg.sender */\n      caller\n        /* \"contracts/DiamodSafe copy.sol\":5912:5927  dripPoolBalance */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":5948:5970  accountOf_[msg.sender] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":5948:5958  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe copy.sol\":5948:5970  accountOf_[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":5948:5983  accountOf_[msg.sender].xContributed */\n      0x0b\n      dup2\n      add\n        /* \"contracts/DiamodSafe copy.sol\":5948:5988  accountOf_[msg.sender].xContributed += 1 */\n      dup1\n      sload\n      0x01\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":5998:6032  accountOf_[msg.sender].contributed */\n      0x05\n      add\n        /* \"contracts/DiamodSafe copy.sol\":5998:6043  accountOf_[msg.sender].contributed += _amount */\n      dup1\n      sload\n      dup7\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":6136:6182  onDonate(msg.sender, _amount, block.timestamp) */\n      dup2\n      mload\n      dup6\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":6166:6181  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe copy.sol\":6136:6182  onDonate(msg.sender, _amount, block.timestamp) */\n      swap2\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      dup2\n      mload\n      0x0da1788c3e861a58a47f0d46073b13c4d66efcc259714744f920d1afe7b8dee5\n      swap3\n      swap2\n      dup2\n      swap1\n      sub\n      swap1\n      swap2\n      add\n      swap1\n      log2\n      pop\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":6199:6214  dripPoolBalance */\n      sload(0x0c)\n      swap1\n        /* \"contracts/DiamodSafe copy.sol\":5646:6221  function donate(uint _amount) public returns (uint256) {... */\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":854:871  uint public users */\n    tag_184:\n      sload(0x07)\n      dup2\n      jump\t// out\n        /* \"contracts/Ownable.sol\":2004:2244  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_188:\n        /* \"contracts/Ownable.sol\":1301:1313  _msgSender() */\n      tag_328\n        /* \"contracts/Ownable.sol\":1301:1311  _msgSender */\n      tag_277\n        /* \"contracts/Ownable.sol\":1301:1313  _msgSender() */\n      jump\t// in\n    tag_328:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Ownable.sol\":1290:1313  owner() == _msgSender() */\n      and\n        /* \"contracts/Ownable.sol\":1290:1297  owner() */\n      tag_329\n        /* \"contracts/Ownable.sol\":1290:1295  owner */\n      tag_133\n        /* \"contracts/Ownable.sol\":1290:1297  owner() */\n      jump\t// in\n    tag_329:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Ownable.sol\":1290:1313  owner() == _msgSender() */\n      and\n      eq\n        /* \"contracts/Ownable.sol\":1282:1350  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_330\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_330:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Ownable.sol\":2092:2114  newOwner != address(0) */\n      dup2\n      and\n        /* \"contracts/Ownable.sol\":2084:2157  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_332\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x26\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe\n      0x26\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_332:\n        /* \"contracts/Ownable.sol\":2193:2199  _owner */\n      0x00\n      dup1\n      sload\n        /* \"contracts/Ownable.sol\":2172:2210  OwnershipTransferred(_owner, newOwner) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      dup1\n      dup6\n      and\n      swap4\n        /* \"contracts/Ownable.sol\":2193:2199  _owner */\n      swap3\n      and\n      swap2\n        /* \"contracts/Ownable.sol\":2172:2210  OwnershipTransferred(_owner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap2\n      log3\n        /* \"contracts/Ownable.sol\":2220:2226  _owner */\n      0x00\n        /* \"contracts/Ownable.sol\":2220:2237  _owner = newOwner */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/Ownable.sol\":2004:2244  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":7239:7312  function compound() public onlyEarners {... */\n    tag_191:\n        /* \"contracts/DiamodSafe copy.sol\":2271:2272  0 */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":2256:2268  myEarnings() */\n      tag_334\n        /* \"contracts/DiamodSafe copy.sol\":2256:2266  myEarnings */\n      tag_212\n        /* \"contracts/DiamodSafe copy.sol\":2256:2268  myEarnings() */\n      jump\t// in\n    tag_334:\n        /* \"contracts/DiamodSafe copy.sol\":2256:2272  myEarnings() > 0 */\n      gt\n        /* \"contracts/DiamodSafe copy.sol\":2248:2273  require(myEarnings() > 0) */\n      tag_335\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_335:\n        /* \"contracts/DiamodSafe copy.sol\":7288:7305  _compoundTokens() */\n      tag_337\n        /* \"contracts/DiamodSafe copy.sol\":7288:7303  _compoundTokens */\n      tag_338\n        /* \"contracts/DiamodSafe copy.sol\":7288:7305  _compoundTokens() */\n      jump\t// in\n    tag_337:\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":7239:7312  function compound() public onlyEarners {... */\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":14083:14607  function setImmunityToken(... */\n    tag_198:\n        /* \"contracts/DiamodSafe copy.sol\":14177:14190  bool _success */\n      0x00\n        /* \"contracts/Ownable.sol\":1301:1313  _msgSender() */\n      tag_340\n        /* \"contracts/Ownable.sol\":1301:1311  _msgSender */\n      tag_277\n        /* \"contracts/Ownable.sol\":1301:1313  _msgSender() */\n      jump\t// in\n    tag_340:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Ownable.sol\":1290:1313  owner() == _msgSender() */\n      and\n        /* \"contracts/Ownable.sol\":1290:1297  owner() */\n      tag_341\n        /* \"contracts/Ownable.sol\":1290:1295  owner */\n      tag_133\n        /* \"contracts/Ownable.sol\":1290:1297  owner() */\n      jump\t// in\n    tag_341:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Ownable.sol\":1290:1313  owner() == _msgSender() */\n      and\n      eq\n        /* \"contracts/Ownable.sol\":1282:1350  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_342\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_342:\n        /* \"contracts/DiamodSafe copy.sol\":14202:14208  uint i */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":14198:14364  for(uint i =0; i < jpeg.length; i++){... */\n    tag_344:\n        /* \"contracts/DiamodSafe copy.sol\":14217:14221  jpeg */\n      0x06\n        /* \"contracts/DiamodSafe copy.sol\":14217:14228  jpeg.length */\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":14213:14228  i < jpeg.length */\n      dup2\n      lt\n        /* \"contracts/DiamodSafe copy.sol\":14198:14364  for(uint i =0; i < jpeg.length; i++){... */\n      iszero\n      tag_345\n      jumpi\n        /* \"contracts/DiamodSafe copy.sol\":14296:14305  _contract */\n      dup3\n        /* \"contracts/DiamodSafe copy.sol\":14306:14307  i */\n      dup2\n        /* \"contracts/DiamodSafe copy.sol\":14296:14308  _contract[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_347\n      jumpi\n      invalid\n    tag_347:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":14296:14326  _contract[i].supportsInterface */\n      and\n      0x01ffc9a7\n        /* \"contracts/DiamodSafe copy.sol\":14327:14337  0x80ac58cd */\n      0x80ac58cd\n        /* \"contracts/DiamodSafe copy.sol\":14296:14338  _contract[i].supportsInterface(0x80ac58cd) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      0xe0\n      shl\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_348\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_348:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_350\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_350:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_351\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_351:\n      pop\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":14288:14353  require(_contract[i].supportsInterface(0x80ac58cd), \"NOT_ERC721\") */\n      tag_352\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0a\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xb0, 0x4e4f545f455243373231)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_352:\n        /* \"contracts/DiamodSafe copy.sol\":14230:14233  i++ */\n      0x01\n      add\n        /* \"contracts/DiamodSafe copy.sol\":14198:14364  for(uint i =0; i < jpeg.length; i++){... */\n      jump(tag_344)\n    tag_345:\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":14373:14401  IERC721[] memory oldContract */\n      0x60\n        /* \"contracts/DiamodSafe copy.sol\":14404:14408  jpeg */\n      0x06\n        /* \"contracts/DiamodSafe copy.sol\":14373:14408  IERC721[] memory oldContract = jpeg */\n      dup1\n      sload\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      dup1\n      iszero\n      tag_353\n      jumpi\n      0x20\n      mul\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_354:\n      dup2\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x01\n      swap1\n      swap2\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_354\n      jumpi\n    tag_353:\n      pop\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":14418:14434  jpeg = _contract */\n      dup7\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":14373:14408  IERC721[] memory oldContract = jpeg */\n      swap4\n      swap5\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":14418:14434  jpeg = _contract */\n      tag_355\n      swap4\n        /* \"contracts/DiamodSafe copy.sol\":14418:14422  jpeg */\n      0x06\n      swap4\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":14418:14434  jpeg = _contract */\n      0x20\n      dup9\n      add\n      swap3\n      pop\n      swap1\n      pop\n      tag_356\n      jump\t// in\n    tag_355:\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":14482:14492  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":14450:14579  onSetImmunityToken(... */\n      and\n      0xf0650831416f723858005cfeae97a2d6f5e127d1e6ae8938574d1d73e7f4727c\n        /* \"contracts/DiamodSafe copy.sol\":14506:14517  oldContract */\n      dup3\n        /* \"contracts/DiamodSafe copy.sol\":14531:14540  _contract */\n      dup6\n        /* \"contracts/DiamodSafe copy.sol\":14554:14569  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe copy.sol\":14450:14579  onSetImmunityToken(... */\n      mload(0x40)\n      dup1\n      dup1\n      0x20\n      add\n      dup1\n      0x20\n      add\n      dup5\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup2\n      sub\n      dup4\n      mstore\n      dup7\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      0x20\n      mul\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_357:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_359\n      jumpi\n      dup2\n      dup2\n      add\n      mload\n      dup4\n      dup3\n      add\n      mstore\n      0x20\n      add\n      jump(tag_357)\n    tag_359:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      dup4\n      dup2\n      sub\n      dup3\n      mstore\n      dup6\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      0x20\n      mul\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_360:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_362\n      jumpi\n      dup2\n      dup2\n      add\n      mload\n      dup4\n      dup3\n      add\n      mstore\n      0x20\n      add\n      jump(tag_360)\n    tag_362:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":14596:14600  true */\n      0x01\n      swap3\n        /* \"contracts/DiamodSafe copy.sol\":14083:14607  function setImmunityToken(... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":1273:1298  IERC20 public rewardToken */\n    tag_201:\n      sload(0x0d)\n      0x0100\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":13207:13490  function dailyEstimate(address _user) public view returns (uint256) {... */\n    tag_205:\n        /* \"contracts/DiamodSafe copy.sol\":13321:13329  dripRate */\n      sload(0x0d)\n        /* \"contracts/DiamodSafe copy.sol\":13301:13316  dripPoolBalance */\n      sload(0x0c)\n        /* \"contracts/DiamodSafe copy.sol\":13266:13273  uint256 */\n      0x00\n      swap2\n      dup3\n      swap2\n        /* \"contracts/DiamodSafe copy.sol\":13301:13339  dripPoolBalance.mul(dripRate).div(100) */\n      tag_364\n      swap2\n        /* \"contracts/DiamodSafe copy.sol\":13335:13338  100 */\n      0x64\n      swap2\n        /* \"contracts/DiamodSafe copy.sol\":13301:13330  dripPoolBalance.mul(dripRate) */\n      tag_365\n      swap2\n        /* \"contracts/DiamodSafe copy.sol\":13321:13329  dripRate */\n      0xff\n      and\n        /* \"contracts/DiamodSafe copy.sol\":13301:13320  dripPoolBalance.mul */\n      tag_226\n        /* \"contracts/DiamodSafe copy.sol\":13301:13330  dripPoolBalance.mul(dripRate) */\n      jump\t// in\n    tag_365:\n        /* \"contracts/DiamodSafe copy.sol\":13301:13334  dripPoolBalance.mul(dripRate).div */\n      swap1\n      tag_227\n        /* \"contracts/DiamodSafe copy.sol\":13301:13339  dripPoolBalance.mul(dripRate).div(100) */\n      jump\t// in\n    tag_364:\n        /* \"contracts/DiamodSafe copy.sol\":13285:13339  uint256 share = dripPoolBalance.mul(dripRate).div(100) */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":13390:13391  0 */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":13369:13387  currentTotalStaked */\n      sload(0x11)\n        /* \"contracts/DiamodSafe copy.sol\":13369:13391  currentTotalStaked > 0 */\n      gt\n        /* \"contracts/DiamodSafe copy.sol\":13368:13483  (currentTotalStaked > 0)... */\n      tag_366\n      jumpi\n        /* \"contracts/DiamodSafe copy.sol\":13482:13483  0 */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":13368:13483  (currentTotalStaked > 0)... */\n      jump(tag_305)\n    tag_366:\n        /* \"contracts/DiamodSafe copy.sol\":13444:13462  currentTotalStaked */\n      sload(0x11)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":13421:13438  balanceOf_[_user] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":13421:13431  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe copy.sol\":13421:13438  balanceOf_[_user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":13411:13463  share.mul(balanceOf_[_user]).div(currentTotalStaked) */\n      tag_305\n      swap2\n        /* \"contracts/DiamodSafe copy.sol\":13444:13462  currentTotalStaked */\n      swap1\n        /* \"contracts/DiamodSafe copy.sol\":13411:13439  share.mul(balanceOf_[_user]) */\n      tag_365\n      swap1\n        /* \"contracts/DiamodSafe copy.sol\":13411:13416  share */\n      dup5\n      swap1\n        /* \"contracts/DiamodSafe copy.sol\":13411:13420  share.mul */\n      tag_226\n        /* \"contracts/DiamodSafe copy.sol\":13411:13439  share.mul(balanceOf_[_user]) */\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":6375:7217  function depositTo(address _user, uint _amount) public returns (uint256) {... */\n    tag_209:\n        /* \"contracts/DiamodSafe copy.sol\":6536:6548  stakingToken */\n      sload(0x02)\n        /* \"contracts/DiamodSafe copy.sol\":6536:6597  stakingToken.transferFrom(msg.sender, address(this), _amount) */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0x23b872dd)\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":6562:6572  msg.sender */\n      caller\n        /* \"contracts/DiamodSafe copy.sol\":6536:6597  stakingToken.transferFrom(msg.sender, address(this), _amount) */\n      0x04\n      dup3\n      add\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":6582:6586  this */\n      address\n        /* \"contracts/DiamodSafe copy.sol\":6536:6597  stakingToken.transferFrom(msg.sender, address(this), _amount) */\n      0x24\n      dup3\n      add\n      mstore\n      0x44\n      dup2\n      add\n      dup5\n      swap1\n      mstore\n      swap1\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":6439:6446  uint256 */\n      0x00\n      swap3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":6536:6548  stakingToken */\n      and\n      swap2\n        /* \"contracts/DiamodSafe copy.sol\":6536:6561  stakingToken.transferFrom */\n      0x23b872dd\n      swap2\n        /* \"contracts/DiamodSafe copy.sol\":6536:6597  stakingToken.transferFrom(msg.sender, address(this), _amount) */\n      0x64\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"contracts/DiamodSafe copy.sol\":6439:6446  uint256 */\n      dup8\n        /* \"contracts/DiamodSafe copy.sol\":6536:6548  stakingToken */\n      dup8\n        /* \"contracts/DiamodSafe copy.sol\":6536:6597  stakingToken.transferFrom(msg.sender, address(this), _amount) */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_371\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_371:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_373\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_373:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_374\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_374:\n      pop\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":6528:6598  require(stakingToken.transferFrom(msg.sender, address(this), _amount)) */\n      tag_375\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_375:\n        /* \"contracts/DiamodSafe copy.sol\":6660:6673  totalDeposits */\n      0x0b\n        /* \"contracts/DiamodSafe copy.sol\":6660:6684  totalDeposits += _amount */\n      dup1\n      sload\n      dup4\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":6660:6673  totalDeposits */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":6761:6791  _depositTokens(_user, _amount) */\n      tag_376\n        /* \"contracts/DiamodSafe copy.sol\":6776:6781  _user */\n      dup5\n        /* \"contracts/DiamodSafe copy.sol\":6677:6684  _amount */\n      dup5\n        /* \"contracts/DiamodSafe copy.sol\":6761:6775  _depositTokens */\n      tag_377\n        /* \"contracts/DiamodSafe copy.sol\":6761:6791  _depositTokens(_user, _amount) */\n      jump\t// in\n    tag_376:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":6844:7023  onUpdate(... */\n      dup6\n      and\n        /* \"contracts/DiamodSafe copy.sol\":6885:6902  accountOf_[_user] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":6885:6895  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe copy.sol\":6885:6902  accountOf_[_user] */\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":6885:6912  accountOf_[_user].deposited */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":6926:6936  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe copy.sol\":6926:6943  balanceOf_[_user] */\n      dup5\n      mstore\n      swap5\n      dup3\n      swap1\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":6957:6974  accountOf_[_user] */\n      swap4\n      dup4\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":6957:6984  accountOf_[_user].withdrawn */\n      0x02\n      add\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":6844:7023  onUpdate(... */\n      dup2\n      mload\n      swap5\n      dup6\n      mstore\n      swap2\n      dup5\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      dup3\n      dup3\n      add\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":6998:7013  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe copy.sol\":6844:7023  onUpdate(... */\n      0x60\n      dup4\n      add\n      mstore\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":6747:6791  uint amount = _depositTokens(_user, _amount) */\n      swap3\n      swap4\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":6844:7023  onUpdate(... */\n      swap1\n      swap2\n      0x00\n      dup1\n      mload\n      0x20\n      data_27cc9c295b15a532bb1b5f9308f1d54813e694c2ebdd1c2ced210bfe52dcd57e\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      swap2\n      dup2\n      swap1\n      sub\n      0x80\n      add\n      swap1\n      log2\n        /* \"contracts/DiamodSafe copy.sol\":7098:7110  distribute() */\n      tag_305\n        /* \"contracts/DiamodSafe copy.sol\":7098:7108  distribute */\n      tag_246\n        /* \"contracts/DiamodSafe copy.sol\":7098:7110  distribute() */\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":10614:10713  function myEarnings() public view returns (uint256) {... */\n    tag_212:\n        /* \"contracts/DiamodSafe copy.sol\":10657:10664  uint256 */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":10683:10706  dividendsOf(msg.sender) */\n      tag_300\n        /* \"contracts/DiamodSafe copy.sol\":10695:10705  msg.sender */\n      caller\n        /* \"contracts/DiamodSafe copy.sol\":10683:10694  dividendsOf */\n      tag_61\n        /* \"contracts/DiamodSafe copy.sol\":10683:10706  dividendsOf(msg.sender) */\n      jump\t// in\n        /* \"contracts/Address.sol\":726:1139  function isContract(address account) internal view returns (bool) {... */\n    tag_213:\n        /* \"contracts/Address.sol\":1086:1106  extcodesize(account) */\n      extcodesize\n        /* \"contracts/Address.sol\":1124:1132  size > 0 */\n      iszero\n      iszero\n      swap1\n        /* \"contracts/Address.sol\":726:1139  function isContract(address account) internal view returns (bool) {... */\n      jump\t// out\n        /* \"contracts/SafeMath.sol\":3538:3753  function mul(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_226:\n        /* \"contracts/SafeMath.sol\":3596:3603  uint256 */\n      0x00\n        /* \"contracts/SafeMath.sol\":3619:3625  a == 0 */\n      dup3\n        /* \"contracts/SafeMath.sol\":3615:3635  if (a == 0) return 0 */\n      tag_383\n      jumpi\n      pop\n        /* \"contracts/SafeMath.sol\":3634:3635  0 */\n      0x00\n        /* \"contracts/SafeMath.sol\":3627:3635  return 0 */\n      jump(tag_285)\n        /* \"contracts/SafeMath.sol\":3615:3635  if (a == 0) return 0 */\n    tag_383:\n        /* \"contracts/SafeMath.sol\":3657:3662  a * b */\n      dup3\n      dup3\n      mul\n        /* \"contracts/SafeMath.sol\":3661:3662  b */\n      dup3\n        /* \"contracts/SafeMath.sol\":3657:3658  a */\n      dup5\n        /* \"contracts/SafeMath.sol\":3657:3662  a * b */\n      dup3\n        /* \"contracts/SafeMath.sol\":3657:3658  a */\n      dup2\n        /* \"contracts/SafeMath.sol\":3680:3685  c / a */\n      tag_384\n      jumpi\n      invalid\n    tag_384:\n      div\n        /* \"contracts/SafeMath.sol\":3680:3690  c / a == b */\n      eq\n        /* \"contracts/SafeMath.sol\":3672:3728  require(c / a == b, \"SafeMath: multiplication overflow\") */\n      tag_305\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x21\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3\n      0x21\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/SafeMath.sol\":4217:4367  function div(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_227:\n        /* \"contracts/SafeMath.sol\":4275:4282  uint256 */\n      0x00\n        /* \"contracts/SafeMath.sol\":4306:4307  0 */\n      dup1\n        /* \"contracts/SafeMath.sol\":4302:4303  b */\n      dup3\n        /* \"contracts/SafeMath.sol\":4302:4307  b > 0 */\n      gt\n        /* \"contracts/SafeMath.sol\":4294:4338  require(b > 0, \"SafeMath: division by zero\") */\n      tag_387\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1a\n      0x24\n      dup3\n      add\n      mstore\n      0x536166654d6174683a206469766973696f6e206279207a65726f000000000000\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_387:\n        /* \"contracts/SafeMath.sol\":4359:4360  b */\n      dup2\n        /* \"contracts/SafeMath.sol\":4355:4356  a */\n      dup4\n        /* \"contracts/SafeMath.sol\":4355:4360  a / b */\n      dup2\n      tag_388\n      jumpi\n      invalid\n    tag_388:\n      div\n      swap4\n        /* \"contracts/SafeMath.sol\":4217:4367  function div(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/SafeMath.sol\":3136:3291  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_229:\n        /* \"contracts/SafeMath.sol\":3194:3201  uint256 */\n      0x00\n        /* \"contracts/SafeMath.sol\":3226:3227  a */\n      dup3\n        /* \"contracts/SafeMath.sol\":3221:3222  b */\n      dup3\n        /* \"contracts/SafeMath.sol\":3221:3227  b <= a */\n      gt\n      iszero\n        /* \"contracts/SafeMath.sol\":3213:3262  require(b <= a, \"SafeMath: subtraction overflow\") */\n      tag_390\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1e\n      0x24\n      dup3\n      add\n      mstore\n      0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_390:\n      pop\n        /* \"contracts/SafeMath.sol\":3279:3284  a - b */\n      swap1\n      sub\n      swap1\n        /* \"contracts/SafeMath.sol\":3136:3291  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":14777:15514  function allocateFees(uint fee) private {... */\n    tag_244:\n        /* \"contracts/DiamodSafe copy.sol\":14827:14844  uint256 _onePiece */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":14847:14858  fee.div(10) */\n      tag_392\n        /* \"contracts/DiamodSafe copy.sol\":14847:14850  fee */\n      dup3\n        /* \"contracts/DiamodSafe copy.sol\":14855:14857  10 */\n      0x0a\n        /* \"contracts/DiamodSafe copy.sol\":14847:14854  fee.div */\n      tag_227\n        /* \"contracts/DiamodSafe copy.sol\":14847:14858  fee.div(10) */\n      jump\t// in\n    tag_392:\n        /* \"contracts/DiamodSafe copy.sol\":14827:14858  uint256 _onePiece = fee.div(10) */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":14869:14885  uint256 _forPool */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":14889:14911  _onePiece.mul(forPool) */\n      tag_393\n        /* \"contracts/DiamodSafe copy.sol\":14903:14910  forPool */\n      sload(0x0e)\n        /* \"contracts/DiamodSafe copy.sol\":14889:14898  _onePiece */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":14889:14902  _onePiece.mul */\n      tag_226\n      swap1\n        /* \"contracts/DiamodSafe copy.sol\":14889:14911  _onePiece.mul(forPool) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_393:\n        /* \"contracts/DiamodSafe copy.sol\":14869:14912  uint256 _forPool = (_onePiece.mul(forPool)) */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":14943:14959  uint256 _forDivs */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":14963:14985  _onePiece.mul(forDivs) */\n      tag_394\n        /* \"contracts/DiamodSafe copy.sol\":14977:14984  forDivs */\n      sload(0x0f)\n        /* \"contracts/DiamodSafe copy.sol\":14963:14972  _onePiece */\n      dup5\n        /* \"contracts/DiamodSafe copy.sol\":14963:14976  _onePiece.mul */\n      tag_226\n      swap1\n        /* \"contracts/DiamodSafe copy.sol\":14963:14985  _onePiece.mul(forDivs) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_394:\n        /* \"contracts/DiamodSafe copy.sol\":15035:15050  dripPoolBalance */\n      sload(0x0c)\n        /* \"contracts/DiamodSafe copy.sol\":14943:14986  uint256 _forDivs = (_onePiece.mul(forDivs)) */\n      swap1\n      swap2\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":15035:15064  dripPoolBalance.add(_forPool) */\n      tag_395\n      swap1\n        /* \"contracts/DiamodSafe copy.sol\":15055:15063  _forPool */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":15035:15054  dripPoolBalance.add */\n      tag_268\n        /* \"contracts/DiamodSafe copy.sol\":15035:15064  dripPoolBalance.add(_forPool) */\n      jump\t// in\n    tag_395:\n        /* \"contracts/DiamodSafe copy.sol\":15017:15032  dripPoolBalance */\n      0x0c\n        /* \"contracts/DiamodSafe copy.sol\":15017:15064  dripPoolBalance = dripPoolBalance.add(_forPool) */\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":15143:15161  currentTotalStaked */\n      sload(0x11)\n        /* \"contracts/DiamodSafe copy.sol\":15143:15165  currentTotalStaked > 0 */\n      iszero\n        /* \"contracts/DiamodSafe copy.sol\":15139:15508  if (currentTotalStaked > 0) {... */\n      tag_396\n      jumpi\n        /* \"contracts/DiamodSafe copy.sol\":15247:15367  SafeMath.add(... */\n      tag_397\n        /* \"contracts/DiamodSafe copy.sol\":15277:15292  profitPerShare_ */\n      sload(0x12)\n        /* \"contracts/DiamodSafe copy.sol\":15335:15353  currentTotalStaked */\n      sload(0x11)\n      shl(0x40, 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":15311:15319  _forDivs */\n      dup5\n        /* \"contracts/DiamodSafe copy.sol\":15311:15331  _forDivs * magnitude */\n      mul\n        /* \"contracts/DiamodSafe copy.sol\":15310:15353  (_forDivs * magnitude) / currentTotalStaked */\n      dup2\n      tag_398\n      jumpi\n      invalid\n    tag_398:\n      div\n        /* \"contracts/DiamodSafe copy.sol\":15247:15259  SafeMath.add */\n      tag_268\n        /* \"contracts/DiamodSafe copy.sol\":15247:15367  SafeMath.add(... */\n      jump\t// in\n    tag_397:\n        /* \"contracts/DiamodSafe copy.sol\":15229:15244  profitPerShare_ */\n      0x12\n        /* \"contracts/DiamodSafe copy.sol\":15229:15367  profitPerShare_ = SafeMath.add(... */\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":15139:15508  if (currentTotalStaked > 0) {... */\n      jump(tag_399)\n    tag_396:\n        /* \"contracts/DiamodSafe copy.sol\":15470:15485  dripPoolBalance */\n      0x0c\n        /* \"contracts/DiamodSafe copy.sol\":15470:15497  dripPoolBalance += _forDivs */\n      dup1\n      sload\n      dup3\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":15139:15508  if (currentTotalStaked > 0) {... */\n    tag_399:\n        /* \"contracts/DiamodSafe copy.sol\":14777:15514  function allocateFees(uint fee) private {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":15555:16797  function distribute() private {... */\n    tag_246:\n        /* \"contracts/DiamodSafe copy.sol\":15728:15742  lastRebaseTime */\n      sload(0x10)\n        /* \"contracts/DiamodSafe copy.sol\":15621:15636  block.timestamp */\n      timestamp\n      swap1\n        /* \"contracts/DiamodSafe copy.sol\":1628:1635  6 hours */\n      0x5460\n      swap1\n        /* \"contracts/DiamodSafe copy.sol\":15702:15743  _currentTimestamp.safeSub(lastRebaseTime) */\n      tag_401\n      swap1\n        /* \"contracts/DiamodSafe copy.sol\":15621:15636  block.timestamp */\n      dup4\n      swap1\n        /* \"contracts/DiamodSafe copy.sol\":15702:15727  _currentTimestamp.safeSub */\n      tag_402\n        /* \"contracts/DiamodSafe copy.sol\":15702:15743  _currentTimestamp.safeSub(lastRebaseTime) */\n      jump\t// in\n    tag_401:\n        /* \"contracts/DiamodSafe copy.sol\":15702:15761  _currentTimestamp.safeSub(lastRebaseTime) > rebaseFrequency */\n      gt\n        /* \"contracts/DiamodSafe copy.sol\":15698:15976  if (_currentTimestamp.safeSub(lastRebaseTime) > rebaseFrequency) {... */\n      iszero\n      tag_403\n      jumpi\n        /* \"contracts/DiamodSafe copy.sol\":15817:15860  onRebase(totalBalance(), _currentTimestamp) */\n      0x2cfce469a63f2e9972b7f23da751e6943ed2b091c10e40b5c43b5f6105bf20ea\n        /* \"contracts/DiamodSafe copy.sol\":15826:15840  totalBalance() */\n      tag_404\n        /* \"contracts/DiamodSafe copy.sol\":15826:15838  totalBalance */\n      tag_149\n        /* \"contracts/DiamodSafe copy.sol\":15826:15840  totalBalance() */\n      jump\t// in\n    tag_404:\n        /* \"contracts/DiamodSafe copy.sol\":15817:15860  onRebase(totalBalance(), _currentTimestamp) */\n      0x40\n      dup1\n      mload\n      swap2\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup5\n      swap1\n      mstore\n      dup1\n      mload\n      swap2\n      dup3\n      swap1\n      sub\n      add\n      swap1\n      log1\n        /* \"contracts/DiamodSafe copy.sol\":15931:15945  lastRebaseTime */\n      0x10\n        /* \"contracts/DiamodSafe copy.sol\":15931:15965  lastRebaseTime = _currentTimestamp */\n      dup2\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":15698:15976  if (_currentTimestamp.safeSub(lastRebaseTime) > rebaseFrequency) {... */\n    tag_403:\n        /* \"contracts/DiamodSafe copy.sol\":1683:1692  2 seconds */\n      0x02\n        /* \"contracts/DiamodSafe copy.sol\":16048:16095  SafeMath.safeSub(_currentTimestamp, lastPayout) */\n      tag_405\n        /* \"contracts/DiamodSafe copy.sol\":16065:16082  _currentTimestamp */\n      dup3\n        /* \"contracts/DiamodSafe copy.sol\":16084:16094  lastPayout */\n      sload(0x09)\n        /* \"contracts/DiamodSafe copy.sol\":16048:16064  SafeMath.safeSub */\n      tag_402\n        /* \"contracts/DiamodSafe copy.sol\":16048:16095  SafeMath.safeSub(_currentTimestamp, lastPayout) */\n      jump\t// in\n    tag_405:\n        /* \"contracts/DiamodSafe copy.sol\":16048:16113  SafeMath.safeSub(_currentTimestamp, lastPayout) > payoutFrequency */\n      gt\n        /* \"contracts/DiamodSafe copy.sol\":16048:16151  SafeMath.safeSub(_currentTimestamp, lastPayout) > payoutFrequency &&... */\n      dup1\n      iszero\n      tag_406\n      jumpi\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":16150:16151  0 */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":16129:16147  currentTotalStaked */\n      sload(0x11)\n        /* \"contracts/DiamodSafe copy.sol\":16129:16151  currentTotalStaked > 0 */\n      gt\n        /* \"contracts/DiamodSafe copy.sol\":16048:16151  SafeMath.safeSub(_currentTimestamp, lastPayout) > payoutFrequency &&... */\n    tag_406:\n        /* \"contracts/DiamodSafe copy.sol\":16031:16791  if (... */\n      iszero\n      tag_337\n      jumpi\n        /* \"contracts/DiamodSafe copy.sol\":16259:16267  dripRate */\n      sload(0x0d)\n        /* \"contracts/DiamodSafe copy.sol\":16239:16254  dripPoolBalance */\n      sload(0x0c)\n        /* \"contracts/DiamodSafe copy.sol\":16223:16236  uint256 share */\n      0x00\n      swap2\n        /* \"contracts/DiamodSafe copy.sol\":16239:16321  dripPoolBalance.mul(dripRate).div(100).div(... */\n      tag_408\n      swap2\n        /* \"contracts/DiamodSafe copy.sol\":16299:16307  24 hours */\n      0x015180\n      swap2\n        /* \"contracts/DiamodSafe copy.sol\":16239:16277  dripPoolBalance.mul(dripRate).div(100) */\n      tag_365\n      swap2\n        /* \"contracts/DiamodSafe copy.sol\":16273:16276  100 */\n      0x64\n      swap2\n        /* \"contracts/DiamodSafe copy.sol\":16239:16277  dripPoolBalance.mul(dripRate).div(100) */\n      dup4\n      swap2\n        /* \"contracts/DiamodSafe copy.sol\":16239:16254  dripPoolBalance */\n      swap1\n        /* \"contracts/DiamodSafe copy.sol\":16259:16267  dripRate */\n      0xff\n      and\n        /* \"contracts/DiamodSafe copy.sol\":16239:16258  dripPoolBalance.mul */\n      tag_226\n        /* \"contracts/DiamodSafe copy.sol\":16239:16268  dripPoolBalance.mul(dripRate) */\n      jump\t// in\n        /* \"contracts/DiamodSafe copy.sol\":16239:16321  dripPoolBalance.mul(dripRate).div(100).div(... */\n    tag_408:\n        /* \"contracts/DiamodSafe copy.sol\":16223:16321  uint256 share = dripPoolBalance.mul(dripRate).div(100).div(... */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":16335:16349  uint256 profit */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":16360:16397  _currentTimestamp.safeSub(lastPayout) */\n      tag_411\n        /* \"contracts/DiamodSafe copy.sol\":16386:16396  lastPayout */\n      sload(0x09)\n        /* \"contracts/DiamodSafe copy.sol\":16360:16377  _currentTimestamp */\n      dup5\n        /* \"contracts/DiamodSafe copy.sol\":16360:16385  _currentTimestamp.safeSub */\n      tag_402\n      swap1\n        /* \"contracts/DiamodSafe copy.sol\":16360:16397  _currentTimestamp.safeSub(lastPayout) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_411:\n        /* \"contracts/DiamodSafe copy.sol\":16506:16521  dripPoolBalance */\n      sload(0x0c)\n        /* \"contracts/DiamodSafe copy.sol\":16352:16397  share * _currentTimestamp.safeSub(lastPayout) */\n      swap1\n      dup4\n      mul\n      swap2\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":16506:16537  dripPoolBalance.safeSub(profit) */\n      tag_412\n      swap1\n        /* \"contracts/DiamodSafe copy.sol\":16352:16397  share * _currentTimestamp.safeSub(lastPayout) */\n      dup3\n        /* \"contracts/DiamodSafe copy.sol\":16506:16529  dripPoolBalance.safeSub */\n      tag_402\n        /* \"contracts/DiamodSafe copy.sol\":16506:16537  dripPoolBalance.safeSub(profit) */\n      jump\t// in\n    tag_412:\n        /* \"contracts/DiamodSafe copy.sol\":16488:16503  dripPoolBalance */\n      0x0c\n        /* \"contracts/DiamodSafe copy.sol\":16488:16537  dripPoolBalance = dripPoolBalance.safeSub(profit) */\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":16599:16614  profitPerShare_ */\n      sload(0x12)\n        /* \"contracts/DiamodSafe copy.sol\":16655:16673  currentTotalStaked */\n      sload(0x11)\n        /* \"contracts/DiamodSafe copy.sol\":16569:16687  SafeMath.add(... */\n      tag_413\n      swap2\n        /* \"contracts/DiamodSafe copy.sol\":16599:16614  profitPerShare_ */\n      swap1\n      shl(0x40, 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":16633:16651  profit * magnitude */\n      dup5\n      mul\n        /* \"contracts/DiamodSafe copy.sol\":16655:16673  currentTotalStaked */\n      dup2\n        /* \"contracts/DiamodSafe copy.sol\":16632:16673  (profit * magnitude) / currentTotalStaked */\n      tag_398\n      jumpi\n      invalid\n        /* \"contracts/DiamodSafe copy.sol\":16569:16687  SafeMath.add(... */\n    tag_413:\n        /* \"contracts/DiamodSafe copy.sol\":16551:16566  profitPerShare_ */\n      0x12\n        /* \"contracts/DiamodSafe copy.sol\":16551:16687  profitPerShare_ = SafeMath.add(... */\n      sstore\n      pop\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":16750:16760  lastPayout */\n      0x09\n        /* \"contracts/DiamodSafe copy.sol\":16750:16780  lastPayout = _currentTimestamp */\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":15555:16797  function distribute() private {... */\n      jump\t// out\n        /* \"contracts/SafeMath.sol\":2690:2865  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_268:\n        /* \"contracts/SafeMath.sol\":2748:2755  uint256 */\n      0x00\n        /* \"contracts/SafeMath.sol\":2779:2784  a + b */\n      dup3\n      dup3\n      add\n        /* \"contracts/SafeMath.sol\":2802:2808  c >= a */\n      dup4\n      dup2\n      lt\n      iszero\n        /* \"contracts/SafeMath.sol\":2794:2840  require(c >= a, \"SafeMath: addition overflow\") */\n      tag_305\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1b\n      0x24\n      dup3\n      add\n      mstore\n      0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n        /* \"contracts/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\n    tag_277:\n        /* \"contracts/Context.sol\":685:695  msg.sender */\n      caller\n        /* \"contracts/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":19684:21653  function _transferTokens(... */\n    tag_306:\n        /* \"contracts/DiamodSafe copy.sol\":19829:19839  msg.sender */\n      caller\n        /* \"contracts/DiamodSafe copy.sol\":19786:19799  bool _success */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":19868:19887  balanceOf_[_sender] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":19868:19878  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe copy.sol\":19868:19887  balanceOf_[_sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":19786:19799  bool _success */\n      swap1\n      swap2\n        /* \"contracts/DiamodSafe copy.sol\":19829:19839  msg.sender */\n      swap1\n        /* \"contracts/DiamodSafe copy.sol\":19857:19887  _amount <= balanceOf_[_sender] */\n      dup4\n      gt\n      iszero\n        /* \"contracts/DiamodSafe copy.sol\":19849:19888  require(_amount <= balanceOf_[_sender]) */\n      tag_419\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_419:\n        /* \"contracts/DiamodSafe copy.sol\":20003:20004  0 */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":19988:20000  myEarnings() */\n      tag_420\n        /* \"contracts/DiamodSafe copy.sol\":19988:19998  myEarnings */\n      tag_212\n        /* \"contracts/DiamodSafe copy.sol\":19988:20000  myEarnings() */\n      jump\t// in\n    tag_420:\n        /* \"contracts/DiamodSafe copy.sol\":19988:20004  myEarnings() > 0 */\n      gt\n        /* \"contracts/DiamodSafe copy.sol\":19984:20040  if (myEarnings() > 0) {... */\n      iszero\n      tag_422\n      jumpi\n        /* \"contracts/DiamodSafe copy.sol\":20020:20029  harvest() */\n      tag_422\n        /* \"contracts/DiamodSafe copy.sol\":20020:20027  harvest */\n      tag_91\n        /* \"contracts/DiamodSafe copy.sol\":20020:20029  harvest() */\n      jump\t// in\n    tag_422:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":20117:20136  balanceOf_[_sender] */\n      dup2\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":20117:20127  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe copy.sol\":20117:20136  balanceOf_[_sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":20104:20146  SafeMath.sub(balanceOf_[_sender], _amount) */\n      tag_423\n      swap1\n        /* \"contracts/DiamodSafe copy.sol\":20138:20145  _amount */\n      dup5\n        /* \"contracts/DiamodSafe copy.sol\":20104:20116  SafeMath.sub */\n      tag_229\n        /* \"contracts/DiamodSafe copy.sol\":20104:20146  SafeMath.sub(balanceOf_[_sender], _amount) */\n      jump\t// in\n    tag_423:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":20082:20101  balanceOf_[_sender] */\n      dup1\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":20082:20092  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe copy.sol\":20082:20101  balanceOf_[_sender] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":20082:20146  balanceOf_[_sender] = SafeMath.sub(balanceOf_[_sender], _amount) */\n      swap4\n      swap1\n      swap4\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":20194:20216  balanceOf_[_recipient] */\n      swap1\n      dup7\n      and\n      dup2\n      mstore\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":20181:20226  SafeMath.add(balanceOf_[_recipient], _amount) */\n      tag_424\n      swap1\n        /* \"contracts/DiamodSafe copy.sol\":20218:20225  _amount */\n      dup5\n        /* \"contracts/DiamodSafe copy.sol\":20181:20193  SafeMath.add */\n      tag_268\n        /* \"contracts/DiamodSafe copy.sol\":20181:20226  SafeMath.add(balanceOf_[_recipient], _amount) */\n      jump\t// in\n    tag_424:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":20156:20178  balanceOf_[_recipient] */\n      dup6\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":20156:20166  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe copy.sol\":20156:20178  balanceOf_[_recipient] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":20156:20226  balanceOf_[_recipient] = SafeMath.add(balanceOf_[_recipient], _amount) */\n      swap6\n      swap1\n      swap6\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":20330:20345  profitPerShare_ */\n      0x12\n      dup1\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":20298:20317  payoutsOf_[_sender] */\n      swap5\n      dup8\n      and\n      dup4\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":20298:20308  payoutsOf_ */\n      0x13\n        /* \"contracts/DiamodSafe copy.sol\":20298:20317  payoutsOf_[_sender] */\n      dup3\n      mstore\n      dup6\n      dup4\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":20298:20356  payoutsOf_[_sender] -= (int256)(profitPerShare_ * _amount) */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":20330:20355  profitPerShare_ * _amount */\n      swap6\n      dup11\n      mul\n        /* \"contracts/DiamodSafe copy.sol\":20298:20356  payoutsOf_[_sender] -= (int256)(profitPerShare_ * _amount) */\n      swap1\n      swap6\n      sub\n      swap1\n      swap5\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":20401:20416  profitPerShare_ */\n      swap3\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":20366:20388  payoutsOf_[_recipient] */\n      swap2\n      dup2\n      mstore\n      dup4\n      dup2\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":20366:20427  payoutsOf_[_recipient] += (int256)(profitPerShare_ * _amount) */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":20401:20426  profitPerShare_ * _amount */\n      swap3\n      dup9\n      mul\n        /* \"contracts/DiamodSafe copy.sol\":20366:20427  payoutsOf_[_recipient] += (int256)(profitPerShare_ * _amount) */\n      swap1\n      swap3\n      add\n      swap1\n      swap2\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":20530:20540  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe copy.sol\":20530:20552  accountOf_[_recipient] */\n      swap1\n      swap2\n      mstore\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":20530:20562  accountOf_[_recipient].deposited */\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":20530:20567  accountOf_[_recipient].deposited == 0 */\n      iszero\n        /* \"contracts/DiamodSafe copy.sol\":20530:20625  accountOf_[_recipient].deposited == 0 &&... */\n      dup1\n      iszero\n      tag_425\n      jumpi\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":20583:20605  accountOf_[_recipient] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":20583:20593  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe copy.sol\":20583:20605  accountOf_[_recipient] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":20583:20620  accountOf_[_recipient].receivedShares */\n      0x07\n      add\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":20583:20625  accountOf_[_recipient].receivedShares == 0 */\n      iszero\n        /* \"contracts/DiamodSafe copy.sol\":20530:20625  accountOf_[_recipient].deposited == 0 &&... */\n    tag_425:\n        /* \"contracts/DiamodSafe copy.sol\":20513:20671  if (... */\n      iszero\n      tag_426\n      jumpi\n        /* \"contracts/DiamodSafe copy.sol\":20650:20655  users */\n      0x07\n        /* \"contracts/DiamodSafe copy.sol\":20650:20660  users += 1 */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":20659:20660  1 */\n      0x01\n        /* \"contracts/DiamodSafe copy.sol\":20650:20660  users += 1 */\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":20513:20671  if (... */\n    tag_426:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":20707:20726  accountOf_[_sender] */\n      dup1\n      dup3\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":20707:20717  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe copy.sol\":20707:20726  accountOf_[_sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":20707:20745  accountOf_[_sender].xTransferredShares */\n      0x0d\n      dup2\n      add\n        /* \"contracts/DiamodSafe copy.sol\":20707:20750  accountOf_[_sender].xTransferredShares += 1 */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":20749:20750  1 */\n      0x01\n        /* \"contracts/DiamodSafe copy.sol\":20707:20750  accountOf_[_sender].xTransferredShares += 1 */\n      swap1\n      dup2\n      add\n      swap1\n      swap2\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":20760:20797  accountOf_[_sender].transferredShares */\n      0x06\n      swap1\n      swap2\n      add\n        /* \"contracts/DiamodSafe copy.sol\":20760:20808  accountOf_[_sender].transferredShares += _amount */\n      dup1\n      sload\n      dup11\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":20818:20840  accountOf_[_recipient] */\n      swap5\n      dup10\n      and\n      dup1\n      dup5\n      mstore\n      swap3\n      dup2\n      swap1\n      keccak256\n      0x07\n        /* \"contracts/DiamodSafe copy.sol\":20818:20855  accountOf_[_recipient].receivedShares */\n      dup2\n      add\n        /* \"contracts/DiamodSafe copy.sol\":20818:20866  accountOf_[_recipient].receivedShares += _amount */\n      dup1\n      sload\n      dup11\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":20876:20914  accountOf_[_recipient].xReceivedShares */\n      0x0e\n      add\n        /* \"contracts/DiamodSafe copy.sol\":20876:20919  accountOf_[_recipient].xReceivedShares += 1 */\n      dup1\n      sload\n      dup7\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":20971:20979  totalTxs */\n      0x08\n        /* \"contracts/DiamodSafe copy.sol\":20971:20984  totalTxs += 1 */\n      dup1\n      sload\n      swap1\n      swap6\n      add\n      swap1\n      swap5\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":21050:21107  onTransfer(_sender, _recipient, _amount, block.timestamp) */\n      dup4\n      mload\n      dup8\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":21091:21106  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe copy.sol\":21050:21107  onTransfer(_sender, _recipient, _amount, block.timestamp) */\n      swap2\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      dup4\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":20818:20840  accountOf_[_recipient] */\n      swap2\n      swap4\n        /* \"contracts/DiamodSafe copy.sol\":21050:21107  onTransfer(_sender, _recipient, _amount, block.timestamp) */\n      0x91c7d71a3ae3fb7cf61e00517bf4868e9e23d0bace5e304cbc3b68de5d85350e\n      swap3\n      swap2\n      dup3\n      swap1\n      sub\n      add\n      swap1\n      log3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":21171:21358  onUpdate(... */\n      dup2\n      and\n        /* \"contracts/DiamodSafe copy.sol\":21214:21233  accountOf_[_sender] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":21214:21224  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe copy.sol\":21214:21233  accountOf_[_sender] */\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":21214:21243  accountOf_[_sender].deposited */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":21257:21267  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe copy.sol\":21257:21276  balanceOf_[_sender] */\n      dup5\n      mstore\n      swap5\n      dup3\n      swap1\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":21290:21309  accountOf_[_sender] */\n      swap4\n      dup4\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":21290:21319  accountOf_[_sender].withdrawn */\n      0x02\n      add\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":21171:21358  onUpdate(... */\n      dup2\n      mload\n      swap5\n      dup6\n      mstore\n      swap2\n      dup5\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      dup3\n      dup3\n      add\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":21333:21348  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe copy.sol\":21171:21358  onUpdate(... */\n      0x60\n      dup4\n      add\n      mstore\n      mload\n      0x00\n      dup1\n      mload\n      0x20\n      data_27cc9c295b15a532bb1b5f9308f1d54813e694c2ebdd1c2ced210bfe52dcd57e\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      swap2\n      dup2\n      swap1\n      sub\n      0x80\n      add\n      swap1\n      log2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":21425:21624  onUpdate(... */\n      dup5\n      and\n        /* \"contracts/DiamodSafe copy.sol\":21471:21493  accountOf_[_recipient] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":21471:21481  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe copy.sol\":21471:21493  accountOf_[_recipient] */\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":21471:21503  accountOf_[_recipient].deposited */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":21517:21527  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe copy.sol\":21517:21539  balanceOf_[_recipient] */\n      dup5\n      mstore\n      swap5\n      dup3\n      swap1\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":21553:21575  accountOf_[_recipient] */\n      swap4\n      dup4\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":21553:21585  accountOf_[_recipient].withdrawn */\n      0x02\n      add\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":21425:21624  onUpdate(... */\n      dup2\n      mload\n      swap5\n      dup6\n      mstore\n      swap2\n      dup5\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      dup3\n      dup3\n      add\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":21599:21614  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe copy.sol\":21425:21624  onUpdate(... */\n      0x60\n      dup4\n      add\n      mstore\n      mload\n      0x00\n      dup1\n      mload\n      0x20\n      data_27cc9c295b15a532bb1b5f9308f1d54813e694c2ebdd1c2ced210bfe52dcd57e\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      swap2\n      dup2\n      swap1\n      sub\n      0x80\n      add\n      swap1\n      log2\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":21642:21646  true */\n      0x01\n      swap4\n        /* \"contracts/DiamodSafe copy.sol\":19684:21653  function _transferTokens(... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":18459:19637  function _compoundTokens() internal returns (uint256) {... */\n    tag_338:\n        /* \"contracts/DiamodSafe copy.sol\":18504:18511  uint256 */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":18539:18549  msg.sender */\n      caller\n        /* \"contracts/DiamodSafe copy.sol\":18504:18511  uint256 */\n      dup2\n        /* \"contracts/DiamodSafe copy.sol\":18646:18664  dividendsOf(_user) */\n      tag_428\n        /* \"contracts/DiamodSafe copy.sol\":18539:18549  msg.sender */\n      dup3\n        /* \"contracts/DiamodSafe copy.sol\":18646:18657  dividendsOf */\n      tag_61\n        /* \"contracts/DiamodSafe copy.sol\":18646:18664  dividendsOf(_user) */\n      jump\t// in\n    tag_428:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":18674:18691  payoutsOf_[_user] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":18674:18684  payoutsOf_ */\n      0x13\n        /* \"contracts/DiamodSafe copy.sol\":18674:18691  payoutsOf_[_user] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":18674:18727  payoutsOf_[_user] += (int256)(_dividends * magnitude) */\n      dup1\n      sload\n      shl(0x40, 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":18704:18726  _dividends * magnitude */\n      dup5\n      mul\n        /* \"contracts/DiamodSafe copy.sol\":18674:18727  payoutsOf_[_user] += (int256)(_dividends * magnitude) */\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":18625:18664  uint256 _dividends = dividendsOf(_user) */\n      swap1\n      swap2\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":18900:18938  _depositTokens(msg.sender, _dividends) */\n      tag_429\n        /* \"contracts/DiamodSafe copy.sol\":18915:18925  msg.sender */\n      caller\n        /* \"contracts/DiamodSafe copy.sol\":18625:18664  uint256 _dividends = dividendsOf(_user) */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":18900:18914  _depositTokens */\n      tag_377\n        /* \"contracts/DiamodSafe copy.sol\":18900:18938  _depositTokens(msg.sender, _dividends) */\n      jump\t// in\n    tag_429:\n        /* \"contracts/DiamodSafe copy.sol\":18985:19040  onCompound(_user, _dividends, _tokens, block.timestamp) */\n      0x40\n      dup1\n      mload\n      dup5\n      dup2\n      mstore\n      0x20\n      dup2\n      add\n      dup4\n      swap1\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":19024:19039  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe copy.sol\":18985:19040  onCompound(_user, _dividends, _tokens, block.timestamp) */\n      dup2\n      dup4\n      add\n      mstore\n      swap1\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":18882:18938  uint256 _tokens = _depositTokens(msg.sender, _dividends) */\n      swap2\n      swap3\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":18985:19040  onCompound(_user, _dividends, _tokens, block.timestamp) */\n      dup6\n      and\n      swap2\n      0x193a876ac91d11a4a0a71ebef73b195ba55aa7c16d6755c93c21d973e692a02c\n      swap2\n      dup2\n      swap1\n      sub\n      0x60\n      add\n      swap1\n      log2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":19144:19161  accountOf_[_user] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":19144:19154  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe copy.sol\":19144:19161  accountOf_[_user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":19144:19172  accountOf_[_user].compounded */\n      0x03\n      add\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":19118:19206  SafeMath.add(... */\n      tag_430\n      swap1\n        /* \"contracts/DiamodSafe copy.sol\":19186:19196  _dividends */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":19118:19130  SafeMath.add */\n      tag_268\n        /* \"contracts/DiamodSafe copy.sol\":19118:19206  SafeMath.add(... */\n      jump\t// in\n    tag_430:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":19087:19104  accountOf_[_user] */\n      dup5\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":19087:19097  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe copy.sol\":19087:19104  accountOf_[_user] */\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":19087:19115  accountOf_[_user].compounded */\n      0x03\n      dup2\n      add\n        /* \"contracts/DiamodSafe copy.sol\":19087:19206  accountOf_[_user].compounded = SafeMath.add(... */\n      swap7\n      swap1\n      swap7\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":19216:19245  accountOf_[_user].xCompounded */\n      0x09\n      dup7\n      add\n        /* \"contracts/DiamodSafe copy.sol\":19216:19250  accountOf_[_user].xCompounded += 1 */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":19249:19250  1 */\n      0x01\n        /* \"contracts/DiamodSafe copy.sol\":19216:19250  accountOf_[_user].xCompounded += 1 */\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":19344:19371  accountOf_[_user].deposited */\n      dup6\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":19385:19395  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe copy.sol\":19385:19402  balanceOf_[_user] */\n      dup4\n      mstore\n      swap4\n      dup2\n      swap1\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":19416:19433  accountOf_[_user] */\n      swap3\n      dup3\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":19416:19443  accountOf_[_user].withdrawn */\n      0x02\n      swap1\n      swap6\n      add\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":19303:19482  onUpdate(... */\n      dup6\n      mload\n      swap4\n      dup5\n      mstore\n      swap1\n      dup4\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      dup2\n      dup5\n      add\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":19457:19472  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe copy.sol\":19303:19482  onUpdate(... */\n      0x60\n      dup3\n      add\n      mstore\n      swap2\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":19087:19104  accountOf_[_user] */\n      swap1\n      swap2\n      0x00\n      dup1\n      mload\n      0x20\n      data_27cc9c295b15a532bb1b5f9308f1d54813e694c2ebdd1c2ced210bfe52dcd57e\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":19303:19482  onUpdate(... */\n      swap2\n      swap1\n      dup2\n      swap1\n      sub\n      0x80\n      add\n      swap1\n      log2\n        /* \"contracts/DiamodSafe copy.sol\":19561:19573  distribute() */\n      tag_431\n        /* \"contracts/DiamodSafe copy.sol\":19561:19571  distribute */\n      tag_246\n        /* \"contracts/DiamodSafe copy.sol\":19561:19573  distribute() */\n      jump\t// in\n    tag_431:\n        /* \"contracts/DiamodSafe copy.sol\":19623:19630  _tokens */\n      swap3\n      pop\n      pop\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":18459:19637  function _compoundTokens() internal returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/DiamodSafe copy.sol\":16843:18419  function _depositTokens(... */\n    tag_377:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":17055:17077  accountOf_[_recipient] */\n      dup3\n      and\n        /* \"contracts/DiamodSafe copy.sol\":16944:16951  uint256 */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":17055:17077  accountOf_[_recipient] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":17055:17065  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe copy.sol\":17055:17077  accountOf_[_recipient] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":17055:17087  accountOf_[_recipient].deposited */\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":17055:17092  accountOf_[_recipient].deposited == 0 */\n      iszero\n        /* \"contracts/DiamodSafe copy.sol\":17055:17150  accountOf_[_recipient].deposited == 0 &&... */\n      dup1\n      iszero\n      tag_433\n      jumpi\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":17108:17130  accountOf_[_recipient] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":17108:17118  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe copy.sol\":17108:17130  accountOf_[_recipient] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":17108:17145  accountOf_[_recipient].receivedShares */\n      0x07\n      add\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":17108:17150  accountOf_[_recipient].receivedShares == 0 */\n      iszero\n        /* \"contracts/DiamodSafe copy.sol\":17055:17150  accountOf_[_recipient].deposited == 0 &&... */\n    tag_433:\n        /* \"contracts/DiamodSafe copy.sol\":17038:17196  if (... */\n      iszero\n      tag_434\n      jumpi\n        /* \"contracts/DiamodSafe copy.sol\":17175:17180  users */\n      0x07\n        /* \"contracts/DiamodSafe copy.sol\":17175:17185  users += 1 */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":17184:17185  1 */\n      0x01\n        /* \"contracts/DiamodSafe copy.sol\":17175:17185  users += 1 */\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":17038:17196  if (... */\n    tag_434:\n        /* \"contracts/DiamodSafe copy.sol\":17234:17242  totalTxs */\n      0x08\n        /* \"contracts/DiamodSafe copy.sol\":17234:17247  totalTxs += 1 */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":17246:17247  1 */\n      0x01\n        /* \"contracts/DiamodSafe copy.sol\":17234:17247  totalTxs += 1 */\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":17234:17242  totalTxs */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":17326:17329  100 */\n      0x64\n        /* \"contracts/DiamodSafe copy.sol\":17293:17323  SafeMath.mul(_amount, divsFee) */\n      tag_435\n        /* \"contracts/DiamodSafe copy.sol\":17306:17313  _amount */\n      dup5\n        /* \"contracts/DiamodSafe copy.sol\":1380:1381  3 */\n      0x03\n        /* \"contracts/DiamodSafe copy.sol\":17293:17305  SafeMath.mul */\n      tag_226\n        /* \"contracts/DiamodSafe copy.sol\":17293:17323  SafeMath.mul(_amount, divsFee) */\n      jump\t// in\n    tag_435:\n        /* \"contracts/DiamodSafe copy.sol\":17293:17329  SafeMath.mul(_amount, divsFee) / 100 */\n      dup2\n      tag_436\n      jumpi\n      invalid\n    tag_436:\n      div\n        /* \"contracts/DiamodSafe copy.sol\":17263:17329  uint256 _undividedDividends = SafeMath.mul(_amount, divsFee) / 100 */\n      swap1\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":17341:17358  uint256   _tokens */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":17361:17403  SafeMath.sub(_amount, _undividedDividends) */\n      tag_437\n        /* \"contracts/DiamodSafe copy.sol\":17374:17381  _amount */\n      dup5\n        /* \"contracts/DiamodSafe copy.sol\":17383:17402  _undividedDividends */\n      dup4\n        /* \"contracts/DiamodSafe copy.sol\":17361:17373  SafeMath.sub */\n      tag_229\n        /* \"contracts/DiamodSafe copy.sol\":17361:17403  SafeMath.sub(_amount, _undividedDividends) */\n      jump\t// in\n    tag_437:\n        /* \"contracts/DiamodSafe copy.sol\":17458:17514  onDeposit(_recipient, _amount, _tokens, block.timestamp) */\n      0x40\n      dup1\n      mload\n      dup7\n      dup2\n      mstore\n      0x20\n      dup2\n      add\n      dup4\n      swap1\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":17498:17513  block.timestamp */\n      timestamp\n        /* \"contracts/DiamodSafe copy.sol\":17458:17514  onDeposit(_recipient, _amount, _tokens, block.timestamp) */\n      dup2\n      dup4\n      add\n      mstore\n      swap1\n      mload\n        /* \"contracts/DiamodSafe copy.sol\":17341:17403  uint256   _tokens = SafeMath.sub(_amount, _undividedDividends) */\n      swap2\n      swap3\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":17458:17514  onDeposit(_recipient, _amount, _tokens, block.timestamp) */\n      dup8\n      and\n      swap2\n      0xb49bb132260f6aa1c86e2d2a3957c097216e6ec9b5fa15867289f058b4d297ac\n      swap2\n      dup2\n      swap1\n      sub\n      0x60\n      add\n      swap1\n      log2\n        /* \"contracts/DiamodSafe copy.sol\":17623:17624  0 */\n      0x00\n        /* \"contracts/DiamodSafe copy.sol\":17613:17620  _tokens */\n      dup2\n        /* \"contracts/DiamodSafe copy.sol\":17613:17624  _tokens > 0 */\n      gt\n        /* \"contracts/DiamodSafe copy.sol\":17613:17706  _tokens > 0 &&... */\n      dup1\n      iszero\n      tag_438\n      jumpi\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":17688:17706  currentTotalStaked */\n      sload(0x11)\n        /* \"contracts/DiamodSafe copy.sol\":17644:17685  SafeMath.add(_tokens, currentTotalStaked) */\n      tag_439\n        /* \"contracts/DiamodSafe copy.sol\":17657:17664  _tokens */\n      dup3\n        /* \"contracts/DiamodSafe copy.sol\":17688:17706  currentTotalStaked */\n      dup3\n        /* \"contracts/DiamodSafe copy.sol\":17644:17656  SafeMath.add */\n      tag_268\n        /* \"contracts/DiamodSafe copy.sol\":17644:17685  SafeMath.add(_tokens, currentTotalStaked) */\n      jump\t// in\n    tag_439:\n        /* \"contracts/DiamodSafe copy.sol\":17644:17706  SafeMath.add(_tokens, currentTotalStaked) > currentTotalStaked */\n      gt\n        /* \"contracts/DiamodSafe copy.sol\":17613:17706  _tokens > 0 &&... */\n    tag_438:\n        /* \"contracts/DiamodSafe copy.sol\":17592:17716  require(... */\n      tag_440\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_440:\n        /* \"contracts/DiamodSafe copy.sol\":17730:17748  currentTotalStaked */\n      sload(0x11)\n        /* \"contracts/DiamodSafe copy.sol\":17730:17752  currentTotalStaked > 0 */\n      iszero\n        /* \"contracts/DiamodSafe copy.sol\":17726:17867  if (currentTotalStaked > 0) {... */\n      tag_441\n      jumpi\n        /* \"contracts/DiamodSafe copy.sol\":17768:17786  currentTotalStaked */\n      0x11\n        /* \"contracts/DiamodSafe copy.sol\":17768:17797  currentTotalStaked += _tokens */\n      dup1\n      sload\n      dup3\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":17726:17867  if (currentTotalStaked > 0) {... */\n      jump(tag_442)\n    tag_441:\n        /* \"contracts/DiamodSafe copy.sol\":17828:17846  currentTotalStaked */\n      0x11\n        /* \"contracts/DiamodSafe copy.sol\":17828:17856  currentTotalStaked = _tokens */\n      dup2\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":17726:17867  if (currentTotalStaked > 0) {... */\n    tag_442:\n        /* \"contracts/DiamodSafe copy.sol\":17932:17965  allocateFees(_undividedDividends) */\n      tag_443\n        /* \"contracts/DiamodSafe copy.sol\":17945:17964  _undividedDividends */\n      dup3\n        /* \"contracts/DiamodSafe copy.sol\":17932:17944  allocateFees */\n      tag_244\n        /* \"contracts/DiamodSafe copy.sol\":17932:17965  allocateFees(_undividedDividends) */\n      jump\t// in\n    tag_443:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":18013:18035  balanceOf_[_recipient] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":18013:18023  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe copy.sol\":18013:18035  balanceOf_[_recipient] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":18000:18045  SafeMath.add(balanceOf_[_recipient], _tokens) */\n      tag_444\n      swap1\n        /* \"contracts/DiamodSafe copy.sol\":18037:18044  _tokens */\n      dup3\n        /* \"contracts/DiamodSafe copy.sol\":18000:18012  SafeMath.add */\n      tag_268\n        /* \"contracts/DiamodSafe copy.sol\":18000:18045  SafeMath.add(balanceOf_[_recipient], _tokens) */\n      jump\t// in\n    tag_444:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/DiamodSafe copy.sol\":17975:17997  balanceOf_[_recipient] */\n      dup7\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/DiamodSafe copy.sol\":17975:17985  balanceOf_ */\n      0x14\n        /* \"contracts/DiamodSafe copy.sol\":17975:17997  balanceOf_[_recipient] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":17975:18045  balanceOf_[_recipient] = SafeMath.add(balanceOf_[_recipient], _tokens) */\n      swap4\n      swap1\n      swap4\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":18120:18135  profitPerShare_ */\n      sload(0x12)\n        /* \"contracts/DiamodSafe copy.sol\":18184:18194  payoutsOf_ */\n      0x13\n        /* \"contracts/DiamodSafe copy.sol\":18184:18206  payoutsOf_[_recipient] */\n      dup3\n      mstore\n      dup4\n      dup4\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":18184:18225  payoutsOf_[_recipient] += _updatedPayouts */\n      dup1\n      sload\n        /* \"contracts/DiamodSafe copy.sol\":18120:18145  profitPerShare_ * _tokens */\n      swap2\n      dup7\n      mul\n        /* \"contracts/DiamodSafe copy.sol\":18184:18225  payoutsOf_[_recipient] += _updatedPayouts */\n      swap2\n      swap1\n      swap2\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":18235:18245  accountOf_ */\n      0x15\n        /* \"contracts/DiamodSafe copy.sol\":18235:18257  accountOf_[_recipient] */\n      swap1\n      mstore\n      keccak256\n        /* \"contracts/DiamodSafe copy.sol\":18235:18278  accountOf_[_recipient].deposited += _amount */\n      dup1\n      sload\n      dup6\n      add\n      dup2\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":18288:18320  accountOf_[_recipient].xInvested */\n      0x08\n      add\n        /* \"contracts/DiamodSafe copy.sol\":18288:18325  accountOf_[_recipient].xInvested += 1 */\n      dup1\n      sload\n      0x01\n      add\n      swap1\n      sstore\n        /* \"contracts/DiamodSafe copy.sol\":18138:18145  _tokens */\n      swap2\n      pop\n      pop\n        /* \"contracts/DiamodSafe copy.sol\":16843:18419  function _depositTokens(... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/SafeMath.sol\":7288:7453  function safeSub(uint a, uint b) internal pure returns (uint) {... */\n    tag_402:\n        /* \"contracts/SafeMath.sol\":7344:7348  uint */\n      0x00\n        /* \"contracts/SafeMath.sol\":7368:7369  a */\n      dup3\n        /* \"contracts/SafeMath.sol\":7364:7365  b */\n      dup3\n        /* \"contracts/SafeMath.sol\":7364:7369  b > a */\n      gt\n        /* \"contracts/SafeMath.sol\":7360:7447  if (b > a) {... */\n      iszero\n      tag_446\n      jumpi\n      pop\n        /* \"contracts/SafeMath.sol\":7392:7393  0 */\n      0x00\n        /* \"contracts/SafeMath.sol\":7385:7393  return 0 */\n      jump(tag_285)\n        /* \"contracts/SafeMath.sol\":7360:7447  if (b > a) {... */\n    tag_446:\n      pop\n        /* \"contracts/SafeMath.sol\":7431:7436  a - b */\n      dup1\n      dup3\n      sub\n        /* \"contracts/SafeMath.sol\":7424:7436  return a - b */\n      jump(tag_285)\n    tag_289:\n      mload(0x40)\n      dup1\n      0x01c0\n      add\n      0x40\n      mstore\n      dup1\n      0x0e\n      swap1\n      0x20\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      pop\n      swap2\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n    tag_292:\n      mload(0x40)\n      dup1\n      0x01e0\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      pop\n      swap1\n      jump\t// out\n    tag_356:\n      dup3\n      dup1\n      sload\n      dup3\n      dup3\n      sstore\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      dup2\n      add\n      swap3\n      dup3\n      iszero\n      tag_450\n      jumpi\n      swap2\n      0x20\n      mul\n      dup3\n      add\n    tag_449:\n      dup3\n      dup2\n      gt\n      iszero\n      tag_450\n      jumpi\n      dup3\n      mload\n      dup3\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      or\n      dup3\n      sstore\n      0x20\n      swap1\n      swap3\n      add\n      swap2\n      0x01\n      swap1\n      swap2\n      add\n      swap1\n      jump(tag_449)\n    tag_450:\n      pop\n      tag_451\n      swap3\n      swap2\n      pop\n      tag_452\n      jump\t// in\n    tag_451:\n      pop\n      swap1\n      jump\t// out\n    tag_452:\n    tag_453:\n      dup1\n      dup3\n      gt\n      iszero\n      tag_451\n      jumpi\n      0x00\n      dup2\n      sstore\n      0x01\n      add\n      jump(tag_453)\n    stop\n    data_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe 4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373\n    data_27cc9c295b15a532bb1b5f9308f1d54813e694c2ebdd1c2ced210bfe52dcd57e 29f64f6f46c82c5ecfa955fe7d093e63b4106b6dbe5193e00efd62c7384ef177\n    data_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae 416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564\n    data_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3 536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77\n    data_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe 4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n\n    auxdata: 0xa264697066735822122036c8969b296e230c736747f6dc7e1ecadd2e50a652eb4d913b73ecfe4159641264736f6c63430007040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b506040516200261338038062002613833981810160405260608110156200003757600080fd5b50805160208201516040909201519091906000620000546200018a565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180556001600160a01b03831615801590620000cc5750620000cc836200018e60201b62001a231760201c565b62000110576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4144445245535360881b604482015290519081900360640190fd5b600d8054600480546001600160a01b039687166001600160a01b031991821681179092556002805482169092178255600580549091163317905560ff90931660ff199590941661010002610100600160a81b031990911617939093169190911790915542600955600e556001600f81905560035562000194565b3390565b3b151590565b61246f80620001a46000396000f3fe60806040526004361061026a5760003560e01c8063949e8acd11610144578063e02e1e9c116100b6578063f69e20461161007a578063f69e2046146107e7578063f6db0da0146107fc578063f7c618c1146108ac578063fbaf1bbd146108c1578063ffaad6a5146108f4578063ffe6bbd81461092d576102c0565b8063e02e1e9c14610718578063eedc966a14610742578063f14faf6f14610775578063f20202751461079f578063f2fde38b146107b4576102c0565b8063aecb6d2811610108578063aecb6d281461065a578063b03cf5a71461066f578063b6b55f2514610699578063b9db102a146106c3578063d3261592146106d8578063d7c3771d14610703576102c0565b8063949e8acd146105cd5780639d76ea58146105e2578063a01496de146105f7578063a9059cbb1461060c578063ad7a672f14610645576102c0565b8063537a39bb116101dd5780637e6335c7116101a15780637e6335c7146104dd5780638086b8ba1461050d57806381fce645146105795780638620410b1461058e57806389375abf146105a35780638da5cb5b146105b8576102c0565b8063537a39bb1461043a57806370a082311461044f578063715018a61461048257806372f702f3146104975780637d882097146104c8576102c0565b80631f38b9cd1161022f5780631f38b9cd146103735780632e1a7d4d1461038857806336599ead146103b457806341c61383146103fb5780634641257d146104105780634b75033414610425576102c0565b806265318b146102c557806308560ace1461030a57806310d0ffdd1461031f57806318160ddd146103495780631924063e1461035e576102c0565b366102c057600554610285906001600160a01b031634610942565b60408051348152426020820152815133927f3c2bd1b3f5ca07afb09fbee41ac43da2b98d9c2e9832673052e546bd1d4c091d928290030190a2005b600080fd5b3480156102d157600080fd5b506102f8600480360360208110156102e857600080fd5b50356001600160a01b0316610a2c565b60408051918252519081900360200190f35b34801561031657600080fd5b506102f8610a65565b34801561032b57600080fd5b506102f86004803603602081101561034257600080fd5b5035610a6b565b34801561035557600080fd5b506102f8610aab565b34801561036a57600080fd5b506102f8610ab1565b34801561037f57600080fd5b506102f8610ab7565b34801561039457600080fd5b506103b2600480360360208110156103ab57600080fd5b5035610abd565b005b3480156103c057600080fd5b506103e7600480360360208110156103d757600080fd5b50356001600160a01b0316610c5b565b604080519115158252519081900360200190f35b34801561040757600080fd5b506102f8610d26565b34801561041c57600080fd5b506103b2610d2c565b34801561043157600080fd5b506102f8610e9d565b34801561044657600080fd5b506102f8610ecd565b34801561045b57600080fd5b506102f86004803603602081101561047257600080fd5b50356001600160a01b0316610ed3565b34801561048e57600080fd5b506103b2610eee565b3480156104a357600080fd5b506104ac610f9a565b604080516001600160a01b039092168252519081900360200190f35b3480156104d457600080fd5b506102f8610fa9565b3480156104e957600080fd5b506103e76004803603604081101561050057600080fd5b5080359060200135610faf565b34801561051957600080fd5b506105406004803603602081101561053057600080fd5b50356001600160a01b03166110c4565b60405180826101c080838360005b8381101561056657818101518382015260200161054e565b5050505090500191505060405180910390f35b34801561058557600080fd5b506102f8611247565b34801561059a57600080fd5b506102f861124c565b3480156105af57600080fd5b506102f8611274565b3480156105c457600080fd5b506104ac61127a565b3480156105d957600080fd5b506102f8611289565b3480156105ee57600080fd5b506104ac611299565b34801561060357600080fd5b506102f86112a8565b34801561061857600080fd5b506103e76004803603604081101561062f57600080fd5b506001600160a01b0381351690602001356112ae565b34801561065157600080fd5b506102f86112d4565b34801561066657600080fd5b506102f8611350565b34801561067b57600080fd5b506104ac6004803603602081101561069257600080fd5b5035611356565b3480156106a557600080fd5b506102f8600480360360208110156106bc57600080fd5b5035611380565b3480156106cf57600080fd5b506102f861138c565b3480156106e457600080fd5b506106ed611392565b6040805160ff9092168252519081900360200190f35b34801561070f57600080fd5b506104ac61139b565b34801561072457600080fd5b506102f86004803603602081101561073b57600080fd5b50356113aa565b34801561074e57600080fd5b506102f86004803603602081101561076557600080fd5b50356001600160a01b03166113d1565b34801561078157600080fd5b506102f86004803603602081101561079857600080fd5b50356113de565b3480156107ab57600080fd5b506102f86114e2565b3480156107c057600080fd5b506103b2600480360360208110156107d757600080fd5b50356001600160a01b03166114e8565b3480156107f357600080fd5b506103b26115ea565b34801561080857600080fd5b506103e76004803603602081101561081f57600080fd5b81019060208101813564010000000081111561083a57600080fd5b82018360208201111561084c57600080fd5b8035906020019184602083028401116401000000008311171561086e57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611609945050505050565b3480156108b857600080fd5b506104ac611896565b3480156108cd57600080fd5b506102f8600480360360208110156108e457600080fd5b50356001600160a01b03166118aa565b34801561090057600080fd5b506102f86004803603604081101561091757600080fd5b506001600160a01b03813516906020013561190d565b34801561093957600080fd5b506102f8611a18565b80471015610997576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d80600081146109e2576040519150601f19603f3d011682016040523d82523d6000602084013e6109e7565b606091505b5050905080610a275760405162461bcd60e51b815260040180806020018281038252603a8152602001806123bf603a913960400191505060405180910390fd5b505050565b6001600160a01b0381166000908152601360209081526040808320546014909252822054601254600160401b929102030490505b919050565b60035481565b6000601154821115610a7c57600080fd5b816000610a94610a8d836003611a29565b6064611a82565b90506000610aa28383611ae9565b95945050505050565b60115490565b60105481565b600f5481565b6000610ac7611289565b11610ad157600080fd5b33600081815260146020526040902054821115610aed57600080fd5b60006064610afc846003611a29565b81610b0357fe5b0490506000610b1133610c5b565b90508015610b1e57600091505b6000610b2a8584611ae9565b9050610b3860115486611ae9565b6011556001600160a01b038416600090815260146020526040902054610b5e9086611ae9565b6001600160a01b03851660009081526014602090815260408083209390935560125460139091529190208054918702600160401b840201918290039055610ba484611b46565b6040805187815260208101849052428183015290516001600160a01b038716917f90ebb005d68efee044927e1e77e1fd0cecc508368aa72c39250a787eed5f0a70919081900360600190a26001600160a01b0385166000818152601560208181526040808420805460148452948290205493835260020154815194855291840192909252828201524260608301525160008051602061239f8339815191529181900360800190a2610c53611bd4565b505050505050565b60008080805b600654811015610d075760068181548110610c7857fe5b60009182526020918290200154604080516370a0823160e01b81526001600160a01b038981166004830152915191909216945084926370a082319260248082019391829003018186803b158015610cce57600080fd5b505afa158015610ce2573d6000803e3d6000fd5b505050506040513d6020811015610cf857600080fd5b50519290920191600101610c61565b506003548210610d1c57600192505050610a60565b5060009392505050565b600a5481565b6000610d36611a18565b11610d4057600080fd5b336000610d4b611a18565b6001600160a01b0380841660008181526013602090815260408083208054600160401b8802019055600254815163a9059cbb60e01b815260048101959095526024850187905290519596509093169363a9059cbb936044808501949193918390030190829087803b158015610dbf57600080fd5b505af1158015610dd3573d6000803e3d6000fd5b505050506040513d6020811015610de957600080fd5b50506001600160a01b038216600090815260156020526040902060020154610e119082611ccb565b6001600160a01b0383166000818152601560209081526040918290206002810194909455600c90930180546001908101909155600880549091019055600a80548501905580518481524293810193909352805191927f1b091269e929df55d64d6ea7e9cadbe4fb38dce5ccdc995767bc515030dbfbbf929081900390910190a2610e99611bd4565b5050565b6000670de0b6b3a764000081610eb7610a8d836003611a29565b90506000610ec58383611ae9565b935050505090565b60085481565b6001600160a01b031660009081526014602052604090205490565b610ef6611d25565b6001600160a01b0316610f0761127a565b6001600160a01b031614610f50576040805162461bcd60e51b8152602060048201819052602482015260008051602061241a833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6002546001600160a01b031681565b600b5481565b6000610fb9611d25565b6001600160a01b0316610fca61127a565b6001600160a01b031614611013576040805162461bcd60e51b8152602060048201819052602482015260008051602061241a833981519152604482015290519081900360640190fd5b61101d8383611ccb565b600314611071576040805162461bcd60e51b815260206004820152601d60248201527f54454e5f504f5254494f4e535f524551554952455f4449564953494f4e000000604482015290519081900360640190fd5b600e839055600f8290556040805184815260208101849052428183015290517f677017fa3a0fe0f50a95e6024c5b688f2b14a4696c4a897c459715cabfc1c03a9181900360600190a15060015b92915050565b6110cc612269565b6110d4612288565b506001600160a01b03821660009081526015602090815260409182902082516101e081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e082015260088201546101008201526009820154610120820152600a820154610140820152600b820154610160820152600c820154610180820152600d8201546101a0820152600e909101546101c082015261119e612269565b604051806101c00160405280836000015181526020018360400151815260200183608001518152602001836060015181526020018360a0015181526020018360c0015181526020018360e0015181526020018361010001518152602001836101400151815260200183610160015181526020018361018001518152602001836101a001518152602001836101c00151815260200183610120015181525090508092505050919050565b600281565b6000670de0b6b3a764000081611266610a8d836003611a29565b90506000610ec58383611ccb565b61546081565b6000546001600160a01b031690565b600061129433610ed3565b905090565b6004546001600160a01b031681565b600e5481565b6000806112b9611289565b116112c357600080fd5b6112cd8383611d29565b9392505050565b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561131f57600080fd5b505afa158015611333573d6000803e3d6000fd5b505050506040513d602081101561134957600080fd5b5051905090565b600c5481565b6006818154811061136657600080fd5b6000918252602090912001546001600160a01b0316905081565b60006110be338361190d565b60095481565b600d5460ff1681565b6005546001600160a01b031681565b6000806113bb610a8d846003611a29565b905060006113c98483611ae9565b949350505050565b6001600160a01b03163190565b600d54604080516323b872dd60e01b815233600482015230602482015260448101849052905160009261010090046001600160a01b0316916323b872dd91606480830192602092919082900301818787803b15801561143c57600080fd5b505af1158015611450573d6000803e3d6000fd5b505050506040513d602081101561146657600080fd5b505161147157600080fd5b600c80548301905533600081815260156020908152604091829020600b8101805460010190556005018054860190558151858152429181019190915281517f0da1788c3e861a58a47f0d46073b13c4d66efcc259714744f920d1afe7b8dee5929181900390910190a25050600c5490565b60075481565b6114f0611d25565b6001600160a01b031661150161127a565b6001600160a01b03161461154a576040805162461bcd60e51b8152602060048201819052602482015260008051602061241a833981519152604482015290519081900360640190fd5b6001600160a01b03811661158f5760405162461bcd60e51b81526004018080602001828103825260268152602001806123796026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006115f4611a18565b116115fe57600080fd5b611606611f94565b50565b6000611613611d25565b6001600160a01b031661162461127a565b6001600160a01b03161461166d576040805162461bcd60e51b8152602060048201819052602482015260008051602061241a833981519152604482015290519081900360640190fd5b60005b60065481101561174a5782818151811061168657fe5b60200260200101516001600160a01b03166301ffc9a76380ac58cd6040518263ffffffff1660e01b8152600401808260e01b815260200191505060206040518083038186803b1580156116d857600080fd5b505afa1580156116ec573d6000803e3d6000fd5b505050506040513d602081101561170257600080fd5b5051611742576040805162461bcd60e51b815260206004820152600a6024820152694e4f545f45524337323160b01b604482015290519081900360640190fd5b600101611670565b50606060068054806020026020016040519081016040528092919081815260200182805480156117a357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611785575b505086519394506117bf936006935060208801925090506122fe565b50336001600160a01b03167ff0650831416f723858005cfeae97a2d6f5e127d1e6ae8938574d1d73e7f4727c828542604051808060200180602001848152602001838103835286818151815260200191508051906020019060200280838360005b83811015611838578181015183820152602001611820565b50505050905001838103825285818151815260200191508051906020019060200280838360005b8381101561187757818101518382015260200161185f565b505050509050019550505050505060405180910390a250600192915050565b600d5461010090046001600160a01b031681565b600d54600c5460009182916118ce916064916118c89160ff16611a29565b90611a82565b90506000601154116118e15760006112cd565b6011546001600160a01b0384166000908152601460205260409020546112cd91906118c8908490611a29565b600254604080516323b872dd60e01b81523360048201523060248201526044810184905290516000926001600160a01b0316916323b872dd91606480830192602092919082900301818787803b15801561196657600080fd5b505af115801561197a573d6000803e3d6000fd5b505050506040513d602081101561199057600080fd5b505161199b57600080fd5b600b80548301905560006119af84846120c9565b6001600160a01b03851660008181526015602081815260408084208054601484529482902054938352600201548151948552918401929092528282015242606083015251929350909160008051602061239f8339815191529181900360800190a26112cd611bd4565b600061129433610a2c565b3b151590565b600082611a38575060006110be565b82820282848281611a4557fe5b04146112cd5760405162461bcd60e51b81526004018080602001828103825260218152602001806123f96021913960400191505060405180910390fd5b6000808211611ad8576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611ae157fe5b049392505050565b600082821115611b40576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000611b5382600a611a82565b90506000611b6c600e5483611a2990919063ffffffff16565b90506000611b85600f5484611a2990919063ffffffff16565b600c54909150611b959083611ccb565b600c5560115415611bc557611bbd601254601154600160401b840281611bb757fe5b04611ccb565b601255611bce565b600c8054820190555b50505050565b601054429061546090611be890839061224e565b1115611c34577f2cfce469a63f2e9972b7f23da751e6943ed2b091c10e40b5c43b5f6105bf20ea611c176112d4565b60408051918252602082018490528051918290030190a160108190555b6002611c428260095461224e565b118015611c5157506000601154115b1561160657600d54600c54600091611c7a9162015180916118c89160649183919060ff16611a29565b90506000611c936009548461224e90919063ffffffff16565b600c549083029150611ca5908261224e565b600c55601254601154611cc19190600160401b840281611bb757fe5b6012555050600955565b6000828201838110156112cd576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3390565b33600081815260146020526040812054909190831115611d4857600080fd5b6000611d52611a18565b1115611d6057611d60610d2c565b6001600160a01b038116600090815260146020526040902054611d839084611ae9565b6001600160a01b038083166000908152601460205260408082209390935590861681522054611db29084611ccb565b6001600160a01b03858116600081815260146020908152604080832095909555601280549487168352601382528583208054958a029095039094559254918152838120805492880290920190915560159091522054158015611e2d57506001600160a01b038416600090815260156020526040902060070154155b15611e3c576007805460010190555b6001600160a01b038082166000818152601560209081526040808320600d810180546001908101909155600690910180548a019055948916808452928190206007810180548a019055600e018054860190556008805490950190945583518781524291810191909152835191937f91c7d71a3ae3fb7cf61e00517bf4868e9e23d0bace5e304cbc3b68de5d85350e92918290030190a36001600160a01b0381166000818152601560208181526040808420805460148452948290205493835260020154815194855291840192909252828201524260608301525160008051602061239f8339815191529181900360800190a26001600160a01b0384166000818152601560208181526040808420805460148452948290205493835260020154815194855291840192909252828201524260608301525160008051602061239f8339815191529181900360800190a25060019392505050565b60003381611fa182610a2c565b6001600160a01b03831660009081526013602052604081208054600160401b8402019055909150611fd233836120c9565b6040805184815260208101839052428183015290519192506001600160a01b038516917f193a876ac91d11a4a0a71ebef73b195ba55aa7c16d6755c93c21d973e692a02c9181900360600190a26001600160a01b0383166000908152601560205260409020600301546120459083611ccb565b6001600160a01b0384166000818152601560208181526040808420600381019690965560098601805460010190558554601483529381902054928252600290950154855193845290830191909152818401524260608201529151909160008051602061239f833981519152919081900360800190a26120c2611bd4565b9250505090565b6001600160a01b03821660009081526015602052604081205415801561210857506001600160a01b038316600090815260156020526040902060070154155b15612117576007805460010190555b6008805460010190556000606461212f846003611a29565b8161213657fe5b04905060006121458483611ae9565b6040805186815260208101839052428183015290519192506001600160a01b038716917fb49bb132260f6aa1c86e2d2a3957c097216e6ec9b5fa15867289f058b4d297ac9181900360600190a26000811180156121ac57506011546121aa8282611ccb565b115b6121b557600080fd5b601154156121ca5760118054820190556121d0565b60118190555b6121d982611b46565b6001600160a01b0385166000908152601460205260409020546121fc9082611ccb565b6001600160a01b03861660009081526014602090815260408083209390935560125460138252838320805491860291909101905560159052208054850181556008018054600101905591505092915050565b600082821115612260575060006110be565b508082036110be565b604051806101c00160405280600e906020820280368337509192915050565b604051806101e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b828054828255906000526020600020908101928215612353579160200282015b8281111561235357825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061231e565b5061235f929150612363565b5090565b5b8082111561235f576000815560010161236456fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737329f64f6f46c82c5ecfa955fe7d093e63b4106b6dbe5193e00efd62c7384ef177416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a264697066735822122036c8969b296e230c736747f6dc7e1ecadd2e50a652eb4d913b73ecfe4159641264736f6c63430007040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2613 CODESIZE SUB DUP1 PUSH3 0x2613 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x60 DUP2 LT ISZERO PUSH3 0x37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 SWAP1 SWAP3 ADD MLOAD SWAP1 SWAP2 SWAP1 PUSH1 0x0 PUSH3 0x54 PUSH3 0x18A JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP3 SWAP4 POP SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 POP PUSH1 0x1 DUP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH3 0xCC JUMPI POP PUSH3 0xCC DUP4 PUSH3 0x18E PUSH1 0x20 SHL PUSH3 0x1A23 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x110 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x494E56414C49445F41444452455353 PUSH1 0x88 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE PUSH1 0x2 DUP1 SLOAD DUP3 AND SWAP1 SWAP3 OR DUP3 SSTORE PUSH1 0x5 DUP1 SLOAD SWAP1 SWAP2 AND CALLER OR SWAP1 SSTORE PUSH1 0xFF SWAP1 SWAP4 AND PUSH1 0xFF NOT SWAP6 SWAP1 SWAP5 AND PUSH2 0x100 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP4 SWAP1 SWAP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE TIMESTAMP PUSH1 0x9 SSTORE PUSH1 0xE SSTORE PUSH1 0x1 PUSH1 0xF DUP2 SWAP1 SSTORE PUSH1 0x3 SSTORE PUSH3 0x194 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x246F DUP1 PUSH3 0x1A4 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x26A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x949E8ACD GT PUSH2 0x144 JUMPI DUP1 PUSH4 0xE02E1E9C GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0xF69E2046 GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xF69E2046 EQ PUSH2 0x7E7 JUMPI DUP1 PUSH4 0xF6DB0DA0 EQ PUSH2 0x7FC JUMPI DUP1 PUSH4 0xF7C618C1 EQ PUSH2 0x8AC JUMPI DUP1 PUSH4 0xFBAF1BBD EQ PUSH2 0x8C1 JUMPI DUP1 PUSH4 0xFFAAD6A5 EQ PUSH2 0x8F4 JUMPI DUP1 PUSH4 0xFFE6BBD8 EQ PUSH2 0x92D JUMPI PUSH2 0x2C0 JUMP JUMPDEST DUP1 PUSH4 0xE02E1E9C EQ PUSH2 0x718 JUMPI DUP1 PUSH4 0xEEDC966A EQ PUSH2 0x742 JUMPI DUP1 PUSH4 0xF14FAF6F EQ PUSH2 0x775 JUMPI DUP1 PUSH4 0xF2020275 EQ PUSH2 0x79F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x7B4 JUMPI PUSH2 0x2C0 JUMP JUMPDEST DUP1 PUSH4 0xAECB6D28 GT PUSH2 0x108 JUMPI DUP1 PUSH4 0xAECB6D28 EQ PUSH2 0x65A JUMPI DUP1 PUSH4 0xB03CF5A7 EQ PUSH2 0x66F JUMPI DUP1 PUSH4 0xB6B55F25 EQ PUSH2 0x699 JUMPI DUP1 PUSH4 0xB9DB102A EQ PUSH2 0x6C3 JUMPI DUP1 PUSH4 0xD3261592 EQ PUSH2 0x6D8 JUMPI DUP1 PUSH4 0xD7C3771D EQ PUSH2 0x703 JUMPI PUSH2 0x2C0 JUMP JUMPDEST DUP1 PUSH4 0x949E8ACD EQ PUSH2 0x5CD JUMPI DUP1 PUSH4 0x9D76EA58 EQ PUSH2 0x5E2 JUMPI DUP1 PUSH4 0xA01496DE EQ PUSH2 0x5F7 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x60C JUMPI DUP1 PUSH4 0xAD7A672F EQ PUSH2 0x645 JUMPI PUSH2 0x2C0 JUMP JUMPDEST DUP1 PUSH4 0x537A39BB GT PUSH2 0x1DD JUMPI DUP1 PUSH4 0x7E6335C7 GT PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x7E6335C7 EQ PUSH2 0x4DD JUMPI DUP1 PUSH4 0x8086B8BA EQ PUSH2 0x50D JUMPI DUP1 PUSH4 0x81FCE645 EQ PUSH2 0x579 JUMPI DUP1 PUSH4 0x8620410B EQ PUSH2 0x58E JUMPI DUP1 PUSH4 0x89375ABF EQ PUSH2 0x5A3 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x5B8 JUMPI PUSH2 0x2C0 JUMP JUMPDEST DUP1 PUSH4 0x537A39BB EQ PUSH2 0x43A JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x44F JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x482 JUMPI DUP1 PUSH4 0x72F702F3 EQ PUSH2 0x497 JUMPI DUP1 PUSH4 0x7D882097 EQ PUSH2 0x4C8 JUMPI PUSH2 0x2C0 JUMP JUMPDEST DUP1 PUSH4 0x1F38B9CD GT PUSH2 0x22F JUMPI DUP1 PUSH4 0x1F38B9CD EQ PUSH2 0x373 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x388 JUMPI DUP1 PUSH4 0x36599EAD EQ PUSH2 0x3B4 JUMPI DUP1 PUSH4 0x41C61383 EQ PUSH2 0x3FB JUMPI DUP1 PUSH4 0x4641257D EQ PUSH2 0x410 JUMPI DUP1 PUSH4 0x4B750334 EQ PUSH2 0x425 JUMPI PUSH2 0x2C0 JUMP JUMPDEST DUP1 PUSH3 0x65318B EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x8560ACE EQ PUSH2 0x30A JUMPI DUP1 PUSH4 0x10D0FFDD EQ PUSH2 0x31F JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x349 JUMPI DUP1 PUSH4 0x1924063E EQ PUSH2 0x35E JUMPI PUSH2 0x2C0 JUMP JUMPDEST CALLDATASIZE PUSH2 0x2C0 JUMPI PUSH1 0x5 SLOAD PUSH2 0x285 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE PUSH2 0x942 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLVALUE DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP3 ADD MSTORE DUP2 MLOAD CALLER SWAP3 PUSH32 0x3C2BD1B3F5CA07AFB09FBEE41AC43DA2B98D9C2E9832673052E546BD1D4C091D SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG2 STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA2C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0xA65 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x342 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xA6B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x355 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0xAAB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0xAB1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0xAB7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x394 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xABD JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xC5B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x407 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0xD26 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B2 PUSH2 0xD2C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x431 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0xE9D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x446 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0xECD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x472 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xED3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B2 PUSH2 0xEEE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AC PUSH2 0xF9A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0xFA9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x500 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xFAF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x519 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x540 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x530 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x10C4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH2 0x1C0 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x566 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x54E JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x585 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x1247 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x59A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x124C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x1274 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AC PUSH2 0x127A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x1289 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AC PUSH2 0x1299 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x603 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x12A8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x618 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x62F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x12AE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x12D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x666 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x1350 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x692 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1356 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1380 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x138C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6ED PUSH2 0x1392 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x70F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AC PUSH2 0x139B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x724 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x73B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x13AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x74E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x765 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x13D1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x781 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x798 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x13DE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x14E2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x14E8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B2 PUSH2 0x15EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x808 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x81F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x83A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x84C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x86E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x1609 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AC PUSH2 0x1896 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x18AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x900 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x917 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x190D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x939 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x1A18 JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x997 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9E2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9E7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xA27 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x3A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x23BF PUSH1 0x3A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x14 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD PUSH1 0x12 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP3 SWAP2 MUL SUB DIV SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x11 SLOAD DUP3 GT ISZERO PUSH2 0xA7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x0 PUSH2 0xA94 PUSH2 0xA8D DUP4 PUSH1 0x3 PUSH2 0x1A29 JUMP JUMPDEST PUSH1 0x64 PUSH2 0x1A82 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xAA2 DUP4 DUP4 PUSH2 0x1AE9 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x11 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x10 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xF SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAC7 PUSH2 0x1289 JUMP JUMPDEST GT PUSH2 0xAD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0xAED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH2 0xAFC DUP5 PUSH1 0x3 PUSH2 0x1A29 JUMP JUMPDEST DUP2 PUSH2 0xB03 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH2 0xB11 CALLER PUSH2 0xC5B JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xB1E JUMPI PUSH1 0x0 SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0xB2A DUP6 DUP5 PUSH2 0x1AE9 JUMP JUMPDEST SWAP1 POP PUSH2 0xB38 PUSH1 0x11 SLOAD DUP7 PUSH2 0x1AE9 JUMP JUMPDEST PUSH1 0x11 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xB5E SWAP1 DUP7 PUSH2 0x1AE9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x12 SLOAD PUSH1 0x13 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 DUP1 SLOAD SWAP2 DUP8 MUL PUSH1 0x1 PUSH1 0x40 SHL DUP5 MUL ADD SWAP2 DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0xBA4 DUP5 PUSH2 0x1B46 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE TIMESTAMP DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP2 PUSH32 0x90EBB005D68EFEE044927E1E77E1FD0CECC508368AA72C39250A787EED5F0A70 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x14 DUP5 MSTORE SWAP5 DUP3 SWAP1 KECCAK256 SLOAD SWAP4 DUP4 MSTORE PUSH1 0x2 ADD SLOAD DUP2 MLOAD SWAP5 DUP6 MSTORE SWAP2 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x60 DUP4 ADD MSTORE MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x239F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG2 PUSH2 0xC53 PUSH2 0x1BD4 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0xD07 JUMPI PUSH1 0x6 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xC78 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 ADD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP5 POP DUP5 SWAP3 PUSH4 0x70A08231 SWAP3 PUSH1 0x24 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCE2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xCF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP3 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xC61 JUMP JUMPDEST POP PUSH1 0x3 SLOAD DUP3 LT PUSH2 0xD1C JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0xA60 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD36 PUSH2 0x1A18 JUMP JUMPDEST GT PUSH2 0xD40 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 PUSH2 0xD4B PUSH2 0x1A18 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP9 MUL ADD SWAP1 SSTORE PUSH1 0x2 SLOAD DUP2 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x24 DUP6 ADD DUP8 SWAP1 MSTORE SWAP1 MLOAD SWAP6 SWAP7 POP SWAP1 SWAP4 AND SWAP4 PUSH4 0xA9059CBB SWAP4 PUSH1 0x44 DUP1 DUP6 ADD SWAP5 SWAP2 SWAP4 SWAP2 DUP4 SWAP1 SUB ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xDD3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xDE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0xE11 SWAP1 DUP3 PUSH2 0x1CCB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x2 DUP2 ADD SWAP5 SWAP1 SWAP5 SSTORE PUSH1 0xC SWAP1 SWAP4 ADD DUP1 SLOAD PUSH1 0x1 SWAP1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH1 0x8 DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE PUSH1 0xA DUP1 SLOAD DUP6 ADD SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE TIMESTAMP SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP1 MLOAD SWAP2 SWAP3 PUSH32 0x1B091269E929DF55D64D6EA7E9CADBE4FB38DCE5CCDC995767BC515030DBFBBF SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 PUSH2 0xE99 PUSH2 0x1BD4 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0xEB7 PUSH2 0xA8D DUP4 PUSH1 0x3 PUSH2 0x1A29 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xEC5 DUP4 DUP4 PUSH2 0x1AE9 JUMP JUMPDEST SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xEF6 PUSH2 0x1D25 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xF07 PUSH2 0x127A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xF50 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x241A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFB9 PUSH2 0x1D25 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xFCA PUSH2 0x127A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1013 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x241A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x101D DUP4 DUP4 PUSH2 0x1CCB JUMP JUMPDEST PUSH1 0x3 EQ PUSH2 0x1071 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54454E5F504F5254494F4E535F524551554952455F4449564953494F4E000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xE DUP4 SWAP1 SSTORE PUSH1 0xF DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE TIMESTAMP DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH32 0x677017FA3A0FE0F50A95E6024C5B688F2B14A4696C4A897C459715CABFC1C03A SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x10CC PUSH2 0x2269 JUMP JUMPDEST PUSH2 0x10D4 PUSH2 0x2288 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH2 0x1E0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 DUP3 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 DUP3 ADD SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 DUP3 ADD SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 DUP3 ADD SLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH1 0x9 DUP3 ADD SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xA DUP3 ADD SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xB DUP3 ADD SLOAD PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0xC DUP3 ADD SLOAD PUSH2 0x180 DUP3 ADD MSTORE PUSH1 0xD DUP3 ADD SLOAD PUSH2 0x1A0 DUP3 ADD MSTORE PUSH1 0xE SWAP1 SWAP2 ADD SLOAD PUSH2 0x1C0 DUP3 ADD MSTORE PUSH2 0x119E PUSH2 0x2269 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 DUP4 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x40 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x80 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x60 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0xA0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0xC0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0xE0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x100 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x140 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x160 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x180 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x1A0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x1C0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x120 ADD MLOAD DUP2 MSTORE POP SWAP1 POP DUP1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x1266 PUSH2 0xA8D DUP4 PUSH1 0x3 PUSH2 0x1A29 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xEC5 DUP4 DUP4 PUSH2 0x1CCB JUMP JUMPDEST PUSH2 0x5460 DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1294 CALLER PUSH2 0xED3 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x12B9 PUSH2 0x1289 JUMP JUMPDEST GT PUSH2 0x12C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12CD DUP4 DUP4 PUSH2 0x1D29 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x131F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1333 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1349 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH1 0x6 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1366 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10BE CALLER DUP4 PUSH2 0x190D JUMP JUMPDEST PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x13BB PUSH2 0xA8D DUP5 PUSH1 0x3 PUSH2 0x1A29 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x13C9 DUP5 DUP4 PUSH2 0x1AE9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE SWAP1 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x23B872DD SWAP2 PUSH1 0x64 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP8 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x143C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1450 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1466 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x1471 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xC DUP1 SLOAD DUP4 ADD SWAP1 SSTORE CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0xB DUP2 ADD DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE PUSH1 0x5 ADD DUP1 SLOAD DUP7 ADD SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE TIMESTAMP SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 MLOAD PUSH32 0xDA1788C3E861A58A47F0D46073B13C4D66EFCC259714744F920D1AFE7B8DEE5 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 POP POP PUSH1 0xC SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x14F0 PUSH2 0x1D25 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1501 PUSH2 0x127A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x154A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x241A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x158F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2379 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15F4 PUSH2 0x1A18 JUMP JUMPDEST GT PUSH2 0x15FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1606 PUSH2 0x1F94 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1613 PUSH2 0x1D25 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1624 PUSH2 0x127A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x166D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x241A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0x174A JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1686 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1FFC9A7 PUSH4 0x80AC58CD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x16EC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1702 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x1742 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x4E4F545F455243373231 PUSH1 0xB0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 ADD PUSH2 0x1670 JUMP JUMPDEST POP PUSH1 0x60 PUSH1 0x6 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x17A3 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1785 JUMPI JUMPDEST POP POP DUP7 MLOAD SWAP4 SWAP5 POP PUSH2 0x17BF SWAP4 PUSH1 0x6 SWAP4 POP PUSH1 0x20 DUP9 ADD SWAP3 POP SWAP1 POP PUSH2 0x22FE JUMP JUMPDEST POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xF0650831416F723858005CFEAE97A2D6F5E127D1E6AE8938574D1D73E7F4727C DUP3 DUP6 TIMESTAMP PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 SUB DUP4 MSTORE DUP7 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1838 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1820 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP4 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1877 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x185F JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0xC SLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH2 0x18CE SWAP2 PUSH1 0x64 SWAP2 PUSH2 0x18C8 SWAP2 PUSH1 0xFF AND PUSH2 0x1A29 JUMP JUMPDEST SWAP1 PUSH2 0x1A82 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x11 SLOAD GT PUSH2 0x18E1 JUMPI PUSH1 0x0 PUSH2 0x12CD JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x12CD SWAP2 SWAP1 PUSH2 0x18C8 SWAP1 DUP5 SWAP1 PUSH2 0x1A29 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x23B872DD SWAP2 PUSH1 0x64 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP8 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1966 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x197A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1990 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x199B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xB DUP1 SLOAD DUP4 ADD SWAP1 SSTORE PUSH1 0x0 PUSH2 0x19AF DUP5 DUP5 PUSH2 0x20C9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x14 DUP5 MSTORE SWAP5 DUP3 SWAP1 KECCAK256 SLOAD SWAP4 DUP4 MSTORE PUSH1 0x2 ADD SLOAD DUP2 MLOAD SWAP5 DUP6 MSTORE SWAP2 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x60 DUP4 ADD MSTORE MLOAD SWAP3 SWAP4 POP SWAP1 SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x239F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG2 PUSH2 0x12CD PUSH2 0x1BD4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1294 CALLER PUSH2 0xA2C JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1A38 JUMPI POP PUSH1 0x0 PUSH2 0x10BE JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x1A45 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x12CD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x23F9 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x1AD8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x1AE1 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1B40 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B53 DUP3 PUSH1 0xA PUSH2 0x1A82 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B6C PUSH1 0xE SLOAD DUP4 PUSH2 0x1A29 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B85 PUSH1 0xF SLOAD DUP5 PUSH2 0x1A29 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC SLOAD SWAP1 SWAP2 POP PUSH2 0x1B95 SWAP1 DUP4 PUSH2 0x1CCB JUMP JUMPDEST PUSH1 0xC SSTORE PUSH1 0x11 SLOAD ISZERO PUSH2 0x1BC5 JUMPI PUSH2 0x1BBD PUSH1 0x12 SLOAD PUSH1 0x11 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP5 MUL DUP2 PUSH2 0x1BB7 JUMPI INVALID JUMPDEST DIV PUSH2 0x1CCB JUMP JUMPDEST PUSH1 0x12 SSTORE PUSH2 0x1BCE JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x10 SLOAD TIMESTAMP SWAP1 PUSH2 0x5460 SWAP1 PUSH2 0x1BE8 SWAP1 DUP4 SWAP1 PUSH2 0x224E JUMP JUMPDEST GT ISZERO PUSH2 0x1C34 JUMPI PUSH32 0x2CFCE469A63F2E9972B7F23DA751E6943ED2B091C10E40B5C43B5F6105BF20EA PUSH2 0x1C17 PUSH2 0x12D4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP5 SWAP1 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG1 PUSH1 0x10 DUP2 SWAP1 SSTORE JUMPDEST PUSH1 0x2 PUSH2 0x1C42 DUP3 PUSH1 0x9 SLOAD PUSH2 0x224E JUMP JUMPDEST GT DUP1 ISZERO PUSH2 0x1C51 JUMPI POP PUSH1 0x0 PUSH1 0x11 SLOAD GT JUMPDEST ISZERO PUSH2 0x1606 JUMPI PUSH1 0xD SLOAD PUSH1 0xC SLOAD PUSH1 0x0 SWAP2 PUSH2 0x1C7A SWAP2 PUSH3 0x15180 SWAP2 PUSH2 0x18C8 SWAP2 PUSH1 0x64 SWAP2 DUP4 SWAP2 SWAP1 PUSH1 0xFF AND PUSH2 0x1A29 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1C93 PUSH1 0x9 SLOAD DUP5 PUSH2 0x224E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC SLOAD SWAP1 DUP4 MUL SWAP2 POP PUSH2 0x1CA5 SWAP1 DUP3 PUSH2 0x224E JUMP JUMPDEST PUSH1 0xC SSTORE PUSH1 0x12 SLOAD PUSH1 0x11 SLOAD PUSH2 0x1CC1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x40 SHL DUP5 MUL DUP2 PUSH2 0x1BB7 JUMPI INVALID JUMPDEST PUSH1 0x12 SSTORE POP POP PUSH1 0x9 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x12CD JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST CALLER SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 GT ISZERO PUSH2 0x1D48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D52 PUSH2 0x1A18 JUMP JUMPDEST GT ISZERO PUSH2 0x1D60 JUMPI PUSH2 0x1D60 PUSH2 0xD2C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1D83 SWAP1 DUP5 PUSH2 0x1AE9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP7 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x1DB2 SWAP1 DUP5 PUSH2 0x1CCB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP6 SWAP1 SWAP6 SSTORE PUSH1 0x12 DUP1 SLOAD SWAP5 DUP8 AND DUP4 MSTORE PUSH1 0x13 DUP3 MSTORE DUP6 DUP4 KECCAK256 DUP1 SLOAD SWAP6 DUP11 MUL SWAP1 SWAP6 SUB SWAP1 SWAP5 SSTORE SWAP3 SLOAD SWAP2 DUP2 MSTORE DUP4 DUP2 KECCAK256 DUP1 SLOAD SWAP3 DUP9 MUL SWAP1 SWAP3 ADD SWAP1 SWAP2 SSTORE PUSH1 0x15 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD ISZERO DUP1 ISZERO PUSH2 0x1E2D JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 ADD SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x1E3C JUMPI PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0xD DUP2 ADD DUP1 SLOAD PUSH1 0x1 SWAP1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH1 0x6 SWAP1 SWAP2 ADD DUP1 SLOAD DUP11 ADD SWAP1 SSTORE SWAP5 DUP10 AND DUP1 DUP5 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 PUSH1 0x7 DUP2 ADD DUP1 SLOAD DUP11 ADD SWAP1 SSTORE PUSH1 0xE ADD DUP1 SLOAD DUP7 ADD SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD SWAP1 SWAP6 ADD SWAP1 SWAP5 SSTORE DUP4 MLOAD DUP8 DUP2 MSTORE TIMESTAMP SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD SWAP2 SWAP4 PUSH32 0x91C7D71A3AE3FB7CF61E00517BF4868E9E23D0BACE5E304CBC3B68DE5D85350E SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x14 DUP5 MSTORE SWAP5 DUP3 SWAP1 KECCAK256 SLOAD SWAP4 DUP4 MSTORE PUSH1 0x2 ADD SLOAD DUP2 MLOAD SWAP5 DUP6 MSTORE SWAP2 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x60 DUP4 ADD MSTORE MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x239F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x14 DUP5 MSTORE SWAP5 DUP3 SWAP1 KECCAK256 SLOAD SWAP4 DUP4 MSTORE PUSH1 0x2 ADD SLOAD DUP2 MLOAD SWAP5 DUP6 MSTORE SWAP2 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x60 DUP4 ADD MSTORE MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x239F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG2 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x1FA1 DUP3 PUSH2 0xA2C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP5 MUL ADD SWAP1 SSTORE SWAP1 SWAP2 POP PUSH2 0x1FD2 CALLER DUP4 PUSH2 0x20C9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE TIMESTAMP DUP2 DUP4 ADD MSTORE SWAP1 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 PUSH32 0x193A876AC91D11A4A0A71EBEF73B195BA55AA7C16D6755C93C21D973E692A02C SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH2 0x2045 SWAP1 DUP4 PUSH2 0x1CCB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x3 DUP2 ADD SWAP7 SWAP1 SWAP7 SSTORE PUSH1 0x9 DUP7 ADD DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP6 SLOAD PUSH1 0x14 DUP4 MSTORE SWAP4 DUP2 SWAP1 KECCAK256 SLOAD SWAP3 DUP3 MSTORE PUSH1 0x2 SWAP1 SWAP6 ADD SLOAD DUP6 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 DUP5 ADD MSTORE TIMESTAMP PUSH1 0x60 DUP3 ADD MSTORE SWAP2 MLOAD SWAP1 SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x239F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG2 PUSH2 0x20C2 PUSH2 0x1BD4 JUMP JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO DUP1 ISZERO PUSH2 0x2108 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 ADD SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x2117 JUMPI PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE PUSH1 0x0 PUSH1 0x64 PUSH2 0x212F DUP5 PUSH1 0x3 PUSH2 0x1A29 JUMP JUMPDEST DUP2 PUSH2 0x2136 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH2 0x2145 DUP5 DUP4 PUSH2 0x1AE9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE TIMESTAMP DUP2 DUP4 ADD MSTORE SWAP1 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP2 PUSH32 0xB49BB132260F6AA1C86E2D2A3957C097216E6EC9B5FA15867289F058B4D297AC SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG2 PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x21AC JUMPI POP PUSH1 0x11 SLOAD PUSH2 0x21AA DUP3 DUP3 PUSH2 0x1CCB JUMP JUMPDEST GT JUMPDEST PUSH2 0x21B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x11 SLOAD ISZERO PUSH2 0x21CA JUMPI PUSH1 0x11 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE PUSH2 0x21D0 JUMP JUMPDEST PUSH1 0x11 DUP2 SWAP1 SSTORE JUMPDEST PUSH2 0x21D9 DUP3 PUSH2 0x1B46 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x21FC SWAP1 DUP3 PUSH2 0x1CCB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x12 SLOAD PUSH1 0x13 DUP3 MSTORE DUP4 DUP4 KECCAK256 DUP1 SLOAD SWAP2 DUP7 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SSTORE PUSH1 0x15 SWAP1 MSTORE KECCAK256 DUP1 SLOAD DUP6 ADD DUP2 SSTORE PUSH1 0x8 ADD DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x2260 JUMPI POP PUSH1 0x0 PUSH2 0x10BE JUMP JUMPDEST POP DUP1 DUP3 SUB PUSH2 0x10BE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1E0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x2353 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x2353 JUMPI DUP3 MLOAD DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x231E JUMP JUMPDEST POP PUSH2 0x235F SWAP3 SWAP2 POP PUSH2 0x2363 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x235F JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2364 JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F206164647265737329F64F6F46C82C5ECFA955FE7D093E63 0xB4 LT PUSH12 0x6DBE5193E00EFD62C7384EF1 PUSH24 0x416464726573733A20756E61626C6520746F2073656E6420 PUSH23 0x616C75652C20726563697069656E74206D617920686176 PUSH6 0x207265766572 PUSH21 0x6564536166654D6174683A206D756C7469706C6963 PUSH2 0x7469 PUSH16 0x6E206F766572666C6F774F776E61626C PUSH6 0x3A2063616C6C PUSH6 0x72206973206E PUSH16 0x7420746865206F776E6572A264697066 PUSH20 0x5822122036C8969B296E230C736747F6DC7E1ECA 0xDD 0x2E POP 0xA6 MSTORE 0xEB 0x4D SWAP2 EXTCODESIZE PUSH20 0xECFE4159641264736F6C63430007040033000000 ",
							"sourceMap": "237:21418:2:-:0;;;4590:627;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4590:627:2;;;;;;;;;;;;;;877:17:5;897:12;:10;:12::i;:::-;919:6;:18;;-1:-1:-1;;;;;;919:18:5;-1:-1:-1;;;;;919:18:5;;;;;;;952:43;;919:18;;-1:-1:-1;919:18:5;952:43;;919:6;;952:43;-1:-1:-1;1716:1:6;1821:22;;-1:-1:-1;;;;;4705:27:2;::::1;::::0;;::::1;::::0;:64:::1;;;4736:33;4755:13;4736:18;;;;;:33;;:::i;:::-;4684:126;;;::::0;;-1:-1:-1;;;4684:126:2;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;4684:126:2;;;;;;;;;;;;;::::1;;4820:11;:34:::0;;4864:12:::1;:28:::0;;-1:-1:-1;;;;;4864:28:2;;::::1;-1:-1:-1::0;;;;;;4864:28:2;;::::1;::::0;::::1;::::0;;;4902:12:::1;:36:::0;;;::::1;::::0;;::::1;::::0;;4949:11:::1;:24:::0;;;;::::1;4963:10;4949:24;::::0;;5053:20:::1;::::0;;::::1;-1:-1:-1::0;;4820:34:2;;;::::1;;;-1:-1:-1::0;;;;;;4820:34:2;;::::1;;5053:20:::0;;;::::1;::::0;;;::::1;::::0;;;5097:15:::1;-1:-1:-1::0;5083:30:2;5148:7:::1;:11:::0;4820::::1;5169:7;:11:::0;;;5191:15:::1;:19:::0;237:21418;;598:104:1;685:10;598:104;:::o;726:413:0:-;1086:20;1124:8;;;726:413::o;237:21418:2:-;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "60806040526004361061026a5760003560e01c8063949e8acd11610144578063e02e1e9c116100b6578063f69e20461161007a578063f69e2046146107e7578063f6db0da0146107fc578063f7c618c1146108ac578063fbaf1bbd146108c1578063ffaad6a5146108f4578063ffe6bbd81461092d576102c0565b8063e02e1e9c14610718578063eedc966a14610742578063f14faf6f14610775578063f20202751461079f578063f2fde38b146107b4576102c0565b8063aecb6d2811610108578063aecb6d281461065a578063b03cf5a71461066f578063b6b55f2514610699578063b9db102a146106c3578063d3261592146106d8578063d7c3771d14610703576102c0565b8063949e8acd146105cd5780639d76ea58146105e2578063a01496de146105f7578063a9059cbb1461060c578063ad7a672f14610645576102c0565b8063537a39bb116101dd5780637e6335c7116101a15780637e6335c7146104dd5780638086b8ba1461050d57806381fce645146105795780638620410b1461058e57806389375abf146105a35780638da5cb5b146105b8576102c0565b8063537a39bb1461043a57806370a082311461044f578063715018a61461048257806372f702f3146104975780637d882097146104c8576102c0565b80631f38b9cd1161022f5780631f38b9cd146103735780632e1a7d4d1461038857806336599ead146103b457806341c61383146103fb5780634641257d146104105780634b75033414610425576102c0565b806265318b146102c557806308560ace1461030a57806310d0ffdd1461031f57806318160ddd146103495780631924063e1461035e576102c0565b366102c057600554610285906001600160a01b031634610942565b60408051348152426020820152815133927f3c2bd1b3f5ca07afb09fbee41ac43da2b98d9c2e9832673052e546bd1d4c091d928290030190a2005b600080fd5b3480156102d157600080fd5b506102f8600480360360208110156102e857600080fd5b50356001600160a01b0316610a2c565b60408051918252519081900360200190f35b34801561031657600080fd5b506102f8610a65565b34801561032b57600080fd5b506102f86004803603602081101561034257600080fd5b5035610a6b565b34801561035557600080fd5b506102f8610aab565b34801561036a57600080fd5b506102f8610ab1565b34801561037f57600080fd5b506102f8610ab7565b34801561039457600080fd5b506103b2600480360360208110156103ab57600080fd5b5035610abd565b005b3480156103c057600080fd5b506103e7600480360360208110156103d757600080fd5b50356001600160a01b0316610c5b565b604080519115158252519081900360200190f35b34801561040757600080fd5b506102f8610d26565b34801561041c57600080fd5b506103b2610d2c565b34801561043157600080fd5b506102f8610e9d565b34801561044657600080fd5b506102f8610ecd565b34801561045b57600080fd5b506102f86004803603602081101561047257600080fd5b50356001600160a01b0316610ed3565b34801561048e57600080fd5b506103b2610eee565b3480156104a357600080fd5b506104ac610f9a565b604080516001600160a01b039092168252519081900360200190f35b3480156104d457600080fd5b506102f8610fa9565b3480156104e957600080fd5b506103e76004803603604081101561050057600080fd5b5080359060200135610faf565b34801561051957600080fd5b506105406004803603602081101561053057600080fd5b50356001600160a01b03166110c4565b60405180826101c080838360005b8381101561056657818101518382015260200161054e565b5050505090500191505060405180910390f35b34801561058557600080fd5b506102f8611247565b34801561059a57600080fd5b506102f861124c565b3480156105af57600080fd5b506102f8611274565b3480156105c457600080fd5b506104ac61127a565b3480156105d957600080fd5b506102f8611289565b3480156105ee57600080fd5b506104ac611299565b34801561060357600080fd5b506102f86112a8565b34801561061857600080fd5b506103e76004803603604081101561062f57600080fd5b506001600160a01b0381351690602001356112ae565b34801561065157600080fd5b506102f86112d4565b34801561066657600080fd5b506102f8611350565b34801561067b57600080fd5b506104ac6004803603602081101561069257600080fd5b5035611356565b3480156106a557600080fd5b506102f8600480360360208110156106bc57600080fd5b5035611380565b3480156106cf57600080fd5b506102f861138c565b3480156106e457600080fd5b506106ed611392565b6040805160ff9092168252519081900360200190f35b34801561070f57600080fd5b506104ac61139b565b34801561072457600080fd5b506102f86004803603602081101561073b57600080fd5b50356113aa565b34801561074e57600080fd5b506102f86004803603602081101561076557600080fd5b50356001600160a01b03166113d1565b34801561078157600080fd5b506102f86004803603602081101561079857600080fd5b50356113de565b3480156107ab57600080fd5b506102f86114e2565b3480156107c057600080fd5b506103b2600480360360208110156107d757600080fd5b50356001600160a01b03166114e8565b3480156107f357600080fd5b506103b26115ea565b34801561080857600080fd5b506103e76004803603602081101561081f57600080fd5b81019060208101813564010000000081111561083a57600080fd5b82018360208201111561084c57600080fd5b8035906020019184602083028401116401000000008311171561086e57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611609945050505050565b3480156108b857600080fd5b506104ac611896565b3480156108cd57600080fd5b506102f8600480360360208110156108e457600080fd5b50356001600160a01b03166118aa565b34801561090057600080fd5b506102f86004803603604081101561091757600080fd5b506001600160a01b03813516906020013561190d565b34801561093957600080fd5b506102f8611a18565b80471015610997576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d80600081146109e2576040519150601f19603f3d011682016040523d82523d6000602084013e6109e7565b606091505b5050905080610a275760405162461bcd60e51b815260040180806020018281038252603a8152602001806123bf603a913960400191505060405180910390fd5b505050565b6001600160a01b0381166000908152601360209081526040808320546014909252822054601254600160401b929102030490505b919050565b60035481565b6000601154821115610a7c57600080fd5b816000610a94610a8d836003611a29565b6064611a82565b90506000610aa28383611ae9565b95945050505050565b60115490565b60105481565b600f5481565b6000610ac7611289565b11610ad157600080fd5b33600081815260146020526040902054821115610aed57600080fd5b60006064610afc846003611a29565b81610b0357fe5b0490506000610b1133610c5b565b90508015610b1e57600091505b6000610b2a8584611ae9565b9050610b3860115486611ae9565b6011556001600160a01b038416600090815260146020526040902054610b5e9086611ae9565b6001600160a01b03851660009081526014602090815260408083209390935560125460139091529190208054918702600160401b840201918290039055610ba484611b46565b6040805187815260208101849052428183015290516001600160a01b038716917f90ebb005d68efee044927e1e77e1fd0cecc508368aa72c39250a787eed5f0a70919081900360600190a26001600160a01b0385166000818152601560208181526040808420805460148452948290205493835260020154815194855291840192909252828201524260608301525160008051602061239f8339815191529181900360800190a2610c53611bd4565b505050505050565b60008080805b600654811015610d075760068181548110610c7857fe5b60009182526020918290200154604080516370a0823160e01b81526001600160a01b038981166004830152915191909216945084926370a082319260248082019391829003018186803b158015610cce57600080fd5b505afa158015610ce2573d6000803e3d6000fd5b505050506040513d6020811015610cf857600080fd5b50519290920191600101610c61565b506003548210610d1c57600192505050610a60565b5060009392505050565b600a5481565b6000610d36611a18565b11610d4057600080fd5b336000610d4b611a18565b6001600160a01b0380841660008181526013602090815260408083208054600160401b8802019055600254815163a9059cbb60e01b815260048101959095526024850187905290519596509093169363a9059cbb936044808501949193918390030190829087803b158015610dbf57600080fd5b505af1158015610dd3573d6000803e3d6000fd5b505050506040513d6020811015610de957600080fd5b50506001600160a01b038216600090815260156020526040902060020154610e119082611ccb565b6001600160a01b0383166000818152601560209081526040918290206002810194909455600c90930180546001908101909155600880549091019055600a80548501905580518481524293810193909352805191927f1b091269e929df55d64d6ea7e9cadbe4fb38dce5ccdc995767bc515030dbfbbf929081900390910190a2610e99611bd4565b5050565b6000670de0b6b3a764000081610eb7610a8d836003611a29565b90506000610ec58383611ae9565b935050505090565b60085481565b6001600160a01b031660009081526014602052604090205490565b610ef6611d25565b6001600160a01b0316610f0761127a565b6001600160a01b031614610f50576040805162461bcd60e51b8152602060048201819052602482015260008051602061241a833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6002546001600160a01b031681565b600b5481565b6000610fb9611d25565b6001600160a01b0316610fca61127a565b6001600160a01b031614611013576040805162461bcd60e51b8152602060048201819052602482015260008051602061241a833981519152604482015290519081900360640190fd5b61101d8383611ccb565b600314611071576040805162461bcd60e51b815260206004820152601d60248201527f54454e5f504f5254494f4e535f524551554952455f4449564953494f4e000000604482015290519081900360640190fd5b600e839055600f8290556040805184815260208101849052428183015290517f677017fa3a0fe0f50a95e6024c5b688f2b14a4696c4a897c459715cabfc1c03a9181900360600190a15060015b92915050565b6110cc612269565b6110d4612288565b506001600160a01b03821660009081526015602090815260409182902082516101e081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e082015260088201546101008201526009820154610120820152600a820154610140820152600b820154610160820152600c820154610180820152600d8201546101a0820152600e909101546101c082015261119e612269565b604051806101c00160405280836000015181526020018360400151815260200183608001518152602001836060015181526020018360a0015181526020018360c0015181526020018360e0015181526020018361010001518152602001836101400151815260200183610160015181526020018361018001518152602001836101a001518152602001836101c00151815260200183610120015181525090508092505050919050565b600281565b6000670de0b6b3a764000081611266610a8d836003611a29565b90506000610ec58383611ccb565b61546081565b6000546001600160a01b031690565b600061129433610ed3565b905090565b6004546001600160a01b031681565b600e5481565b6000806112b9611289565b116112c357600080fd5b6112cd8383611d29565b9392505050565b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561131f57600080fd5b505afa158015611333573d6000803e3d6000fd5b505050506040513d602081101561134957600080fd5b5051905090565b600c5481565b6006818154811061136657600080fd5b6000918252602090912001546001600160a01b0316905081565b60006110be338361190d565b60095481565b600d5460ff1681565b6005546001600160a01b031681565b6000806113bb610a8d846003611a29565b905060006113c98483611ae9565b949350505050565b6001600160a01b03163190565b600d54604080516323b872dd60e01b815233600482015230602482015260448101849052905160009261010090046001600160a01b0316916323b872dd91606480830192602092919082900301818787803b15801561143c57600080fd5b505af1158015611450573d6000803e3d6000fd5b505050506040513d602081101561146657600080fd5b505161147157600080fd5b600c80548301905533600081815260156020908152604091829020600b8101805460010190556005018054860190558151858152429181019190915281517f0da1788c3e861a58a47f0d46073b13c4d66efcc259714744f920d1afe7b8dee5929181900390910190a25050600c5490565b60075481565b6114f0611d25565b6001600160a01b031661150161127a565b6001600160a01b03161461154a576040805162461bcd60e51b8152602060048201819052602482015260008051602061241a833981519152604482015290519081900360640190fd5b6001600160a01b03811661158f5760405162461bcd60e51b81526004018080602001828103825260268152602001806123796026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006115f4611a18565b116115fe57600080fd5b611606611f94565b50565b6000611613611d25565b6001600160a01b031661162461127a565b6001600160a01b03161461166d576040805162461bcd60e51b8152602060048201819052602482015260008051602061241a833981519152604482015290519081900360640190fd5b60005b60065481101561174a5782818151811061168657fe5b60200260200101516001600160a01b03166301ffc9a76380ac58cd6040518263ffffffff1660e01b8152600401808260e01b815260200191505060206040518083038186803b1580156116d857600080fd5b505afa1580156116ec573d6000803e3d6000fd5b505050506040513d602081101561170257600080fd5b5051611742576040805162461bcd60e51b815260206004820152600a6024820152694e4f545f45524337323160b01b604482015290519081900360640190fd5b600101611670565b50606060068054806020026020016040519081016040528092919081815260200182805480156117a357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611785575b505086519394506117bf936006935060208801925090506122fe565b50336001600160a01b03167ff0650831416f723858005cfeae97a2d6f5e127d1e6ae8938574d1d73e7f4727c828542604051808060200180602001848152602001838103835286818151815260200191508051906020019060200280838360005b83811015611838578181015183820152602001611820565b50505050905001838103825285818151815260200191508051906020019060200280838360005b8381101561187757818101518382015260200161185f565b505050509050019550505050505060405180910390a250600192915050565b600d5461010090046001600160a01b031681565b600d54600c5460009182916118ce916064916118c89160ff16611a29565b90611a82565b90506000601154116118e15760006112cd565b6011546001600160a01b0384166000908152601460205260409020546112cd91906118c8908490611a29565b600254604080516323b872dd60e01b81523360048201523060248201526044810184905290516000926001600160a01b0316916323b872dd91606480830192602092919082900301818787803b15801561196657600080fd5b505af115801561197a573d6000803e3d6000fd5b505050506040513d602081101561199057600080fd5b505161199b57600080fd5b600b80548301905560006119af84846120c9565b6001600160a01b03851660008181526015602081815260408084208054601484529482902054938352600201548151948552918401929092528282015242606083015251929350909160008051602061239f8339815191529181900360800190a26112cd611bd4565b600061129433610a2c565b3b151590565b600082611a38575060006110be565b82820282848281611a4557fe5b04146112cd5760405162461bcd60e51b81526004018080602001828103825260218152602001806123f96021913960400191505060405180910390fd5b6000808211611ad8576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611ae157fe5b049392505050565b600082821115611b40576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000611b5382600a611a82565b90506000611b6c600e5483611a2990919063ffffffff16565b90506000611b85600f5484611a2990919063ffffffff16565b600c54909150611b959083611ccb565b600c5560115415611bc557611bbd601254601154600160401b840281611bb757fe5b04611ccb565b601255611bce565b600c8054820190555b50505050565b601054429061546090611be890839061224e565b1115611c34577f2cfce469a63f2e9972b7f23da751e6943ed2b091c10e40b5c43b5f6105bf20ea611c176112d4565b60408051918252602082018490528051918290030190a160108190555b6002611c428260095461224e565b118015611c5157506000601154115b1561160657600d54600c54600091611c7a9162015180916118c89160649183919060ff16611a29565b90506000611c936009548461224e90919063ffffffff16565b600c549083029150611ca5908261224e565b600c55601254601154611cc19190600160401b840281611bb757fe5b6012555050600955565b6000828201838110156112cd576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3390565b33600081815260146020526040812054909190831115611d4857600080fd5b6000611d52611a18565b1115611d6057611d60610d2c565b6001600160a01b038116600090815260146020526040902054611d839084611ae9565b6001600160a01b038083166000908152601460205260408082209390935590861681522054611db29084611ccb565b6001600160a01b03858116600081815260146020908152604080832095909555601280549487168352601382528583208054958a029095039094559254918152838120805492880290920190915560159091522054158015611e2d57506001600160a01b038416600090815260156020526040902060070154155b15611e3c576007805460010190555b6001600160a01b038082166000818152601560209081526040808320600d810180546001908101909155600690910180548a019055948916808452928190206007810180548a019055600e018054860190556008805490950190945583518781524291810191909152835191937f91c7d71a3ae3fb7cf61e00517bf4868e9e23d0bace5e304cbc3b68de5d85350e92918290030190a36001600160a01b0381166000818152601560208181526040808420805460148452948290205493835260020154815194855291840192909252828201524260608301525160008051602061239f8339815191529181900360800190a26001600160a01b0384166000818152601560208181526040808420805460148452948290205493835260020154815194855291840192909252828201524260608301525160008051602061239f8339815191529181900360800190a25060019392505050565b60003381611fa182610a2c565b6001600160a01b03831660009081526013602052604081208054600160401b8402019055909150611fd233836120c9565b6040805184815260208101839052428183015290519192506001600160a01b038516917f193a876ac91d11a4a0a71ebef73b195ba55aa7c16d6755c93c21d973e692a02c9181900360600190a26001600160a01b0383166000908152601560205260409020600301546120459083611ccb565b6001600160a01b0384166000818152601560208181526040808420600381019690965560098601805460010190558554601483529381902054928252600290950154855193845290830191909152818401524260608201529151909160008051602061239f833981519152919081900360800190a26120c2611bd4565b9250505090565b6001600160a01b03821660009081526015602052604081205415801561210857506001600160a01b038316600090815260156020526040902060070154155b15612117576007805460010190555b6008805460010190556000606461212f846003611a29565b8161213657fe5b04905060006121458483611ae9565b6040805186815260208101839052428183015290519192506001600160a01b038716917fb49bb132260f6aa1c86e2d2a3957c097216e6ec9b5fa15867289f058b4d297ac9181900360600190a26000811180156121ac57506011546121aa8282611ccb565b115b6121b557600080fd5b601154156121ca5760118054820190556121d0565b60118190555b6121d982611b46565b6001600160a01b0385166000908152601460205260409020546121fc9082611ccb565b6001600160a01b03861660009081526014602090815260408083209390935560125460138252838320805491860291909101905560159052208054850181556008018054600101905591505092915050565b600082821115612260575060006110be565b508082036110be565b604051806101c00160405280600e906020820280368337509192915050565b604051806101e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b828054828255906000526020600020908101928215612353579160200282015b8281111561235357825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061231e565b5061235f929150612363565b5090565b5b8082111561235f576000815560010161236456fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737329f64f6f46c82c5ecfa955fe7d093e63b4106b6dbe5193e00efd62c7384ef177416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a264697066735822122036c8969b296e230c736747f6dc7e1ecadd2e50a652eb4d913b73ecfe4159641264736f6c63430007040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x26A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x949E8ACD GT PUSH2 0x144 JUMPI DUP1 PUSH4 0xE02E1E9C GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0xF69E2046 GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xF69E2046 EQ PUSH2 0x7E7 JUMPI DUP1 PUSH4 0xF6DB0DA0 EQ PUSH2 0x7FC JUMPI DUP1 PUSH4 0xF7C618C1 EQ PUSH2 0x8AC JUMPI DUP1 PUSH4 0xFBAF1BBD EQ PUSH2 0x8C1 JUMPI DUP1 PUSH4 0xFFAAD6A5 EQ PUSH2 0x8F4 JUMPI DUP1 PUSH4 0xFFE6BBD8 EQ PUSH2 0x92D JUMPI PUSH2 0x2C0 JUMP JUMPDEST DUP1 PUSH4 0xE02E1E9C EQ PUSH2 0x718 JUMPI DUP1 PUSH4 0xEEDC966A EQ PUSH2 0x742 JUMPI DUP1 PUSH4 0xF14FAF6F EQ PUSH2 0x775 JUMPI DUP1 PUSH4 0xF2020275 EQ PUSH2 0x79F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x7B4 JUMPI PUSH2 0x2C0 JUMP JUMPDEST DUP1 PUSH4 0xAECB6D28 GT PUSH2 0x108 JUMPI DUP1 PUSH4 0xAECB6D28 EQ PUSH2 0x65A JUMPI DUP1 PUSH4 0xB03CF5A7 EQ PUSH2 0x66F JUMPI DUP1 PUSH4 0xB6B55F25 EQ PUSH2 0x699 JUMPI DUP1 PUSH4 0xB9DB102A EQ PUSH2 0x6C3 JUMPI DUP1 PUSH4 0xD3261592 EQ PUSH2 0x6D8 JUMPI DUP1 PUSH4 0xD7C3771D EQ PUSH2 0x703 JUMPI PUSH2 0x2C0 JUMP JUMPDEST DUP1 PUSH4 0x949E8ACD EQ PUSH2 0x5CD JUMPI DUP1 PUSH4 0x9D76EA58 EQ PUSH2 0x5E2 JUMPI DUP1 PUSH4 0xA01496DE EQ PUSH2 0x5F7 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x60C JUMPI DUP1 PUSH4 0xAD7A672F EQ PUSH2 0x645 JUMPI PUSH2 0x2C0 JUMP JUMPDEST DUP1 PUSH4 0x537A39BB GT PUSH2 0x1DD JUMPI DUP1 PUSH4 0x7E6335C7 GT PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x7E6335C7 EQ PUSH2 0x4DD JUMPI DUP1 PUSH4 0x8086B8BA EQ PUSH2 0x50D JUMPI DUP1 PUSH4 0x81FCE645 EQ PUSH2 0x579 JUMPI DUP1 PUSH4 0x8620410B EQ PUSH2 0x58E JUMPI DUP1 PUSH4 0x89375ABF EQ PUSH2 0x5A3 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x5B8 JUMPI PUSH2 0x2C0 JUMP JUMPDEST DUP1 PUSH4 0x537A39BB EQ PUSH2 0x43A JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x44F JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x482 JUMPI DUP1 PUSH4 0x72F702F3 EQ PUSH2 0x497 JUMPI DUP1 PUSH4 0x7D882097 EQ PUSH2 0x4C8 JUMPI PUSH2 0x2C0 JUMP JUMPDEST DUP1 PUSH4 0x1F38B9CD GT PUSH2 0x22F JUMPI DUP1 PUSH4 0x1F38B9CD EQ PUSH2 0x373 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x388 JUMPI DUP1 PUSH4 0x36599EAD EQ PUSH2 0x3B4 JUMPI DUP1 PUSH4 0x41C61383 EQ PUSH2 0x3FB JUMPI DUP1 PUSH4 0x4641257D EQ PUSH2 0x410 JUMPI DUP1 PUSH4 0x4B750334 EQ PUSH2 0x425 JUMPI PUSH2 0x2C0 JUMP JUMPDEST DUP1 PUSH3 0x65318B EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x8560ACE EQ PUSH2 0x30A JUMPI DUP1 PUSH4 0x10D0FFDD EQ PUSH2 0x31F JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x349 JUMPI DUP1 PUSH4 0x1924063E EQ PUSH2 0x35E JUMPI PUSH2 0x2C0 JUMP JUMPDEST CALLDATASIZE PUSH2 0x2C0 JUMPI PUSH1 0x5 SLOAD PUSH2 0x285 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE PUSH2 0x942 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLVALUE DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP3 ADD MSTORE DUP2 MLOAD CALLER SWAP3 PUSH32 0x3C2BD1B3F5CA07AFB09FBEE41AC43DA2B98D9C2E9832673052E546BD1D4C091D SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG2 STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA2C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0xA65 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x342 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xA6B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x355 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0xAAB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0xAB1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0xAB7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x394 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xABD JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xC5B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x407 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0xD26 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B2 PUSH2 0xD2C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x431 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0xE9D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x446 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0xECD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x472 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xED3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B2 PUSH2 0xEEE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AC PUSH2 0xF9A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0xFA9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x500 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xFAF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x519 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x540 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x530 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x10C4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH2 0x1C0 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x566 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x54E JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x585 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x1247 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x59A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x124C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x1274 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AC PUSH2 0x127A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x1289 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AC PUSH2 0x1299 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x603 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x12A8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x618 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x62F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x12AE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x12D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x666 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x1350 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x692 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1356 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1380 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x138C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6ED PUSH2 0x1392 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x70F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AC PUSH2 0x139B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x724 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x73B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x13AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x74E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x765 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x13D1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x781 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x798 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x13DE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x14E2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x14E8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B2 PUSH2 0x15EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x808 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x81F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x83A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x84C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x86E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x1609 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AC PUSH2 0x1896 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x18AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x900 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x917 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x190D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x939 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x1A18 JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x997 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9E2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9E7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xA27 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x3A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x23BF PUSH1 0x3A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x14 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD PUSH1 0x12 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP3 SWAP2 MUL SUB DIV SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x11 SLOAD DUP3 GT ISZERO PUSH2 0xA7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x0 PUSH2 0xA94 PUSH2 0xA8D DUP4 PUSH1 0x3 PUSH2 0x1A29 JUMP JUMPDEST PUSH1 0x64 PUSH2 0x1A82 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xAA2 DUP4 DUP4 PUSH2 0x1AE9 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x11 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x10 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xF SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAC7 PUSH2 0x1289 JUMP JUMPDEST GT PUSH2 0xAD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0xAED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH2 0xAFC DUP5 PUSH1 0x3 PUSH2 0x1A29 JUMP JUMPDEST DUP2 PUSH2 0xB03 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH2 0xB11 CALLER PUSH2 0xC5B JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xB1E JUMPI PUSH1 0x0 SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0xB2A DUP6 DUP5 PUSH2 0x1AE9 JUMP JUMPDEST SWAP1 POP PUSH2 0xB38 PUSH1 0x11 SLOAD DUP7 PUSH2 0x1AE9 JUMP JUMPDEST PUSH1 0x11 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xB5E SWAP1 DUP7 PUSH2 0x1AE9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x12 SLOAD PUSH1 0x13 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 DUP1 SLOAD SWAP2 DUP8 MUL PUSH1 0x1 PUSH1 0x40 SHL DUP5 MUL ADD SWAP2 DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0xBA4 DUP5 PUSH2 0x1B46 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE TIMESTAMP DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP2 PUSH32 0x90EBB005D68EFEE044927E1E77E1FD0CECC508368AA72C39250A787EED5F0A70 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x14 DUP5 MSTORE SWAP5 DUP3 SWAP1 KECCAK256 SLOAD SWAP4 DUP4 MSTORE PUSH1 0x2 ADD SLOAD DUP2 MLOAD SWAP5 DUP6 MSTORE SWAP2 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x60 DUP4 ADD MSTORE MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x239F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG2 PUSH2 0xC53 PUSH2 0x1BD4 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0xD07 JUMPI PUSH1 0x6 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xC78 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 ADD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP5 POP DUP5 SWAP3 PUSH4 0x70A08231 SWAP3 PUSH1 0x24 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCE2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xCF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP3 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xC61 JUMP JUMPDEST POP PUSH1 0x3 SLOAD DUP3 LT PUSH2 0xD1C JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0xA60 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD36 PUSH2 0x1A18 JUMP JUMPDEST GT PUSH2 0xD40 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 PUSH2 0xD4B PUSH2 0x1A18 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP9 MUL ADD SWAP1 SSTORE PUSH1 0x2 SLOAD DUP2 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x24 DUP6 ADD DUP8 SWAP1 MSTORE SWAP1 MLOAD SWAP6 SWAP7 POP SWAP1 SWAP4 AND SWAP4 PUSH4 0xA9059CBB SWAP4 PUSH1 0x44 DUP1 DUP6 ADD SWAP5 SWAP2 SWAP4 SWAP2 DUP4 SWAP1 SUB ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xDD3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xDE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0xE11 SWAP1 DUP3 PUSH2 0x1CCB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x2 DUP2 ADD SWAP5 SWAP1 SWAP5 SSTORE PUSH1 0xC SWAP1 SWAP4 ADD DUP1 SLOAD PUSH1 0x1 SWAP1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH1 0x8 DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE PUSH1 0xA DUP1 SLOAD DUP6 ADD SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE TIMESTAMP SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP1 MLOAD SWAP2 SWAP3 PUSH32 0x1B091269E929DF55D64D6EA7E9CADBE4FB38DCE5CCDC995767BC515030DBFBBF SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 PUSH2 0xE99 PUSH2 0x1BD4 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0xEB7 PUSH2 0xA8D DUP4 PUSH1 0x3 PUSH2 0x1A29 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xEC5 DUP4 DUP4 PUSH2 0x1AE9 JUMP JUMPDEST SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xEF6 PUSH2 0x1D25 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xF07 PUSH2 0x127A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xF50 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x241A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFB9 PUSH2 0x1D25 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xFCA PUSH2 0x127A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1013 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x241A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x101D DUP4 DUP4 PUSH2 0x1CCB JUMP JUMPDEST PUSH1 0x3 EQ PUSH2 0x1071 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54454E5F504F5254494F4E535F524551554952455F4449564953494F4E000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xE DUP4 SWAP1 SSTORE PUSH1 0xF DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE TIMESTAMP DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH32 0x677017FA3A0FE0F50A95E6024C5B688F2B14A4696C4A897C459715CABFC1C03A SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x10CC PUSH2 0x2269 JUMP JUMPDEST PUSH2 0x10D4 PUSH2 0x2288 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH2 0x1E0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 DUP3 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 DUP3 ADD SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7 DUP3 ADD SLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x8 DUP3 ADD SLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH1 0x9 DUP3 ADD SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xA DUP3 ADD SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xB DUP3 ADD SLOAD PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0xC DUP3 ADD SLOAD PUSH2 0x180 DUP3 ADD MSTORE PUSH1 0xD DUP3 ADD SLOAD PUSH2 0x1A0 DUP3 ADD MSTORE PUSH1 0xE SWAP1 SWAP2 ADD SLOAD PUSH2 0x1C0 DUP3 ADD MSTORE PUSH2 0x119E PUSH2 0x2269 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 DUP4 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x40 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x80 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x60 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0xA0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0xC0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0xE0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x100 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x140 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x160 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x180 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x1A0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x1C0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x120 ADD MLOAD DUP2 MSTORE POP SWAP1 POP DUP1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x1266 PUSH2 0xA8D DUP4 PUSH1 0x3 PUSH2 0x1A29 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xEC5 DUP4 DUP4 PUSH2 0x1CCB JUMP JUMPDEST PUSH2 0x5460 DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1294 CALLER PUSH2 0xED3 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x12B9 PUSH2 0x1289 JUMP JUMPDEST GT PUSH2 0x12C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12CD DUP4 DUP4 PUSH2 0x1D29 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x131F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1333 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1349 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH1 0x6 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1366 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10BE CALLER DUP4 PUSH2 0x190D JUMP JUMPDEST PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x13BB PUSH2 0xA8D DUP5 PUSH1 0x3 PUSH2 0x1A29 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x13C9 DUP5 DUP4 PUSH2 0x1AE9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE SWAP1 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x23B872DD SWAP2 PUSH1 0x64 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP8 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x143C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1450 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1466 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x1471 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xC DUP1 SLOAD DUP4 ADD SWAP1 SSTORE CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0xB DUP2 ADD DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE PUSH1 0x5 ADD DUP1 SLOAD DUP7 ADD SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE TIMESTAMP SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 MLOAD PUSH32 0xDA1788C3E861A58A47F0D46073B13C4D66EFCC259714744F920D1AFE7B8DEE5 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 POP POP PUSH1 0xC SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x14F0 PUSH2 0x1D25 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1501 PUSH2 0x127A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x154A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x241A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x158F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2379 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15F4 PUSH2 0x1A18 JUMP JUMPDEST GT PUSH2 0x15FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1606 PUSH2 0x1F94 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1613 PUSH2 0x1D25 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1624 PUSH2 0x127A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x166D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x241A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0x174A JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1686 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1FFC9A7 PUSH4 0x80AC58CD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x16EC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1702 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x1742 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x4E4F545F455243373231 PUSH1 0xB0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 ADD PUSH2 0x1670 JUMP JUMPDEST POP PUSH1 0x60 PUSH1 0x6 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x17A3 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1785 JUMPI JUMPDEST POP POP DUP7 MLOAD SWAP4 SWAP5 POP PUSH2 0x17BF SWAP4 PUSH1 0x6 SWAP4 POP PUSH1 0x20 DUP9 ADD SWAP3 POP SWAP1 POP PUSH2 0x22FE JUMP JUMPDEST POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xF0650831416F723858005CFEAE97A2D6F5E127D1E6AE8938574D1D73E7F4727C DUP3 DUP6 TIMESTAMP PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 SUB DUP4 MSTORE DUP7 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1838 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1820 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP4 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1877 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x185F JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0xC SLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH2 0x18CE SWAP2 PUSH1 0x64 SWAP2 PUSH2 0x18C8 SWAP2 PUSH1 0xFF AND PUSH2 0x1A29 JUMP JUMPDEST SWAP1 PUSH2 0x1A82 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x11 SLOAD GT PUSH2 0x18E1 JUMPI PUSH1 0x0 PUSH2 0x12CD JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x12CD SWAP2 SWAP1 PUSH2 0x18C8 SWAP1 DUP5 SWAP1 PUSH2 0x1A29 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x23B872DD SWAP2 PUSH1 0x64 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP8 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1966 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x197A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1990 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x199B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xB DUP1 SLOAD DUP4 ADD SWAP1 SSTORE PUSH1 0x0 PUSH2 0x19AF DUP5 DUP5 PUSH2 0x20C9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x14 DUP5 MSTORE SWAP5 DUP3 SWAP1 KECCAK256 SLOAD SWAP4 DUP4 MSTORE PUSH1 0x2 ADD SLOAD DUP2 MLOAD SWAP5 DUP6 MSTORE SWAP2 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x60 DUP4 ADD MSTORE MLOAD SWAP3 SWAP4 POP SWAP1 SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x239F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG2 PUSH2 0x12CD PUSH2 0x1BD4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1294 CALLER PUSH2 0xA2C JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1A38 JUMPI POP PUSH1 0x0 PUSH2 0x10BE JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x1A45 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x12CD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x23F9 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x1AD8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x1AE1 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1B40 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B53 DUP3 PUSH1 0xA PUSH2 0x1A82 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B6C PUSH1 0xE SLOAD DUP4 PUSH2 0x1A29 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B85 PUSH1 0xF SLOAD DUP5 PUSH2 0x1A29 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC SLOAD SWAP1 SWAP2 POP PUSH2 0x1B95 SWAP1 DUP4 PUSH2 0x1CCB JUMP JUMPDEST PUSH1 0xC SSTORE PUSH1 0x11 SLOAD ISZERO PUSH2 0x1BC5 JUMPI PUSH2 0x1BBD PUSH1 0x12 SLOAD PUSH1 0x11 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP5 MUL DUP2 PUSH2 0x1BB7 JUMPI INVALID JUMPDEST DIV PUSH2 0x1CCB JUMP JUMPDEST PUSH1 0x12 SSTORE PUSH2 0x1BCE JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x10 SLOAD TIMESTAMP SWAP1 PUSH2 0x5460 SWAP1 PUSH2 0x1BE8 SWAP1 DUP4 SWAP1 PUSH2 0x224E JUMP JUMPDEST GT ISZERO PUSH2 0x1C34 JUMPI PUSH32 0x2CFCE469A63F2E9972B7F23DA751E6943ED2B091C10E40B5C43B5F6105BF20EA PUSH2 0x1C17 PUSH2 0x12D4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP5 SWAP1 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG1 PUSH1 0x10 DUP2 SWAP1 SSTORE JUMPDEST PUSH1 0x2 PUSH2 0x1C42 DUP3 PUSH1 0x9 SLOAD PUSH2 0x224E JUMP JUMPDEST GT DUP1 ISZERO PUSH2 0x1C51 JUMPI POP PUSH1 0x0 PUSH1 0x11 SLOAD GT JUMPDEST ISZERO PUSH2 0x1606 JUMPI PUSH1 0xD SLOAD PUSH1 0xC SLOAD PUSH1 0x0 SWAP2 PUSH2 0x1C7A SWAP2 PUSH3 0x15180 SWAP2 PUSH2 0x18C8 SWAP2 PUSH1 0x64 SWAP2 DUP4 SWAP2 SWAP1 PUSH1 0xFF AND PUSH2 0x1A29 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1C93 PUSH1 0x9 SLOAD DUP5 PUSH2 0x224E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC SLOAD SWAP1 DUP4 MUL SWAP2 POP PUSH2 0x1CA5 SWAP1 DUP3 PUSH2 0x224E JUMP JUMPDEST PUSH1 0xC SSTORE PUSH1 0x12 SLOAD PUSH1 0x11 SLOAD PUSH2 0x1CC1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x40 SHL DUP5 MUL DUP2 PUSH2 0x1BB7 JUMPI INVALID JUMPDEST PUSH1 0x12 SSTORE POP POP PUSH1 0x9 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x12CD JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST CALLER SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 GT ISZERO PUSH2 0x1D48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D52 PUSH2 0x1A18 JUMP JUMPDEST GT ISZERO PUSH2 0x1D60 JUMPI PUSH2 0x1D60 PUSH2 0xD2C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1D83 SWAP1 DUP5 PUSH2 0x1AE9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP7 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x1DB2 SWAP1 DUP5 PUSH2 0x1CCB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP6 SWAP1 SWAP6 SSTORE PUSH1 0x12 DUP1 SLOAD SWAP5 DUP8 AND DUP4 MSTORE PUSH1 0x13 DUP3 MSTORE DUP6 DUP4 KECCAK256 DUP1 SLOAD SWAP6 DUP11 MUL SWAP1 SWAP6 SUB SWAP1 SWAP5 SSTORE SWAP3 SLOAD SWAP2 DUP2 MSTORE DUP4 DUP2 KECCAK256 DUP1 SLOAD SWAP3 DUP9 MUL SWAP1 SWAP3 ADD SWAP1 SWAP2 SSTORE PUSH1 0x15 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD ISZERO DUP1 ISZERO PUSH2 0x1E2D JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 ADD SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x1E3C JUMPI PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0xD DUP2 ADD DUP1 SLOAD PUSH1 0x1 SWAP1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH1 0x6 SWAP1 SWAP2 ADD DUP1 SLOAD DUP11 ADD SWAP1 SSTORE SWAP5 DUP10 AND DUP1 DUP5 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 PUSH1 0x7 DUP2 ADD DUP1 SLOAD DUP11 ADD SWAP1 SSTORE PUSH1 0xE ADD DUP1 SLOAD DUP7 ADD SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD SWAP1 SWAP6 ADD SWAP1 SWAP5 SSTORE DUP4 MLOAD DUP8 DUP2 MSTORE TIMESTAMP SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD SWAP2 SWAP4 PUSH32 0x91C7D71A3AE3FB7CF61E00517BF4868E9E23D0BACE5E304CBC3B68DE5D85350E SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x14 DUP5 MSTORE SWAP5 DUP3 SWAP1 KECCAK256 SLOAD SWAP4 DUP4 MSTORE PUSH1 0x2 ADD SLOAD DUP2 MLOAD SWAP5 DUP6 MSTORE SWAP2 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x60 DUP4 ADD MSTORE MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x239F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x14 DUP5 MSTORE SWAP5 DUP3 SWAP1 KECCAK256 SLOAD SWAP4 DUP4 MSTORE PUSH1 0x2 ADD SLOAD DUP2 MLOAD SWAP5 DUP6 MSTORE SWAP2 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x60 DUP4 ADD MSTORE MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x239F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG2 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x1FA1 DUP3 PUSH2 0xA2C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP5 MUL ADD SWAP1 SSTORE SWAP1 SWAP2 POP PUSH2 0x1FD2 CALLER DUP4 PUSH2 0x20C9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE TIMESTAMP DUP2 DUP4 ADD MSTORE SWAP1 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 PUSH32 0x193A876AC91D11A4A0A71EBEF73B195BA55AA7C16D6755C93C21D973E692A02C SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH2 0x2045 SWAP1 DUP4 PUSH2 0x1CCB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x3 DUP2 ADD SWAP7 SWAP1 SWAP7 SSTORE PUSH1 0x9 DUP7 ADD DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP6 SLOAD PUSH1 0x14 DUP4 MSTORE SWAP4 DUP2 SWAP1 KECCAK256 SLOAD SWAP3 DUP3 MSTORE PUSH1 0x2 SWAP1 SWAP6 ADD SLOAD DUP6 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 DUP5 ADD MSTORE TIMESTAMP PUSH1 0x60 DUP3 ADD MSTORE SWAP2 MLOAD SWAP1 SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x239F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG2 PUSH2 0x20C2 PUSH2 0x1BD4 JUMP JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO DUP1 ISZERO PUSH2 0x2108 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 ADD SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x2117 JUMPI PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE PUSH1 0x0 PUSH1 0x64 PUSH2 0x212F DUP5 PUSH1 0x3 PUSH2 0x1A29 JUMP JUMPDEST DUP2 PUSH2 0x2136 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH2 0x2145 DUP5 DUP4 PUSH2 0x1AE9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE TIMESTAMP DUP2 DUP4 ADD MSTORE SWAP1 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP2 PUSH32 0xB49BB132260F6AA1C86E2D2A3957C097216E6EC9B5FA15867289F058B4D297AC SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG2 PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x21AC JUMPI POP PUSH1 0x11 SLOAD PUSH2 0x21AA DUP3 DUP3 PUSH2 0x1CCB JUMP JUMPDEST GT JUMPDEST PUSH2 0x21B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x11 SLOAD ISZERO PUSH2 0x21CA JUMPI PUSH1 0x11 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE PUSH2 0x21D0 JUMP JUMPDEST PUSH1 0x11 DUP2 SWAP1 SSTORE JUMPDEST PUSH2 0x21D9 DUP3 PUSH2 0x1B46 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x21FC SWAP1 DUP3 PUSH2 0x1CCB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x12 SLOAD PUSH1 0x13 DUP3 MSTORE DUP4 DUP4 KECCAK256 DUP1 SLOAD SWAP2 DUP7 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SSTORE PUSH1 0x15 SWAP1 MSTORE KECCAK256 DUP1 SLOAD DUP6 ADD DUP2 SSTORE PUSH1 0x8 ADD DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x2260 JUMPI POP PUSH1 0x0 PUSH2 0x10BE JUMP JUMPDEST POP DUP1 DUP3 SUB PUSH2 0x10BE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1E0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x2353 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x2353 JUMPI DUP3 MLOAD DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x231E JUMP JUMPDEST POP PUSH2 0x235F SWAP3 SWAP2 POP PUSH2 0x2363 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x235F JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2364 JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F206164647265737329F64F6F46C82C5ECFA955FE7D093E63 0xB4 LT PUSH12 0x6DBE5193E00EFD62C7384EF1 PUSH24 0x416464726573733A20756E61626C6520746F2073656E6420 PUSH23 0x616C75652C20726563697069656E74206D617920686176 PUSH6 0x207265766572 PUSH21 0x6564536166654D6174683A206D756C7469706C6963 PUSH2 0x7469 PUSH16 0x6E206F766572666C6F774F776E61626C PUSH6 0x3A2063616C6C PUSH6 0x72206973206E PUSH16 0x7420746865206F776E6572A264697066 PUSH20 0x5822122036C8969B296E230C736747F6DC7E1ECA 0xDD 0x2E POP 0xA6 MSTORE 0xEB 0x4D SWAP2 EXTCODESIZE PUSH20 0xECFE4159641264736F6C63430007040033000000 ",
							"sourceMap": "237:21418:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5404:11;;5386:41;;-1:-1:-1;;;;;5404:11:2;5417:9;5386:17;:41::i;:::-;5442:51;;;5466:9;5442:51;;5477:15;5442:51;;;;;;5454:10;;5442:51;;;;;;;;237:21418;;;;;11162:240;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11162:240:2;-1:-1:-1;;;;;11162:240:2;;:::i;:::-;;;;;;;;;;;;;;;;587:30;;;;;;;;;;;;;:::i;12253:345::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12253:345:2;;:::i;11061:95::-;;;;;;;;;;;;;:::i;1731:29::-;;;;;;;;;;;;;:::i;1525:19::-;;;;;;;;;;;;;:::i;8245:1525::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8245:1525:2;;:::i;:::-;;10140:367;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10140:367:2;-1:-1:-1;;;;;10140:367:2;;:::i;:::-;;;;;;;;;;;;;;;;;;1102:23;;;;;;;;;;;;;:::i;7333:890::-;;;;;;;;;;;;;:::i;11408:266::-;;;;;;;;;;;;;:::i;877:20::-;;;;;;;;;;;;;:::i;10719:105::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10719:105:2;-1:-1:-1;;;;;10719:105:2;;:::i;1710:145:5:-;;;;;;;;;;;;;:::i;394:26:2:-;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;394:26:2;;;;;;;;;;;;;;1131:25;;;;;;;;;;;;;:::i;13612:409::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13612:409:2;;;;;;;:::i;12604:597::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12604:597:2;-1:-1:-1;;;;;12604:597:2;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1641:51;;;;;;;;;;;;;:::i;11680:264::-;;;;;;;;;;;;;:::i;1586:49::-;;;;;;;;;;;;;:::i;1078:85:5:-;;;;;;;;;;;;;:::i;10513:95:2:-;;;;;;;;;;;;;:::i;699:27::-;;;;;;;;;;;;;:::i;1500:19::-;;;;;;;;;;;;;:::i;9792:159::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;9792:159:2;;;;;;;;:::i;10940:115::-;;;;;;;;;;;;;:::i;1213:27::-;;;;;;;;;;;;;:::i;772:21::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;772:21:2;;:::i;6242:110::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6242:110:2;;:::i;975:22::-;;;;;;;;;;;;;:::i;1246:21::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;732:34;;;;;;;;;;;;;:::i;11950:297::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11950:297:2;;:::i;10830:104::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10830:104:2;-1:-1:-1;;;;;10830:104:2;;:::i;5646:575::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5646:575:2;;:::i;854:17::-;;;;;;;;;;;;;:::i;2004:240:5:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2004:240:5;-1:-1:-1;;;;;2004:240:5;;:::i;7239:73:2:-;;;;;;;;;;;;;:::i;14083:524::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14083:524:2;;-1:-1:-1;14083:524:2;;-1:-1:-1;;;;;14083:524:2:i;1273:25::-;;;;;;;;;;;;;:::i;13207:283::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13207:283:2;-1:-1:-1;;;;;13207:283:2;;:::i;6375:842::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;6375:842:2;;;;;;;;:::i;10614:99::-;;;;;;;;;;;;;:::i;2056:391:0:-;2170:6;2145:21;:31;;2137:73;;;;;-1:-1:-1;;;2137:73:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;2317:35;;2299:12;;-1:-1:-1;;;;;2317:14:0;;;2340:6;;2299:12;2317:35;2299:12;2317:35;2340:6;2317:14;:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2298:54;;;2370:7;2362:78;;;;-1:-1:-1;;;2362:78:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2056:391;;;:::o;11162:240:2:-;-1:-1:-1;;;;;11352:17:2;;11219:7;11352:17;;;:10;:17;;;;;;;;;11311:10;:17;;;;;;11293:15;;-1:-1:-1;;;1425:7:2;11293:35;;11284:85;11257:138;11238:157;;11162:240;;;;:::o;587:30::-;;;;:::o;12253:345::-;12338:7;12376:18;;12365:7;:29;;12357:38;;;;;;12423:7;12405:15;12458:49;12471:30;12423:7;1380:1;12471:12;:30::i;:::-;12503:3;12458:12;:49::i;:::-;12440:67;;12517:16;12536:30;12549:7;12558;12536:12;:30::i;:::-;12517:49;12253:345;-1:-1:-1;;;;;12253:345:2:o;11061:95::-;11131:18;;11061:95;:::o;1731:29::-;;;;:::o;1525:19::-;;;;:::o;8245:1525::-;2136:1;2123:10;:8;:10::i;:::-;:14;2115:23;;;;;;8325:10:::1;8309:13;8364:17:::0;;;:10:::1;:17;::::0;;;;;8353:28;::::1;;8345:37;;;::::0;::::1;;8393:27;8456:3;8423:30;8436:7:::0;1380:1:::1;8423:12;:30::i;:::-;:36;;;;;;8393:66;;8486:13;8502:25;8516:10;8502:13;:25::i;:::-;8486:41;;8567:8;8563:129;;;8675:1;8653:23;;8563:129;8756:21;8780:42;8793:7;8802:19;8780:12;:42::i;:::-;8756:66;;8853:41;8866:18;;8886:7;8853:12;:41::i;:::-;8832:18;:62:::0;-1:-1:-1;;;;;8937:17:2;::::1;;::::0;;;:10:::1;:17;::::0;;;;;8924:40:::1;::::0;8956:7;8924:12:::1;:40::i;:::-;-1:-1:-1::0;;;;;8904:17:2;::::1;;::::0;;;:10:::1;:17;::::0;;;;;;;:60;;;;9093:15:::1;::::0;9167:10:::1;:17:::0;;;;;;:36;;9093:25;;::::1;-1:-1:-1::0;;;9122:24:2;::::1;9093:54;9167:36:::0;;;::::1;::::0;;9284:33:::1;9297:19:::0;9284:12:::1;:33::i;:::-;9389:57;::::0;;;;;::::1;::::0;::::1;::::0;;;9430:15:::1;9389:57:::0;;;;;;-1:-1:-1;;;;;9389:57:2;::::1;::::0;::::1;::::0;;;;;;;;::::1;-1:-1:-1::0;;;;;9499:179:2;::::1;9540:17;::::0;;;:10:::1;:17;::::0;;;;;;;:27;;9581:10:::1;:17:::0;;;;;;;9612;;;:27:::1;;::::0;9499:179;;;;;;;::::1;::::0;;;;;;;;9653:15:::1;9499:179:::0;;;;;-1:-1:-1;;;;;;;;;;;9499:179:2;;;;;;;::::1;9747:12;:10;:12::i;:::-;2148:1;;;;;8245:1525:::0;:::o;10140:367::-;10199:13;;;;10274:135;10293:4;:11;10289:15;;10274:135;;;10344:4;10349:1;10344:7;;;;;;;;;;;;;;;;;;;10372:26;;;-1:-1:-1;;;10372:26:2;;-1:-1:-1;;;;;10372:26:2;;;;;;;;;10344:7;;;;;-1:-1:-1;10344:7:2;;10372:19;;:26;;;;;;;;;;;10344:7;10372:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10372:26:2;10367:31;;;;;10306:3;;10274:135;;;;10426:15;;10421:1;:20;10417:62;;10464:4;10457:11;;;;;;10417:62;-1:-1:-1;10495:5:2;;10140:367;-1:-1:-1;;;10140:367:2:o;1102:23::-;;;;:::o;7333:890::-;2271:1;2256:12;:10;:12::i;:::-;:16;2248:25;;;;;;7397:10:::1;7381:13;7438:12;:10;:12::i;:::-;-1:-1:-1::0;;;;;7544:17:2;;::::1;;::::0;;;:10:::1;:17;::::0;;;;;;;:53;;-1:-1:-1;;;7574:22:2;::::1;7544:53;::::0;;7661:12:::1;::::0;:40;;-1:-1:-1;;;7661:40:2;;::::1;::::0;::::1;::::0;;;;;;;;;;;;7417:33;;-1:-1:-1;7661:12:2;;::::1;::::0;:21:::1;::::0;:40;;;;;7544:17;;7661:40;;;;;;;;:12;:40;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;;;;;;;7832:17:2;::::1;;::::0;;;:10:::1;7661:40;7832:17:::0;;;;:27:::1;;::::0;7806:87:::1;::::0;7873:10;7806:12:::1;:87::i;:::-;-1:-1:-1::0;;;;;7776:17:2;::::1;;::::0;;;:10:::1;:17;::::0;;;;;;;;:27:::1;::::0;::::1;:117:::0;;;;7903:28:::1;::::0;;::::1;:33:::0;;7935:1:::1;7903:33:::0;;::::1;::::0;;;7993:8:::1;:13:::0;;;;::::1;::::0;;8016:11:::1;:25:::0;;;::::1;::::0;;8088:46;;;;;8118:15:::1;8088:46:::0;;::::1;::::0;;;;;;7776:17;;8088:46:::1;::::0;;;;;;;;;::::1;8204:12;:10;:12::i;:::-;2283:1;;7333:890::o:0;11408:266::-;11451:7;11488:4;11451:7;11523:49;11536:30;11488:4;1380:1;11536:12;:30::i;11523:49::-;11502:70;;11582:20;11605:33;11618:7;11627:10;11605:12;:33::i;:::-;11582:56;-1:-1:-1;;;;11408:266:2;:::o;877:20::-;;;;:::o;10719:105::-;-1:-1:-1;;;;;10800:17:2;10774:7;10800:17;;;:10;:17;;;;;;;10719:105::o;1710:145:5:-;1301:12;:10;:12::i;:::-;-1:-1:-1;;;;;1290:23:5;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1290:23:5;;1282:68;;;;;-1:-1:-1;;;1282:68:5;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1282:68:5;;;;;;;;;;;;;;;1816:1:::1;1800:6:::0;;1779:40:::1;::::0;-1:-1:-1;;;;;1800:6:5;;::::1;::::0;1779:40:::1;::::0;1816:1;;1779:40:::1;1846:1;1829:19:::0;;-1:-1:-1;;;;;;1829:19:5::1;::::0;;1710:145::o;394:26:2:-;;;-1:-1:-1;;;;;394:26:2;;:::o;1131:25::-;;;;:::o;13612:409::-;13711:13;1301:12:5;:10;:12::i;:::-;-1:-1:-1;;;;;1290:23:5;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1290:23:5;;1282:68;;;;;-1:-1:-1;;;1282:68:5;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1282:68:5;;;;;;;;;;;;;;;13744:16:2::1;:5:::0;13754;13744:9:::1;:16::i;:::-;13764:1;13744:21;13736:63;;;::::0;;-1:-1:-1;;;13736:63:2;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;13843:7;:15:::0;;;13868:7:::1;:15:::0;;;13949:44:::1;::::0;;;;;::::1;::::0;::::1;::::0;;;13977:15:::1;13949:44:::0;;;;;;::::1;::::0;;;;;;;::::1;-1:-1:-1::0;14010:4:2::1;1360:1:5;13612:409:2::0;;;;:::o;12604:597::-;12659:18;;:::i;:::-;12689:16;;:::i;:::-;-1:-1:-1;;;;;;12708:17:2;;;;;;:10;:17;;;;;;;;;12689:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12735:31;;:::i;:::-;:430;;;;;;;;12783:1;:11;;;12735:430;;;;12808:1;:11;;;12735:430;;;;12833:1;:10;;;12735:430;;;;12857:1;:12;;;12735:430;;;;12883:1;:13;;;12735:430;;;;12910:1;:19;;;12735:430;;;;12943:1;:16;;;12735:430;;;;12973:1;:11;;;12735:430;;;;12998:1;:11;;;12735:430;;;;13023:1;:14;;;12735:430;;;;13051:1;:12;;;12735:430;;;;13077:1;:20;;;12735:430;;;;13111:1;:17;;;12735:430;;;;13142:1;:13;;;12735:430;;;;;13182:12;13175:19;;;;12604:597;;;:::o;1641:51::-;1683:9;1641:51;:::o;11680:264::-;11721:7;11758:4;11721:7;11793:49;11806:30;11758:4;1380:1;11806:12;:30::i;11793:49::-;11772:70;;11852:20;11875:33;11888:7;11897:10;11875:12;:33::i;1586:49::-;1628:7;1586:49;:::o;1078:85:5:-;1124:7;1150:6;-1:-1:-1;;;;;1150:6:5;1078:85;:::o;10513:95:2:-;10554:7;10580:21;10590:10;10580:9;:21::i;:::-;10573:28;;10513:95;:::o;699:27::-;;;-1:-1:-1;;;;;699:27:2;;:::o;1500:19::-;;;;:::o;9792:159::-;9892:4;2136:1;2123:10;:8;:10::i;:::-;:14;2115:23;;;;;;9915:29:::1;9931:3;9936:7;9915:15;:29::i;:::-;9908:36:::0;9792:159;-1:-1:-1;;;9792:159:2:o;10940:115::-;11011:12;;:37;;;-1:-1:-1;;;11011:37:2;;11042:4;11011:37;;;;;;10985:7;;-1:-1:-1;;;;;11011:12:2;;:22;;:37;;;;;;;;;;;;;;:12;:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11011:37:2;;-1:-1:-1;10940:115:2;:::o;1213:27::-;;;;:::o;772:21::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;772:21:2;;-1:-1:-1;772:21:2;:::o;6242:110::-;6289:7;6315:30;6325:10;6337:7;6315:9;:30::i;975:22::-;;;;:::o;1246:21::-;;;;;;:::o;732:34::-;;;-1:-1:-1;;;;;732:34:2;;:::o;11950:297::-;12035:7;;12072:49;12085:30;12098:7;1380:1;12085:12;:30::i;12072:49::-;12054:67;;12131:16;12150:30;12163:7;12172;12150:12;:30::i;:::-;12131:49;11950:297;-1:-1:-1;;;;11950:297:2:o;10830:104::-;-1:-1:-1;;;;;10914:13:2;;;10830:104::o;5646:575::-;5789:11;;:60;;;-1:-1:-1;;;5789:60:2;;5814:10;5789:60;;;;5834:4;5789:60;;;;;;;;;;;;-1:-1:-1;;5789:11:2;;;-1:-1:-1;;;;;5789:11:2;;:24;;:60;;;;;;;;;;;;;;-1:-1:-1;5789:11:2;:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5789:60:2;5781:69;;;;;;5912:15;:26;;;;;;5959:10;5912:15;5948:22;;;:10;:22;;;;;;;;;:35;;;:40;;-1:-1:-1;5948:40:2;;;5998:34;;:45;;;;;;6136:46;;;;;6166:15;6136:46;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6199:15:2;;;5646:575::o;854:17::-;;;;:::o;2004:240:5:-;1301:12;:10;:12::i;:::-;-1:-1:-1;;;;;1290:23:5;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1290:23:5;;1282:68;;;;;-1:-1:-1;;;1282:68:5;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1282:68:5;;;;;;;;;;;;;;;-1:-1:-1;;;;;2092:22:5;::::1;2084:73;;;;-1:-1:-1::0;;;2084:73:5::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2193:6;::::0;;2172:38:::1;::::0;-1:-1:-1;;;;;2172:38:5;;::::1;::::0;2193:6;::::1;::::0;2172:38:::1;::::0;::::1;2220:6;:17:::0;;-1:-1:-1;;;;;;2220:17:5::1;-1:-1:-1::0;;;;;2220:17:5;;;::::1;::::0;;;::::1;::::0;;2004:240::o;7239:73:2:-;2271:1;2256:12;:10;:12::i;:::-;:16;2248:25;;;;;;7288:17:::1;:15;:17::i;:::-;;7239:73::o:0;14083:524::-;14177:13;1301:12:5;:10;:12::i;:::-;-1:-1:-1;;;;;1290:23:5;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1290:23:5;;1282:68;;;;;-1:-1:-1;;;1282:68:5;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1282:68:5;;;;;;;;;;;;;;;14202:6:2::1;14198:166;14217:4;:11:::0;14213:15;::::1;14198:166;;;14296:9;14306:1;14296:12;;;;;;;;;;;;;;-1:-1:-1::0;;;;;14296:30:2::1;;14327:10;14296:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;14296:42:2;14288:65:::1;;;::::0;;-1:-1:-1;;;14288:65:2;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;14288:65:2;;;;;;;;;;;;;::::1;;14230:3;;14198:166;;;;14373:28;14404:4;14373:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;;-1:-1:-1;;;;;14373:35:2::1;::::0;;;;;::::1;::::0;::::1;;::::0;;::::1;;;;-1:-1:-1::0;;14418:16:2;;14373:35;;-1:-1:-1;14418:16:2::1;::::0;:4:::1;::::0;-1:-1:-1;14418:16:2::1;::::0;::::1;::::0;-1:-1:-1;14418:16:2;-1:-1:-1;14418:16:2::1;:::i;:::-;;14482:10;-1:-1:-1::0;;;;;14450:129:2::1;;14506:11;14531:9;14554:15;14450:129;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;;::::1;::::0;;;::::1;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;;::::1;::::0;;;::::1;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;14596:4:2::1;::::0;14083:524;-1:-1:-1;;14083:524:2:o;1273:25::-;;;;;;-1:-1:-1;;;;;1273:25:2;;:::o;13207:283::-;13321:8;;13301:15;;13266:7;;;;13301:38;;13335:3;;13301:29;;13321:8;;13301:19;:29::i;:::-;:33;;:38::i;:::-;13285:54;;13390:1;13369:18;;:22;13368:115;;13482:1;13368:115;;;13444:18;;-1:-1:-1;;;;;13421:17:2;;;;;;:10;:17;;;;;;13411:52;;13444:18;13411:28;;:5;;:9;:28::i;6375:842::-;6536:12;;:61;;;-1:-1:-1;;;6536:61:2;;6562:10;6536:61;;;;6582:4;6536:61;;;;;;;;;;;;6439:7;;-1:-1:-1;;;;;6536:12:2;;:25;;:61;;;;;;;;;;;;;;6439:7;6536:12;:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6536:61:2;6528:70;;;;;;6660:13;:24;;;;;;:13;6761:30;6776:5;6677:7;6761:14;:30::i;:::-;-1:-1:-1;;;;;6844:179:2;;6885:17;;;;:10;:17;;;;;;;;:27;;6926:10;:17;;;;;;;6957;;;:27;;;6844:179;;;;;;;;;;;;;;;;6998:15;6844:179;;;;;6747:44;;-1:-1:-1;6844:179:2;;-1:-1:-1;;;;;;;;;;;6844:179:2;;;;;;;;7098:12;:10;:12::i;10614:99::-;10657:7;10683:23;10695:10;10683:11;:23::i;726:413:0:-;1086:20;1124:8;;;726:413::o;3538:215:8:-;3596:7;3619:6;3615:20;;-1:-1:-1;3634:1:8;3627:8;;3615:20;3657:5;;;3661:1;3657;:5;:1;3680:5;;;;;:10;3672:56;;;;-1:-1:-1;;;3672:56:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4217:150;4275:7;4306:1;4302;:5;4294:44;;;;;-1:-1:-1;;;4294:44:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;4359:1;4355;:5;;;;;;;4217:150;-1:-1:-1;;;4217:150:8:o;3136:155::-;3194:7;3226:1;3221;:6;;3213:49;;;;;-1:-1:-1;;;3213:49:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3279:5:8;;;3136:155::o;14777:737:2:-;14827:17;14847:11;:3;14855:2;14847:7;:11::i;:::-;14827:31;;14869:16;14889:22;14903:7;;14889:9;:13;;:22;;;;:::i;:::-;14869:43;;14943:16;14963:22;14977:7;;14963:9;:13;;:22;;;;:::i;:::-;15035:15;;14943:43;;-1:-1:-1;15035:29:2;;15055:8;15035:19;:29::i;:::-;15017:15;:47;15143:18;;:22;15139:369;;15247:120;15277:15;;15335:18;;-1:-1:-1;;;15311:8:2;:20;15310:43;;;;;;15247:12;:120::i;:::-;15229:15;:138;15139:369;;;15470:15;:27;;;;;;15139:369;14777:737;;;;:::o;15555:1242::-;15728:14;;15621:15;;1628:7;;15702:41;;15621:15;;15702:25;:41::i;:::-;:59;15698:278;;;15817:43;15826:14;:12;:14::i;:::-;15817:43;;;;;;;;;;;;;;;;;;;;;15931:14;:34;;;15698:278;1683:9;16048:47;16065:17;16084:10;;16048:16;:47::i;:::-;:65;:103;;;;;16150:1;16129:18;;:22;16048:103;16031:760;;;16259:8;;16239:15;;16223:13;;16239:82;;16299:8;;16239:38;;16273:3;;16239:38;;:15;16259:8;;16239:19;:29::i;:82::-;16223:98;;16335:14;16360:37;16386:10;;16360:17;:25;;:37;;;;:::i;:::-;16506:15;;16352:45;;;;-1:-1:-1;16506:31:2;;16352:45;16506:23;:31::i;:::-;16488:15;:49;16599:15;;16655:18;;16569:118;;16599:15;-1:-1:-1;;;16633:18:2;;16655;16632:41;;;16569:118;16551:15;:136;-1:-1:-1;;16750:10:2;:30;15555:1242::o;2690:175:8:-;2748:7;2779:5;;;2802:6;;;;2794:46;;;;;-1:-1:-1;;;2794:46:8;;;;;;;;;;;;;;;;;;;;;;;;;;;598:104:1;685:10;598:104;:::o;19684:1969:2:-;19829:10;19786:13;19868:19;;;:10;:19;;;;;;19786:13;;19829:10;19857:30;;;19849:39;;;;;;20003:1;19988:12;:10;:12::i;:::-;:16;19984:56;;;20020:9;:7;:9::i;:::-;-1:-1:-1;;;;;20117:19:2;;;;;;:10;:19;;;;;;20104:42;;20138:7;20104:12;:42::i;:::-;-1:-1:-1;;;;;20082:19:2;;;;;;;:10;:19;;;;;;:64;;;;20194:22;;;;;;;20181:45;;20218:7;20181:12;:45::i;:::-;-1:-1:-1;;;;;20156:22:2;;;;;;;:10;:22;;;;;;;;:70;;;;20330:15;;;20298:19;;;;;:10;:19;;;;;:58;;20330:25;;;20298:58;;;;;;20401:15;;20366:22;;;;;;:61;;20401:25;;;20366:61;;;;;;20530:10;:22;;;;:32;:37;:95;;;;-1:-1:-1;;;;;;20583:22:2;;;;;;:10;:22;;;;;:37;;;:42;20530:95;20513:158;;;20650:5;:10;;20659:1;20650:10;;;20513:158;-1:-1:-1;;;;;20707:19:2;;;;;;;:10;:19;;;;;;;;:38;;;:43;;20749:1;20707:43;;;;;;20760:37;;;;:48;;;;;;20818:22;;;;;;;;;;-1:-1:-1;20818:37:2;;:48;;;;;;20876:38;;:43;;;;;;20971:8;:13;;;;;;;;21050:57;;;;;21091:15;21050:57;;;;;;;;;20818:22;;21050:57;;;;;;;;;-1:-1:-1;;;;;21171:187:2;;21214:19;;;;:10;:19;;;;;;;;:29;;21257:10;:19;;;;;;;21290;;;:29;;;21171:187;;;;;;;;;;;;;;;;21333:15;21171:187;;;;;-1:-1:-1;;;;;;;;;;;21171:187:2;;;;;;;;-1:-1:-1;;;;;21425:199:2;;21471:22;;;;:10;:22;;;;;;;;:32;;21517:10;:22;;;;;;;21553;;;:32;;;21425:199;;;;;;;;;;;;;;;;21599:15;21425:199;;;;;-1:-1:-1;;;;;;;;;;;21425:199:2;;;;;;;;-1:-1:-1;21642:4:2;;19684:1969;-1:-1:-1;;;19684:1969:2:o;18459:1178::-;18504:7;18539:10;18504:7;18646:18;18539:10;18646:11;:18::i;:::-;-1:-1:-1;;;;;18674:17:2;;;;;;:10;:17;;;;;:53;;-1:-1:-1;;;18704:22:2;;18674:53;;;18625:39;;-1:-1:-1;18900:38:2;18915:10;18625:39;18900:14;:38::i;:::-;18985:55;;;;;;;;;;;;19024:15;18985:55;;;;;;18882:56;;-1:-1:-1;;;;;;18985:55:2;;;;;;;;;;;;-1:-1:-1;;;;;19144:17:2;;;;;;:10;:17;;;;;:28;;;19118:88;;19186:10;19118:12;:88::i;:::-;-1:-1:-1;;;;;19087:17:2;;;;;;:10;:17;;;;;;;;:28;;;:119;;;;19216:29;;;:34;;19249:1;19216:34;;;19344:27;;19385:10;:17;;;;;;;19416;;;:27;;;;;19303:179;;;;;;;;;;;;;;;;19457:15;19303:179;;;;;;19087:17;;-1:-1:-1;;;;;;;;;;;19303:179:2;;;;;;;;;19561:12;:10;:12::i;:::-;19623:7;-1:-1:-1;;;18459:1178:2;:::o;16843:1576::-;-1:-1:-1;;;;;17055:22:2;;16944:7;17055:22;;;:10;:22;;;;;:32;:37;:95;;;;-1:-1:-1;;;;;;17108:22:2;;;;;;:10;:22;;;;;:37;;;:42;17055:95;17038:158;;;17175:5;:10;;17184:1;17175:10;;;17038:158;17234:8;:13;;17246:1;17234:13;;;:8;17326:3;17293:30;17306:7;1380:1;17293:12;:30::i;:::-;:36;;;;;;17263:66;;17341:17;17361:42;17374:7;17383:19;17361:12;:42::i;:::-;17458:56;;;;;;;;;;;;17498:15;17458:56;;;;;;17341:62;;-1:-1:-1;;;;;;17458:56:2;;;;;;;;;;;;17623:1;17613:7;:11;:93;;;;-1:-1:-1;17688:18:2;;17644:41;17657:7;17688:18;17644:12;:41::i;:::-;:62;17613:93;17592:124;;;;;;17730:18;;:22;17726:141;;17768:18;:29;;;;;;17726:141;;;17828:18;:28;;;17726:141;17932:33;17945:19;17932:12;:33::i;:::-;-1:-1:-1;;;;;18013:22:2;;;;;;:10;:22;;;;;;18000:45;;18037:7;18000:12;:45::i;:::-;-1:-1:-1;;;;;17975:22:2;;;;;;:10;:22;;;;;;;;:70;;;;18120:15;;18184:10;:22;;;;;:41;;18120:25;;;18184:41;;;;;;18235:10;:22;;;:43;;;;;;18288:32;;:37;;-1:-1:-1;18288:37:2;;;18138:7;-1:-1:-1;;16843:1576:2;;;;:::o;7288:165:8:-;7344:4;7368:1;7364;:5;7360:87;;;-1:-1:-1;7392:1:8;7385:8;;7360:87;-1:-1:-1;7431:5:8;;;7424:12;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1865400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"accountOf(address)": "infinite",
								"balanceOf(address)": "1210",
								"bnbReceiver()": "1192",
								"buyPrice()": "infinite",
								"calculateSharesReceived(uint256)": "infinite",
								"calculateTokensReceived(uint256)": "infinite",
								"checkImmunity(address)": "infinite",
								"compound()": "infinite",
								"dailyEstimate(address)": "infinite",
								"deposit(uint256)": "infinite",
								"depositTo(address,uint256)": "infinite",
								"dividendsOf(address)": "2900",
								"donate(uint256)": "infinite",
								"dripPoolBalance()": "1043",
								"dripRate()": "1146",
								"forDivs()": "1044",
								"forPool()": "1088",
								"harvest()": "infinite",
								"jpeg(uint256)": "2037",
								"lastPayout()": "1109",
								"lastRebaseTime()": "1133",
								"myEarnings()": "2984",
								"myTokens()": "1165",
								"owner()": "1192",
								"payoutFrequency()": "287",
								"rebaseFrequency()": "331",
								"renounceOwnership()": "infinite",
								"requiredBalance()": "1067",
								"rewardToken()": "1136",
								"sellPrice()": "663",
								"setFeeSplit(uint256,uint256)": "infinite",
								"setImmunityToken(address[])": "infinite",
								"stakingToken()": "1149",
								"tokenAddress()": "1105",
								"tokenBalance(address)": "1040",
								"totalBalance()": "infinite",
								"totalClaims()": "1110",
								"totalDeposits()": "1132",
								"totalSupply()": "1111",
								"totalTxs()": "1044",
								"transfer(address,uint256)": "infinite",
								"transferOwnership(address)": "infinite",
								"users()": "1109",
								"withdraw(uint256)": "infinite"
							},
							"internal": {
								"_compoundTokens()": "infinite",
								"_depositTokens(address,uint256)": "infinite",
								"_transferTokens(address,uint256)": "infinite",
								"allocateFees(uint256)": "infinite",
								"distribute()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 237,
									"end": 21655,
									"name": "PUSH",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 237,
									"end": 21655,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 237,
									"end": 21655,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "PUSHSIZE",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "CODESIZE",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "PUSHSIZE",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "PUSH",
									"source": 2,
									"value": "60"
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "tag",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 4590,
									"end": 5217,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 877,
									"end": 894,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 897,
									"end": 909,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "7"
								},
								{
									"begin": 897,
									"end": 907,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "8"
								},
								{
									"begin": 897,
									"end": 909,
									"name": "JUMP",
									"source": 5,
									"value": "[in]"
								},
								{
									"begin": 897,
									"end": 909,
									"name": "tag",
									"source": 5,
									"value": "7"
								},
								{
									"begin": 897,
									"end": 909,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 919,
									"end": 925,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 919,
									"end": 937,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 919,
									"end": 937,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 919,
									"end": 937,
									"name": "AND",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 919,
									"end": 937,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 919,
									"end": 937,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 919,
									"end": 937,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 919,
									"end": 937,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 919,
									"end": 937,
									"name": "OR",
									"source": 5
								},
								{
									"begin": 919,
									"end": 937,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 919,
									"end": 937,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 952,
									"end": 995,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 952,
									"end": 995,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 919,
									"end": 937,
									"name": "SWAP3",
									"source": 5
								},
								{
									"begin": 919,
									"end": 937,
									"name": "SWAP4",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 919,
									"end": 937,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 952,
									"end": 995,
									"name": "PUSH",
									"source": 5,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 952,
									"end": 995,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 919,
									"end": 925,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 919,
									"end": 925,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 952,
									"end": 995,
									"name": "LOG3",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1716,
									"end": 1717,
									"name": "PUSH",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1821,
									"end": 1843,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1821,
									"end": 1843,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 4705,
									"end": 4732,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 4705,
									"end": 4732,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 4705,
									"end": 4732,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 4705,
									"end": 4732,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 4705,
									"end": 4732,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 4705,
									"end": 4732,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4705,
									"end": 4769,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "12"
								},
								{
									"begin": 4705,
									"end": 4769,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 4705,
									"end": 4769,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 4736,
									"end": 4769,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "12"
								},
								{
									"begin": 4755,
									"end": 4768,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 4736,
									"end": 4754,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "13"
								},
								{
									"begin": 4736,
									"end": 4754,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 4736,
									"end": 4754,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": 4736,
									"end": 4754,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "18446744073709551829"
								},
								{
									"begin": 4736,
									"end": 4754,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 4736,
									"end": 4769,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 4736,
									"end": 4769,
									"name": "SHR",
									"source": 2
								},
								{
									"begin": 4736,
									"end": 4769,
									"name": "JUMP",
									"source": 2,
									"value": "[in]"
								},
								{
									"begin": 4736,
									"end": 4769,
									"name": "tag",
									"source": 2,
									"value": "12"
								},
								{
									"begin": 4736,
									"end": 4769,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "14"
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "461BCD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "PUSH",
									"source": 2,
									"value": "F"
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "PUSH",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "494E56414C49445F41444452455353"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "88"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "PUSH",
									"source": 2,
									"value": "44"
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "PUSH",
									"source": 2,
									"value": "64"
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "tag",
									"source": 2,
									"value": "14"
								},
								{
									"begin": 4684,
									"end": 4810,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 4820,
									"end": 4831,
									"name": "PUSH",
									"source": 2,
									"value": "D"
								},
								{
									"begin": 4820,
									"end": 4854,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 4820,
									"end": 4854,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 4864,
									"end": 4876,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 4864,
									"end": 4892,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 4864,
									"end": 4892,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 4864,
									"end": 4892,
									"name": "SWAP7",
									"source": 2
								},
								{
									"begin": 4864,
									"end": 4892,
									"name": "DUP8",
									"source": 2
								},
								{
									"begin": 4864,
									"end": 4892,
									"name": "AND",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 4864,
									"end": 4892,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 4864,
									"end": 4892,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 4864,
									"end": 4892,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 4864,
									"end": 4892,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 4864,
									"end": 4892,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 4864,
									"end": 4892,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4864,
									"end": 4892,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 4864,
									"end": 4892,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 4902,
									"end": 4914,
									"name": "PUSH",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 4902,
									"end": 4938,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 4902,
									"end": 4938,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 4902,
									"end": 4938,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 4902,
									"end": 4938,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 4902,
									"end": 4938,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4902,
									"end": 4938,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 4902,
									"end": 4938,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 4902,
									"end": 4938,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 4902,
									"end": 4938,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 4949,
									"end": 4960,
									"name": "PUSH",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 4949,
									"end": 4973,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 4949,
									"end": 4973,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 4949,
									"end": 4973,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4949,
									"end": 4973,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 4949,
									"end": 4973,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 4963,
									"end": 4973,
									"name": "CALLER",
									"source": 2
								},
								{
									"begin": 4949,
									"end": 4973,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 4949,
									"end": 4973,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4949,
									"end": 4973,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 5053,
									"end": 5073,
									"name": "PUSH",
									"source": 2,
									"value": "FF"
								},
								{
									"begin": 5053,
									"end": 5073,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 5053,
									"end": 5073,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 5053,
									"end": 5073,
									"name": "AND",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FF"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 4820,
									"end": 4854,
									"name": "SWAP6",
									"source": 2
								},
								{
									"begin": 4820,
									"end": 4854,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4820,
									"end": 4854,
									"name": "SWAP5",
									"source": 2
								},
								{
									"begin": 4820,
									"end": 4854,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 4820,
									"end": 4854,
									"name": "PUSH",
									"source": 2,
									"value": "100"
								},
								{
									"begin": 4820,
									"end": 4854,
									"name": "MUL",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "100"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 4820,
									"end": 4854,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 4820,
									"end": 4854,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 4820,
									"end": 4854,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 4820,
									"end": 4854,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 5053,
									"end": 5073,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 5053,
									"end": 5073,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 5053,
									"end": 5073,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 5053,
									"end": 5073,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 5053,
									"end": 5073,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 5053,
									"end": 5073,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 5053,
									"end": 5073,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 5053,
									"end": 5073,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 5053,
									"end": 5073,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 5053,
									"end": 5073,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 5053,
									"end": 5073,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 5097,
									"end": 5112,
									"name": "TIMESTAMP",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "9"
								},
								{
									"begin": 5083,
									"end": 5113,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 5148,
									"end": 5155,
									"name": "PUSH",
									"source": 2,
									"value": "E"
								},
								{
									"begin": 5148,
									"end": 5159,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 4820,
									"end": 4831,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 5169,
									"end": 5176,
									"name": "PUSH",
									"source": 2,
									"value": "F"
								},
								{
									"begin": 5169,
									"end": 5180,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 5169,
									"end": 5180,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 5169,
									"end": 5180,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 5191,
									"end": 5206,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 5191,
									"end": 5210,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 237,
									"end": 21655,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "15"
								},
								{
									"begin": 237,
									"end": 21655,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 598,
									"end": 702,
									"name": "tag",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 598,
									"end": 702,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 685,
									"end": 695,
									"name": "CALLER",
									"source": 1
								},
								{
									"begin": 598,
									"end": 702,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 598,
									"end": 702,
									"name": "JUMP",
									"source": 1,
									"value": "[out]"
								},
								{
									"begin": 726,
									"end": 1139,
									"name": "tag",
									"source": 0,
									"value": "13"
								},
								{
									"begin": 726,
									"end": 1139,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1086,
									"end": 1106,
									"name": "EXTCODESIZE",
									"source": 0
								},
								{
									"begin": 1124,
									"end": 1132,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 1124,
									"end": 1132,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 1124,
									"end": 1132,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 726,
									"end": 1139,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 237,
									"end": 21655,
									"name": "tag",
									"source": 2,
									"value": "15"
								},
								{
									"begin": 237,
									"end": 21655,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 237,
									"end": 21655,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 237,
									"end": 21655,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 237,
									"end": 21655,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 237,
									"end": 21655,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 237,
									"end": 21655,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 237,
									"end": 21655,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 237,
									"end": 21655,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122036c8969b296e230c736747f6dc7e1ecadd2e50a652eb4d913b73ecfe4159641264736f6c63430007040033",
									".code": [
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "949E8ACD"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "E02E1E9C"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "F69E2046"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "F69E2046"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "F6DB0DA0"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "F7C618C1"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "FBAF1BBD"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "FFAAD6A5"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "FFE6BBD8"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "tag",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "E02E1E9C"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "EEDC966A"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "F14FAF6F"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "F2020275"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "F2FDE38B"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "tag",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "AECB6D28"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "AECB6D28"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "B03CF5A7"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "B6B55F25"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "B9DB102A"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "D3261592"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "D7C3771D"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "tag",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "949E8ACD"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "9D76EA58"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "A01496DE"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "A9059CBB"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "AD7A672F"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "tag",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "537A39BB"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "7E6335C7"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "7E6335C7"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "8086B8BA"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "81FCE645"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "8620410B"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "89375ABF"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "8DA5CB5B"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "tag",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "537A39BB"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "70A08231"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "715018A6"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "72F702F3"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "7D882097"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "tag",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "1F38B9CD"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "53"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "1F38B9CD"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "2E1A7D4D"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "36599EAD"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "41C61383"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "4641257D"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "4B750334"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "tag",
											"source": 2,
											"value": "53"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "65318B"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "8560ACE"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "10D0FFDD"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "18160DDD"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "1924063E"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "tag",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5404,
											"end": 5415,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 5404,
											"end": 5415,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5386,
											"end": 5427,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 5386,
											"end": 5427,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5404,
											"end": 5415,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5417,
											"end": 5426,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 5386,
											"end": 5403,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "57"
										},
										{
											"begin": 5386,
											"end": 5427,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5386,
											"end": 5427,
											"name": "tag",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 5386,
											"end": 5427,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5442,
											"end": 5493,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5442,
											"end": 5493,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5442,
											"end": 5493,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5466,
											"end": 5475,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 5442,
											"end": 5493,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5442,
											"end": 5493,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5477,
											"end": 5492,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 5442,
											"end": 5493,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5442,
											"end": 5493,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5442,
											"end": 5493,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5442,
											"end": 5493,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5442,
											"end": 5493,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5442,
											"end": 5493,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5454,
											"end": 5464,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 5454,
											"end": 5464,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5442,
											"end": 5493,
											"name": "PUSH",
											"source": 2,
											"value": "3C2BD1B3F5CA07AFB09FBEE41AC43DA2B98D9C2E9832673052E546BD1D4C091D"
										},
										{
											"begin": 5442,
											"end": 5493,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5442,
											"end": 5493,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5442,
											"end": 5493,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5442,
											"end": 5493,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5442,
											"end": 5493,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5442,
											"end": 5493,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5442,
											"end": 5493,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "STOP",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "tag",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 237,
											"end": 21655,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "tag",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "tag",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "tag",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 587,
											"end": 617,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "62"
										},
										{
											"begin": 587,
											"end": 617,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 587,
											"end": 617,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "tag",
											"source": 2,
											"value": "62"
										},
										{
											"begin": 587,
											"end": 617,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 587,
											"end": 617,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 587,
											"end": 617,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "tag",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "tag",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11061,
											"end": 11156,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 11061,
											"end": 11156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11061,
											"end": 11156,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 11061,
											"end": 11156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11061,
											"end": 11156,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11061,
											"end": 11156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 11061,
											"end": 11156,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11061,
											"end": 11156,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11061,
											"end": 11156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11061,
											"end": 11156,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11061,
											"end": 11156,
											"name": "tag",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 11061,
											"end": 11156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11061,
											"end": 11156,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11061,
											"end": 11156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 11061,
											"end": 11156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 11061,
											"end": 11156,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1731,
											"end": 1760,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 1731,
											"end": 1760,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1760,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1760,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1760,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1760,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 1731,
											"end": 1760,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1731,
											"end": 1760,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1760,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1760,
											"name": "tag",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 1731,
											"end": 1760,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1760,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1760,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 1731,
											"end": 1760,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 1731,
											"end": 1760,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1525,
											"end": 1544,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 1525,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1525,
											"end": 1544,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1525,
											"end": 1544,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1525,
											"end": 1544,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1525,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "75"
										},
										{
											"begin": 1525,
											"end": 1544,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1525,
											"end": 1544,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1525,
											"end": 1544,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1525,
											"end": 1544,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1525,
											"end": 1544,
											"name": "tag",
											"source": 2,
											"value": "75"
										},
										{
											"begin": 1525,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1525,
											"end": 1544,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1525,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 1525,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 1525,
											"end": 1544,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "tag",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "tag",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "tag",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "STOP",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "82"
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "tag",
											"source": 2,
											"value": "82"
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "tag",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "tag",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "tag",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7333,
											"end": 8223,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 7333,
											"end": 8223,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 8223,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 8223,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 8223,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 8223,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 7333,
											"end": 8223,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 8223,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7333,
											"end": 8223,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 8223,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 8223,
											"name": "tag",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 7333,
											"end": 8223,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 8223,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 8223,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 7333,
											"end": 8223,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 7333,
											"end": 8223,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11408,
											"end": 11674,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 11408,
											"end": 11674,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11408,
											"end": 11674,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 11408,
											"end": 11674,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11408,
											"end": 11674,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11408,
											"end": 11674,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 11408,
											"end": 11674,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11408,
											"end": 11674,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11408,
											"end": 11674,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11408,
											"end": 11674,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11408,
											"end": 11674,
											"name": "tag",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 11408,
											"end": 11674,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11408,
											"end": 11674,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11408,
											"end": 11674,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 11408,
											"end": 11674,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 11408,
											"end": 11674,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 877,
											"end": 897,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 877,
											"end": 897,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 877,
											"end": 897,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 877,
											"end": 897,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 877,
											"end": 897,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 877,
											"end": 897,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "95"
										},
										{
											"begin": 877,
											"end": 897,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 877,
											"end": 897,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 877,
											"end": 897,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 877,
											"end": 897,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 877,
											"end": 897,
											"name": "tag",
											"source": 2,
											"value": "95"
										},
										{
											"begin": 877,
											"end": 897,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 877,
											"end": 897,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 877,
											"end": 897,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 877,
											"end": 897,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 877,
											"end": 897,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "tag",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "tag",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "tag",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "102"
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "tag",
											"source": 5,
											"value": "102"
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "79"
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "104"
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "tag",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "tag",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 394,
											"end": 420,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "tag",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "tag",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "tag",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "tag",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "113"
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "tag",
											"source": 2,
											"value": "113"
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "tag",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "tag",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "tag",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "PUSH",
											"source": 2,
											"value": "1C0"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "tag",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "tag",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1641,
											"end": 1692,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 1641,
											"end": 1692,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1641,
											"end": 1692,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1641,
											"end": 1692,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1641,
											"end": 1692,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1641,
											"end": 1692,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 1641,
											"end": 1692,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1641,
											"end": 1692,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1641,
											"end": 1692,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1641,
											"end": 1692,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1641,
											"end": 1692,
											"name": "tag",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 1641,
											"end": 1692,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1641,
											"end": 1692,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1641,
											"end": 1692,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 1641,
											"end": 1692,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 1641,
											"end": 1692,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11680,
											"end": 11944,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 11680,
											"end": 11944,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11680,
											"end": 11944,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 11680,
											"end": 11944,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11680,
											"end": 11944,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11680,
											"end": 11944,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "125"
										},
										{
											"begin": 11680,
											"end": 11944,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11680,
											"end": 11944,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11680,
											"end": 11944,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11680,
											"end": 11944,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11680,
											"end": 11944,
											"name": "tag",
											"source": 2,
											"value": "125"
										},
										{
											"begin": 11680,
											"end": 11944,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11680,
											"end": 11944,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11680,
											"end": 11944,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 11680,
											"end": 11944,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 11680,
											"end": 11944,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1586,
											"end": 1635,
											"name": "tag",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 1586,
											"end": 1635,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1586,
											"end": 1635,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1586,
											"end": 1635,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1586,
											"end": 1635,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1586,
											"end": 1635,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "128"
										},
										{
											"begin": 1586,
											"end": 1635,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1586,
											"end": 1635,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1586,
											"end": 1635,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1586,
											"end": 1635,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1586,
											"end": 1635,
											"name": "tag",
											"source": 2,
											"value": "128"
										},
										{
											"begin": 1586,
											"end": 1635,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1586,
											"end": 1635,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1586,
											"end": 1635,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 1586,
											"end": 1635,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "130"
										},
										{
											"begin": 1586,
											"end": 1635,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "tag",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "131"
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "tag",
											"source": 5,
											"value": "131"
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "106"
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 10513,
											"end": 10608,
											"name": "tag",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 10513,
											"end": 10608,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10513,
											"end": 10608,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 10513,
											"end": 10608,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10513,
											"end": 10608,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10513,
											"end": 10608,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 10513,
											"end": 10608,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10513,
											"end": 10608,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10513,
											"end": 10608,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10513,
											"end": 10608,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10513,
											"end": 10608,
											"name": "tag",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 10513,
											"end": 10608,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10513,
											"end": 10608,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10513,
											"end": 10608,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 10513,
											"end": 10608,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 10513,
											"end": 10608,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 699,
											"end": 726,
											"name": "tag",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 699,
											"end": 726,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 699,
											"end": 726,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 699,
											"end": 726,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 699,
											"end": 726,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 699,
											"end": 726,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 699,
											"end": 726,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 699,
											"end": 726,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 699,
											"end": 726,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 699,
											"end": 726,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 699,
											"end": 726,
											"name": "tag",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 699,
											"end": 726,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 699,
											"end": 726,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 699,
											"end": 726,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 699,
											"end": 726,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "139"
										},
										{
											"begin": 699,
											"end": 726,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1500,
											"end": 1519,
											"name": "tag",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 1500,
											"end": 1519,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1500,
											"end": 1519,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1500,
											"end": 1519,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1500,
											"end": 1519,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1500,
											"end": 1519,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 1500,
											"end": 1519,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1500,
											"end": 1519,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1500,
											"end": 1519,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1500,
											"end": 1519,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1500,
											"end": 1519,
											"name": "tag",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 1500,
											"end": 1519,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1500,
											"end": 1519,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1500,
											"end": 1519,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 1500,
											"end": 1519,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "142"
										},
										{
											"begin": 1500,
											"end": 1519,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "tag",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "tag",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "145"
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "tag",
											"source": 2,
											"value": "145"
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "146"
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10940,
											"end": 11055,
											"name": "tag",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 10940,
											"end": 11055,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10940,
											"end": 11055,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 10940,
											"end": 11055,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10940,
											"end": 11055,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10940,
											"end": 11055,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "147"
										},
										{
											"begin": 10940,
											"end": 11055,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10940,
											"end": 11055,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10940,
											"end": 11055,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10940,
											"end": 11055,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10940,
											"end": 11055,
											"name": "tag",
											"source": 2,
											"value": "147"
										},
										{
											"begin": 10940,
											"end": 11055,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10940,
											"end": 11055,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10940,
											"end": 11055,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 10940,
											"end": 11055,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 10940,
											"end": 11055,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "tag",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "150"
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "tag",
											"source": 2,
											"value": "150"
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "152"
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "tag",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "153"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "tag",
											"source": 2,
											"value": "153"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "155"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "tag",
											"source": 2,
											"value": "155"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 772,
											"end": 793,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "tag",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "157"
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "tag",
											"source": 2,
											"value": "157"
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "tag",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 975,
											"end": 997,
											"name": "tag",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 975,
											"end": 997,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 975,
											"end": 997,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 975,
											"end": 997,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 975,
											"end": 997,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 975,
											"end": 997,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "161"
										},
										{
											"begin": 975,
											"end": 997,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 975,
											"end": 997,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 975,
											"end": 997,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 975,
											"end": 997,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 975,
											"end": 997,
											"name": "tag",
											"source": 2,
											"value": "161"
										},
										{
											"begin": 975,
											"end": 997,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 975,
											"end": 997,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 975,
											"end": 997,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 975,
											"end": 997,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "163"
										},
										{
											"begin": 975,
											"end": 997,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "tag",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "164"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "tag",
											"source": 2,
											"value": "164"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "165"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "166"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "tag",
											"source": 2,
											"value": "165"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "tag",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 732,
											"end": 766,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "167"
										},
										{
											"begin": 732,
											"end": 766,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 732,
											"end": 766,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "tag",
											"source": 2,
											"value": "167"
										},
										{
											"begin": 732,
											"end": 766,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 732,
											"end": 766,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "169"
										},
										{
											"begin": 732,
											"end": 766,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "tag",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "170"
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "tag",
											"source": 2,
											"value": "170"
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "tag",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "173"
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "tag",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "174"
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "tag",
											"source": 2,
											"value": "174"
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "176"
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "tag",
											"source": 2,
											"value": "176"
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "tag",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "178"
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "tag",
											"source": 2,
											"value": "178"
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "tag",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "181"
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 854,
											"end": 871,
											"name": "tag",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 854,
											"end": 871,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 854,
											"end": 871,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 854,
											"end": 871,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 854,
											"end": 871,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 854,
											"end": 871,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "182"
										},
										{
											"begin": 854,
											"end": 871,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 854,
											"end": 871,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 854,
											"end": 871,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 854,
											"end": 871,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 854,
											"end": 871,
											"name": "tag",
											"source": 2,
											"value": "182"
										},
										{
											"begin": 854,
											"end": 871,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 854,
											"end": 871,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 854,
											"end": 871,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 854,
											"end": 871,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "184"
										},
										{
											"begin": 854,
											"end": 871,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "tag",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "185"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "tag",
											"source": 5,
											"value": "185"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "79"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "187"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "tag",
											"source": 5,
											"value": "187"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "CALLDATALOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "188"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 7239,
											"end": 7312,
											"name": "tag",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 7239,
											"end": 7312,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7239,
											"end": 7312,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 7239,
											"end": 7312,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7239,
											"end": 7312,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7239,
											"end": 7312,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "189"
										},
										{
											"begin": 7239,
											"end": 7312,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7239,
											"end": 7312,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7239,
											"end": 7312,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7239,
											"end": 7312,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7239,
											"end": 7312,
											"name": "tag",
											"source": 2,
											"value": "189"
										},
										{
											"begin": 7239,
											"end": 7312,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7239,
											"end": 7312,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7239,
											"end": 7312,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 7239,
											"end": 7312,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "191"
										},
										{
											"begin": 7239,
											"end": 7312,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "tag",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "192"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "tag",
											"source": 2,
											"value": "192"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "194"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "tag",
											"source": 2,
											"value": "194"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH",
											"source": 2,
											"value": "100000000"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "195"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "tag",
											"source": 2,
											"value": "195"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "196"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "tag",
											"source": 2,
											"value": "196"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH",
											"source": 2,
											"value": "100000000"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "197"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "tag",
											"source": 2,
											"value": "197"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "CALLDATACOPY",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "198"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "tag",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "199"
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "tag",
											"source": 2,
											"value": "199"
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "201"
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "tag",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "202"
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "tag",
											"source": 2,
											"value": "202"
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "204"
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "tag",
											"source": 2,
											"value": "204"
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "205"
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "tag",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "206"
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "tag",
											"source": 2,
											"value": "206"
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "tag",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "209"
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10614,
											"end": 10713,
											"name": "tag",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 10614,
											"end": 10713,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10614,
											"end": 10713,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 10614,
											"end": 10713,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10614,
											"end": 10713,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10614,
											"end": 10713,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "210"
										},
										{
											"begin": 10614,
											"end": 10713,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10614,
											"end": 10713,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10614,
											"end": 10713,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10614,
											"end": 10713,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10614,
											"end": 10713,
											"name": "tag",
											"source": 2,
											"value": "210"
										},
										{
											"begin": 10614,
											"end": 10713,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10614,
											"end": 10713,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10614,
											"end": 10713,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 10614,
											"end": 10713,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "212"
										},
										{
											"begin": 10614,
											"end": 10713,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2056,
											"end": 2447,
											"name": "tag",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 2056,
											"end": 2447,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2170,
											"end": 2176,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2166,
											"name": "SELFBALANCE",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2176,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2176,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "215"
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "PUSH",
											"source": 0,
											"value": "1D"
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "PUSH",
											"source": 0,
											"value": "416464726573733A20696E73756666696369656E742062616C616E6365000000"
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "tag",
											"source": 0,
											"value": "215"
										},
										{
											"begin": 2137,
											"end": 2210,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2299,
											"end": 2311,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2299,
											"end": 2311,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2331,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2331,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2331,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2340,
											"end": 2346,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2340,
											"end": 2346,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2299,
											"end": 2311,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2299,
											"end": 2311,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2340,
											"end": 2346,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2331,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "218"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "PUSH",
											"source": 0,
											"value": "3F"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "217"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "tag",
											"source": 0,
											"value": "218"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "tag",
											"source": 0,
											"value": "217"
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2317,
											"end": 2352,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2298,
											"end": 2352,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2298,
											"end": 2352,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2298,
											"end": 2352,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2370,
											"end": 2377,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "219"
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "PUSH",
											"source": 0,
											"value": "3A"
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "PUSH data",
											"source": 0,
											"value": "51DDAA38748C0A1144620FB5BFE8EDAB31EA437571AD591A7734BBFD0429AEAE"
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "PUSH",
											"source": 0,
											"value": "3A"
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "CODECOPY",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "tag",
											"source": 0,
											"value": "219"
										},
										{
											"begin": 2362,
											"end": 2440,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2056,
											"end": 2447,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2056,
											"end": 2447,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2056,
											"end": 2447,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2056,
											"end": 2447,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "tag",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11352,
											"end": 11369,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11352,
											"end": 11369,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11219,
											"end": 11226,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11352,
											"end": 11369,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11352,
											"end": 11369,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11352,
											"end": 11369,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11352,
											"end": 11362,
											"name": "PUSH",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 11352,
											"end": 11369,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11352,
											"end": 11369,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11352,
											"end": 11369,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11352,
											"end": 11369,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11352,
											"end": 11369,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11352,
											"end": 11369,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11352,
											"end": 11369,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11352,
											"end": 11369,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 11352,
											"end": 11369,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 11311,
											"end": 11321,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 11311,
											"end": 11328,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11311,
											"end": 11328,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 11311,
											"end": 11328,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11311,
											"end": 11328,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11311,
											"end": 11328,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 11311,
											"end": 11328,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 11293,
											"end": 11308,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 11293,
											"end": 11308,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1425,
											"end": 1432,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 11293,
											"end": 11328,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11293,
											"end": 11328,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 11284,
											"end": 11369,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11257,
											"end": 11395,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 11238,
											"end": 11395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11238,
											"end": 11395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "tag",
											"source": 2,
											"value": "220"
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11162,
											"end": 11402,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 587,
											"end": 617,
											"name": "tag",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 587,
											"end": 617,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 587,
											"end": 617,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 587,
											"end": 617,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "tag",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12338,
											"end": 12345,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12376,
											"end": 12394,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 12376,
											"end": 12394,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12365,
											"end": 12372,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12365,
											"end": 12394,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 12365,
											"end": 12394,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 12357,
											"end": 12395,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "223"
										},
										{
											"begin": 12357,
											"end": 12395,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 12357,
											"end": 12395,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12357,
											"end": 12395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12357,
											"end": 12395,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 12357,
											"end": 12395,
											"name": "tag",
											"source": 2,
											"value": "223"
										},
										{
											"begin": 12357,
											"end": 12395,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12423,
											"end": 12430,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12405,
											"end": 12420,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12458,
											"end": 12507,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "224"
										},
										{
											"begin": 12471,
											"end": 12501,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "225"
										},
										{
											"begin": 12423,
											"end": 12430,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1380,
											"end": 1381,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 12471,
											"end": 12483,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "226"
										},
										{
											"begin": 12471,
											"end": 12501,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12471,
											"end": 12501,
											"name": "tag",
											"source": 2,
											"value": "225"
										},
										{
											"begin": 12471,
											"end": 12501,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12503,
											"end": 12506,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 12458,
											"end": 12470,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "227"
										},
										{
											"begin": 12458,
											"end": 12507,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12458,
											"end": 12507,
											"name": "tag",
											"source": 2,
											"value": "224"
										},
										{
											"begin": 12458,
											"end": 12507,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12440,
											"end": 12507,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12440,
											"end": 12507,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12517,
											"end": 12533,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12536,
											"end": 12566,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "228"
										},
										{
											"begin": 12549,
											"end": 12556,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12558,
											"end": 12565,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12536,
											"end": 12548,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "229"
										},
										{
											"begin": 12536,
											"end": 12566,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12536,
											"end": 12566,
											"name": "tag",
											"source": 2,
											"value": "228"
										},
										{
											"begin": 12536,
											"end": 12566,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12517,
											"end": 12566,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12253,
											"end": 12598,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 11061,
											"end": 11156,
											"name": "tag",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 11061,
											"end": 11156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11131,
											"end": 11149,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 11131,
											"end": 11149,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 11061,
											"end": 11156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11061,
											"end": 11156,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1731,
											"end": 1760,
											"name": "tag",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 1731,
											"end": 1760,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 1731,
											"end": 1760,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1760,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1760,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1525,
											"end": 1544,
											"name": "tag",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 1525,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1525,
											"end": 1544,
											"name": "PUSH",
											"source": 2,
											"value": "F"
										},
										{
											"begin": 1525,
											"end": 1544,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1525,
											"end": 1544,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1525,
											"end": 1544,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "tag",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2136,
											"end": 2137,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2123,
											"end": 2133,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "232"
										},
										{
											"begin": 2123,
											"end": 2131,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 2123,
											"end": 2133,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2123,
											"end": 2133,
											"name": "tag",
											"source": 2,
											"value": "232"
										},
										{
											"begin": 2123,
											"end": 2133,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2123,
											"end": 2137,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2115,
											"end": 2138,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "233"
										},
										{
											"begin": 2115,
											"end": 2138,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2115,
											"end": 2138,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2115,
											"end": 2138,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2115,
											"end": 2138,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2115,
											"end": 2138,
											"name": "tag",
											"source": 2,
											"value": "233"
										},
										{
											"begin": 2115,
											"end": 2138,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8325,
											"end": 8335,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 8309,
											"end": 8322,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8364,
											"end": 8381,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8364,
											"end": 8381,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8364,
											"end": 8381,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8364,
											"end": 8374,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 8364,
											"end": 8381,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8364,
											"end": 8381,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8364,
											"end": 8381,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8364,
											"end": 8381,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8364,
											"end": 8381,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8364,
											"end": 8381,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8353,
											"end": 8381,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8353,
											"end": 8381,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 8353,
											"end": 8381,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 8345,
											"end": 8382,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "235"
										},
										{
											"begin": 8345,
											"end": 8382,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8345,
											"end": 8382,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8345,
											"end": 8382,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8345,
											"end": 8382,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 8345,
											"end": 8382,
											"name": "tag",
											"source": 2,
											"value": "235"
										},
										{
											"begin": 8345,
											"end": 8382,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8393,
											"end": 8420,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8456,
											"end": 8459,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 8423,
											"end": 8453,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "236"
										},
										{
											"begin": 8436,
											"end": 8443,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1380,
											"end": 1381,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 8423,
											"end": 8435,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "226"
										},
										{
											"begin": 8423,
											"end": 8453,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8423,
											"end": 8453,
											"name": "tag",
											"source": 2,
											"value": "236"
										},
										{
											"begin": 8423,
											"end": 8453,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8423,
											"end": 8459,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8423,
											"end": 8459,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "237"
										},
										{
											"begin": 8423,
											"end": 8459,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8423,
											"end": 8459,
											"name": "INVALID",
											"source": 2
										},
										{
											"begin": 8423,
											"end": 8459,
											"name": "tag",
											"source": 2,
											"value": "237"
										},
										{
											"begin": 8423,
											"end": 8459,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8423,
											"end": 8459,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 8393,
											"end": 8459,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8393,
											"end": 8459,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8486,
											"end": 8499,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8502,
											"end": 8527,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "238"
										},
										{
											"begin": 8516,
											"end": 8526,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 8502,
											"end": 8515,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 8502,
											"end": 8527,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8502,
											"end": 8527,
											"name": "tag",
											"source": 2,
											"value": "238"
										},
										{
											"begin": 8502,
											"end": 8527,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8486,
											"end": 8527,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8486,
											"end": 8527,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8567,
											"end": 8575,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8563,
											"end": 8692,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 8563,
											"end": 8692,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "239"
										},
										{
											"begin": 8563,
											"end": 8692,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8675,
											"end": 8676,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8653,
											"end": 8676,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8653,
											"end": 8676,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8563,
											"end": 8692,
											"name": "tag",
											"source": 2,
											"value": "239"
										},
										{
											"begin": 8563,
											"end": 8692,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8756,
											"end": 8777,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8780,
											"end": 8822,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "240"
										},
										{
											"begin": 8793,
											"end": 8800,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 8802,
											"end": 8821,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8780,
											"end": 8792,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "229"
										},
										{
											"begin": 8780,
											"end": 8822,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8780,
											"end": 8822,
											"name": "tag",
											"source": 2,
											"value": "240"
										},
										{
											"begin": 8780,
											"end": 8822,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8756,
											"end": 8822,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8756,
											"end": 8822,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8853,
											"end": 8894,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "241"
										},
										{
											"begin": 8866,
											"end": 8884,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 8866,
											"end": 8884,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8886,
											"end": 8893,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 8853,
											"end": 8865,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "229"
										},
										{
											"begin": 8853,
											"end": 8894,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8853,
											"end": 8894,
											"name": "tag",
											"source": 2,
											"value": "241"
										},
										{
											"begin": 8853,
											"end": 8894,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8832,
											"end": 8850,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 8832,
											"end": 8894,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8937,
											"end": 8954,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8937,
											"end": 8954,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8937,
											"end": 8954,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8937,
											"end": 8954,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8937,
											"end": 8954,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8937,
											"end": 8954,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8937,
											"end": 8947,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 8937,
											"end": 8954,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8937,
											"end": 8954,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8937,
											"end": 8954,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8937,
											"end": 8954,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8937,
											"end": 8954,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8937,
											"end": 8954,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8924,
											"end": 8964,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "242"
										},
										{
											"begin": 8924,
											"end": 8964,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8956,
											"end": 8963,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 8924,
											"end": 8936,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "229"
										},
										{
											"begin": 8924,
											"end": 8964,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8924,
											"end": 8964,
											"name": "tag",
											"source": 2,
											"value": "242"
										},
										{
											"begin": 8924,
											"end": 8964,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8904,
											"end": 8921,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 8904,
											"end": 8921,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8904,
											"end": 8921,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8904,
											"end": 8921,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8904,
											"end": 8921,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8904,
											"end": 8921,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8904,
											"end": 8914,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 8904,
											"end": 8921,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8904,
											"end": 8921,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8904,
											"end": 8921,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8904,
											"end": 8921,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8904,
											"end": 8921,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8904,
											"end": 8921,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8904,
											"end": 8921,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8904,
											"end": 8921,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8904,
											"end": 8964,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 8904,
											"end": 8964,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8904,
											"end": 8964,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 8904,
											"end": 8964,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 9093,
											"end": 9108,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 9093,
											"end": 9108,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 9167,
											"end": 9177,
											"name": "PUSH",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 9167,
											"end": 9184,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9167,
											"end": 9184,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9167,
											"end": 9184,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9167,
											"end": 9184,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9167,
											"end": 9184,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9167,
											"end": 9184,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 9167,
											"end": 9203,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9167,
											"end": 9203,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 9093,
											"end": 9118,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9093,
											"end": 9118,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 9093,
											"end": 9118,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9122,
											"end": 9146,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9122,
											"end": 9146,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 9093,
											"end": 9147,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9167,
											"end": 9203,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9167,
											"end": 9203,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9167,
											"end": 9203,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9167,
											"end": 9203,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9167,
											"end": 9203,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9167,
											"end": 9203,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 9284,
											"end": 9317,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "243"
										},
										{
											"begin": 9297,
											"end": 9316,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9284,
											"end": 9296,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "244"
										},
										{
											"begin": 9284,
											"end": 9317,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 9284,
											"end": 9317,
											"name": "tag",
											"source": 2,
											"value": "243"
										},
										{
											"begin": 9284,
											"end": 9317,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9430,
											"end": 9445,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "PUSH",
											"source": 2,
											"value": "90EBB005D68EFEE044927E1E77E1FD0CECC508368AA72C39250A787EED5F0A70"
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9389,
											"end": 9446,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9540,
											"end": 9557,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9540,
											"end": 9557,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9540,
											"end": 9557,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9540,
											"end": 9557,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9540,
											"end": 9550,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 9540,
											"end": 9557,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9540,
											"end": 9557,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9540,
											"end": 9557,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9540,
											"end": 9557,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9540,
											"end": 9557,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9540,
											"end": 9557,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9540,
											"end": 9557,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9540,
											"end": 9557,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 9540,
											"end": 9567,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9540,
											"end": 9567,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 9581,
											"end": 9591,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 9581,
											"end": 9598,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9581,
											"end": 9598,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9581,
											"end": 9598,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 9581,
											"end": 9598,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9581,
											"end": 9598,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9581,
											"end": 9598,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 9581,
											"end": 9598,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 9612,
											"end": 9629,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 9612,
											"end": 9629,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9612,
											"end": 9629,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9612,
											"end": 9639,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 9612,
											"end": 9639,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9612,
											"end": 9639,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9653,
											"end": 9668,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "27CC9C295B15A532BB1B5F9308F1D54813E694C2EBDD1C2CED210BFE52DCD57E"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9499,
											"end": 9678,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": 9747,
											"end": 9759,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "245"
										},
										{
											"begin": 9747,
											"end": 9757,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "246"
										},
										{
											"begin": 9747,
											"end": 9759,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 9747,
											"end": 9759,
											"name": "tag",
											"source": 2,
											"value": "245"
										},
										{
											"begin": 9747,
											"end": 9759,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2148,
											"end": 2149,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2148,
											"end": 2149,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2148,
											"end": 2149,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2148,
											"end": 2149,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2148,
											"end": 2149,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8245,
											"end": 9770,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "tag",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10199,
											"end": 10212,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10199,
											"end": 10212,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10199,
											"end": 10212,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10199,
											"end": 10212,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10274,
											"end": 10409,
											"name": "tag",
											"source": 2,
											"value": "248"
										},
										{
											"begin": 10274,
											"end": 10409,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10293,
											"end": 10297,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 10293,
											"end": 10304,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 10289,
											"end": 10304,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10289,
											"end": 10304,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 10274,
											"end": 10409,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10274,
											"end": 10409,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "249"
										},
										{
											"begin": 10274,
											"end": 10409,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10344,
											"end": 10348,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 10349,
											"end": 10350,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "251"
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "INVALID",
											"source": 2
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "tag",
											"source": 2,
											"value": "251"
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10391,
											"name": "PUSH",
											"source": 2,
											"value": "70A08231"
										},
										{
											"begin": 10372,
											"end": 10391,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10344,
											"end": 10351,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "253"
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "tag",
											"source": 2,
											"value": "253"
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "255"
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "tag",
											"source": 2,
											"value": "255"
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "256"
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "tag",
											"source": 2,
											"value": "256"
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10372,
											"end": 10398,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10367,
											"end": 10398,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 10367,
											"end": 10398,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10367,
											"end": 10398,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 10367,
											"end": 10398,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10367,
											"end": 10398,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10306,
											"end": 10309,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 10306,
											"end": 10309,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10274,
											"end": 10409,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "248"
										},
										{
											"begin": 10274,
											"end": 10409,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10274,
											"end": 10409,
											"name": "tag",
											"source": 2,
											"value": "249"
										},
										{
											"begin": 10274,
											"end": 10409,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10274,
											"end": 10409,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10426,
											"end": 10441,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 10426,
											"end": 10441,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 10421,
											"end": 10422,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10421,
											"end": 10441,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 10417,
											"end": 10479,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "257"
										},
										{
											"begin": 10417,
											"end": 10479,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10464,
											"end": 10468,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 10457,
											"end": 10468,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 10457,
											"end": 10468,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10457,
											"end": 10468,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10457,
											"end": 10468,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10457,
											"end": 10468,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "220"
										},
										{
											"begin": 10457,
											"end": 10468,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10417,
											"end": 10479,
											"name": "tag",
											"source": 2,
											"value": "257"
										},
										{
											"begin": 10417,
											"end": 10479,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10495,
											"end": 10500,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10495,
											"end": 10500,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10140,
											"end": 10507,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "tag",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "PUSH",
											"source": 2,
											"value": "A"
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1102,
											"end": 1125,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 7333,
											"end": 8223,
											"name": "tag",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 7333,
											"end": 8223,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2271,
											"end": 2272,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2256,
											"end": 2268,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "259"
										},
										{
											"begin": 2256,
											"end": 2266,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "212"
										},
										{
											"begin": 2256,
											"end": 2268,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2256,
											"end": 2268,
											"name": "tag",
											"source": 2,
											"value": "259"
										},
										{
											"begin": 2256,
											"end": 2268,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2256,
											"end": 2272,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2248,
											"end": 2273,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "260"
										},
										{
											"begin": 2248,
											"end": 2273,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2248,
											"end": 2273,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2248,
											"end": 2273,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2248,
											"end": 2273,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2248,
											"end": 2273,
											"name": "tag",
											"source": 2,
											"value": "260"
										},
										{
											"begin": 2248,
											"end": 2273,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7397,
											"end": 7407,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 7381,
											"end": 7394,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7438,
											"end": 7450,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "262"
										},
										{
											"begin": 7438,
											"end": 7448,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "212"
										},
										{
											"begin": 7438,
											"end": 7450,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7438,
											"end": 7450,
											"name": "tag",
											"source": 2,
											"value": "262"
										},
										{
											"begin": 7438,
											"end": 7450,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7544,
											"end": 7561,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7544,
											"end": 7561,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7544,
											"end": 7561,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7544,
											"end": 7561,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7544,
											"end": 7561,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7544,
											"end": 7561,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7544,
											"end": 7561,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7544,
											"end": 7554,
											"name": "PUSH",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 7544,
											"end": 7561,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7544,
											"end": 7561,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7544,
											"end": 7561,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7544,
											"end": 7561,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7544,
											"end": 7561,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7544,
											"end": 7561,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7544,
											"end": 7561,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7544,
											"end": 7561,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7544,
											"end": 7597,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7544,
											"end": 7597,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7574,
											"end": 7596,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 7574,
											"end": 7596,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 7544,
											"end": 7597,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7544,
											"end": 7597,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7544,
											"end": 7597,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7673,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 7661,
											"end": 7673,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7417,
											"end": 7450,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 7417,
											"end": 7450,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7661,
											"end": 7673,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7673,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7673,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7673,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7682,
											"name": "PUSH",
											"source": 2,
											"value": "A9059CBB"
										},
										{
											"begin": 7661,
											"end": 7682,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 7544,
											"end": 7561,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7544,
											"end": 7561,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7673,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "263"
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "tag",
											"source": 2,
											"value": "263"
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "265"
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "tag",
											"source": 2,
											"value": "265"
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "266"
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "tag",
											"source": 2,
											"value": "266"
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7832,
											"end": 7849,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7832,
											"end": 7849,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7832,
											"end": 7849,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7832,
											"end": 7849,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7832,
											"end": 7849,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7832,
											"end": 7849,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7832,
											"end": 7842,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 7661,
											"end": 7701,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7832,
											"end": 7849,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7832,
											"end": 7849,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7832,
											"end": 7849,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7832,
											"end": 7849,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7832,
											"end": 7859,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 7832,
											"end": 7859,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7832,
											"end": 7859,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7806,
											"end": 7893,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "267"
										},
										{
											"begin": 7806,
											"end": 7893,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7873,
											"end": 7883,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7806,
											"end": 7818,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "268"
										},
										{
											"begin": 7806,
											"end": 7893,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7806,
											"end": 7893,
											"name": "tag",
											"source": 2,
											"value": "267"
										},
										{
											"begin": 7806,
											"end": 7893,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7776,
											"end": 7793,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7776,
											"end": 7793,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7776,
											"end": 7793,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7776,
											"end": 7793,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7776,
											"end": 7793,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7776,
											"end": 7793,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7776,
											"end": 7786,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 7776,
											"end": 7793,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7776,
											"end": 7793,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7776,
											"end": 7793,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7776,
											"end": 7793,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7776,
											"end": 7793,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7776,
											"end": 7793,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7776,
											"end": 7793,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7776,
											"end": 7793,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7776,
											"end": 7793,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7776,
											"end": 7803,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 7776,
											"end": 7803,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7776,
											"end": 7803,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7776,
											"end": 7893,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 7776,
											"end": 7893,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7776,
											"end": 7893,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 7776,
											"end": 7893,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7903,
											"end": 7931,
											"name": "PUSH",
											"source": 2,
											"value": "C"
										},
										{
											"begin": 7903,
											"end": 7931,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7903,
											"end": 7931,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 7903,
											"end": 7931,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7903,
											"end": 7936,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7903,
											"end": 7936,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7935,
											"end": 7936,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 7903,
											"end": 7936,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7903,
											"end": 7936,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7903,
											"end": 7936,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7903,
											"end": 7936,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7903,
											"end": 7936,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7903,
											"end": 7936,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7993,
											"end": 8001,
											"name": "PUSH",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 7993,
											"end": 8006,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7993,
											"end": 8006,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7993,
											"end": 8006,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7993,
											"end": 8006,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7993,
											"end": 8006,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7993,
											"end": 8006,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7993,
											"end": 8006,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8016,
											"end": 8027,
											"name": "PUSH",
											"source": 2,
											"value": "A"
										},
										{
											"begin": 8016,
											"end": 8041,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8016,
											"end": 8041,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8016,
											"end": 8041,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 8016,
											"end": 8041,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8016,
											"end": 8041,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8016,
											"end": 8041,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8118,
											"end": 8133,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7776,
											"end": 7793,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7776,
											"end": 7793,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "PUSH",
											"source": 2,
											"value": "1B091269E929DF55D64D6EA7E9CADBE4FB38DCE5CCDC995767BC515030DBFBBF"
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8088,
											"end": 8134,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": 8204,
											"end": 8216,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "269"
										},
										{
											"begin": 8204,
											"end": 8214,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "246"
										},
										{
											"begin": 8204,
											"end": 8216,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8204,
											"end": 8216,
											"name": "tag",
											"source": 2,
											"value": "269"
										},
										{
											"begin": 8204,
											"end": 8216,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2283,
											"end": 2284,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2283,
											"end": 2284,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 8223,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 11408,
											"end": 11674,
											"name": "tag",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 11408,
											"end": 11674,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11451,
											"end": 11458,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11488,
											"end": 11492,
											"name": "PUSH",
											"source": 2,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 11451,
											"end": 11458,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11523,
											"end": 11572,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "271"
										},
										{
											"begin": 11536,
											"end": 11566,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "225"
										},
										{
											"begin": 11488,
											"end": 11492,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1380,
											"end": 1381,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 11536,
											"end": 11548,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "226"
										},
										{
											"begin": 11536,
											"end": 11566,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11523,
											"end": 11572,
											"name": "tag",
											"source": 2,
											"value": "271"
										},
										{
											"begin": 11523,
											"end": 11572,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11502,
											"end": 11572,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11502,
											"end": 11572,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11605,
											"end": 11638,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "273"
										},
										{
											"begin": 11618,
											"end": 11625,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11627,
											"end": 11637,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11605,
											"end": 11617,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "229"
										},
										{
											"begin": 11605,
											"end": 11638,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11605,
											"end": 11638,
											"name": "tag",
											"source": 2,
											"value": "273"
										},
										{
											"begin": 11605,
											"end": 11638,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11638,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11408,
											"end": 11674,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11408,
											"end": 11674,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 877,
											"end": 897,
											"name": "tag",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 877,
											"end": 897,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 877,
											"end": 897,
											"name": "PUSH",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 877,
											"end": 897,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 877,
											"end": 897,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 877,
											"end": 897,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "tag",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10800,
											"end": 10817,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10774,
											"end": 10781,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10800,
											"end": 10817,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10800,
											"end": 10817,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10800,
											"end": 10817,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10800,
											"end": 10810,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 10800,
											"end": 10817,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10800,
											"end": 10817,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10800,
											"end": 10817,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10800,
											"end": 10817,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10800,
											"end": 10817,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 10800,
											"end": 10817,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 10800,
											"end": 10817,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10719,
											"end": 10824,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "tag",
											"source": 5,
											"value": "104"
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "276"
										},
										{
											"begin": 1301,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "277"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "tag",
											"source": 5,
											"value": "276"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1290,
											"end": 1313,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "278"
										},
										{
											"begin": 1290,
											"end": 1295,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "tag",
											"source": 5,
											"value": "278"
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1290,
											"end": 1313,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1290,
											"end": 1313,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "279"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "9924EBDF1ADD33D25D4EF888E16131F0A5687B0580A36C21B5C301A6C462EFFE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "tag",
											"source": 5,
											"value": "279"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1816,
											"end": 1817,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1800,
											"end": 1806,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1800,
											"end": 1806,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1779,
											"end": 1819,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1779,
											"end": 1819,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1800,
											"end": 1806,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1800,
											"end": 1806,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1800,
											"end": 1806,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1800,
											"end": 1806,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1779,
											"end": 1819,
											"name": "PUSH",
											"source": 5,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 1779,
											"end": 1819,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1816,
											"end": 1817,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1816,
											"end": 1817,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1779,
											"end": 1819,
											"name": "LOG3",
											"source": 5
										},
										{
											"begin": 1846,
											"end": 1847,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1829,
											"end": 1848,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1829,
											"end": 1848,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1829,
											"end": 1848,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1829,
											"end": 1848,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1829,
											"end": 1848,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1855,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "tag",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 394,
											"end": 420,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 394,
											"end": 420,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 394,
											"end": 420,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "tag",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "PUSH",
											"source": 2,
											"value": "B"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "tag",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13711,
											"end": 13724,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "282"
										},
										{
											"begin": 1301,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "277"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "tag",
											"source": 5,
											"value": "282"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1290,
											"end": 1313,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "283"
										},
										{
											"begin": 1290,
											"end": 1295,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "tag",
											"source": 5,
											"value": "283"
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1290,
											"end": 1313,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1290,
											"end": 1313,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "284"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "9924EBDF1ADD33D25D4EF888E16131F0A5687B0580A36C21B5C301A6C462EFFE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "tag",
											"source": 5,
											"value": "284"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 13744,
											"end": 13760,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "286"
										},
										{
											"begin": 13744,
											"end": 13749,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 13754,
											"end": 13759,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 13744,
											"end": 13753,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "268"
										},
										{
											"begin": 13744,
											"end": 13760,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 13744,
											"end": 13760,
											"name": "tag",
											"source": 2,
											"value": "286"
										},
										{
											"begin": 13744,
											"end": 13760,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13764,
											"end": 13765,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 13744,
											"end": 13765,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "287"
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "PUSH",
											"source": 2,
											"value": "1D"
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "PUSH",
											"source": 2,
											"value": "54454E5F504F5254494F4E535F524551554952455F4449564953494F4E000000"
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "tag",
											"source": 2,
											"value": "287"
										},
										{
											"begin": 13736,
											"end": 13799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13843,
											"end": 13850,
											"name": "PUSH",
											"source": 2,
											"value": "E"
										},
										{
											"begin": 13843,
											"end": 13858,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 13843,
											"end": 13858,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13843,
											"end": 13858,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 13868,
											"end": 13875,
											"name": "PUSH",
											"source": 2,
											"value": "F"
										},
										{
											"begin": 13868,
											"end": 13883,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 13868,
											"end": 13883,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13868,
											"end": 13883,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13977,
											"end": 13992,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "PUSH",
											"source": 2,
											"value": "677017FA3A0FE0F50A95E6024C5B688F2B14A4696C4A897C459715CABFC1C03A"
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13949,
											"end": 13993,
											"name": "LOG1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14010,
											"end": 14014,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1360,
											"end": 1361,
											"name": "tag",
											"source": 5,
											"value": "285"
										},
										{
											"begin": 1360,
											"end": 1361,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 13612,
											"end": 14021,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "tag",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12659,
											"end": 12677,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "288"
										},
										{
											"begin": 12659,
											"end": 12677,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "289"
										},
										{
											"begin": 12659,
											"end": 12677,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12659,
											"end": 12677,
											"name": "tag",
											"source": 2,
											"value": "288"
										},
										{
											"begin": 12659,
											"end": 12677,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12705,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "291"
										},
										{
											"begin": 12689,
											"end": 12705,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "292"
										},
										{
											"begin": 12689,
											"end": 12705,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12689,
											"end": 12705,
											"name": "tag",
											"source": 2,
											"value": "291"
										},
										{
											"begin": 12689,
											"end": 12705,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12708,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12708,
											"end": 12725,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 12708,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12708,
											"end": 12725,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12708,
											"end": 12725,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12708,
											"end": 12725,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12708,
											"end": 12718,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 12708,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12708,
											"end": 12725,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12708,
											"end": 12725,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12708,
											"end": 12725,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12708,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12708,
											"end": 12725,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12708,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12708,
											"end": 12725,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12708,
											"end": 12725,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "1E0"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "C0"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "A"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "B"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "C"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "D"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "1A0"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "E"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "PUSH",
											"source": 2,
											"value": "1C0"
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12689,
											"end": 12725,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 12766,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "293"
										},
										{
											"begin": 12735,
											"end": 12766,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "289"
										},
										{
											"begin": 12735,
											"end": 12766,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12735,
											"end": 12766,
											"name": "tag",
											"source": 2,
											"value": "293"
										},
										{
											"begin": 12735,
											"end": 12766,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "PUSH",
											"source": 2,
											"value": "1C0"
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12783,
											"end": 12784,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12783,
											"end": 12794,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12783,
											"end": 12794,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12783,
											"end": 12794,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12808,
											"end": 12809,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12808,
											"end": 12819,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12808,
											"end": 12819,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12808,
											"end": 12819,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12833,
											"end": 12834,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12833,
											"end": 12843,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 12833,
											"end": 12843,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12833,
											"end": 12843,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12857,
											"end": 12858,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12857,
											"end": 12869,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 12857,
											"end": 12869,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12857,
											"end": 12869,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12883,
											"end": 12884,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12883,
											"end": 12896,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 12883,
											"end": 12896,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12883,
											"end": 12896,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12910,
											"end": 12911,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12910,
											"end": 12929,
											"name": "PUSH",
											"source": 2,
											"value": "C0"
										},
										{
											"begin": 12910,
											"end": 12929,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12910,
											"end": 12929,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12943,
											"end": 12944,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12943,
											"end": 12959,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 12943,
											"end": 12959,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12943,
											"end": 12959,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12973,
											"end": 12974,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12973,
											"end": 12984,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 12973,
											"end": 12984,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12973,
											"end": 12984,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12998,
											"end": 12999,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12998,
											"end": 13009,
											"name": "PUSH",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 12998,
											"end": 13009,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12998,
											"end": 13009,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13023,
											"end": 13024,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 13023,
											"end": 13037,
											"name": "PUSH",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 13023,
											"end": 13037,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13023,
											"end": 13037,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13051,
											"end": 13052,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 13051,
											"end": 13063,
											"name": "PUSH",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 13051,
											"end": 13063,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13051,
											"end": 13063,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13077,
											"end": 13078,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 13077,
											"end": 13097,
											"name": "PUSH",
											"source": 2,
											"value": "1A0"
										},
										{
											"begin": 13077,
											"end": 13097,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13077,
											"end": 13097,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13111,
											"end": 13112,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 13111,
											"end": 13128,
											"name": "PUSH",
											"source": 2,
											"value": "1C0"
										},
										{
											"begin": 13111,
											"end": 13128,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13111,
											"end": 13128,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13142,
											"end": 13143,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 13142,
											"end": 13155,
											"name": "PUSH",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 13142,
											"end": 13155,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 13142,
											"end": 13155,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12735,
											"end": 13165,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 13182,
											"end": 13194,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 13175,
											"end": 13194,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 13175,
											"end": 13194,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 13175,
											"end": 13194,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 13175,
											"end": 13194,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12604,
											"end": 13201,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1641,
											"end": 1692,
											"name": "tag",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 1641,
											"end": 1692,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1683,
											"end": 1692,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1641,
											"end": 1692,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1641,
											"end": 1692,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 11680,
											"end": 11944,
											"name": "tag",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 11680,
											"end": 11944,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11721,
											"end": 11728,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11758,
											"end": 11762,
											"name": "PUSH",
											"source": 2,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 11721,
											"end": 11728,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11793,
											"end": 11842,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "295"
										},
										{
											"begin": 11806,
											"end": 11836,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "225"
										},
										{
											"begin": 11758,
											"end": 11762,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1380,
											"end": 1381,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 11806,
											"end": 11818,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "226"
										},
										{
											"begin": 11806,
											"end": 11836,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11793,
											"end": 11842,
											"name": "tag",
											"source": 2,
											"value": "295"
										},
										{
											"begin": 11793,
											"end": 11842,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11772,
											"end": 11842,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11772,
											"end": 11842,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11852,
											"end": 11872,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11875,
											"end": 11908,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "273"
										},
										{
											"begin": 11888,
											"end": 11895,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11897,
											"end": 11907,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11875,
											"end": 11887,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "268"
										},
										{
											"begin": 11875,
											"end": 11908,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1586,
											"end": 1635,
											"name": "tag",
											"source": 2,
											"value": "130"
										},
										{
											"begin": 1586,
											"end": 1635,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1628,
											"end": 1635,
											"name": "PUSH",
											"source": 2,
											"value": "5460"
										},
										{
											"begin": 1586,
											"end": 1635,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1586,
											"end": 1635,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "tag",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1124,
											"end": 1131,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1150,
											"end": 1156,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1150,
											"end": 1156,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1163,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 10513,
											"end": 10608,
											"name": "tag",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 10513,
											"end": 10608,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10554,
											"end": 10561,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10580,
											"end": 10601,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "300"
										},
										{
											"begin": 10590,
											"end": 10600,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 10580,
											"end": 10589,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 10580,
											"end": 10601,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10580,
											"end": 10601,
											"name": "tag",
											"source": 2,
											"value": "300"
										},
										{
											"begin": 10580,
											"end": 10601,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10573,
											"end": 10601,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10573,
											"end": 10601,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10513,
											"end": 10608,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10513,
											"end": 10608,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 699,
											"end": 726,
											"name": "tag",
											"source": 2,
											"value": "139"
										},
										{
											"begin": 699,
											"end": 726,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 699,
											"end": 726,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 699,
											"end": 726,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 699,
											"end": 726,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 699,
											"end": 726,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 699,
											"end": 726,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1500,
											"end": 1519,
											"name": "tag",
											"source": 2,
											"value": "142"
										},
										{
											"begin": 1500,
											"end": 1519,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1500,
											"end": 1519,
											"name": "PUSH",
											"source": 2,
											"value": "E"
										},
										{
											"begin": 1500,
											"end": 1519,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1500,
											"end": 1519,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1500,
											"end": 1519,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "tag",
											"source": 2,
											"value": "146"
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9892,
											"end": 9896,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2136,
											"end": 2137,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2123,
											"end": 2133,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "302"
										},
										{
											"begin": 2123,
											"end": 2131,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 2123,
											"end": 2133,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2123,
											"end": 2133,
											"name": "tag",
											"source": 2,
											"value": "302"
										},
										{
											"begin": 2123,
											"end": 2133,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2123,
											"end": 2137,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2115,
											"end": 2138,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "303"
										},
										{
											"begin": 2115,
											"end": 2138,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2115,
											"end": 2138,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2115,
											"end": 2138,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2115,
											"end": 2138,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2115,
											"end": 2138,
											"name": "tag",
											"source": 2,
											"value": "303"
										},
										{
											"begin": 2115,
											"end": 2138,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9915,
											"end": 9944,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "305"
										},
										{
											"begin": 9931,
											"end": 9934,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9936,
											"end": 9943,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9915,
											"end": 9930,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "306"
										},
										{
											"begin": 9915,
											"end": 9944,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 9915,
											"end": 9944,
											"name": "tag",
											"source": 2,
											"value": "305"
										},
										{
											"begin": 9915,
											"end": 9944,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9908,
											"end": 9944,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9792,
											"end": 9951,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 10940,
											"end": 11055,
											"name": "tag",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 10940,
											"end": 11055,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11023,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 11011,
											"end": 11023,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11042,
											"end": 11046,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10985,
											"end": 10992,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10985,
											"end": 10992,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11011,
											"end": 11023,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11023,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11033,
											"name": "PUSH",
											"source": 2,
											"value": "70A08231"
										},
										{
											"begin": 11011,
											"end": 11033,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11023,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "308"
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "tag",
											"source": 2,
											"value": "308"
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "310"
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "tag",
											"source": 2,
											"value": "310"
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "311"
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "tag",
											"source": 2,
											"value": "311"
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11011,
											"end": 11048,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10940,
											"end": 11055,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10940,
											"end": 11055,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "tag",
											"source": 2,
											"value": "152"
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "PUSH",
											"source": 2,
											"value": "C"
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1213,
											"end": 1240,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "tag",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "312"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "tag",
											"source": 2,
											"value": "312"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 772,
											"end": 793,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 772,
											"end": 793,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 772,
											"end": 793,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 772,
											"end": 793,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "tag",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 6242,
											"end": 6352,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6289,
											"end": 6296,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6315,
											"end": 6345,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "285"
										},
										{
											"begin": 6325,
											"end": 6335,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6344,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6315,
											"end": 6324,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "209"
										},
										{
											"begin": 6315,
											"end": 6345,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 975,
											"end": 997,
											"name": "tag",
											"source": 2,
											"value": "163"
										},
										{
											"begin": 975,
											"end": 997,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 975,
											"end": 997,
											"name": "PUSH",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 975,
											"end": 997,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 975,
											"end": 997,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 975,
											"end": 997,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "tag",
											"source": 2,
											"value": "166"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "PUSH",
											"source": 2,
											"value": "D"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1246,
											"end": 1267,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 732,
											"end": 766,
											"name": "tag",
											"source": 2,
											"value": "169"
										},
										{
											"begin": 732,
											"end": 766,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 732,
											"end": 766,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 732,
											"end": 766,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 732,
											"end": 766,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "tag",
											"source": 2,
											"value": "173"
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12035,
											"end": 12042,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12035,
											"end": 12042,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12072,
											"end": 12121,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "317"
										},
										{
											"begin": 12085,
											"end": 12115,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "225"
										},
										{
											"begin": 12098,
											"end": 12105,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1380,
											"end": 1381,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 12085,
											"end": 12097,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "226"
										},
										{
											"begin": 12085,
											"end": 12115,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12072,
											"end": 12121,
											"name": "tag",
											"source": 2,
											"value": "317"
										},
										{
											"begin": 12072,
											"end": 12121,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12054,
											"end": 12121,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12054,
											"end": 12121,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12131,
											"end": 12147,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12150,
											"end": 12180,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "319"
										},
										{
											"begin": 12163,
											"end": 12170,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12172,
											"end": 12179,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12150,
											"end": 12162,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "229"
										},
										{
											"begin": 12150,
											"end": 12180,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 12150,
											"end": 12180,
											"name": "tag",
											"source": 2,
											"value": "319"
										},
										{
											"begin": 12150,
											"end": 12180,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12131,
											"end": 12180,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11950,
											"end": 12247,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "tag",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10914,
											"end": 10927,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10914,
											"end": 10927,
											"name": "BALANCE",
											"source": 2
										},
										{
											"begin": 10914,
											"end": 10927,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10830,
											"end": 10934,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "tag",
											"source": 2,
											"value": "181"
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5800,
											"name": "PUSH",
											"source": 2,
											"value": "D"
										},
										{
											"begin": 5789,
											"end": 5800,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5814,
											"end": 5824,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5834,
											"end": 5838,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": 5789,
											"end": 5800,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 5789,
											"end": 5800,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5800,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5789,
											"end": 5800,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5800,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5813,
											"name": "PUSH",
											"source": 2,
											"value": "23B872DD"
										},
										{
											"begin": 5789,
											"end": 5813,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP8",
											"source": -1
										},
										{
											"begin": 5789,
											"end": 5800,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "322"
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "tag",
											"source": 2,
											"value": "322"
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "324"
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "tag",
											"source": 2,
											"value": "324"
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "325"
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "tag",
											"source": 2,
											"value": "325"
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5789,
											"end": 5849,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5781,
											"end": 5850,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "326"
										},
										{
											"begin": 5781,
											"end": 5850,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5781,
											"end": 5850,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5781,
											"end": 5850,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5781,
											"end": 5850,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5781,
											"end": 5850,
											"name": "tag",
											"source": 2,
											"value": "326"
										},
										{
											"begin": 5781,
											"end": 5850,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5912,
											"end": 5927,
											"name": "PUSH",
											"source": 2,
											"value": "C"
										},
										{
											"begin": 5912,
											"end": 5938,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5912,
											"end": 5938,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5912,
											"end": 5938,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5912,
											"end": 5938,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5912,
											"end": 5938,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5912,
											"end": 5938,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 5959,
											"end": 5969,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 5912,
											"end": 5927,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5948,
											"end": 5970,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5948,
											"end": 5970,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5948,
											"end": 5970,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5948,
											"end": 5958,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 5948,
											"end": 5970,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5948,
											"end": 5970,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5948,
											"end": 5970,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5948,
											"end": 5970,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5948,
											"end": 5970,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5948,
											"end": 5970,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5948,
											"end": 5970,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5948,
											"end": 5970,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5948,
											"end": 5970,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5948,
											"end": 5983,
											"name": "PUSH",
											"source": 2,
											"value": "B"
										},
										{
											"begin": 5948,
											"end": 5983,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5948,
											"end": 5983,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5948,
											"end": 5988,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5948,
											"end": 5988,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 5948,
											"end": 5988,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5948,
											"end": 5988,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5948,
											"end": 5988,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 5998,
											"end": 6032,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 5998,
											"end": 6032,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5998,
											"end": 6043,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5998,
											"end": 6043,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5998,
											"end": 6043,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 5998,
											"end": 6043,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5998,
											"end": 6043,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5998,
											"end": 6043,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6166,
											"end": 6181,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "PUSH",
											"source": 2,
											"value": "DA1788C3E861A58A47F0D46073B13C4D66EFCC259714744F920D1AFE7B8DEE5"
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6136,
											"end": 6182,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6199,
											"end": 6214,
											"name": "PUSH",
											"source": 2,
											"value": "C"
										},
										{
											"begin": 6199,
											"end": 6214,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6199,
											"end": 6214,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5646,
											"end": 6221,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 854,
											"end": 871,
											"name": "tag",
											"source": 2,
											"value": "184"
										},
										{
											"begin": 854,
											"end": 871,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 854,
											"end": 871,
											"name": "PUSH",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 854,
											"end": 871,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 854,
											"end": 871,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 854,
											"end": 871,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "tag",
											"source": 5,
											"value": "188"
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "328"
										},
										{
											"begin": 1301,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "277"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "tag",
											"source": 5,
											"value": "328"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1290,
											"end": 1313,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "329"
										},
										{
											"begin": 1290,
											"end": 1295,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "tag",
											"source": 5,
											"value": "329"
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1290,
											"end": 1313,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1290,
											"end": 1313,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "330"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "9924EBDF1ADD33D25D4EF888E16131F0A5687B0580A36C21B5C301A6C462EFFE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "tag",
											"source": 5,
											"value": "330"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2092,
											"end": 2114,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2092,
											"end": 2114,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "332"
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "PUSH",
											"source": 5,
											"value": "26"
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "PUSH data",
											"source": 5,
											"value": "245F15FF17F551913A7A18385165551503906A406F905AC1C2437281A7CD0CFE"
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "PUSH",
											"source": 5,
											"value": "26"
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "CODECOPY",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "tag",
											"source": 5,
											"value": "332"
										},
										{
											"begin": 2084,
											"end": 2157,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2193,
											"end": 2199,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2193,
											"end": 2199,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2193,
											"end": 2199,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2172,
											"end": 2210,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2172,
											"end": 2210,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2172,
											"end": 2210,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2172,
											"end": 2210,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 2172,
											"end": 2210,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2172,
											"end": 2210,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 2193,
											"end": 2199,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2193,
											"end": 2199,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2193,
											"end": 2199,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2172,
											"end": 2210,
											"name": "PUSH",
											"source": 5,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2172,
											"end": 2210,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2172,
											"end": 2210,
											"name": "LOG3",
											"source": 5
										},
										{
											"begin": 2220,
											"end": 2226,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "AND",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2220,
											"end": 2237,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 2004,
											"end": 2244,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 7239,
											"end": 7312,
											"name": "tag",
											"source": 2,
											"value": "191"
										},
										{
											"begin": 7239,
											"end": 7312,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2271,
											"end": 2272,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2256,
											"end": 2268,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "334"
										},
										{
											"begin": 2256,
											"end": 2266,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "212"
										},
										{
											"begin": 2256,
											"end": 2268,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2256,
											"end": 2268,
											"name": "tag",
											"source": 2,
											"value": "334"
										},
										{
											"begin": 2256,
											"end": 2268,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2256,
											"end": 2272,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2248,
											"end": 2273,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "335"
										},
										{
											"begin": 2248,
											"end": 2273,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2248,
											"end": 2273,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2248,
											"end": 2273,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2248,
											"end": 2273,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2248,
											"end": 2273,
											"name": "tag",
											"source": 2,
											"value": "335"
										},
										{
											"begin": 2248,
											"end": 2273,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7288,
											"end": 7305,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "337"
										},
										{
											"begin": 7288,
											"end": 7303,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "338"
										},
										{
											"begin": 7288,
											"end": 7305,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7288,
											"end": 7305,
											"name": "tag",
											"source": 2,
											"value": "337"
										},
										{
											"begin": 7288,
											"end": 7305,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7288,
											"end": 7305,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7239,
											"end": 7312,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "tag",
											"source": 2,
											"value": "198"
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14177,
											"end": 14190,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "340"
										},
										{
											"begin": 1301,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "277"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "tag",
											"source": 5,
											"value": "340"
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1290,
											"end": 1313,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "341"
										},
										{
											"begin": 1290,
											"end": 1295,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "tag",
											"source": 5,
											"value": "341"
										},
										{
											"begin": 1290,
											"end": 1297,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1290,
											"end": 1313,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1290,
											"end": 1313,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "342"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "9924EBDF1ADD33D25D4EF888E16131F0A5687B0580A36C21B5C301A6C462EFFE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "PUSH",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "tag",
											"source": 5,
											"value": "342"
										},
										{
											"begin": 1282,
											"end": 1350,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 14202,
											"end": 14208,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14198,
											"end": 14364,
											"name": "tag",
											"source": 2,
											"value": "344"
										},
										{
											"begin": 14198,
											"end": 14364,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14217,
											"end": 14221,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 14217,
											"end": 14228,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 14213,
											"end": 14228,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14213,
											"end": 14228,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 14198,
											"end": 14364,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 14198,
											"end": 14364,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "345"
										},
										{
											"begin": 14198,
											"end": 14364,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14305,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14306,
											"end": 14307,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14308,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14308,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14308,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14308,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14308,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "347"
										},
										{
											"begin": 14296,
											"end": 14308,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14308,
											"name": "INVALID",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14308,
											"name": "tag",
											"source": 2,
											"value": "347"
										},
										{
											"begin": 14296,
											"end": 14308,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14308,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14296,
											"end": 14308,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14308,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14296,
											"end": 14308,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14308,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14308,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14296,
											"end": 14326,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14326,
											"name": "PUSH",
											"source": 2,
											"value": "1FFC9A7"
										},
										{
											"begin": 14327,
											"end": 14337,
											"name": "PUSH",
											"source": 2,
											"value": "80AC58CD"
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "348"
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "tag",
											"source": 2,
											"value": "348"
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "350"
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "tag",
											"source": 2,
											"value": "350"
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "351"
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "tag",
											"source": 2,
											"value": "351"
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14296,
											"end": 14338,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "352"
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "PUSH",
											"source": 2,
											"value": "A"
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E4F545F455243373231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "tag",
											"source": 2,
											"value": "352"
										},
										{
											"begin": 14288,
											"end": 14353,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14230,
											"end": 14233,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 14230,
											"end": 14233,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14198,
											"end": 14364,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "344"
										},
										{
											"begin": 14198,
											"end": 14364,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 14198,
											"end": 14364,
											"name": "tag",
											"source": 2,
											"value": "345"
										},
										{
											"begin": 14198,
											"end": 14364,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14198,
											"end": 14364,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14401,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 14404,
											"end": 14408,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "353"
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "tag",
											"source": 2,
											"value": "354"
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "354"
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "tag",
											"source": 2,
											"value": "353"
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14418,
											"end": 14434,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 14418,
											"end": 14434,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 14373,
											"end": 14408,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14418,
											"end": 14434,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "355"
										},
										{
											"begin": 14418,
											"end": 14434,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 14418,
											"end": 14422,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 14418,
											"end": 14422,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14418,
											"end": 14434,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14418,
											"end": 14434,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 14418,
											"end": 14434,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14418,
											"end": 14434,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14418,
											"end": 14434,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14418,
											"end": 14434,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "356"
										},
										{
											"begin": 14418,
											"end": 14434,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 14418,
											"end": 14434,
											"name": "tag",
											"source": 2,
											"value": "355"
										},
										{
											"begin": 14418,
											"end": 14434,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14418,
											"end": 14434,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14482,
											"end": 14492,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "PUSH",
											"source": 2,
											"value": "F0650831416F723858005CFEAE97A2D6F5E127D1E6AE8938574D1D73E7F4727C"
										},
										{
											"begin": 14506,
											"end": 14517,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14531,
											"end": 14540,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 14554,
											"end": 14569,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "tag",
											"source": 2,
											"value": "357"
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "359"
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "357"
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "tag",
											"source": 2,
											"value": "359"
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "tag",
											"source": 2,
											"value": "360"
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "362"
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "360"
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "tag",
											"source": 2,
											"value": "362"
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14450,
											"end": 14579,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14596,
											"end": 14600,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 14596,
											"end": 14600,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14083,
											"end": 14607,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "tag",
											"source": 2,
											"value": "201"
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "PUSH",
											"source": 2,
											"value": "D"
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1273,
											"end": 1298,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "tag",
											"source": 2,
											"value": "205"
										},
										{
											"begin": 13207,
											"end": 13490,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13321,
											"end": 13329,
											"name": "PUSH",
											"source": 2,
											"value": "D"
										},
										{
											"begin": 13321,
											"end": 13329,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 13301,
											"end": 13316,
											"name": "PUSH",
											"source": 2,
											"value": "C"
										},
										{
											"begin": 13301,
											"end": 13316,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 13266,
											"end": 13273,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13266,
											"end": 13273,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13266,
											"end": 13273,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 13266,
											"end": 13273,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13301,
											"end": 13339,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "364"
										},
										{
											"begin": 13301,
											"end": 13339,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13335,
											"end": 13338,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 13335,
											"end": 13338,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13301,
											"end": 13330,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "365"
										},
										{
											"begin": 13301,
											"end": 13330,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13321,
											"end": 13329,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 13321,
											"end": 13329,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 13301,
											"end": 13320,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "226"
										},
										{
											"begin": 13301,
											"end": 13330,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 13301,
											"end": 13330,
											"name": "tag",
											"source": 2,
											"value": "365"
										},
										{
											"begin": 13301,
											"end": 13330,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13301,
											"end": 13334,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13301,
											"end": 13334,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "227"
										},
										{
											"begin": 13301,
											"end": 13339,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 13301,
											"end": 13339,
											"name": "tag",
											"source": 2,
											"value": "364"
										},
										{
											"begin": 13301,
											"end": 13339,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13285,
											"end": 13339,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13285,
											"end": 13339,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 13390,
											"end": 13391,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13369,
											"end": 13387,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 13369,
											"end": 13387,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 13369,
											"end": 13391,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 13368,
											"end": 13483,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "366"
										},
										{
											"begin": 13368,
											"end": 13483,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 13482,
											"end": 13483,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13368,
											"end": 13483,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "305"
										},
										{
											"begin": 13368,
											"end": 13483,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 13368,
											"end": 13483,
											"name": "tag",
											"source": 2,
											"value": "366"
										},
										{
											"begin": 13368,
											"end": 13483,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13444,
											"end": 13462,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 13444,
											"end": 13462,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13421,
											"end": 13438,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 13421,
											"end": 13438,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 13421,
											"end": 13438,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13421,
											"end": 13438,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13421,
											"end": 13438,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13421,
											"end": 13438,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13421,
											"end": 13431,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 13421,
											"end": 13438,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 13421,
											"end": 13438,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13421,
											"end": 13438,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 13421,
											"end": 13438,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13421,
											"end": 13438,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 13421,
											"end": 13438,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 13411,
											"end": 13463,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "305"
										},
										{
											"begin": 13411,
											"end": 13463,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13444,
											"end": 13462,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13411,
											"end": 13439,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "365"
										},
										{
											"begin": 13411,
											"end": 13439,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13411,
											"end": 13416,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 13411,
											"end": 13416,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13411,
											"end": 13420,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "226"
										},
										{
											"begin": 13411,
											"end": 13439,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "tag",
											"source": 2,
											"value": "209"
										},
										{
											"begin": 6375,
											"end": 7217,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6548,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 6536,
											"end": 6548,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6562,
											"end": 6572,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6582,
											"end": 6586,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6439,
											"end": 6446,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6439,
											"end": 6446,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6536,
											"end": 6548,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6548,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6561,
											"name": "PUSH",
											"source": 2,
											"value": "23B872DD"
										},
										{
											"begin": 6536,
											"end": 6561,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6439,
											"end": 6446,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6548,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "371"
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "tag",
											"source": 2,
											"value": "371"
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "373"
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "tag",
											"source": 2,
											"value": "373"
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "374"
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "tag",
											"source": 2,
											"value": "374"
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6536,
											"end": 6597,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6528,
											"end": 6598,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "375"
										},
										{
											"begin": 6528,
											"end": 6598,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6528,
											"end": 6598,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6528,
											"end": 6598,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6528,
											"end": 6598,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6528,
											"end": 6598,
											"name": "tag",
											"source": 2,
											"value": "375"
										},
										{
											"begin": 6528,
											"end": 6598,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6660,
											"end": 6673,
											"name": "PUSH",
											"source": 2,
											"value": "B"
										},
										{
											"begin": 6660,
											"end": 6684,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6660,
											"end": 6684,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6660,
											"end": 6684,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6660,
											"end": 6684,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6660,
											"end": 6684,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6660,
											"end": 6684,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 6660,
											"end": 6673,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6761,
											"end": 6791,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "376"
										},
										{
											"begin": 6776,
											"end": 6781,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6677,
											"end": 6684,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6761,
											"end": 6775,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "377"
										},
										{
											"begin": 6761,
											"end": 6791,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6761,
											"end": 6791,
											"name": "tag",
											"source": 2,
											"value": "376"
										},
										{
											"begin": 6761,
											"end": 6791,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6885,
											"end": 6902,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6885,
											"end": 6902,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6885,
											"end": 6902,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6885,
											"end": 6902,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6885,
											"end": 6895,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 6885,
											"end": 6902,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6885,
											"end": 6902,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6885,
											"end": 6902,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6885,
											"end": 6902,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6885,
											"end": 6902,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6885,
											"end": 6902,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6885,
											"end": 6902,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6885,
											"end": 6902,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 6885,
											"end": 6912,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6885,
											"end": 6912,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6926,
											"end": 6936,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 6926,
											"end": 6943,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6926,
											"end": 6943,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6926,
											"end": 6943,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 6926,
											"end": 6943,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6926,
											"end": 6943,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6926,
											"end": 6943,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 6926,
											"end": 6943,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6957,
											"end": 6974,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 6957,
											"end": 6974,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6957,
											"end": 6974,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6957,
											"end": 6984,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 6957,
											"end": 6984,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6957,
											"end": 6984,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6998,
											"end": 7013,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6747,
											"end": 6791,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6747,
											"end": 6791,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "27CC9C295B15A532BB1B5F9308F1D54813E694C2EBDD1C2CED210BFE52DCD57E"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 7023,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": 7098,
											"end": 7110,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "305"
										},
										{
											"begin": 7098,
											"end": 7108,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "246"
										},
										{
											"begin": 7098,
											"end": 7110,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10614,
											"end": 10713,
											"name": "tag",
											"source": 2,
											"value": "212"
										},
										{
											"begin": 10614,
											"end": 10713,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10657,
											"end": 10664,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10683,
											"end": 10706,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "300"
										},
										{
											"begin": 10695,
											"end": 10705,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 10683,
											"end": 10694,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 10683,
											"end": 10706,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 726,
											"end": 1139,
											"name": "tag",
											"source": 0,
											"value": "213"
										},
										{
											"begin": 726,
											"end": 1139,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1086,
											"end": 1106,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 1124,
											"end": 1132,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1124,
											"end": 1132,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1124,
											"end": 1132,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 726,
											"end": 1139,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3538,
											"end": 3753,
											"name": "tag",
											"source": 8,
											"value": "226"
										},
										{
											"begin": 3538,
											"end": 3753,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3596,
											"end": 3603,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3619,
											"end": 3625,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3615,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "383"
										},
										{
											"begin": 3615,
											"end": 3635,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3634,
											"end": 3635,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3627,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "285"
										},
										{
											"begin": 3627,
											"end": 3635,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3615,
											"end": 3635,
											"name": "tag",
											"source": 8,
											"value": "383"
										},
										{
											"begin": 3615,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3657,
											"end": 3662,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3657,
											"end": 3662,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3657,
											"end": 3662,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3661,
											"end": 3662,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3657,
											"end": 3658,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3657,
											"end": 3662,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3657,
											"end": 3658,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3680,
											"end": 3685,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "384"
										},
										{
											"begin": 3680,
											"end": 3685,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3680,
											"end": 3685,
											"name": "INVALID",
											"source": 8
										},
										{
											"begin": 3680,
											"end": 3685,
											"name": "tag",
											"source": 8,
											"value": "384"
										},
										{
											"begin": 3680,
											"end": 3685,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3680,
											"end": 3685,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 3680,
											"end": 3690,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "305"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH data",
											"source": 8,
											"value": "9113BB53C2876A3805B2C9242029423FC540A728243CE887AB24C82CF119FBA3"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "CODECOPY",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 4217,
											"end": 4367,
											"name": "tag",
											"source": 8,
											"value": "227"
										},
										{
											"begin": 4217,
											"end": 4367,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4275,
											"end": 4282,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4306,
											"end": 4307,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4302,
											"end": 4303,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4302,
											"end": 4307,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "387"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 8,
											"value": "1A"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 8,
											"value": "536166654D6174683A206469766973696F6E206279207A65726F000000000000"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "tag",
											"source": 8,
											"value": "387"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4359,
											"end": 4360,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4355,
											"end": 4356,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4355,
											"end": 4360,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4355,
											"end": 4360,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "388"
										},
										{
											"begin": 4355,
											"end": 4360,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4355,
											"end": 4360,
											"name": "INVALID",
											"source": 8
										},
										{
											"begin": 4355,
											"end": 4360,
											"name": "tag",
											"source": 8,
											"value": "388"
										},
										{
											"begin": 4355,
											"end": 4360,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4355,
											"end": 4360,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 4355,
											"end": 4360,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 4217,
											"end": 4367,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4217,
											"end": 4367,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3136,
											"end": 3291,
											"name": "tag",
											"source": 8,
											"value": "229"
										},
										{
											"begin": 3136,
											"end": 3291,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3194,
											"end": 3201,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3226,
											"end": 3227,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3221,
											"end": 3222,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3221,
											"end": 3227,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 3221,
											"end": 3227,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "390"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 8,
											"value": "1E"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 8,
											"value": "536166654D6174683A207375627472616374696F6E206F766572666C6F770000"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "tag",
											"source": 8,
											"value": "390"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3279,
											"end": 3284,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3279,
											"end": 3284,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3279,
											"end": 3284,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3136,
											"end": 3291,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 14777,
											"end": 15514,
											"name": "tag",
											"source": 2,
											"value": "244"
										},
										{
											"begin": 14777,
											"end": 15514,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14827,
											"end": 14844,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14847,
											"end": 14858,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "392"
										},
										{
											"begin": 14847,
											"end": 14850,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 14855,
											"end": 14857,
											"name": "PUSH",
											"source": 2,
											"value": "A"
										},
										{
											"begin": 14847,
											"end": 14854,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "227"
										},
										{
											"begin": 14847,
											"end": 14858,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 14847,
											"end": 14858,
											"name": "tag",
											"source": 2,
											"value": "392"
										},
										{
											"begin": 14847,
											"end": 14858,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14827,
											"end": 14858,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14827,
											"end": 14858,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14869,
											"end": 14885,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14889,
											"end": 14911,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "393"
										},
										{
											"begin": 14903,
											"end": 14910,
											"name": "PUSH",
											"source": 2,
											"value": "E"
										},
										{
											"begin": 14903,
											"end": 14910,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 14889,
											"end": 14898,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 14889,
											"end": 14902,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "226"
										},
										{
											"begin": 14889,
											"end": 14902,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14889,
											"end": 14911,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 14889,
											"end": 14911,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14889,
											"end": 14911,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 14889,
											"end": 14911,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 14889,
											"end": 14911,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 14889,
											"end": 14911,
											"name": "tag",
											"source": 2,
											"value": "393"
										},
										{
											"begin": 14889,
											"end": 14911,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14869,
											"end": 14912,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14869,
											"end": 14912,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14943,
											"end": 14959,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 14963,
											"end": 14985,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "394"
										},
										{
											"begin": 14977,
											"end": 14984,
											"name": "PUSH",
											"source": 2,
											"value": "F"
										},
										{
											"begin": 14977,
											"end": 14984,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 14963,
											"end": 14972,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 14963,
											"end": 14976,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "226"
										},
										{
											"begin": 14963,
											"end": 14976,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14963,
											"end": 14985,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 14963,
											"end": 14985,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14963,
											"end": 14985,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 14963,
											"end": 14985,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 14963,
											"end": 14985,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 14963,
											"end": 14985,
											"name": "tag",
											"source": 2,
											"value": "394"
										},
										{
											"begin": 14963,
											"end": 14985,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 15035,
											"end": 15050,
											"name": "PUSH",
											"source": 2,
											"value": "C"
										},
										{
											"begin": 15035,
											"end": 15050,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 14943,
											"end": 14986,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 14943,
											"end": 14986,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 15035,
											"end": 15064,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "395"
										},
										{
											"begin": 15035,
											"end": 15064,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 15055,
											"end": 15063,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 15035,
											"end": 15054,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "268"
										},
										{
											"begin": 15035,
											"end": 15064,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 15035,
											"end": 15064,
											"name": "tag",
											"source": 2,
											"value": "395"
										},
										{
											"begin": 15035,
											"end": 15064,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 15017,
											"end": 15032,
											"name": "PUSH",
											"source": 2,
											"value": "C"
										},
										{
											"begin": 15017,
											"end": 15064,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 15143,
											"end": 15161,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 15143,
											"end": 15161,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 15143,
											"end": 15165,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 15139,
											"end": 15508,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "396"
										},
										{
											"begin": 15139,
											"end": 15508,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 15247,
											"end": 15367,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "397"
										},
										{
											"begin": 15277,
											"end": 15292,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 15277,
											"end": 15292,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 15335,
											"end": 15353,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 15335,
											"end": 15353,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15311,
											"end": 15319,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 15311,
											"end": 15331,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 15310,
											"end": 15353,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 15310,
											"end": 15353,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "398"
										},
										{
											"begin": 15310,
											"end": 15353,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 15310,
											"end": 15353,
											"name": "INVALID",
											"source": 2
										},
										{
											"begin": 15310,
											"end": 15353,
											"name": "tag",
											"source": 2,
											"value": "398"
										},
										{
											"begin": 15310,
											"end": 15353,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 15310,
											"end": 15353,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 15247,
											"end": 15259,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "268"
										},
										{
											"begin": 15247,
											"end": 15367,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 15247,
											"end": 15367,
											"name": "tag",
											"source": 2,
											"value": "397"
										},
										{
											"begin": 15247,
											"end": 15367,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 15229,
											"end": 15244,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 15229,
											"end": 15367,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 15139,
											"end": 15508,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "399"
										},
										{
											"begin": 15139,
											"end": 15508,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 15139,
											"end": 15508,
											"name": "tag",
											"source": 2,
											"value": "396"
										},
										{
											"begin": 15139,
											"end": 15508,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 15470,
											"end": 15485,
											"name": "PUSH",
											"source": 2,
											"value": "C"
										},
										{
											"begin": 15470,
											"end": 15497,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 15470,
											"end": 15497,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 15470,
											"end": 15497,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 15470,
											"end": 15497,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 15470,
											"end": 15497,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 15470,
											"end": 15497,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 15139,
											"end": 15508,
											"name": "tag",
											"source": 2,
											"value": "399"
										},
										{
											"begin": 15139,
											"end": 15508,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14777,
											"end": 15514,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14777,
											"end": 15514,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14777,
											"end": 15514,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14777,
											"end": 15514,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 14777,
											"end": 15514,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 15555,
											"end": 16797,
											"name": "tag",
											"source": 2,
											"value": "246"
										},
										{
											"begin": 15555,
											"end": 16797,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 15728,
											"end": 15742,
											"name": "PUSH",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 15728,
											"end": 15742,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 15621,
											"end": 15636,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 15621,
											"end": 15636,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1628,
											"end": 1635,
											"name": "PUSH",
											"source": 2,
											"value": "5460"
										},
										{
											"begin": 1628,
											"end": 1635,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 15702,
											"end": 15743,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "401"
										},
										{
											"begin": 15702,
											"end": 15743,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 15621,
											"end": 15636,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 15621,
											"end": 15636,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 15702,
											"end": 15727,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "402"
										},
										{
											"begin": 15702,
											"end": 15743,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 15702,
											"end": 15743,
											"name": "tag",
											"source": 2,
											"value": "401"
										},
										{
											"begin": 15702,
											"end": 15743,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 15702,
											"end": 15761,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 15698,
											"end": 15976,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 15698,
											"end": 15976,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "403"
										},
										{
											"begin": 15698,
											"end": 15976,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 15817,
											"end": 15860,
											"name": "PUSH",
											"source": 2,
											"value": "2CFCE469A63F2E9972B7F23DA751E6943ED2B091C10E40B5C43B5F6105BF20EA"
										},
										{
											"begin": 15826,
											"end": 15840,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "404"
										},
										{
											"begin": 15826,
											"end": 15838,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 15826,
											"end": 15840,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 15826,
											"end": 15840,
											"name": "tag",
											"source": 2,
											"value": "404"
										},
										{
											"begin": 15826,
											"end": 15840,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 15817,
											"end": 15860,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 15817,
											"end": 15860,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 15817,
											"end": 15860,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 15817,
											"end": 15860,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 15817,
											"end": 15860,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 15817,
											"end": 15860,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 15817,
											"end": 15860,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 15817,
											"end": 15860,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 15817,
											"end": 15860,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 15817,
											"end": 15860,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 15817,
											"end": 15860,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 15817,
											"end": 15860,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 15817,
											"end": 15860,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 15817,
											"end": 15860,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 15817,
											"end": 15860,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 15817,
											"end": 15860,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 15817,
											"end": 15860,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 15817,
											"end": 15860,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 15817,
											"end": 15860,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 15817,
											"end": 15860,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 15817,
											"end": 15860,
											"name": "LOG1",
											"source": 2
										},
										{
											"begin": 15931,
											"end": 15945,
											"name": "PUSH",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 15931,
											"end": 15965,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 15931,
											"end": 15965,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 15931,
											"end": 15965,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 15698,
											"end": 15976,
											"name": "tag",
											"source": 2,
											"value": "403"
										},
										{
											"begin": 15698,
											"end": 15976,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1683,
											"end": 1692,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 16048,
											"end": 16095,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "405"
										},
										{
											"begin": 16065,
											"end": 16082,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 16084,
											"end": 16094,
											"name": "PUSH",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 16084,
											"end": 16094,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 16048,
											"end": 16064,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "402"
										},
										{
											"begin": 16048,
											"end": 16095,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 16048,
											"end": 16095,
											"name": "tag",
											"source": 2,
											"value": "405"
										},
										{
											"begin": 16048,
											"end": 16095,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16048,
											"end": 16113,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 16048,
											"end": 16151,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 16048,
											"end": 16151,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 16048,
											"end": 16151,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "406"
										},
										{
											"begin": 16048,
											"end": 16151,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 16048,
											"end": 16151,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 16150,
											"end": 16151,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 16129,
											"end": 16147,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 16129,
											"end": 16147,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 16129,
											"end": 16151,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 16048,
											"end": 16151,
											"name": "tag",
											"source": 2,
											"value": "406"
										},
										{
											"begin": 16048,
											"end": 16151,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16031,
											"end": 16791,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 16031,
											"end": 16791,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "337"
										},
										{
											"begin": 16031,
											"end": 16791,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 16259,
											"end": 16267,
											"name": "PUSH",
											"source": 2,
											"value": "D"
										},
										{
											"begin": 16259,
											"end": 16267,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 16239,
											"end": 16254,
											"name": "PUSH",
											"source": 2,
											"value": "C"
										},
										{
											"begin": 16239,
											"end": 16254,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 16223,
											"end": 16236,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 16223,
											"end": 16236,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 16239,
											"end": 16321,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "408"
										},
										{
											"begin": 16239,
											"end": 16321,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 16299,
											"end": 16307,
											"name": "PUSH",
											"source": 2,
											"value": "15180"
										},
										{
											"begin": 16299,
											"end": 16307,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 16239,
											"end": 16277,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "365"
										},
										{
											"begin": 16239,
											"end": 16277,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 16273,
											"end": 16276,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 16273,
											"end": 16276,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 16239,
											"end": 16277,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 16239,
											"end": 16277,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 16239,
											"end": 16254,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16259,
											"end": 16267,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 16259,
											"end": 16267,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 16239,
											"end": 16258,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "226"
										},
										{
											"begin": 16239,
											"end": 16268,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 16239,
											"end": 16321,
											"name": "tag",
											"source": 2,
											"value": "408"
										},
										{
											"begin": 16239,
											"end": 16321,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16223,
											"end": 16321,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16223,
											"end": 16321,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 16335,
											"end": 16349,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 16360,
											"end": 16397,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "411"
										},
										{
											"begin": 16386,
											"end": 16396,
											"name": "PUSH",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 16386,
											"end": 16396,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 16360,
											"end": 16377,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 16360,
											"end": 16385,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "402"
										},
										{
											"begin": 16360,
											"end": 16385,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16360,
											"end": 16397,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 16360,
											"end": 16397,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16360,
											"end": 16397,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 16360,
											"end": 16397,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 16360,
											"end": 16397,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 16360,
											"end": 16397,
											"name": "tag",
											"source": 2,
											"value": "411"
										},
										{
											"begin": 16360,
											"end": 16397,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16506,
											"end": 16521,
											"name": "PUSH",
											"source": 2,
											"value": "C"
										},
										{
											"begin": 16506,
											"end": 16521,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 16352,
											"end": 16397,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16352,
											"end": 16397,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 16352,
											"end": 16397,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 16352,
											"end": 16397,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 16506,
											"end": 16537,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "412"
										},
										{
											"begin": 16506,
											"end": 16537,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16352,
											"end": 16397,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 16506,
											"end": 16529,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "402"
										},
										{
											"begin": 16506,
											"end": 16537,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 16506,
											"end": 16537,
											"name": "tag",
											"source": 2,
											"value": "412"
										},
										{
											"begin": 16506,
											"end": 16537,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16488,
											"end": 16503,
											"name": "PUSH",
											"source": 2,
											"value": "C"
										},
										{
											"begin": 16488,
											"end": 16537,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 16599,
											"end": 16614,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 16599,
											"end": 16614,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 16655,
											"end": 16673,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 16655,
											"end": 16673,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 16569,
											"end": 16687,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "413"
										},
										{
											"begin": 16569,
											"end": 16687,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 16599,
											"end": 16614,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 16633,
											"end": 16651,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 16633,
											"end": 16651,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 16655,
											"end": 16673,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 16632,
											"end": 16673,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "398"
										},
										{
											"begin": 16632,
											"end": 16673,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 16632,
											"end": 16673,
											"name": "INVALID",
											"source": 2
										},
										{
											"begin": 16569,
											"end": 16687,
											"name": "tag",
											"source": 2,
											"value": "413"
										},
										{
											"begin": 16569,
											"end": 16687,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16551,
											"end": 16566,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 16551,
											"end": 16687,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 16750,
											"end": 16760,
											"name": "PUSH",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 16750,
											"end": 16780,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 15555,
											"end": 16797,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "tag",
											"source": 8,
											"value": "268"
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2748,
											"end": 2755,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2779,
											"end": 2784,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2779,
											"end": 2784,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2779,
											"end": 2784,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2802,
											"end": 2808,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2802,
											"end": 2808,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2802,
											"end": 2808,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 2802,
											"end": 2808,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "305"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 8,
											"value": "1B"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 8,
											"value": "536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 598,
											"end": 702,
											"name": "tag",
											"source": 1,
											"value": "277"
										},
										{
											"begin": 598,
											"end": 702,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 685,
											"end": 695,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 598,
											"end": 702,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 598,
											"end": 702,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 19684,
											"end": 21653,
											"name": "tag",
											"source": 2,
											"value": "306"
										},
										{
											"begin": 19684,
											"end": 21653,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 19829,
											"end": 19839,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 19786,
											"end": 19799,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 19868,
											"end": 19887,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 19868,
											"end": 19887,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 19868,
											"end": 19887,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19868,
											"end": 19878,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 19868,
											"end": 19887,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 19868,
											"end": 19887,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19868,
											"end": 19887,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 19868,
											"end": 19887,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 19868,
											"end": 19887,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 19868,
											"end": 19887,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 19786,
											"end": 19799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19786,
											"end": 19799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 19829,
											"end": 19839,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19857,
											"end": 19887,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 19857,
											"end": 19887,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 19857,
											"end": 19887,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 19849,
											"end": 19888,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "419"
										},
										{
											"begin": 19849,
											"end": 19888,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 19849,
											"end": 19888,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 19849,
											"end": 19888,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 19849,
											"end": 19888,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 19849,
											"end": 19888,
											"name": "tag",
											"source": 2,
											"value": "419"
										},
										{
											"begin": 19849,
											"end": 19888,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 20003,
											"end": 20004,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 19988,
											"end": 20000,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "420"
										},
										{
											"begin": 19988,
											"end": 19998,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "212"
										},
										{
											"begin": 19988,
											"end": 20000,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 19988,
											"end": 20000,
											"name": "tag",
											"source": 2,
											"value": "420"
										},
										{
											"begin": 19988,
											"end": 20000,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 19988,
											"end": 20004,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 19984,
											"end": 20040,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 19984,
											"end": 20040,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "422"
										},
										{
											"begin": 19984,
											"end": 20040,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 20020,
											"end": 20029,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "422"
										},
										{
											"begin": 20020,
											"end": 20027,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 20020,
											"end": 20029,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 20020,
											"end": 20029,
											"name": "tag",
											"source": 2,
											"value": "422"
										},
										{
											"begin": 20020,
											"end": 20029,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 20117,
											"end": 20136,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20117,
											"end": 20136,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 20117,
											"end": 20136,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 20117,
											"end": 20136,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20117,
											"end": 20136,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20117,
											"end": 20136,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20117,
											"end": 20127,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 20117,
											"end": 20136,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 20117,
											"end": 20136,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20117,
											"end": 20136,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 20117,
											"end": 20136,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20117,
											"end": 20136,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 20117,
											"end": 20136,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20104,
											"end": 20146,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "423"
										},
										{
											"begin": 20104,
											"end": 20146,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20138,
											"end": 20145,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 20104,
											"end": 20116,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "229"
										},
										{
											"begin": 20104,
											"end": 20146,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 20104,
											"end": 20146,
											"name": "tag",
											"source": 2,
											"value": "423"
										},
										{
											"begin": 20104,
											"end": 20146,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 20082,
											"end": 20101,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20082,
											"end": 20101,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 20082,
											"end": 20101,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 20082,
											"end": 20101,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 20082,
											"end": 20101,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20082,
											"end": 20101,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20082,
											"end": 20101,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20082,
											"end": 20092,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 20082,
											"end": 20101,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 20082,
											"end": 20101,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20082,
											"end": 20101,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 20082,
											"end": 20101,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20082,
											"end": 20101,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 20082,
											"end": 20101,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 20082,
											"end": 20146,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 20082,
											"end": 20146,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20082,
											"end": 20146,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 20082,
											"end": 20146,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 20194,
											"end": 20216,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20194,
											"end": 20216,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 20194,
											"end": 20216,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 20194,
											"end": 20216,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20194,
											"end": 20216,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20194,
											"end": 20216,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 20194,
											"end": 20216,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20181,
											"end": 20226,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "424"
										},
										{
											"begin": 20181,
											"end": 20226,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20218,
											"end": 20225,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 20181,
											"end": 20193,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "268"
										},
										{
											"begin": 20181,
											"end": 20226,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 20181,
											"end": 20226,
											"name": "tag",
											"source": 2,
											"value": "424"
										},
										{
											"begin": 20181,
											"end": 20226,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 20156,
											"end": 20178,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 20156,
											"end": 20178,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20156,
											"end": 20178,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 20156,
											"end": 20178,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 20156,
											"end": 20178,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20156,
											"end": 20178,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20156,
											"end": 20178,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20156,
											"end": 20166,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 20156,
											"end": 20178,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 20156,
											"end": 20178,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20156,
											"end": 20178,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20156,
											"end": 20178,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20156,
											"end": 20178,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 20156,
											"end": 20178,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20156,
											"end": 20178,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 20156,
											"end": 20178,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 20156,
											"end": 20226,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 20156,
											"end": 20226,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20156,
											"end": 20226,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 20156,
											"end": 20226,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 20330,
											"end": 20345,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 20330,
											"end": 20345,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20330,
											"end": 20345,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20298,
											"end": 20317,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 20298,
											"end": 20317,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 20298,
											"end": 20317,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 20298,
											"end": 20317,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 20298,
											"end": 20317,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20298,
											"end": 20308,
											"name": "PUSH",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 20298,
											"end": 20317,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 20298,
											"end": 20317,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20298,
											"end": 20317,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 20298,
											"end": 20317,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 20298,
											"end": 20317,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 20298,
											"end": 20356,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20298,
											"end": 20356,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20330,
											"end": 20355,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 20330,
											"end": 20355,
											"name": "DUP11",
											"source": 2
										},
										{
											"begin": 20330,
											"end": 20355,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 20298,
											"end": 20356,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20298,
											"end": 20356,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 20298,
											"end": 20356,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 20298,
											"end": 20356,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20298,
											"end": 20356,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 20298,
											"end": 20356,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 20401,
											"end": 20416,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 20401,
											"end": 20416,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20366,
											"end": 20388,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 20366,
											"end": 20388,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20366,
											"end": 20388,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20366,
											"end": 20388,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 20366,
											"end": 20388,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20366,
											"end": 20388,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 20366,
											"end": 20427,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20366,
											"end": 20427,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20401,
											"end": 20426,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 20401,
											"end": 20426,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 20401,
											"end": 20426,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 20366,
											"end": 20427,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20366,
											"end": 20427,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 20366,
											"end": 20427,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20366,
											"end": 20427,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20366,
											"end": 20427,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 20366,
											"end": 20427,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 20530,
											"end": 20540,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 20530,
											"end": 20552,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20530,
											"end": 20552,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 20530,
											"end": 20552,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20530,
											"end": 20552,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 20530,
											"end": 20562,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20530,
											"end": 20567,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 20530,
											"end": 20625,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20530,
											"end": 20625,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 20530,
											"end": 20625,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "425"
										},
										{
											"begin": 20530,
											"end": 20625,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 20583,
											"end": 20605,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 20583,
											"end": 20605,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 20583,
											"end": 20605,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 20583,
											"end": 20605,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20583,
											"end": 20605,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20583,
											"end": 20605,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20583,
											"end": 20593,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 20583,
											"end": 20605,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 20583,
											"end": 20605,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20583,
											"end": 20605,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 20583,
											"end": 20605,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20583,
											"end": 20605,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 20583,
											"end": 20620,
											"name": "PUSH",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 20583,
											"end": 20620,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20583,
											"end": 20620,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20583,
											"end": 20625,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 20530,
											"end": 20625,
											"name": "tag",
											"source": 2,
											"value": "425"
										},
										{
											"begin": 20530,
											"end": 20625,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 20513,
											"end": 20671,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 20513,
											"end": 20671,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "426"
										},
										{
											"begin": 20513,
											"end": 20671,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 20650,
											"end": 20655,
											"name": "PUSH",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 20650,
											"end": 20660,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20650,
											"end": 20660,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20659,
											"end": 20660,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 20650,
											"end": 20660,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20650,
											"end": 20660,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20650,
											"end": 20660,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 20513,
											"end": 20671,
											"name": "tag",
											"source": 2,
											"value": "426"
										},
										{
											"begin": 20513,
											"end": 20671,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 20707,
											"end": 20726,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20707,
											"end": 20726,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 20707,
											"end": 20726,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 20707,
											"end": 20726,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 20707,
											"end": 20726,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20707,
											"end": 20726,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20707,
											"end": 20726,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20707,
											"end": 20717,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 20707,
											"end": 20726,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 20707,
											"end": 20726,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20707,
											"end": 20726,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20707,
											"end": 20726,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20707,
											"end": 20726,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 20707,
											"end": 20726,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20707,
											"end": 20726,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 20707,
											"end": 20726,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 20707,
											"end": 20745,
											"name": "PUSH",
											"source": 2,
											"value": "D"
										},
										{
											"begin": 20707,
											"end": 20745,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20707,
											"end": 20745,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20707,
											"end": 20750,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20707,
											"end": 20750,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20749,
											"end": 20750,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 20707,
											"end": 20750,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20707,
											"end": 20750,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20707,
											"end": 20750,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20707,
											"end": 20750,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20707,
											"end": 20750,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 20707,
											"end": 20750,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 20760,
											"end": 20797,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 20760,
											"end": 20797,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20760,
											"end": 20797,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 20760,
											"end": 20797,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20760,
											"end": 20808,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20760,
											"end": 20808,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20760,
											"end": 20808,
											"name": "DUP11",
											"source": 2
										},
										{
											"begin": 20760,
											"end": 20808,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20760,
											"end": 20808,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20760,
											"end": 20808,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 20818,
											"end": 20840,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 20818,
											"end": 20840,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 20818,
											"end": 20840,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 20818,
											"end": 20840,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20818,
											"end": 20840,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 20818,
											"end": 20840,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 20818,
											"end": 20840,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 20818,
											"end": 20840,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20818,
											"end": 20840,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20818,
											"end": 20840,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7"
										},
										{
											"begin": 20818,
											"end": 20855,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 20818,
											"end": 20855,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20818,
											"end": 20866,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20818,
											"end": 20866,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20818,
											"end": 20866,
											"name": "DUP11",
											"source": 2
										},
										{
											"begin": 20818,
											"end": 20866,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20818,
											"end": 20866,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20818,
											"end": 20866,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 20876,
											"end": 20914,
											"name": "PUSH",
											"source": 2,
											"value": "E"
										},
										{
											"begin": 20876,
											"end": 20914,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20876,
											"end": 20919,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20876,
											"end": 20919,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20876,
											"end": 20919,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 20876,
											"end": 20919,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20876,
											"end": 20919,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20876,
											"end": 20919,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 20971,
											"end": 20979,
											"name": "PUSH",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 20971,
											"end": 20984,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 20971,
											"end": 20984,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 20971,
											"end": 20984,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20971,
											"end": 20984,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 20971,
											"end": 20984,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 20971,
											"end": 20984,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 20971,
											"end": 20984,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 20971,
											"end": 20984,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 21050,
											"end": 21107,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 21050,
											"end": 21107,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 21050,
											"end": 21107,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 21050,
											"end": 21107,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21050,
											"end": 21107,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21091,
											"end": 21106,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 21050,
											"end": 21107,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 21050,
											"end": 21107,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21050,
											"end": 21107,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 21050,
											"end": 21107,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 21050,
											"end": 21107,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 21050,
											"end": 21107,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 21050,
											"end": 21107,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21050,
											"end": 21107,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 21050,
											"end": 21107,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 20818,
											"end": 20840,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 20818,
											"end": 20840,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 21050,
											"end": 21107,
											"name": "PUSH",
											"source": 2,
											"value": "91C7D71A3AE3FB7CF61E00517BF4868E9E23D0BACE5E304CBC3B68DE5D85350E"
										},
										{
											"begin": 21050,
											"end": 21107,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 21050,
											"end": 21107,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 21050,
											"end": 21107,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 21050,
											"end": 21107,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 21050,
											"end": 21107,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 21050,
											"end": 21107,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 21050,
											"end": 21107,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 21050,
											"end": 21107,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 21214,
											"end": 21233,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 21214,
											"end": 21233,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21214,
											"end": 21233,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21214,
											"end": 21233,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21214,
											"end": 21224,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 21214,
											"end": 21233,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 21214,
											"end": 21233,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21214,
											"end": 21233,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21214,
											"end": 21233,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21214,
											"end": 21233,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 21214,
											"end": 21233,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 21214,
											"end": 21233,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 21214,
											"end": 21233,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 21214,
											"end": 21243,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 21214,
											"end": 21243,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 21257,
											"end": 21267,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 21257,
											"end": 21276,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 21257,
											"end": 21276,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21257,
											"end": 21276,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 21257,
											"end": 21276,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 21257,
											"end": 21276,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 21257,
											"end": 21276,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 21257,
											"end": 21276,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 21290,
											"end": 21309,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 21290,
											"end": 21309,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 21290,
											"end": 21309,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21290,
											"end": 21319,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 21290,
											"end": 21319,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 21290,
											"end": 21319,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21333,
											"end": 21348,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "27CC9C295B15A532BB1B5F9308F1D54813E694C2EBDD1C2CED210BFE52DCD57E"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 21171,
											"end": 21358,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 21471,
											"end": 21493,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 21471,
											"end": 21493,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21471,
											"end": 21493,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21471,
											"end": 21493,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21471,
											"end": 21481,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 21471,
											"end": 21493,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 21471,
											"end": 21493,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21471,
											"end": 21493,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21471,
											"end": 21493,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21471,
											"end": 21493,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 21471,
											"end": 21493,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 21471,
											"end": 21493,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 21471,
											"end": 21493,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 21471,
											"end": 21503,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 21471,
											"end": 21503,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 21517,
											"end": 21527,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 21517,
											"end": 21539,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 21517,
											"end": 21539,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21517,
											"end": 21539,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 21517,
											"end": 21539,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 21517,
											"end": 21539,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 21517,
											"end": 21539,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 21517,
											"end": 21539,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 21553,
											"end": 21575,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 21553,
											"end": 21575,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 21553,
											"end": 21575,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21553,
											"end": 21585,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 21553,
											"end": 21585,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 21553,
											"end": 21585,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21599,
											"end": 21614,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "27CC9C295B15A532BB1B5F9308F1D54813E694C2EBDD1C2CED210BFE52DCD57E"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 21425,
											"end": 21624,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 21642,
											"end": 21646,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 21642,
											"end": 21646,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 19684,
											"end": 21653,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 19684,
											"end": 21653,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 18459,
											"end": 19637,
											"name": "tag",
											"source": 2,
											"value": "338"
										},
										{
											"begin": 18459,
											"end": 19637,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 18504,
											"end": 18511,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 18539,
											"end": 18549,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 18504,
											"end": 18511,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18646,
											"end": 18664,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "428"
										},
										{
											"begin": 18539,
											"end": 18549,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 18646,
											"end": 18657,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 18646,
											"end": 18664,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 18646,
											"end": 18664,
											"name": "tag",
											"source": 2,
											"value": "428"
										},
										{
											"begin": 18646,
											"end": 18664,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 18674,
											"end": 18691,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 18674,
											"end": 18691,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 18674,
											"end": 18691,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 18674,
											"end": 18691,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18674,
											"end": 18691,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18674,
											"end": 18691,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18674,
											"end": 18684,
											"name": "PUSH",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 18674,
											"end": 18691,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 18674,
											"end": 18691,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18674,
											"end": 18691,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 18674,
											"end": 18691,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18674,
											"end": 18691,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 18674,
											"end": 18727,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18674,
											"end": 18727,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 18704,
											"end": 18726,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 18704,
											"end": 18726,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 18674,
											"end": 18727,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18674,
											"end": 18727,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18674,
											"end": 18727,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 18625,
											"end": 18664,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18625,
											"end": 18664,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 18900,
											"end": 18938,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "429"
										},
										{
											"begin": 18915,
											"end": 18925,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 18625,
											"end": 18664,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 18900,
											"end": 18914,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "377"
										},
										{
											"begin": 18900,
											"end": 18938,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 18900,
											"end": 18938,
											"name": "tag",
											"source": 2,
											"value": "429"
										},
										{
											"begin": 18900,
											"end": 18938,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19024,
											"end": 19039,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 18882,
											"end": 18938,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 18882,
											"end": 18938,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "PUSH",
											"source": 2,
											"value": "193A876AC91D11A4A0A71EBEF73B195BA55AA7C16D6755C93C21D973E692A02C"
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18985,
											"end": 19040,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 19144,
											"end": 19161,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 19144,
											"end": 19161,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 19144,
											"end": 19161,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 19144,
											"end": 19161,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19144,
											"end": 19161,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 19144,
											"end": 19161,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19144,
											"end": 19154,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 19144,
											"end": 19161,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 19144,
											"end": 19161,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19144,
											"end": 19161,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 19144,
											"end": 19161,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19144,
											"end": 19161,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 19144,
											"end": 19172,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 19144,
											"end": 19172,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 19144,
											"end": 19172,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 19118,
											"end": 19206,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "430"
										},
										{
											"begin": 19118,
											"end": 19206,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19186,
											"end": 19196,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 19118,
											"end": 19130,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "268"
										},
										{
											"begin": 19118,
											"end": 19206,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 19118,
											"end": 19206,
											"name": "tag",
											"source": 2,
											"value": "430"
										},
										{
											"begin": 19118,
											"end": 19206,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 19087,
											"end": 19104,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 19087,
											"end": 19104,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 19087,
											"end": 19104,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 19087,
											"end": 19104,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 19087,
											"end": 19104,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 19087,
											"end": 19104,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19087,
											"end": 19097,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 19087,
											"end": 19104,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 19087,
											"end": 19104,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 19087,
											"end": 19104,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 19087,
											"end": 19104,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19087,
											"end": 19104,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 19087,
											"end": 19104,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 19087,
											"end": 19104,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 19087,
											"end": 19104,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 19087,
											"end": 19115,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 19087,
											"end": 19115,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 19087,
											"end": 19115,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 19087,
											"end": 19206,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 19087,
											"end": 19206,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19087,
											"end": 19206,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 19087,
											"end": 19206,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 19216,
											"end": 19245,
											"name": "PUSH",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 19216,
											"end": 19245,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 19216,
											"end": 19245,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 19216,
											"end": 19250,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 19216,
											"end": 19250,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 19249,
											"end": 19250,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 19216,
											"end": 19250,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 19216,
											"end": 19250,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19216,
											"end": 19250,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 19344,
											"end": 19371,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 19344,
											"end": 19371,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 19385,
											"end": 19395,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 19385,
											"end": 19402,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 19385,
											"end": 19402,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19385,
											"end": 19402,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 19385,
											"end": 19402,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 19385,
											"end": 19402,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19385,
											"end": 19402,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 19385,
											"end": 19402,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 19416,
											"end": 19433,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 19416,
											"end": 19433,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 19416,
											"end": 19433,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19416,
											"end": 19443,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 19416,
											"end": 19443,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19416,
											"end": 19443,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 19416,
											"end": 19443,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 19416,
											"end": 19443,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19457,
											"end": 19472,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 19087,
											"end": 19104,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19087,
											"end": 19104,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "27CC9C295B15A532BB1B5F9308F1D54813E694C2EBDD1C2CED210BFE52DCD57E"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19303,
											"end": 19482,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": 19561,
											"end": 19573,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "431"
										},
										{
											"begin": 19561,
											"end": 19571,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "246"
										},
										{
											"begin": 19561,
											"end": 19573,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 19561,
											"end": 19573,
											"name": "tag",
											"source": 2,
											"value": "431"
										},
										{
											"begin": 19561,
											"end": 19573,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 19623,
											"end": 19630,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 18459,
											"end": 19637,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18459,
											"end": 19637,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 16843,
											"end": 18419,
											"name": "tag",
											"source": 2,
											"value": "377"
										},
										{
											"begin": 16843,
											"end": 18419,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 17055,
											"end": 17077,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 17055,
											"end": 17077,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 16944,
											"end": 16951,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17055,
											"end": 17077,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17055,
											"end": 17077,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17055,
											"end": 17077,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 17055,
											"end": 17065,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 17055,
											"end": 17077,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 17055,
											"end": 17077,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 17055,
											"end": 17077,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 17055,
											"end": 17077,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17055,
											"end": 17077,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 17055,
											"end": 17087,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 17055,
											"end": 17092,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 17055,
											"end": 17150,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17055,
											"end": 17150,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 17055,
											"end": 17150,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "433"
										},
										{
											"begin": 17055,
											"end": 17150,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 17108,
											"end": 17130,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 17108,
											"end": 17130,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 17108,
											"end": 17130,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17108,
											"end": 17130,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17108,
											"end": 17130,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17108,
											"end": 17130,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 17108,
											"end": 17118,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 17108,
											"end": 17130,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 17108,
											"end": 17130,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 17108,
											"end": 17130,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 17108,
											"end": 17130,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17108,
											"end": 17130,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 17108,
											"end": 17145,
											"name": "PUSH",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 17108,
											"end": 17145,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 17108,
											"end": 17145,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 17108,
											"end": 17150,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 17055,
											"end": 17150,
											"name": "tag",
											"source": 2,
											"value": "433"
										},
										{
											"begin": 17055,
											"end": 17150,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17038,
											"end": 17196,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 17038,
											"end": 17196,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "434"
										},
										{
											"begin": 17038,
											"end": 17196,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 17175,
											"end": 17180,
											"name": "PUSH",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 17175,
											"end": 17185,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17175,
											"end": 17185,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 17184,
											"end": 17185,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 17175,
											"end": 17185,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 17175,
											"end": 17185,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17175,
											"end": 17185,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 17038,
											"end": 17196,
											"name": "tag",
											"source": 2,
											"value": "434"
										},
										{
											"begin": 17038,
											"end": 17196,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17234,
											"end": 17242,
											"name": "PUSH",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 17234,
											"end": 17247,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17234,
											"end": 17247,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 17246,
											"end": 17247,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 17234,
											"end": 17247,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 17234,
											"end": 17247,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17234,
											"end": 17247,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 17234,
											"end": 17242,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17326,
											"end": 17329,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 17293,
											"end": 17323,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "435"
										},
										{
											"begin": 17306,
											"end": 17313,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1380,
											"end": 1381,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 17293,
											"end": 17305,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "226"
										},
										{
											"begin": 17293,
											"end": 17323,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 17293,
											"end": 17323,
											"name": "tag",
											"source": 2,
											"value": "435"
										},
										{
											"begin": 17293,
											"end": 17323,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17293,
											"end": 17329,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17293,
											"end": 17329,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "436"
										},
										{
											"begin": 17293,
											"end": 17329,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 17293,
											"end": 17329,
											"name": "INVALID",
											"source": 2
										},
										{
											"begin": 17293,
											"end": 17329,
											"name": "tag",
											"source": 2,
											"value": "436"
										},
										{
											"begin": 17293,
											"end": 17329,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17293,
											"end": 17329,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 17263,
											"end": 17329,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17263,
											"end": 17329,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 17341,
											"end": 17358,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17361,
											"end": 17403,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "437"
										},
										{
											"begin": 17374,
											"end": 17381,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 17383,
											"end": 17402,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 17361,
											"end": 17373,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "229"
										},
										{
											"begin": 17361,
											"end": 17403,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 17361,
											"end": 17403,
											"name": "tag",
											"source": 2,
											"value": "437"
										},
										{
											"begin": 17361,
											"end": 17403,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 17498,
											"end": 17513,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 17341,
											"end": 17403,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 17341,
											"end": 17403,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "PUSH",
											"source": 2,
											"value": "B49BB132260F6AA1C86E2D2A3957C097216E6EC9B5FA15867289F058B4D297AC"
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17458,
											"end": 17514,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": 17623,
											"end": 17624,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17613,
											"end": 17620,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17613,
											"end": 17624,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 17613,
											"end": 17706,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17613,
											"end": 17706,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 17613,
											"end": 17706,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "438"
										},
										{
											"begin": 17613,
											"end": 17706,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 17688,
											"end": 17706,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 17688,
											"end": 17706,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 17644,
											"end": 17685,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "439"
										},
										{
											"begin": 17657,
											"end": 17664,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 17688,
											"end": 17706,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 17644,
											"end": 17656,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "268"
										},
										{
											"begin": 17644,
											"end": 17685,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 17644,
											"end": 17685,
											"name": "tag",
											"source": 2,
											"value": "439"
										},
										{
											"begin": 17644,
											"end": 17685,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17644,
											"end": 17706,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 17613,
											"end": 17706,
											"name": "tag",
											"source": 2,
											"value": "438"
										},
										{
											"begin": 17613,
											"end": 17706,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17592,
											"end": 17716,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "440"
										},
										{
											"begin": 17592,
											"end": 17716,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 17592,
											"end": 17716,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17592,
											"end": 17716,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17592,
											"end": 17716,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 17592,
											"end": 17716,
											"name": "tag",
											"source": 2,
											"value": "440"
										},
										{
											"begin": 17592,
											"end": 17716,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17730,
											"end": 17748,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 17730,
											"end": 17748,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 17730,
											"end": 17752,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 17726,
											"end": 17867,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "441"
										},
										{
											"begin": 17726,
											"end": 17867,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 17768,
											"end": 17786,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 17768,
											"end": 17797,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17768,
											"end": 17797,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 17768,
											"end": 17797,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 17768,
											"end": 17797,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 17768,
											"end": 17797,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17768,
											"end": 17797,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 17726,
											"end": 17867,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "442"
										},
										{
											"begin": 17726,
											"end": 17867,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 17726,
											"end": 17867,
											"name": "tag",
											"source": 2,
											"value": "441"
										},
										{
											"begin": 17726,
											"end": 17867,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17828,
											"end": 17846,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 17828,
											"end": 17856,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17828,
											"end": 17856,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17828,
											"end": 17856,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 17726,
											"end": 17867,
											"name": "tag",
											"source": 2,
											"value": "442"
										},
										{
											"begin": 17726,
											"end": 17867,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17932,
											"end": 17965,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "443"
										},
										{
											"begin": 17945,
											"end": 17964,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 17932,
											"end": 17944,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "244"
										},
										{
											"begin": 17932,
											"end": 17965,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 17932,
											"end": 17965,
											"name": "tag",
											"source": 2,
											"value": "443"
										},
										{
											"begin": 17932,
											"end": 17965,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 18013,
											"end": 18035,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 18013,
											"end": 18035,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 18013,
											"end": 18035,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 18013,
											"end": 18035,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18013,
											"end": 18035,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18013,
											"end": 18035,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18013,
											"end": 18023,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 18013,
											"end": 18035,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 18013,
											"end": 18035,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18013,
											"end": 18035,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 18013,
											"end": 18035,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18013,
											"end": 18035,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 18013,
											"end": 18035,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 18000,
											"end": 18045,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "444"
										},
										{
											"begin": 18000,
											"end": 18045,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18037,
											"end": 18044,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 18000,
											"end": 18012,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "268"
										},
										{
											"begin": 18000,
											"end": 18045,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 18000,
											"end": 18045,
											"name": "tag",
											"source": 2,
											"value": "444"
										},
										{
											"begin": 18000,
											"end": 18045,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 17975,
											"end": 17997,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 17975,
											"end": 17997,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 17975,
											"end": 17997,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17975,
											"end": 17997,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17975,
											"end": 17997,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17975,
											"end": 17997,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 17975,
											"end": 17985,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 17975,
											"end": 17997,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 17975,
											"end": 17997,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17975,
											"end": 17997,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17975,
											"end": 17997,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 17975,
											"end": 17997,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 17975,
											"end": 17997,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17975,
											"end": 17997,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 17975,
											"end": 17997,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 17975,
											"end": 18045,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 17975,
											"end": 18045,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17975,
											"end": 18045,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 17975,
											"end": 18045,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 18120,
											"end": 18135,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 18120,
											"end": 18135,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 18184,
											"end": 18194,
											"name": "PUSH",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 18184,
											"end": 18206,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 18184,
											"end": 18206,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18184,
											"end": 18206,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 18184,
											"end": 18206,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 18184,
											"end": 18206,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 18184,
											"end": 18225,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18184,
											"end": 18225,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 18120,
											"end": 18145,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 18120,
											"end": 18145,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 18120,
											"end": 18145,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 18184,
											"end": 18225,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 18184,
											"end": 18225,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18184,
											"end": 18225,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 18184,
											"end": 18225,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18184,
											"end": 18225,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18184,
											"end": 18225,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 18235,
											"end": 18245,
											"name": "PUSH",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 18235,
											"end": 18257,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18235,
											"end": 18257,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18235,
											"end": 18257,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 18235,
											"end": 18278,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18235,
											"end": 18278,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 18235,
											"end": 18278,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 18235,
											"end": 18278,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18235,
											"end": 18278,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18235,
											"end": 18278,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 18288,
											"end": 18320,
											"name": "PUSH",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 18288,
											"end": 18320,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18288,
											"end": 18325,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18288,
											"end": 18325,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 18288,
											"end": 18325,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18288,
											"end": 18325,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18288,
											"end": 18325,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 18138,
											"end": 18145,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 16843,
											"end": 18419,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 16843,
											"end": 18419,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 16843,
											"end": 18419,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 16843,
											"end": 18419,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 16843,
											"end": 18419,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 7288,
											"end": 7453,
											"name": "tag",
											"source": 8,
											"value": "402"
										},
										{
											"begin": 7288,
											"end": 7453,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7344,
											"end": 7348,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7368,
											"end": 7369,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7364,
											"end": 7365,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7364,
											"end": 7369,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 7360,
											"end": 7447,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 7360,
											"end": 7447,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "446"
										},
										{
											"begin": 7360,
											"end": 7447,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7392,
											"end": 7393,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7385,
											"end": 7393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "285"
										},
										{
											"begin": 7385,
											"end": 7393,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7360,
											"end": 7447,
											"name": "tag",
											"source": 8,
											"value": "446"
										},
										{
											"begin": 7360,
											"end": 7447,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7431,
											"end": 7436,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7431,
											"end": 7436,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7431,
											"end": 7436,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 7424,
											"end": 7436,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "285"
										},
										{
											"begin": 7424,
											"end": 7436,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "289"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1C0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CALLDATASIZE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CALLDATACOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "292"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "356"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "KECCAK256",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "450"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "449"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "450"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "OR",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "449"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "450"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "451"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "452"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "451"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "452"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "453"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "451"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "453"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										}
									],
									".data": {
										"245F15FF17F551913A7A18385165551503906A406F905AC1C2437281A7CD0CFE": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
										"27CC9C295B15A532BB1B5F9308F1D54813E694C2EBDD1C2CED210BFE52DCD57E": "29f64f6f46c82c5ecfa955fe7d093e63b4106b6dbe5193e00efd62c7384ef177",
										"51DDAA38748C0A1144620FB5BFE8EDAB31EA437571AD591A7734BBFD0429AEAE": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
										"9113BB53C2876A3805B2C9242029423FC540A728243CE887AB24C82CF119FBA3": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
										"9924EBDF1ADD33D25D4EF888E16131F0A5687B0580A36C21B5C301A6C462EFFE": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572"
									}
								}
							}
						},
						"methodIdentifiers": {
							"accountOf(address)": "8086b8ba",
							"balanceOf(address)": "70a08231",
							"bnbReceiver()": "d7c3771d",
							"buyPrice()": "8620410b",
							"calculateSharesReceived(uint256)": "e02e1e9c",
							"calculateTokensReceived(uint256)": "10d0ffdd",
							"checkImmunity(address)": "36599ead",
							"compound()": "f69e2046",
							"dailyEstimate(address)": "fbaf1bbd",
							"deposit(uint256)": "b6b55f25",
							"depositTo(address,uint256)": "ffaad6a5",
							"dividendsOf(address)": "0065318b",
							"donate(uint256)": "f14faf6f",
							"dripPoolBalance()": "aecb6d28",
							"dripRate()": "d3261592",
							"forDivs()": "1f38b9cd",
							"forPool()": "a01496de",
							"harvest()": "4641257d",
							"jpeg(uint256)": "b03cf5a7",
							"lastPayout()": "b9db102a",
							"lastRebaseTime()": "1924063e",
							"myEarnings()": "ffe6bbd8",
							"myTokens()": "949e8acd",
							"owner()": "8da5cb5b",
							"payoutFrequency()": "81fce645",
							"rebaseFrequency()": "89375abf",
							"renounceOwnership()": "715018a6",
							"requiredBalance()": "08560ace",
							"rewardToken()": "f7c618c1",
							"sellPrice()": "4b750334",
							"setFeeSplit(uint256,uint256)": "7e6335c7",
							"setImmunityToken(address[])": "f6db0da0",
							"stakingToken()": "72f702f3",
							"tokenAddress()": "9d76ea58",
							"tokenBalance(address)": "eedc966a",
							"totalBalance()": "ad7a672f",
							"totalClaims()": "41c61383",
							"totalDeposits()": "7d882097",
							"totalSupply()": "18160ddd",
							"totalTxs()": "537a39bb",
							"transfer(address,uint256)": "a9059cbb",
							"transferOwnership(address)": "f2fde38b",
							"users()": "f2020275",
							"withdraw(uint256)": "2e1a7d4d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_dripRate\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_compounded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onCompound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_deposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_contributed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onDonate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onDonateBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_divs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onSetFeeSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC721[]\",\"name\":\"oldOne\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"contract IERC721[]\",\"name\":\"newOne\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onSetImmunityToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"soldTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"accountOf\",\"outputs\":[{\"internalType\":\"uint256[14]\",\"name\":\"\",\"type\":\"uint256[14]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateSharesReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkImmunity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isImmune\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"dailyEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripRate\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forDivs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jpeg\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_divs\",\"type\":\"uint256\"}],\"name\":\"setFeeSplit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721[]\",\"name\":\"_contract\",\"type\":\"address[]\"}],\"name\":\"setImmunityToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTxs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DiamodSafe copy.sol\":\"DiamondSafe\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Address.sol\":{\"keccak256\":\"0xf6ef080fad8534f258b526768063c666e701b135ec3bde9bdffc77254e399515\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://043eada9acabd207d4aaa1706ca581c514ba75e8ec9183a805ff8d1f25ccd445\",\"dweb:/ipfs/QmU6fLUSyR7YSMVtcGtj5epEvpxDBERGMS5L92WG7JKQVH\"]},\"contracts/Context.sol\":{\"keccak256\":\"0xd3e88da8695a1d63936f7bbf3b3441056c44d167e679a80f9a1b5ffafb11fad9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://587786c556944a0a561b5f5ab16716263b42ca8dd6cc1102b75f4c4d1a802325\",\"dweb:/ipfs/QmU9Y13bBrVy2uE4TiHfPSTFQXV2BeUnxrMo135zRy7wJT\"]},\"contracts/DiamodSafe copy.sol\":{\"keccak256\":\"0x9f36b84d0fb1f4c3e9c170aba03961deb6de2541815782a08aa65cedd6fac654\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a798c70aed68feff98d57bd5a5ffae72697a817870c4b5870cb461f7f87290f1\",\"dweb:/ipfs/QmZEKqdooUgagn5NJvYFJmrbifsEJ2WMuGXNAfw3R6AQtp\"]},\"contracts/IERC20.sol\":{\"keccak256\":\"0x8435e8230e900d716b4261cebc91985b70e406e6fd433e9751b46a2f0553401a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0a82e9a70916b84548d3dcad593027da45cbcda310e5b07d3aa56cfa4f97628c\",\"dweb:/ipfs/Qmatc1Bx5fqGNoa9tnDFedThGaLQm69pB8Z7B85uxpacJv\"]},\"contracts/IERC721.sol\":{\"keccak256\":\"0xeb8c011452adc20505919f8025380c2c92a96417e37754891a124efe26d06104\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e5812d283c1ee0a50269953cc3978f60a6f5bf4892943a4351813631c786656f\",\"dweb:/ipfs/QmZED8YeS22yqkV86rYsR3CPSkLMD4S1m22DWChZD4jce5\"]},\"contracts/Ownable.sol\":{\"keccak256\":\"0xb00b01076641e395e084d4d608fa07c800b43d2e2e693da6c548144085ac58ef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3fa763a7012ab18e0949a4dc631033e2c95d6c877f8be570ef474d6a3f81ae6a\",\"dweb:/ipfs/QmauEsZiHVs7yjJrUjMb1oxCwJiBtjuuSDBoExaP63xMtD\"]},\"contracts/ReentrancyGuard.sol\":{\"keccak256\":\"0x1708aca5d9f35560a41b69378bd448df70eb7ae285a75cd87b10a2d037248cb6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2466087ea7d07fa6acced31fb9478109b880466f785ee1c6e707c257edff671b\",\"dweb:/ipfs/QmbzpJYc7cbG7BqPWD9sQYBi1ayPEnDKTfhJSPsa6BYme7\"]},\"contracts/SafeERC20.sol\":{\"keccak256\":\"0x018e2f7fedfb39f2695564356081fb76a5432c71f17ffa3a8bcd4b1af97f4daa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9630329ce796ce63e271c8b15492abf4553832ed1a1686001d98cc55889396cb\",\"dweb:/ipfs/QmQ1V92HceZ8nWVtj9nMw5eKDA7mFima3xb5WKriPvRwK9\"]},\"contracts/SafeMath.sol\":{\"keccak256\":\"0x7b40d5f6514615b0c86150398de33504aa339e8410905a4a19d7e337786355a6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1569afc3e523080ade628f2fa1c9460231d6c95722e250ee137f5f028508bdad\",\"dweb:/ipfs/QmTLLcqtALDcns5sMTPuK23pEACZCgoqu3VNpAs2fQkjrJ\"]},\"lib/utils/introspection/IERC165.sol\":{\"keccak256\":\"0xd7fb250e2e4263d67b5a44b6d2bfa04a28599e2e3f5691e68a0cf5dc21743604\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb0ba356d486a3efeab5c7db11efcbdd65a31e1bd832b522e12276ed8782c8c5\",\"dweb:/ipfs/QmeE3Y1WJu1SfjADtmZnm91neyQ2ukRvjAUeK36vVq71nK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2207,
								"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 2320,
								"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
								"label": "_status",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 339,
								"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
								"label": "stakingToken",
								"offset": 0,
								"slot": "2",
								"type": "t_contract(IERC20)2083"
							},
							{
								"astId": 341,
								"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
								"label": "requiredBalance",
								"offset": 0,
								"slot": "3",
								"type": "t_uint256"
							},
							{
								"astId": 343,
								"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
								"label": "tokenAddress",
								"offset": 0,
								"slot": "4",
								"type": "t_address"
							},
							{
								"astId": 345,
								"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
								"label": "bnbReceiver",
								"offset": 0,
								"slot": "5",
								"type": "t_address_payable"
							},
							{
								"astId": 348,
								"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
								"label": "jpeg",
								"offset": 0,
								"slot": "6",
								"type": "t_array(t_contract(IERC721)2199)dyn_storage"
							},
							{
								"astId": 350,
								"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
								"label": "users",
								"offset": 0,
								"slot": "7",
								"type": "t_uint256"
							},
							{
								"astId": 352,
								"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
								"label": "totalTxs",
								"offset": 0,
								"slot": "8",
								"type": "t_uint256"
							},
							{
								"astId": 354,
								"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
								"label": "lastPayout",
								"offset": 0,
								"slot": "9",
								"type": "t_uint256"
							},
							{
								"astId": 356,
								"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
								"label": "totalClaims",
								"offset": 0,
								"slot": "10",
								"type": "t_uint256"
							},
							{
								"astId": 358,
								"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
								"label": "totalDeposits",
								"offset": 0,
								"slot": "11",
								"type": "t_uint256"
							},
							{
								"astId": 360,
								"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
								"label": "dripPoolBalance",
								"offset": 0,
								"slot": "12",
								"type": "t_uint256"
							},
							{
								"astId": 362,
								"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
								"label": "dripRate",
								"offset": 0,
								"slot": "13",
								"type": "t_uint8"
							},
							{
								"astId": 364,
								"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
								"label": "rewardToken",
								"offset": 1,
								"slot": "13",
								"type": "t_contract(IERC20)2083"
							},
							{
								"astId": 374,
								"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
								"label": "forPool",
								"offset": 0,
								"slot": "14",
								"type": "t_uint256"
							},
							{
								"astId": 376,
								"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
								"label": "forDivs",
								"offset": 0,
								"slot": "15",
								"type": "t_uint256"
							},
							{
								"astId": 384,
								"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
								"label": "lastRebaseTime",
								"offset": 0,
								"slot": "16",
								"type": "t_uint256"
							},
							{
								"astId": 386,
								"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
								"label": "currentTotalStaked",
								"offset": 0,
								"slot": "17",
								"type": "t_uint256"
							},
							{
								"astId": 388,
								"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
								"label": "profitPerShare_",
								"offset": 0,
								"slot": "18",
								"type": "t_uint256"
							},
							{
								"astId": 445,
								"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
								"label": "payoutsOf_",
								"offset": 0,
								"slot": "19",
								"type": "t_mapping(t_address,t_int256)"
							},
							{
								"astId": 449,
								"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
								"label": "balanceOf_",
								"offset": 0,
								"slot": "20",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 453,
								"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
								"label": "accountOf_",
								"offset": 0,
								"slot": "21",
								"type": "t_mapping(t_address,t_struct(Account)441_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_address_payable": {
								"encoding": "inplace",
								"label": "address payable",
								"numberOfBytes": "20"
							},
							"t_array(t_contract(IERC721)2199)dyn_storage": {
								"base": "t_contract(IERC721)2199",
								"encoding": "dynamic_array",
								"label": "contract IERC721[]",
								"numberOfBytes": "32"
							},
							"t_contract(IERC20)2083": {
								"encoding": "inplace",
								"label": "contract IERC20",
								"numberOfBytes": "20"
							},
							"t_contract(IERC721)2199": {
								"encoding": "inplace",
								"label": "contract IERC721",
								"numberOfBytes": "20"
							},
							"t_int256": {
								"encoding": "inplace",
								"label": "int256",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_int256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => int256)",
								"numberOfBytes": "32",
								"value": "t_int256"
							},
							"t_mapping(t_address,t_struct(Account)441_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct DiamondSafe.Account)",
								"numberOfBytes": "32",
								"value": "t_struct(Account)441_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_struct(Account)441_storage": {
								"encoding": "inplace",
								"label": "struct DiamondSafe.Account",
								"members": [
									{
										"astId": 412,
										"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
										"label": "deposited",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 414,
										"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
										"label": "rewards",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 416,
										"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
										"label": "withdrawn",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 418,
										"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
										"label": "compounded",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 420,
										"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
										"label": "rewarded",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									},
									{
										"astId": 422,
										"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
										"label": "contributed",
										"offset": 0,
										"slot": "5",
										"type": "t_uint256"
									},
									{
										"astId": 424,
										"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
										"label": "transferredShares",
										"offset": 0,
										"slot": "6",
										"type": "t_uint256"
									},
									{
										"astId": 426,
										"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
										"label": "receivedShares",
										"offset": 0,
										"slot": "7",
										"type": "t_uint256"
									},
									{
										"astId": 428,
										"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
										"label": "xInvested",
										"offset": 0,
										"slot": "8",
										"type": "t_uint256"
									},
									{
										"astId": 430,
										"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
										"label": "xCompounded",
										"offset": 0,
										"slot": "9",
										"type": "t_uint256"
									},
									{
										"astId": 432,
										"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
										"label": "xRewarded",
										"offset": 0,
										"slot": "10",
										"type": "t_uint256"
									},
									{
										"astId": 434,
										"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
										"label": "xContributed",
										"offset": 0,
										"slot": "11",
										"type": "t_uint256"
									},
									{
										"astId": 436,
										"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
										"label": "xWithdrawn",
										"offset": 0,
										"slot": "12",
										"type": "t_uint256"
									},
									{
										"astId": 438,
										"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
										"label": "xTransferredShares",
										"offset": 0,
										"slot": "13",
										"type": "t_uint256"
									},
									{
										"astId": 440,
										"contract": "contracts/DiamodSafe copy.sol:DiamondSafe",
										"label": "xReceivedShares",
										"offset": 0,
										"slot": "14",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "480"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IERC20.sol\":{\"keccak256\":\"0x8435e8230e900d716b4261cebc91985b70e406e6fd433e9751b46a2f0553401a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0a82e9a70916b84548d3dcad593027da45cbcda310e5b07d3aa56cfa4f97628c\",\"dweb:/ipfs/Qmatc1Bx5fqGNoa9tnDFedThGaLQm69pB8Z7B85uxpacJv\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IERC721.sol\":{\"keccak256\":\"0xeb8c011452adc20505919f8025380c2c92a96417e37754891a124efe26d06104\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e5812d283c1ee0a50269953cc3978f60a6f5bf4892943a4351813631c786656f\",\"dweb:/ipfs/QmZED8YeS22yqkV86rYsR3CPSkLMD4S1m22DWChZD4jce5\"]},\"lib/utils/introspection/IERC165.sol\":{\"keccak256\":\"0xd7fb250e2e4263d67b5a44b6d2bfa04a28599e2e3f5691e68a0cf5dc21743604\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb0ba356d486a3efeab5c7db11efcbdd65a31e1bd832b522e12276ed8782c8c5\",\"dweb:/ipfs/QmeE3Y1WJu1SfjADtmZnm91neyQ2ukRvjAUeK36vVq71nK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Context.sol\":{\"keccak256\":\"0xd3e88da8695a1d63936f7bbf3b3441056c44d167e679a80f9a1b5ffafb11fad9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://587786c556944a0a561b5f5ab16716263b42ca8dd6cc1102b75f4c4d1a802325\",\"dweb:/ipfs/QmU9Y13bBrVy2uE4TiHfPSTFQXV2BeUnxrMo135zRy7wJT\"]},\"contracts/Ownable.sol\":{\"keccak256\":\"0xb00b01076641e395e084d4d608fa07c800b43d2e2e693da6c548144085ac58ef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3fa763a7012ab18e0949a4dc631033e2c95d6c877f8be570ef474d6a3f81ae6a\",\"dweb:/ipfs/QmauEsZiHVs7yjJrUjMb1oxCwJiBtjuuSDBoExaP63xMtD\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2207,
								"contract": "contracts/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ReentrancyGuard.sol\":{\"keccak256\":\"0x1708aca5d9f35560a41b69378bd448df70eb7ae285a75cd87b10a2d037248cb6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2466087ea7d07fa6acced31fb9478109b880466f785ee1c6e707c257edff671b\",\"dweb:/ipfs/QmbzpJYc7cbG7BqPWD9sQYBi1ayPEnDKTfhJSPsa6BYme7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2320,
								"contract": "contracts/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/SafeERC20.sol\":597:3701  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/SafeERC20.sol\":597:3701  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220f63def9b74c7776361776ac7770f1c288af52317bbbbb733d598e757e7c07d8764736f6c63430007040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f63def9b74c7776361776ac7770f1c288af52317bbbbb733d598e757e7c07d8764736f6c63430007040033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF6 RETURNDATASIZE 0xEF SWAP12 PUSH21 0xC7776361776AC7770F1C288AF52317BBBBB733D598 0xE7 JUMPI 0xE7 0xC0 PUSH30 0x8764736F6C63430007040033000000000000000000000000000000000000 ",
							"sourceMap": "597:3104:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f63def9b74c7776361776ac7770f1c288af52317bbbbb733d598e757e7c07d8764736f6c63430007040033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF6 RETURNDATASIZE 0xEF SWAP12 PUSH21 0xC7776361776AC7770F1C288AF52317BBBBB733D598 0xE7 JUMPI 0xE7 0xC0 PUSH30 0x8764736F6C63430007040033000000000000000000000000000000000000 ",
							"sourceMap": "597:3104:7:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 597,
									"end": 3701,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "PUSH",
									"source": 7,
									"value": "B"
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "BYTE",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "INVALID",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "MSTORE8",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 597,
									"end": 3701,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f63def9b74c7776361776ac7770f1c288af52317bbbbb733d598e757e7c07d8764736f6c63430007040033",
									".code": [
										{
											"begin": 597,
											"end": 3701,
											"name": "PUSHDEPLOYADDRESS",
											"source": 7
										},
										{
											"begin": 597,
											"end": 3701,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 597,
											"end": 3701,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 597,
											"end": 3701,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 597,
											"end": 3701,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 597,
											"end": 3701,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 597,
											"end": 3701,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 597,
											"end": 3701,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 597,
											"end": 3701,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Address.sol\":{\"keccak256\":\"0xf6ef080fad8534f258b526768063c666e701b135ec3bde9bdffc77254e399515\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://043eada9acabd207d4aaa1706ca581c514ba75e8ec9183a805ff8d1f25ccd445\",\"dweb:/ipfs/QmU6fLUSyR7YSMVtcGtj5epEvpxDBERGMS5L92WG7JKQVH\"]},\"contracts/IERC20.sol\":{\"keccak256\":\"0x8435e8230e900d716b4261cebc91985b70e406e6fd433e9751b46a2f0553401a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0a82e9a70916b84548d3dcad593027da45cbcda310e5b07d3aa56cfa4f97628c\",\"dweb:/ipfs/Qmatc1Bx5fqGNoa9tnDFedThGaLQm69pB8Z7B85uxpacJv\"]},\"contracts/SafeERC20.sol\":{\"keccak256\":\"0x018e2f7fedfb39f2695564356081fb76a5432c71f17ffa3a8bcd4b1af97f4daa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9630329ce796ce63e271c8b15492abf4553832ed1a1686001d98cc55889396cb\",\"dweb:/ipfs/QmQ1V92HceZ8nWVtj9nMw5eKDA7mFima3xb5WKriPvRwK9\"]},\"contracts/SafeMath.sol\":{\"keccak256\":\"0x7b40d5f6514615b0c86150398de33504aa339e8410905a4a19d7e337786355a6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1569afc3e523080ade628f2fa1c9460231d6c95722e250ee137f5f028508bdad\",\"dweb:/ipfs/QmTLLcqtALDcns5sMTPuK23pEACZCgoqu3VNpAs2fQkjrJ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/SafeMath.sol\":630:7455  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/SafeMath.sol\":630:7455  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122045d65c3e38c393f34dd775b0471b94f64c55752f9b5a0d0f5827d56dbb16747764736f6c63430007040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122045d65c3e38c393f34dd775b0471b94f64c55752f9b5a0d0f5827d56dbb16747764736f6c63430007040033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GASLIMIT 0xD6 0x5C RETURNDATACOPY CODESIZE 0xC3 SWAP4 RETURN 0x4D 0xD7 PUSH22 0xB0471B94F64C55752F9B5A0D0F5827D56DBB16747764 PUSH20 0x6F6C634300070400330000000000000000000000 ",
							"sourceMap": "630:6825:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122045d65c3e38c393f34dd775b0471b94f64c55752f9b5a0d0f5827d56dbb16747764736f6c63430007040033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GASLIMIT 0xD6 0x5C RETURNDATACOPY CODESIZE 0xC3 SWAP4 RETURN 0x4D 0xD7 PUSH22 0xB0471B94F64C55752F9B5A0D0F5827D56DBB16747764 PUSH20 0x6F6C634300070400330000000000000000000000 ",
							"sourceMap": "630:6825:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"safeSub(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 630,
									"end": 7455,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "INVALID",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 630,
									"end": 7455,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122045d65c3e38c393f34dd775b0471b94f64c55752f9b5a0d0f5827d56dbb16747764736f6c63430007040033",
									".code": [
										{
											"begin": 630,
											"end": 7455,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 630,
											"end": 7455,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 630,
											"end": 7455,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 630,
											"end": 7455,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 630,
											"end": 7455,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 630,
											"end": 7455,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 630,
											"end": 7455,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 630,
											"end": 7455,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 630,
											"end": 7455,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SafeMath.sol\":{\"keccak256\":\"0x7b40d5f6514615b0c86150398de33504aa339e8410905a4a19d7e337786355a6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1569afc3e523080ade628f2fa1c9460231d6c95722e250ee137f5f028508bdad\",\"dweb:/ipfs/QmTLLcqtALDcns5sMTPuK23pEACZCgoqu3VNpAs2fQkjrJ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/utils/introspection/IERC165.sol\":{\"keccak256\":\"0xd7fb250e2e4263d67b5a44b6d2bfa04a28599e2e3f5691e68a0cf5dc21743604\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb0ba356d486a3efeab5c7db11efcbdd65a31e1bd832b522e12276ed8782c8c5\",\"dweb:/ipfs/QmeE3Y1WJu1SfjADtmZnm91neyQ2ukRvjAUeK36vVq71nK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "2462",
				"formattedMessage": "contracts/Ownable.sol:26:5: Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.\n    constructor () internal {\n    ^ (Relevant source part starts here and spans across multiple lines).\n",
				"message": "Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.",
				"severity": "warning",
				"sourceLocation": {
					"end": 1002,
					"file": "contracts/Ownable.sol",
					"start": 843
				},
				"type": "Warning"
			}
		],
		"sources": {
			"contracts/Address.sol": {
				"ast": {
					"absolutePath": "contracts/Address.sol",
					"exportedSymbols": {
						"Address": [
							295
						]
					},
					"id": 296,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".2",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "66:67:0",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 295,
							"linearizedBaseContracts": [
								295
							],
							"name": "Address",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 18,
										"nodeType": "Block",
										"src": "792:347:0",
										"statements": [
											{
												"assignments": [
													11
												],
												"declarations": [
													{
														"constant": false,
														"id": 11,
														"mutability": "mutable",
														"name": "size",
														"nodeType": "VariableDeclaration",
														"scope": 18,
														"src": "989:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 10,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "989:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 12,
												"nodeType": "VariableDeclarationStatement",
												"src": "989:12:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1076:32:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1078:28:0",
															"value": {
																"arguments": [
																	{
																		"name": "account",
																		"nodeType": "YulIdentifier",
																		"src": "1098:7:0"
																	}
																],
																"functionName": {
																	"name": "extcodesize",
																	"nodeType": "YulIdentifier",
																	"src": "1086:11:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "1086:20:0"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "1078:4:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 5,
														"isOffset": false,
														"isSlot": false,
														"src": "1098:7:0",
														"valueSize": 1
													},
													{
														"declaration": 11,
														"isOffset": false,
														"isSlot": false,
														"src": "1078:4:0",
														"valueSize": 1
													}
												],
												"id": 13,
												"nodeType": "InlineAssembly",
												"src": "1067:41:0"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 16,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 14,
														"name": "size",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 11,
														"src": "1124:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 15,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1131:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1124:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 9,
												"id": 17,
												"nodeType": "Return",
												"src": "1117:15:0"
											}
										]
									},
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "156:565:0",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ===="
									},
									"id": 19,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 19,
												"src": "746:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "746:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "745:17:0"
									},
									"returnParameters": {
										"id": 9,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 8,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 19,
												"src": "786:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 7,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "786:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "785:6:0"
									},
									"scope": 295,
									"src": "726:413:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 52,
										"nodeType": "Block",
										"src": "2127:320:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 34,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 30,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "2153:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$295",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$295",
																				"typeString": "library Address"
																			}
																		],
																		"id": 29,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2145:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 28,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2145:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 31,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2145:13:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 32,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2145:21:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 33,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 24,
																"src": "2170:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2145:31:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 35,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2178:31:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 27,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2137:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 36,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2137:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 37,
												"nodeType": "ExpressionStatement",
												"src": "2137:73:0"
											},
											{
												"assignments": [
													39,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 39,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 52,
														"src": "2299:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 38,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2299:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 46,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 44,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2349:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 40,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 22,
																"src": "2317:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2317:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 43,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 42,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 24,
																"src": "2340:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2317:31:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 45,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2317:35:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2298:54:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 48,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 39,
															"src": "2370:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2379:60:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 47,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2362:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 50,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2362:78:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 51,
												"nodeType": "ExpressionStatement",
												"src": "2362:78:0"
											}
										]
									},
									"documentation": {
										"id": 20,
										"nodeType": "StructuredDocumentation",
										"src": "1145:906:0",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 53,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 22,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 53,
												"src": "2075:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2075:15:0",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 53,
												"src": "2102:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 23,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2102:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2074:43:0"
									},
									"returnParameters": {
										"id": 26,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2127:0:0"
									},
									"scope": 295,
									"src": "2056:391:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 69,
										"nodeType": "Block",
										"src": "3277:82:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 64,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 56,
															"src": "3305:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 65,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 58,
															"src": "3313:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 66,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3319:32:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 63,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															70,
															90
														],
														"referencedDeclaration": 90,
														"src": "3292:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 67,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3292:60:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 62,
												"id": 68,
												"nodeType": "Return",
												"src": "3285:67:0"
											}
										]
									},
									"documentation": {
										"id": 54,
										"nodeType": "StructuredDocumentation",
										"src": "2453:730:0",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain`call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 70,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 56,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "3210:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 55,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3210:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 58,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "3226:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 57,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3226:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3209:35:0"
									},
									"returnParameters": {
										"id": 62,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 61,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "3263:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 60,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3263:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3262:14:0"
									},
									"scope": 295,
									"src": "3188:171:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 89,
										"nodeType": "Block",
										"src": "3698:76:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 83,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 73,
															"src": "3737:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 84,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 75,
															"src": "3745:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 85,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3751:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 86,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 77,
															"src": "3754:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 82,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															110,
															160
														],
														"referencedDeclaration": 160,
														"src": "3715:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 87,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3715:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 81,
												"id": 88,
												"nodeType": "Return",
												"src": "3708:59:0"
											}
										]
									},
									"documentation": {
										"id": 71,
										"nodeType": "StructuredDocumentation",
										"src": "3365:211:0",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 90,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 78,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 73,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "3603:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 72,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3603:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 75,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "3619:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 74,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3619:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 77,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "3638:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 76,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3638:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3602:63:0"
									},
									"returnParameters": {
										"id": 81,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "3684:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 79,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3684:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3683:14:0"
									},
									"scope": 295,
									"src": "3581:193:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 109,
										"nodeType": "Block",
										"src": "4249:111:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 103,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 93,
															"src": "4288:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 104,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 95,
															"src": "4296:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 105,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 97,
															"src": "4302:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 106,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4309:43:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 102,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															110,
															160
														],
														"referencedDeclaration": 160,
														"src": "4266:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 107,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4266:87:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 101,
												"id": 108,
												"nodeType": "Return",
												"src": "4259:94:0"
											}
										]
									},
									"documentation": {
										"id": 91,
										"nodeType": "StructuredDocumentation",
										"src": "3780:351:0",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 110,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 98,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "4167:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 92,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4167:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 95,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "4183:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 94,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4183:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "4202:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 96,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4202:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4166:50:0"
									},
									"returnParameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 100,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "4235:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 99,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4235:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4234:14:0"
									},
									"scope": 295,
									"src": "4136:224:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 159,
										"nodeType": "Block",
										"src": "4749:382:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 131,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 127,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "4775:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$295",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$295",
																				"typeString": "library Address"
																			}
																		],
																		"id": 126,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4767:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 125,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4767:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 128,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4767:13:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 129,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "4767:21:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 130,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 117,
																"src": "4792:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4767:30:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 132,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4799:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 124,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4759:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 133,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4759:81:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 134,
												"nodeType": "ExpressionStatement",
												"src": "4759:81:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 137,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 113,
																	"src": "4869:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 136,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 19,
																"src": "4858:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 138,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4858:18:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 139,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4878:31:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 135,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4850:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 140,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4850:60:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 141,
												"nodeType": "ExpressionStatement",
												"src": "4850:60:0"
											},
											{
												"assignments": [
													143,
													145
												],
												"declarations": [
													{
														"constant": false,
														"id": 143,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 159,
														"src": "4981:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 142,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4981:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 145,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 159,
														"src": "4995:23:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 144,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4995:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 152,
												"initialValue": {
													"arguments": [
														{
															"id": 150,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 115,
															"src": "5050:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 146,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 113,
																"src": "5022:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 147,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5022:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 149,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 148,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 117,
																"src": "5042:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5022:27:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 151,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5022:33:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4980:75:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 154,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 143,
															"src": "5090:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 155,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 145,
															"src": "5099:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 156,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 119,
															"src": "5111:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 153,
														"name": "_verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 294,
														"src": "5072:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 157,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5072:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 123,
												"id": 158,
												"nodeType": "Return",
												"src": "5065:59:0"
											}
										]
									},
									"documentation": {
										"id": 111,
										"nodeType": "StructuredDocumentation",
										"src": "4366:237:0",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 160,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 113,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "4639:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 112,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4639:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 115,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "4655:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 114,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4655:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 117,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "4674:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4674:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 119,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "4689:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 118,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4689:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4638:78:0"
									},
									"returnParameters": {
										"id": 123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 122,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "4735:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 121,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4735:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4734:14:0"
									},
									"scope": 295,
									"src": "4608:523:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 176,
										"nodeType": "Block",
										"src": "5408:97:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 171,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 163,
															"src": "5444:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 172,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 165,
															"src": "5452:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 173,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5458:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 170,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															177,
															212
														],
														"referencedDeclaration": 212,
														"src": "5425:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 174,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5425:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 169,
												"id": 175,
												"nodeType": "Return",
												"src": "5418:80:0"
											}
										]
									},
									"documentation": {
										"id": 161,
										"nodeType": "StructuredDocumentation",
										"src": "5137:166:0",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 177,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "5336:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 162,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5336:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 165,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "5352:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 164,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5352:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5335:35:0"
									},
									"returnParameters": {
										"id": 169,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 168,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "5394:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 167,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5394:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5393:14:0"
									},
									"scope": 295,
									"src": "5308:197:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 211,
										"nodeType": "Block",
										"src": "5817:288:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 191,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 180,
																	"src": "5846:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 190,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 19,
																"src": "5835:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 192,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5835:18:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 193,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5855:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 189,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "5827:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 194,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5827:67:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 195,
												"nodeType": "ExpressionStatement",
												"src": "5827:67:0"
											},
											{
												"assignments": [
													197,
													199
												],
												"declarations": [
													{
														"constant": false,
														"id": 197,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 211,
														"src": "5965:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 196,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5965:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 199,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 211,
														"src": "5979:23:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 198,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5979:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 204,
												"initialValue": {
													"arguments": [
														{
															"id": 202,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 182,
															"src": "6024:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 200,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 180,
															"src": "6006:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 201,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6006:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 203,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6006:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5964:65:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 206,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 197,
															"src": "6064:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 207,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 199,
															"src": "6073:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 208,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 184,
															"src": "6085:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 205,
														"name": "_verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 294,
														"src": "6046:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 209,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6046:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 188,
												"id": 210,
												"nodeType": "Return",
												"src": "6039:59:0"
											}
										]
									},
									"documentation": {
										"id": 178,
										"nodeType": "StructuredDocumentation",
										"src": "5511:173:0",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 212,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "5717:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 179,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5717:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 182,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "5733:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 181,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5733:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "5752:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 183,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5752:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5716:63:0"
									},
									"returnParameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "5803:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 186,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5803:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5802:14:0"
									},
									"scope": 295,
									"src": "5689:416:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 228,
										"nodeType": "Block",
										"src": "6381:101:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 223,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 215,
															"src": "6419:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 224,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 217,
															"src": "6427:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 225,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6433:41:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 222,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															229,
															264
														],
														"referencedDeclaration": 264,
														"src": "6398:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 226,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6398:77:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 221,
												"id": 227,
												"nodeType": "Return",
												"src": "6391:84:0"
											}
										]
									},
									"documentation": {
										"id": 213,
										"nodeType": "StructuredDocumentation",
										"src": "6111:168:0",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 229,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "6314:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 214,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6314:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "6330:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 216,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6330:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6313:35:0"
									},
									"returnParameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "6367:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 219,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6367:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6366:14:0"
									},
									"scope": 295,
									"src": "6284:198:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 263,
										"nodeType": "Block",
										"src": "6793:292:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 243,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 232,
																	"src": "6822:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 242,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 19,
																"src": "6811:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 244,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6811:18:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 245,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6831:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															},
															"value": "Address: delegate call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															}
														],
														"id": 241,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "6803:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 246,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6803:69:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 247,
												"nodeType": "ExpressionStatement",
												"src": "6803:69:0"
											},
											{
												"assignments": [
													249,
													251
												],
												"declarations": [
													{
														"constant": false,
														"id": 249,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 263,
														"src": "6943:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 248,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6943:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 251,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 263,
														"src": "6957:23:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 250,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6957:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 256,
												"initialValue": {
													"arguments": [
														{
															"id": 254,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 234,
															"src": "7004:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 252,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 232,
															"src": "6984:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 253,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "6984:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6984:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6942:67:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 258,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 249,
															"src": "7044:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 259,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 251,
															"src": "7053:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 260,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 236,
															"src": "7065:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 257,
														"name": "_verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 294,
														"src": "7026:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 261,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7026:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 240,
												"id": 262,
												"nodeType": "Return",
												"src": "7019:59:0"
											}
										]
									},
									"documentation": {
										"id": 230,
										"nodeType": "StructuredDocumentation",
										"src": "6488:175:0",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 264,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 232,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "6698:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 231,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6698:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "6714:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 233,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6714:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "6733:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 235,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6733:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6697:63:0"
									},
									"returnParameters": {
										"id": 240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "6779:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 238,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6779:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6778:14:0"
									},
									"scope": 295,
									"src": "6668:417:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 293,
										"nodeType": "Block",
										"src": "7220:596:0",
										"statements": [
											{
												"condition": {
													"id": 275,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 266,
													"src": "7234:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 291,
													"nodeType": "Block",
													"src": "7291:519:0",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 282,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 279,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 268,
																		"src": "7375:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 280,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7375:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 281,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7395:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7375:21:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 289,
																"nodeType": "Block",
																"src": "7747:53:0",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 286,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 270,
																					"src": "7772:12:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 285,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					-19,
																					-19
																				],
																				"referencedDeclaration": -19,
																				"src": "7765:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 287,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7765:20:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 288,
																		"nodeType": "ExpressionStatement",
																		"src": "7765:20:0"
																	}
																]
															},
															"id": 290,
															"nodeType": "IfStatement",
															"src": "7371:429:0",
															"trueBody": {
																"id": 284,
																"nodeType": "Block",
																"src": "7398:343:0",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "7582:145:0",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "7604:40:0",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "7633:10:0"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "7627:5:0"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7627:17:0"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "7608:15:0",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "7676:2:0",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "7680:10:0"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "7672:3:0"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "7672:19:0"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "7693:15:0"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "7665:6:0"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7665:44:0"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "7665:44:0"
																				}
																			]
																		},
																		"evmVersion": "istanbul",
																		"externalReferences": [
																			{
																				"declaration": 268,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "7633:10:0",
																				"valueSize": 1
																			},
																			{
																				"declaration": 268,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "7680:10:0",
																				"valueSize": 1
																			}
																		],
																		"id": 283,
																		"nodeType": "InlineAssembly",
																		"src": "7573:154:0"
																	}
																]
															}
														}
													]
												},
												"id": 292,
												"nodeType": "IfStatement",
												"src": "7230:580:0",
												"trueBody": {
													"id": 278,
													"nodeType": "Block",
													"src": "7243:42:0",
													"statements": [
														{
															"expression": {
																"id": 276,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 268,
																"src": "7264:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 274,
															"id": 277,
															"nodeType": "Return",
															"src": "7257:17:0"
														}
													]
												}
											}
										]
									},
									"id": 294,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_verifyCallResult",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 266,
												"mutability": "mutable",
												"name": "success",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "7118:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 265,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7118:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 268,
												"mutability": "mutable",
												"name": "returndata",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "7132:23:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 267,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7132:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "7157:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 269,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7157:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7117:67:0"
									},
									"returnParameters": {
										"id": 274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 273,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "7206:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 272,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7206:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7205:14:0"
									},
									"scope": 295,
									"src": "7091:725:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 296,
							"src": "134:7684:0"
						}
					],
					"src": "33:7785:0"
				},
				"id": 0
			},
			"contracts/Context.sol": {
				"ast": {
					"absolutePath": "contracts/Context.sol",
					"exportedSymbols": {
						"Context": [
							318
						]
					},
					"id": 319,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 297,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 318,
							"linearizedBaseContracts": [
								318
							],
							"name": "Context",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 305,
										"nodeType": "Block",
										"src": "668:34:1",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 302,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -15,
														"src": "685:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 303,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "685:10:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"functionReturnParameters": 301,
												"id": 304,
												"nodeType": "Return",
												"src": "678:17:1"
											}
										]
									},
									"id": 306,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 298,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "617:2:1"
									},
									"returnParameters": {
										"id": 301,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 300,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 306,
												"src": "651:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 299,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "651:15:1",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "650:17:1"
									},
									"scope": 318,
									"src": "598:104:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 316,
										"nodeType": "Block",
										"src": "773:165:1",
										"statements": [
											{
												"expression": {
													"id": 311,
													"name": "this",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": -28,
													"src": "783:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_Context_$318",
														"typeString": "contract Context"
													}
												},
												"id": 312,
												"nodeType": "ExpressionStatement",
												"src": "783:4:1"
											},
											{
												"expression": {
													"expression": {
														"id": 313,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -15,
														"src": "923:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 314,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "923:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 310,
												"id": 315,
												"nodeType": "Return",
												"src": "916:15:1"
											}
										]
									},
									"id": 317,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 307,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "725:2:1"
									},
									"returnParameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "759:12:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 308,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "759:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "758:14:1"
									},
									"scope": 318,
									"src": "708:230:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 319,
							"src": "566:374:1"
						}
					],
					"src": "33:907:1"
				},
				"id": 1
			},
			"contracts/DiamodSafe copy.sol": {
				"ast": {
					"absolutePath": "contracts/DiamodSafe copy.sol",
					"exportedSymbols": {
						"Address": [
							295
						],
						"Context": [
							318
						],
						"DiamondSafe": [
							2005
						],
						"IERC165": [
							2976
						],
						"IERC20": [
							2083
						],
						"IERC721": [
							2199
						],
						"Ownable": [
							2309
						],
						"ReentrancyGuard": [
							2374
						],
						"SafeERC20": [
							2587
						],
						"SafeMath": [
							2964
						]
					},
					"id": 2006,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 320,
							"literals": [
								"solidity",
								"0.7",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:22:2"
						},
						{
							"absolutePath": "contracts/Address.sol",
							"file": "./Address.sol",
							"id": 321,
							"nodeType": "ImportDirective",
							"scope": 2006,
							"sourceUnit": 296,
							"src": "56:23:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/SafeMath.sol",
							"file": "./SafeMath.sol",
							"id": 322,
							"nodeType": "ImportDirective",
							"scope": 2006,
							"sourceUnit": 2965,
							"src": "80:24:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/SafeERC20.sol",
							"file": "./SafeERC20.sol",
							"id": 323,
							"nodeType": "ImportDirective",
							"scope": 2006,
							"sourceUnit": 2588,
							"src": "105:25:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 324,
							"nodeType": "ImportDirective",
							"scope": 2006,
							"sourceUnit": 2084,
							"src": "132:22:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/Ownable.sol",
							"file": "./Ownable.sol",
							"id": 325,
							"nodeType": "ImportDirective",
							"scope": 2006,
							"sourceUnit": 2310,
							"src": "156:23:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/IERC721.sol",
							"file": "./IERC721.sol",
							"id": 326,
							"nodeType": "ImportDirective",
							"scope": 2006,
							"sourceUnit": 2200,
							"src": "180:23:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/ReentrancyGuard.sol",
							"file": "./ReentrancyGuard.sol",
							"id": 327,
							"nodeType": "ImportDirective",
							"scope": 2006,
							"sourceUnit": 2375,
							"src": "204:31:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 328,
										"name": "Ownable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2309,
										"src": "261:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Ownable_$2309",
											"typeString": "contract Ownable"
										}
									},
									"id": 329,
									"nodeType": "InheritanceSpecifier",
									"src": "261:7:2"
								},
								{
									"baseName": {
										"id": 330,
										"name": "ReentrancyGuard",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2374,
										"src": "270:15:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ReentrancyGuard_$2374",
											"typeString": "contract ReentrancyGuard"
										}
									},
									"id": 331,
									"nodeType": "InheritanceSpecifier",
									"src": "270:15:2"
								}
							],
							"contractDependencies": [
								318,
								2309,
								2374
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 2005,
							"linearizedBaseContracts": [
								2005,
								2374,
								2309,
								318
							],
							"name": "DiamondSafe",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 334,
									"libraryName": {
										"id": 332,
										"name": "SafeERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2587,
										"src": "298:9:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeERC20_$2587",
											"typeString": "library SafeERC20"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "292:27:2",
									"typeName": {
										"id": 333,
										"name": "IERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2083,
										"src": "312:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$2083",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"id": 337,
									"libraryName": {
										"id": 335,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2964,
										"src": "330:8:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$2964",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "324:24:2",
									"typeName": {
										"id": 336,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "343:4:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "72f702f3",
									"id": 339,
									"mutability": "mutable",
									"name": "stakingToken",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "394:26:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$2083",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 338,
										"name": "IERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2083,
										"src": "394:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$2083",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "08560ace",
									"id": 341,
									"mutability": "mutable",
									"name": "requiredBalance",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "587:30:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 340,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "587:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "9d76ea58",
									"id": 343,
									"mutability": "mutable",
									"name": "tokenAddress",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "699:27:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 342,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "699:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "d7c3771d",
									"id": 345,
									"mutability": "mutable",
									"name": "bnbReceiver",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "732:34:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address_payable",
										"typeString": "address payable"
									},
									"typeName": {
										"id": 344,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "732:15:2",
										"stateMutability": "payable",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b03cf5a7",
									"id": 348,
									"mutability": "mutable",
									"name": "jpeg",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "772:21:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_contract$_IERC721_$2199_$dyn_storage",
										"typeString": "contract IERC721[]"
									},
									"typeName": {
										"baseType": {
											"id": 346,
											"name": "IERC721",
											"nodeType": "UserDefinedTypeName",
											"referencedDeclaration": 2199,
											"src": "772:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_IERC721_$2199",
												"typeString": "contract IERC721"
											}
										},
										"id": 347,
										"nodeType": "ArrayTypeName",
										"src": "772:9:2",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_contract$_IERC721_$2199_$dyn_storage_ptr",
											"typeString": "contract IERC721[]"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "f2020275",
									"id": 350,
									"mutability": "mutable",
									"name": "users",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "854:17:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 349,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "854:4:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "537a39bb",
									"id": 352,
									"mutability": "mutable",
									"name": "totalTxs",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "877:20:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 351,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "877:4:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b9db102a",
									"id": 354,
									"mutability": "mutable",
									"name": "lastPayout",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "975:22:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 353,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "975:4:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "41c61383",
									"id": 356,
									"mutability": "mutable",
									"name": "totalClaims",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "1102:23:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 355,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "1102:4:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "7d882097",
									"id": 358,
									"mutability": "mutable",
									"name": "totalDeposits",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "1131:25:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 357,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "1131:4:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "aecb6d28",
									"id": 360,
									"mutability": "mutable",
									"name": "dripPoolBalance",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "1213:27:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 359,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "1213:4:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "d3261592",
									"id": 362,
									"mutability": "mutable",
									"name": "dripRate",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "1246:21:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 361,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "1246:5:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "f7c618c1",
									"id": 364,
									"mutability": "mutable",
									"name": "rewardToken",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "1273:25:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$2083",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 363,
										"name": "IERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2083,
										"src": "1273:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$2083",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 367,
									"mutability": "constant",
									"name": "divsFee",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "1346:35:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 365,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "1346:5:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "33",
										"id": 366,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1380:1:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_3_by_1",
											"typeString": "int_const 3"
										},
										"value": "3"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 372,
									"mutability": "constant",
									"name": "magnitude",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "1387:45:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 368,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1387:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_18446744073709551616_by_1",
											"typeString": "int_const 18446744073709551616"
										},
										"id": 371,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "32",
											"id": 369,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1425:1:2",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_2_by_1",
												"typeString": "int_const 2"
											},
											"value": "2"
										},
										"nodeType": "BinaryOperation",
										"operator": "**",
										"rightExpression": {
											"hexValue": "3634",
											"id": 370,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1430:2:2",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_64_by_1",
												"typeString": "int_const 64"
											},
											"value": "64"
										},
										"src": "1425:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_18446744073709551616_by_1",
											"typeString": "int_const 18446744073709551616"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "a01496de",
									"id": 374,
									"mutability": "mutable",
									"name": "forPool",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "1500:19:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 373,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "1500:4:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "1f38b9cd",
									"id": 376,
									"mutability": "mutable",
									"name": "forDivs",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "1525:19:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 375,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "1525:4:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "89375abf",
									"id": 379,
									"mutability": "constant",
									"name": "rebaseFrequency",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "1586:49:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 377,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1586:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "36",
										"id": 378,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1628:7:2",
										"subdenomination": "hours",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_21600_by_1",
											"typeString": "int_const 21600"
										},
										"value": "6"
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "81fce645",
									"id": 382,
									"mutability": "constant",
									"name": "payoutFrequency",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "1641:51:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 380,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1641:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 381,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1683:9:2",
										"subdenomination": "seconds",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "1924063e",
									"id": 384,
									"mutability": "mutable",
									"name": "lastRebaseTime",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "1731:29:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 383,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1731:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 386,
									"mutability": "mutable",
									"name": "currentTotalStaked",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "1824:34:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 385,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1824:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 388,
									"mutability": "mutable",
									"name": "profitPerShare_",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "1864:31:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 387,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1864:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 398,
										"nodeType": "Block",
										"src": "2105:51:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 394,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 391,
																	"name": "myTokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1056,
																	"src": "2123:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 392,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2123:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 393,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2136:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2123:14:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 390,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2115:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 395,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2115:23:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 396,
												"nodeType": "ExpressionStatement",
												"src": "2115:23:2"
											},
											{
												"id": 397,
												"nodeType": "PlaceholderStatement",
												"src": "2148:1:2"
											}
										]
									},
									"id": 399,
									"name": "onlyHolders",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 389,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2102:2:2"
									},
									"src": "2082:74:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 409,
										"nodeType": "Block",
										"src": "2238:53:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 405,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 402,
																	"name": "myEarnings",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1067,
																	"src": "2256:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 403,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2256:12:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 404,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2271:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2256:16:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 401,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2248:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 406,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2248:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 407,
												"nodeType": "ExpressionStatement",
												"src": "2248:25:2"
											},
											{
												"id": 408,
												"nodeType": "PlaceholderStatement",
												"src": "2283:1:2"
											}
										]
									},
									"id": 410,
									"name": "onlyEarners",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 400,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2235:2:2"
									},
									"src": "2215:76:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"canonicalName": "DiamondSafe.Account",
									"id": 441,
									"members": [
										{
											"constant": false,
											"id": 412,
											"mutability": "mutable",
											"name": "deposited",
											"nodeType": "VariableDeclaration",
											"scope": 441,
											"src": "2452:14:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 411,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2452:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 414,
											"mutability": "mutable",
											"name": "rewards",
											"nodeType": "VariableDeclaration",
											"scope": 441,
											"src": "2476:12:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 413,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2476:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 416,
											"mutability": "mutable",
											"name": "withdrawn",
											"nodeType": "VariableDeclaration",
											"scope": 441,
											"src": "2498:14:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 415,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2498:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 418,
											"mutability": "mutable",
											"name": "compounded",
											"nodeType": "VariableDeclaration",
											"scope": 441,
											"src": "2522:15:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 417,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2522:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 420,
											"mutability": "mutable",
											"name": "rewarded",
											"nodeType": "VariableDeclaration",
											"scope": 441,
											"src": "2547:13:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 419,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2547:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 422,
											"mutability": "mutable",
											"name": "contributed",
											"nodeType": "VariableDeclaration",
											"scope": 441,
											"src": "2570:16:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 421,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2570:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 424,
											"mutability": "mutable",
											"name": "transferredShares",
											"nodeType": "VariableDeclaration",
											"scope": 441,
											"src": "2596:22:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 423,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2596:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 426,
											"mutability": "mutable",
											"name": "receivedShares",
											"nodeType": "VariableDeclaration",
											"scope": 441,
											"src": "2628:19:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 425,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2628:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 428,
											"mutability": "mutable",
											"name": "xInvested",
											"nodeType": "VariableDeclaration",
											"scope": 441,
											"src": "2657:14:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 427,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2657:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 430,
											"mutability": "mutable",
											"name": "xCompounded",
											"nodeType": "VariableDeclaration",
											"scope": 441,
											"src": "2681:16:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 429,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2681:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 432,
											"mutability": "mutable",
											"name": "xRewarded",
											"nodeType": "VariableDeclaration",
											"scope": 441,
											"src": "2707:14:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 431,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2707:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 434,
											"mutability": "mutable",
											"name": "xContributed",
											"nodeType": "VariableDeclaration",
											"scope": 441,
											"src": "2731:17:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 433,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2731:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 436,
											"mutability": "mutable",
											"name": "xWithdrawn",
											"nodeType": "VariableDeclaration",
											"scope": 441,
											"src": "2758:15:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 435,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2758:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 438,
											"mutability": "mutable",
											"name": "xTransferredShares",
											"nodeType": "VariableDeclaration",
											"scope": 441,
											"src": "2783:23:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 437,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2783:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 440,
											"mutability": "mutable",
											"name": "xReceivedShares",
											"nodeType": "VariableDeclaration",
											"scope": 441,
											"src": "2816:20:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 439,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2816:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Account",
									"nodeType": "StructDefinition",
									"scope": 2005,
									"src": "2427:416:2",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 445,
									"mutability": "mutable",
									"name": "payoutsOf_",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "2975:37:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_int256_$",
										"typeString": "mapping(address => int256)"
									},
									"typeName": {
										"id": 444,
										"keyType": {
											"id": 442,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "2983:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2975:26:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_int256_$",
											"typeString": "mapping(address => int256)"
										},
										"valueType": {
											"id": 443,
											"name": "int256",
											"nodeType": "ElementaryTypeName",
											"src": "2994:6:2",
											"typeDescriptions": {
												"typeIdentifier": "t_int256",
												"typeString": "int256"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 449,
									"mutability": "mutable",
									"name": "balanceOf_",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "3018:38:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 448,
										"keyType": {
											"id": 446,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "3026:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "3018:27:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 447,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "3037:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 453,
									"mutability": "mutable",
									"name": "accountOf_",
									"nodeType": "VariableDeclaration",
									"scope": 2005,
									"src": "3062:38:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
										"typeString": "mapping(address => struct DiamondSafe.Account)"
									},
									"typeName": {
										"id": 452,
										"keyType": {
											"id": 450,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "3070:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "3062:27:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
											"typeString": "mapping(address => struct DiamondSafe.Account)"
										},
										"valueType": {
											"id": 451,
											"name": "Account",
											"nodeType": "UserDefinedTypeName",
											"referencedDeclaration": 441,
											"src": "3081:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Account_$441_storage_ptr",
												"typeString": "struct DiamondSafe.Account"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"id": 463,
									"name": "onDeposit",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 455,
												"indexed": true,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "3258:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 454,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3258:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 457,
												"indexed": false,
												"mutability": "mutable",
												"name": "_deposited",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "3289:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 456,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3289:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 459,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokensMinted",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "3317:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 458,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3317:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 461,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "3347:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 460,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3347:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3248:119:2"
									},
									"src": "3233:135:2"
								},
								{
									"anonymous": false,
									"id": 473,
									"name": "onWithdraw",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 465,
												"indexed": true,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "3399:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 464,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3399:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 467,
												"indexed": false,
												"mutability": "mutable",
												"name": "_liquidated",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "3430:19:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 466,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3430:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 469,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokensEarned",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "3459:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 468,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3459:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 471,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "3489:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 470,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3489:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3389:120:2"
									},
									"src": "3373:137:2"
								},
								{
									"anonymous": false,
									"id": 483,
									"name": "onCompound",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 482,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 475,
												"indexed": true,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "3541:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 474,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3541:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 477,
												"indexed": false,
												"mutability": "mutable",
												"name": "_compounded",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "3572:19:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 476,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3572:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 479,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokensMinted",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "3601:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 478,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3601:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 481,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "3631:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 480,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3631:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3531:120:2"
									},
									"src": "3515:137:2"
								},
								{
									"anonymous": false,
									"id": 491,
									"name": "onWithdraw",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 490,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 485,
												"indexed": true,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "3674:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 484,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3674:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 487,
												"indexed": false,
												"mutability": "mutable",
												"name": "_withdrawn",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "3697:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 486,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3697:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 489,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "3717:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 488,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3717:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3673:59:2"
									},
									"src": "3657:76:2"
								},
								{
									"anonymous": false,
									"id": 501,
									"name": "onTransfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 493,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 501,
												"src": "3764:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 492,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3764:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 495,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 501,
												"src": "3794:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 494,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3794:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 497,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokens",
												"nodeType": "VariableDeclaration",
												"scope": 501,
												"src": "3822:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 496,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3822:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 499,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 501,
												"src": "3846:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 498,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3846:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3754:112:2"
									},
									"src": "3738:129:2"
								},
								{
									"anonymous": false,
									"id": 513,
									"name": "onUpdate",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 512,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 503,
												"indexed": true,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 513,
												"src": "3896:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 502,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3896:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 505,
												"indexed": false,
												"mutability": "mutable",
												"name": "invested",
												"nodeType": "VariableDeclaration",
												"scope": 513,
												"src": "3927:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 504,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3927:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 507,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokens",
												"nodeType": "VariableDeclaration",
												"scope": 513,
												"src": "3953:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 506,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3953:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 509,
												"indexed": false,
												"mutability": "mutable",
												"name": "soldTokens",
												"nodeType": "VariableDeclaration",
												"scope": 513,
												"src": "3977:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 508,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3977:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 511,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 513,
												"src": "4005:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 510,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "4005:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3886:139:2"
									},
									"src": "3872:154:2"
								},
								{
									"anonymous": false,
									"id": 519,
									"name": "onRebase",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 518,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 515,
												"indexed": false,
												"mutability": "mutable",
												"name": "balance",
												"nodeType": "VariableDeclaration",
												"scope": 519,
												"src": "4047:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 514,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4047:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 517,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 519,
												"src": "4064:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 516,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4064:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4046:36:2"
									},
									"src": "4032:51:2"
								},
								{
									"anonymous": false,
									"id": 527,
									"name": "onDonate",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 526,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 521,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 527,
												"src": "4104:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 520,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4104:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 523,
												"indexed": false,
												"mutability": "mutable",
												"name": "_contributed",
												"nodeType": "VariableDeclaration",
												"scope": 527,
												"src": "4126:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 522,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4126:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 525,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 527,
												"src": "4148:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 524,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "4148:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4103:60:2"
									},
									"src": "4089:75:2"
								},
								{
									"anonymous": false,
									"id": 535,
									"name": "onDonateBNB",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 534,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 529,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "4187:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 528,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4187:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 531,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "4209:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 530,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4209:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 533,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "4225:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 532,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "4225:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4186:54:2"
									},
									"src": "4169:72:2"
								},
								{
									"anonymous": false,
									"id": 543,
									"name": "onSetFeeSplit",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 542,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 537,
												"indexed": false,
												"mutability": "mutable",
												"name": "_pool",
												"nodeType": "VariableDeclaration",
												"scope": 543,
												"src": "4267:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 536,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "4267:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 539,
												"indexed": false,
												"mutability": "mutable",
												"name": "_divs",
												"nodeType": "VariableDeclaration",
												"scope": 543,
												"src": "4279:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 538,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "4279:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 541,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 543,
												"src": "4291:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 540,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4291:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4266:43:2"
									},
									"src": "4247:63:2"
								},
								{
									"anonymous": false,
									"id": 555,
									"name": "onSetImmunityToken",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 554,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 545,
												"indexed": true,
												"mutability": "mutable",
												"name": "_caller",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4349:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 544,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4349:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 548,
												"indexed": false,
												"mutability": "mutable",
												"name": "oldOne",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4382:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC721_$2199_$dyn_memory_ptr",
													"typeString": "contract IERC721[]"
												},
												"typeName": {
													"baseType": {
														"id": 546,
														"name": "IERC721",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 2199,
														"src": "4382:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC721_$2199",
															"typeString": "contract IERC721"
														}
													},
													"id": 547,
													"nodeType": "ArrayTypeName",
													"src": "4382:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC721_$2199_$dyn_storage_ptr",
														"typeString": "contract IERC721[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 551,
												"indexed": false,
												"mutability": "mutable",
												"name": "newOne",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4408:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC721_$2199_$dyn_memory_ptr",
													"typeString": "contract IERC721[]"
												},
												"typeName": {
													"baseType": {
														"id": 549,
														"name": "IERC721",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 2199,
														"src": "4408:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC721_$2199",
															"typeString": "contract IERC721"
														}
													},
													"id": 550,
													"nodeType": "ArrayTypeName",
													"src": "4408:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC721_$2199_$dyn_storage_ptr",
														"typeString": "contract IERC721[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 553,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4434:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 552,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4434:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4339:118:2"
									},
									"src": "4315:143:2"
								},
								{
									"body": {
										"id": 624,
										"nodeType": "Block",
										"src": "4674:543:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 577,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 572,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 567,
																	"name": "_tokenAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 557,
																	"src": "4705:13:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 570,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4730:1:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 569,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4722:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 568,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4722:7:2",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 571,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4722:10:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"src": "4705:27:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 575,
																		"name": "_tokenAddress",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 557,
																		"src": "4755:13:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"id": 573,
																		"name": "Address",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 295,
																		"src": "4736:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Address_$295_$",
																			"typeString": "type(library Address)"
																		}
																	},
																	"id": 574,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "isContract",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 19,
																	"src": "4736:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																		"typeString": "function (address) view returns (bool)"
																	}
																},
																"id": 576,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4736:33:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4705:64:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "494e56414c49445f41444452455353",
															"id": 578,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4783:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0c9aa80f6df0d7d66f29f9faed5ce34d8bae3d216a4ab057cfd7af24bdab39cb",
																"typeString": "literal_string \"INVALID_ADDRESS\""
															},
															"value": "INVALID_ADDRESS"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0c9aa80f6df0d7d66f29f9faed5ce34d8bae3d216a4ab057cfd7af24bdab39cb",
																"typeString": "literal_string \"INVALID_ADDRESS\""
															}
														],
														"id": 566,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4684:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 579,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4684:126:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 580,
												"nodeType": "ExpressionStatement",
												"src": "4684:126:2"
											},
											{
												"expression": {
													"id": 585,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 581,
														"name": "rewardToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 364,
														"src": "4820:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$2083",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 583,
																"name": "_rewardToken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 559,
																"src": "4841:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 582,
															"name": "IERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2083,
															"src": "4834:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC20_$2083_$",
																"typeString": "type(contract IERC20)"
															}
														},
														"id": 584,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4834:20:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$2083",
															"typeString": "contract IERC20"
														}
													},
													"src": "4820:34:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$2083",
														"typeString": "contract IERC20"
													}
												},
												"id": 586,
												"nodeType": "ExpressionStatement",
												"src": "4820:34:2"
											},
											{
												"expression": {
													"id": 589,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 587,
														"name": "tokenAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 343,
														"src": "4864:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 588,
														"name": "_tokenAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 557,
														"src": "4879:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4864:28:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 590,
												"nodeType": "ExpressionStatement",
												"src": "4864:28:2"
											},
											{
												"expression": {
													"id": 595,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 591,
														"name": "stakingToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 339,
														"src": "4902:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$2083",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 593,
																"name": "_tokenAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 557,
																"src": "4924:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 592,
															"name": "IERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2083,
															"src": "4917:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC20_$2083_$",
																"typeString": "type(contract IERC20)"
															}
														},
														"id": 594,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4917:21:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$2083",
															"typeString": "contract IERC20"
														}
													},
													"src": "4902:36:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$2083",
														"typeString": "contract IERC20"
													}
												},
												"id": 596,
												"nodeType": "ExpressionStatement",
												"src": "4902:36:2"
											},
											{
												"expression": {
													"id": 600,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 597,
														"name": "bnbReceiver",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 345,
														"src": "4949:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 598,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": -15,
															"src": "4963:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 599,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "4963:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "4949:24:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"id": 601,
												"nodeType": "ExpressionStatement",
												"src": "4949:24:2"
											},
											{
												"expression": {
													"id": 604,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 602,
														"name": "dripRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 362,
														"src": "5053:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 603,
														"name": "_dripRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 561,
														"src": "5064:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "5053:20:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 605,
												"nodeType": "ExpressionStatement",
												"src": "5053:20:2"
											},
											{
												"expression": {
													"id": 610,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 606,
														"name": "lastPayout",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 354,
														"src": "5083:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"components": [
															{
																"expression": {
																	"id": 607,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -4,
																	"src": "5097:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 608,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "5097:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 609,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5096:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5083:30:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 611,
												"nodeType": "ExpressionStatement",
												"src": "5083:30:2"
											},
											{
												"expression": {
													"id": 614,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 612,
														"name": "forPool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 374,
														"src": "5148:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "32",
														"id": 613,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5158:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"src": "5148:11:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 615,
												"nodeType": "ExpressionStatement",
												"src": "5148:11:2"
											},
											{
												"expression": {
													"id": 618,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 616,
														"name": "forDivs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 376,
														"src": "5169:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 617,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5179:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "5169:11:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 619,
												"nodeType": "ExpressionStatement",
												"src": "5169:11:2"
											},
											{
												"expression": {
													"id": 622,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 620,
														"name": "requiredBalance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 341,
														"src": "5191:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 621,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5209:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "5191:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 623,
												"nodeType": "ExpressionStatement",
												"src": "5191:19:2"
											}
										]
									},
									"id": 625,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [],
											"id": 564,
											"modifierName": {
												"id": 563,
												"name": "Ownable",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 2309,
												"src": "4664:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_contract$_Ownable_$2309_$",
													"typeString": "type(contract Ownable)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "4664:9:2"
										}
									],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 562,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 557,
												"mutability": "mutable",
												"name": "_tokenAddress",
												"nodeType": "VariableDeclaration",
												"scope": 625,
												"src": "4602:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 556,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4602:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 559,
												"mutability": "mutable",
												"name": "_rewardToken",
												"nodeType": "VariableDeclaration",
												"scope": 625,
												"src": "4625:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 558,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4625:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 561,
												"mutability": "mutable",
												"name": "_dripRate",
												"nodeType": "VariableDeclaration",
												"scope": 625,
												"src": "4647:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 560,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4647:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4601:62:2"
									},
									"returnParameters": {
										"id": 565,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4674:0:2"
									},
									"scope": 2005,
									"src": "4590:627:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 645,
										"nodeType": "Block",
										"src": "5376:124:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 631,
															"name": "bnbReceiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 345,
															"src": "5404:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"expression": {
																"id": 632,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "5417:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 633,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "5417:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 628,
															"name": "Address",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 295,
															"src": "5386:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_Address_$295_$",
																"typeString": "type(library Address)"
															}
														},
														"id": 630,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sendValue",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 53,
														"src": "5386:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$",
															"typeString": "function (address payable,uint256)"
														}
													},
													"id": 634,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5386:41:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 635,
												"nodeType": "ExpressionStatement",
												"src": "5386:41:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 637,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "5454:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 638,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5454:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"expression": {
																"id": 639,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "5466:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 640,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "5466:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 641,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "5477:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 642,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "5477:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 636,
														"name": "onDonateBNB",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 535,
														"src": "5442:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256)"
														}
													},
													"id": 643,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5442:51:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 644,
												"nodeType": "EmitStatement",
												"src": "5437:56:2"
											}
										]
									},
									"id": 646,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 626,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5356:2:2"
									},
									"returnParameters": {
										"id": 627,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5376:0:2"
									},
									"scope": 2005,
									"src": "5349:151:2",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 696,
										"nodeType": "Block",
										"src": "5701:520:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 656,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -15,
																		"src": "5814:3:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 657,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "5814:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 660,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "5834:4:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_DiamondSafe_$2005",
																				"typeString": "contract DiamondSafe"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_DiamondSafe_$2005",
																				"typeString": "contract DiamondSafe"
																			}
																		],
																		"id": 659,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5826:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 658,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5826:7:2",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 661,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5826:13:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																{
																	"id": 662,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 648,
																	"src": "5841:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	},
																	{
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 654,
																	"name": "rewardToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 364,
																	"src": "5789:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$2083",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 655,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "transferFrom",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2064,
																"src": "5789:24:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256) external returns (bool)"
																}
															},
															"id": 663,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5789:60:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 653,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "5781:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 664,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5781:69:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 665,
												"nodeType": "ExpressionStatement",
												"src": "5781:69:2"
											},
											{
												"expression": {
													"id": 668,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 666,
														"name": "dripPoolBalance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 360,
														"src": "5912:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 667,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 648,
														"src": "5931:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5912:26:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 669,
												"nodeType": "ExpressionStatement",
												"src": "5912:26:2"
											},
											{
												"expression": {
													"id": 676,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 670,
																"name": "accountOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 453,
																"src": "5948:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																	"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																}
															},
															"id": 673,
															"indexExpression": {
																"expression": {
																	"id": 671,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -15,
																	"src": "5959:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 672,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "5959:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5948:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$441_storage",
																"typeString": "struct DiamondSafe.Account storage ref"
															}
														},
														"id": 674,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "xContributed",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 434,
														"src": "5948:35:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 675,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5987:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "5948:40:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 677,
												"nodeType": "ExpressionStatement",
												"src": "5948:40:2"
											},
											{
												"expression": {
													"id": 684,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 678,
																"name": "accountOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 453,
																"src": "5998:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																	"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																}
															},
															"id": 681,
															"indexExpression": {
																"expression": {
																	"id": 679,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -15,
																	"src": "6009:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 680,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "6009:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5998:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$441_storage",
																"typeString": "struct DiamondSafe.Account storage ref"
															}
														},
														"id": 682,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "contributed",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 422,
														"src": "5998:34:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 683,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 648,
														"src": "6036:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5998:45:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 685,
												"nodeType": "ExpressionStatement",
												"src": "5998:45:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 687,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "6145:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 688,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "6145:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 689,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 648,
															"src": "6157:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 690,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "6166:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 691,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "6166:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 686,
														"name": "onDonate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 527,
														"src": "6136:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256)"
														}
													},
													"id": 692,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6136:46:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 693,
												"nodeType": "EmitStatement",
												"src": "6131:51:2"
											},
											{
												"expression": {
													"id": 694,
													"name": "dripPoolBalance",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 360,
													"src": "6199:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 652,
												"id": 695,
												"nodeType": "Return",
												"src": "6192:22:2"
											}
										]
									},
									"functionSelector": "f14faf6f",
									"id": 697,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "donate",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 649,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 648,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 697,
												"src": "5662:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 647,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "5662:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5661:14:2"
									},
									"returnParameters": {
										"id": 652,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 651,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 697,
												"src": "5692:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 650,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5692:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5691:9:2"
									},
									"scope": 2005,
									"src": "5646:575:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 710,
										"nodeType": "Block",
										"src": "6298:54:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 705,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "6325:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 706,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "6325:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 707,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 699,
															"src": "6337:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 704,
														"name": "depositTo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 767,
														"src": "6315:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (address,uint256) returns (uint256)"
														}
													},
													"id": 708,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6315:30:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 703,
												"id": 709,
												"nodeType": "Return",
												"src": "6308:37:2"
											}
										]
									},
									"functionSelector": "b6b55f25",
									"id": 711,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 700,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 699,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 711,
												"src": "6259:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 698,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "6259:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6258:14:2"
									},
									"returnParameters": {
										"id": 703,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 702,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 711,
												"src": "6289:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 701,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6289:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6288:9:2"
									},
									"scope": 2005,
									"src": "6242:110:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 766,
										"nodeType": "Block",
										"src": "6448:769:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 723,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -15,
																		"src": "6562:3:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 724,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "6562:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 727,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "6582:4:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_DiamondSafe_$2005",
																				"typeString": "contract DiamondSafe"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_DiamondSafe_$2005",
																				"typeString": "contract DiamondSafe"
																			}
																		],
																		"id": 726,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "6574:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 725,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "6574:7:2",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 728,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6574:13:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																{
																	"id": 729,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 715,
																	"src": "6589:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	},
																	{
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 721,
																	"name": "stakingToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 339,
																	"src": "6536:12:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$2083",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 722,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "transferFrom",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2064,
																"src": "6536:25:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256) external returns (bool)"
																}
															},
															"id": 730,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6536:61:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 720,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "6528:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 731,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6528:70:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 732,
												"nodeType": "ExpressionStatement",
												"src": "6528:70:2"
											},
											{
												"expression": {
													"id": 735,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 733,
														"name": "totalDeposits",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 358,
														"src": "6660:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 734,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 715,
														"src": "6677:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6660:24:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 736,
												"nodeType": "ExpressionStatement",
												"src": "6660:24:2"
											},
											{
												"assignments": [
													738
												],
												"declarations": [
													{
														"constant": false,
														"id": 738,
														"mutability": "mutable",
														"name": "amount",
														"nodeType": "VariableDeclaration",
														"scope": 766,
														"src": "6747:11:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 737,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "6747:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 743,
												"initialValue": {
													"arguments": [
														{
															"id": 740,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 713,
															"src": "6776:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 741,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 715,
															"src": "6783:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 739,
														"name": "_depositTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1741,
														"src": "6761:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (address,uint256) returns (uint256)"
														}
													},
													"id": 742,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6761:30:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6747:44:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 745,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 713,
															"src": "6866:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 746,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 453,
																	"src": "6885:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 748,
																"indexExpression": {
																	"id": 747,
																	"name": "_user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 713,
																	"src": "6896:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6885:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 749,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "deposited",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 412,
															"src": "6885:27:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"baseExpression": {
																"id": 750,
																"name": "balanceOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 449,
																"src": "6926:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																	"typeString": "mapping(address => uint256)"
																}
															},
															"id": 752,
															"indexExpression": {
																"id": 751,
																"name": "_user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 713,
																"src": "6937:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "6926:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 753,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 453,
																	"src": "6957:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 755,
																"indexExpression": {
																	"id": 754,
																	"name": "_user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 713,
																	"src": "6968:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6957:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 756,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "withdrawn",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 416,
															"src": "6957:27:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 757,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "6998:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 758,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "6998:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 744,
														"name": "onUpdate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 513,
														"src": "6844:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256,uint256)"
														}
													},
													"id": 759,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6844:179:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 760,
												"nodeType": "EmitStatement",
												"src": "6839:184:2"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 761,
														"name": "distribute",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1606,
														"src": "7098:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 762,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7098:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 763,
												"nodeType": "ExpressionStatement",
												"src": "7098:12:2"
											},
											{
												"expression": {
													"id": 764,
													"name": "amount",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 738,
													"src": "7204:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 719,
												"id": 765,
												"nodeType": "Return",
												"src": "7197:13:2"
											}
										]
									},
									"functionSelector": "ffaad6a5",
									"id": 767,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "depositTo",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 716,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 713,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 767,
												"src": "6394:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 712,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6394:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 715,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 767,
												"src": "6409:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 714,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "6409:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6393:29:2"
									},
									"returnParameters": {
										"id": 719,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 718,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 767,
												"src": "6439:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 717,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6439:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6438:9:2"
									},
									"scope": 2005,
									"src": "6375:842:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 775,
										"nodeType": "Block",
										"src": "7278:34:2",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 772,
														"name": "_compoundTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1829,
														"src": "7288:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$_t_uint256_$",
															"typeString": "function () returns (uint256)"
														}
													},
													"id": 773,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7288:17:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 774,
												"nodeType": "ExpressionStatement",
												"src": "7288:17:2"
											}
										]
									},
									"functionSelector": "f69e2046",
									"id": 776,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 770,
											"modifierName": {
												"id": 769,
												"name": "onlyEarners",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 410,
												"src": "7266:11:2",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "7266:11:2"
										}
									],
									"name": "compound",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 768,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7256:2:2"
									},
									"returnParameters": {
										"id": 771,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7278:0:2"
									},
									"scope": 2005,
									"src": "7239:73:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 849,
										"nodeType": "Block",
										"src": "7371:852:2",
										"statements": [
											{
												"assignments": [
													782
												],
												"declarations": [
													{
														"constant": false,
														"id": 782,
														"mutability": "mutable",
														"name": "_user",
														"nodeType": "VariableDeclaration",
														"scope": 849,
														"src": "7381:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 781,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7381:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 785,
												"initialValue": {
													"expression": {
														"id": 783,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -15,
														"src": "7397:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 784,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "7397:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7381:26:2"
											},
											{
												"assignments": [
													787
												],
												"declarations": [
													{
														"constant": false,
														"id": 787,
														"mutability": "mutable",
														"name": "_dividends",
														"nodeType": "VariableDeclaration",
														"scope": 849,
														"src": "7417:18:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 786,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7417:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 790,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 788,
														"name": "myEarnings",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1067,
														"src": "7438:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
															"typeString": "function () view returns (uint256)"
														}
													},
													"id": 789,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7438:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7417:33:2"
											},
											{
												"expression": {
													"id": 801,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 791,
															"name": "payoutsOf_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 445,
															"src": "7544:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_int256_$",
																"typeString": "mapping(address => int256)"
															}
														},
														"id": 793,
														"indexExpression": {
															"id": 792,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 782,
															"src": "7555:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7544:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 799,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 797,
																	"name": "_dividends",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 787,
																	"src": "7574:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 798,
																	"name": "magnitude",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 372,
																	"src": "7587:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7574:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"components": [
																{
																	"id": 795,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7566:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_int256_$",
																		"typeString": "type(int256)"
																	},
																	"typeName": {
																		"id": 794,
																		"name": "int256",
																		"nodeType": "ElementaryTypeName",
																		"src": "7566:6:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"id": 796,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "7565:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int256_$",
																"typeString": "type(int256)"
															}
														},
														"id": 800,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7565:32:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "7544:53:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"id": 802,
												"nodeType": "ExpressionStatement",
												"src": "7544:53:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 806,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 782,
															"src": "7683:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 807,
															"name": "_dividends",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "7690:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 803,
															"name": "stakingToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 339,
															"src": "7661:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$2083",
																"typeString": "contract IERC20"
															}
														},
														"id": 805,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2032,
														"src": "7661:21:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 808,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7661:40:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 809,
												"nodeType": "ExpressionStatement",
												"src": "7661:40:2"
											},
											{
												"expression": {
													"id": 822,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 810,
																"name": "accountOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 453,
																"src": "7776:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																	"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																}
															},
															"id": 812,
															"indexExpression": {
																"id": 811,
																"name": "_user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 782,
																"src": "7787:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "7776:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$441_storage",
																"typeString": "struct DiamondSafe.Account storage ref"
															}
														},
														"id": 813,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "withdrawn",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 416,
														"src": "7776:27:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 816,
																		"name": "accountOf_",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 453,
																		"src": "7832:10:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																			"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																		}
																	},
																	"id": 818,
																	"indexExpression": {
																		"id": 817,
																		"name": "_user",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 782,
																		"src": "7843:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "7832:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Account_$441_storage",
																		"typeString": "struct DiamondSafe.Account storage ref"
																	}
																},
																"id": 819,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "withdrawn",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 416,
																"src": "7832:27:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 820,
																"name": "_dividends",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 787,
																"src": "7873:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 814,
																"name": "SafeMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2964,
																"src": "7806:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																	"typeString": "type(library SafeMath)"
																}
															},
															"id": 815,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2769,
															"src": "7806:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 821,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7806:87:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7776:117:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 823,
												"nodeType": "ExpressionStatement",
												"src": "7776:117:2"
											},
											{
												"expression": {
													"id": 829,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 824,
																"name": "accountOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 453,
																"src": "7903:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																	"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																}
															},
															"id": 826,
															"indexExpression": {
																"id": 825,
																"name": "_user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 782,
																"src": "7914:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "7903:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$441_storage",
																"typeString": "struct DiamondSafe.Account storage ref"
															}
														},
														"id": 827,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "xWithdrawn",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 436,
														"src": "7903:28:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 828,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7935:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "7903:33:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 830,
												"nodeType": "ExpressionStatement",
												"src": "7903:33:2"
											},
											{
												"expression": {
													"id": 833,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 831,
														"name": "totalTxs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 352,
														"src": "7993:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 832,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8005:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "7993:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 834,
												"nodeType": "ExpressionStatement",
												"src": "7993:13:2"
											},
											{
												"expression": {
													"id": 837,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 835,
														"name": "totalClaims",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 356,
														"src": "8016:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 836,
														"name": "_dividends",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 787,
														"src": "8031:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8016:25:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 838,
												"nodeType": "ExpressionStatement",
												"src": "8016:25:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 840,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 782,
															"src": "8099:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 841,
															"name": "_dividends",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "8106:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 842,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "8118:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 843,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "8118:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 839,
														"name": "onWithdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															473,
															491
														],
														"referencedDeclaration": 491,
														"src": "8088:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256)"
														}
													},
													"id": 844,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8088:46:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 845,
												"nodeType": "EmitStatement",
												"src": "8083:51:2"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 846,
														"name": "distribute",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1606,
														"src": "8204:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 847,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8204:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 848,
												"nodeType": "ExpressionStatement",
												"src": "8204:12:2"
											}
										]
									},
									"functionSelector": "4641257d",
									"id": 850,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 779,
											"modifierName": {
												"id": 778,
												"name": "onlyEarners",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 410,
												"src": "7359:11:2",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "7359:11:2"
										}
									],
									"name": "harvest",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 777,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7349:2:2"
									},
									"returnParameters": {
										"id": 780,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7371:0:2"
									},
									"scope": 2005,
									"src": "7333:890:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 975,
										"nodeType": "Block",
										"src": "8299:1471:2",
										"statements": [
											{
												"assignments": [
													858
												],
												"declarations": [
													{
														"constant": false,
														"id": 858,
														"mutability": "mutable",
														"name": "_user",
														"nodeType": "VariableDeclaration",
														"scope": 975,
														"src": "8309:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 857,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "8309:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 861,
												"initialValue": {
													"expression": {
														"id": 859,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -15,
														"src": "8325:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 860,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "8325:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8309:26:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 867,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 863,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 852,
																"src": "8353:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"baseExpression": {
																	"id": 864,
																	"name": "balanceOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 449,
																	"src": "8364:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 866,
																"indexExpression": {
																	"id": 865,
																	"name": "_user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 858,
																	"src": "8375:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "8364:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8353:28:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 862,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "8345:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 868,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8345:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 869,
												"nodeType": "ExpressionStatement",
												"src": "8345:37:2"
											},
											{
												"assignments": [
													871
												],
												"declarations": [
													{
														"constant": false,
														"id": 871,
														"mutability": "mutable",
														"name": "_undividedDividends",
														"nodeType": "VariableDeclaration",
														"scope": 975,
														"src": "8393:27:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 870,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8393:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 879,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 878,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 874,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 852,
																"src": "8436:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 875,
																"name": "divsFee",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 367,
																"src": "8445:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															],
															"expression": {
																"id": 872,
																"name": "SafeMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2964,
																"src": "8423:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																	"typeString": "type(library SafeMath)"
																}
															},
															"id": 873,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "mul",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2825,
															"src": "8423:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 876,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8423:30:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "313030",
														"id": 877,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8456:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100_by_1",
															"typeString": "int_const 100"
														},
														"value": "100"
													},
													"src": "8423:36:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8393:66:2"
											},
											{
												"assignments": [
													881
												],
												"declarations": [
													{
														"constant": false,
														"id": 881,
														"mutability": "mutable",
														"name": "isImmune",
														"nodeType": "VariableDeclaration",
														"scope": 975,
														"src": "8486:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 880,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "8486:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 886,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 883,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "8516:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 884,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "8516:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"id": 882,
														"name": "checkImmunity",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1045,
														"src": "8502:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
															"typeString": "function (address) view returns (bool)"
														}
													},
													"id": 885,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8502:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8486:41:2"
											},
											{
												"condition": {
													"id": 887,
													"name": "isImmune",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 881,
													"src": "8567:8:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 893,
												"nodeType": "IfStatement",
												"src": "8563:129:2",
												"trueBody": {
													"id": 892,
													"nodeType": "Block",
													"src": "8577:115:2",
													"statements": [
														{
															"expression": {
																"id": 890,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 888,
																	"name": "_undividedDividends",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 871,
																	"src": "8653:19:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "30",
																	"id": 889,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8675:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "8653:23:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 891,
															"nodeType": "ExpressionStatement",
															"src": "8653:23:2"
														}
													]
												}
											},
											{
												"assignments": [
													895
												],
												"declarations": [
													{
														"constant": false,
														"id": 895,
														"mutability": "mutable",
														"name": "_taxedTokens",
														"nodeType": "VariableDeclaration",
														"scope": 975,
														"src": "8756:21:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 894,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8756:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 901,
												"initialValue": {
													"arguments": [
														{
															"id": 898,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 852,
															"src": "8793:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 899,
															"name": "_undividedDividends",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 871,
															"src": "8802:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 896,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2964,
															"src": "8780:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 897,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2791,
														"src": "8780:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 900,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8780:42:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8756:66:2"
											},
											{
												"expression": {
													"id": 908,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 902,
														"name": "currentTotalStaked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 386,
														"src": "8832:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 905,
																"name": "currentTotalStaked",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 386,
																"src": "8866:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 906,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 852,
																"src": "8886:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 903,
																"name": "SafeMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2964,
																"src": "8853:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																	"typeString": "type(library SafeMath)"
																}
															},
															"id": 904,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2791,
															"src": "8853:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 907,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8853:41:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8832:62:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 909,
												"nodeType": "ExpressionStatement",
												"src": "8832:62:2"
											},
											{
												"expression": {
													"id": 920,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 910,
															"name": "balanceOf_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 449,
															"src": "8904:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 912,
														"indexExpression": {
															"id": 911,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 858,
															"src": "8915:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8904:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"baseExpression": {
																	"id": 915,
																	"name": "balanceOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 449,
																	"src": "8937:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 917,
																"indexExpression": {
																	"id": 916,
																	"name": "_user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 858,
																	"src": "8948:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "8937:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 918,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 852,
																"src": "8956:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 913,
																"name": "SafeMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2964,
																"src": "8924:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																	"typeString": "type(library SafeMath)"
																}
															},
															"id": 914,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2791,
															"src": "8924:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 919,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8924:40:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8904:60:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 921,
												"nodeType": "ExpressionStatement",
												"src": "8904:60:2"
											},
											{
												"assignments": [
													923
												],
												"declarations": [
													{
														"constant": false,
														"id": 923,
														"mutability": "mutable",
														"name": "_updatedPayouts",
														"nodeType": "VariableDeclaration",
														"scope": 975,
														"src": "9046:22:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 922,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "9046:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 936,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 934,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 929,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 927,
																	"name": "profitPerShare_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 388,
																	"src": "9093:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 928,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 852,
																	"src": "9111:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9093:25:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 932,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 930,
																			"name": "_taxedTokens",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 895,
																			"src": "9122:12:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 931,
																			"name": "magnitude",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 372,
																			"src": "9137:9:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "9122:24:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 933,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "9121:26:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9093:54:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"components": [
															{
																"id": 925,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9072:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_int256_$",
																	"typeString": "type(int256)"
																},
																"typeName": {
																	"id": 924,
																	"name": "int256",
																	"nodeType": "ElementaryTypeName",
																	"src": "9072:6:2",
																	"typeDescriptions": {}
																}
															}
														],
														"id": 926,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9071:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int256_$",
															"typeString": "type(int256)"
														}
													},
													"id": 935,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9071:86:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9046:111:2"
											},
											{
												"expression": {
													"id": 941,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 937,
															"name": "payoutsOf_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 445,
															"src": "9167:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_int256_$",
																"typeString": "mapping(address => int256)"
															}
														},
														"id": 939,
														"indexExpression": {
															"id": 938,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 858,
															"src": "9178:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9167:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 940,
														"name": "_updatedPayouts",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 923,
														"src": "9188:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "9167:36:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"id": 942,
												"nodeType": "ExpressionStatement",
												"src": "9167:36:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 944,
															"name": "_undividedDividends",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 871,
															"src": "9297:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 943,
														"name": "allocateFees",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1519,
														"src": "9284:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 945,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9284:33:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 946,
												"nodeType": "ExpressionStatement",
												"src": "9284:33:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 948,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 858,
															"src": "9400:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 949,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 852,
															"src": "9407:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 950,
															"name": "_taxedTokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 895,
															"src": "9416:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 951,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "9430:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 952,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "9430:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 947,
														"name": "onWithdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															473,
															491
														],
														"referencedDeclaration": 473,
														"src": "9389:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256)"
														}
													},
													"id": 953,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9389:57:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 954,
												"nodeType": "EmitStatement",
												"src": "9384:62:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 956,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 858,
															"src": "9521:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 957,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 453,
																	"src": "9540:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 959,
																"indexExpression": {
																	"id": 958,
																	"name": "_user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 858,
																	"src": "9551:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "9540:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 960,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "deposited",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 412,
															"src": "9540:27:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"baseExpression": {
																"id": 961,
																"name": "balanceOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 449,
																"src": "9581:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																	"typeString": "mapping(address => uint256)"
																}
															},
															"id": 963,
															"indexExpression": {
																"id": 962,
																"name": "_user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 858,
																"src": "9592:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9581:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 964,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 453,
																	"src": "9612:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 966,
																"indexExpression": {
																	"id": 965,
																	"name": "_user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 858,
																	"src": "9623:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "9612:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 967,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "withdrawn",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 416,
															"src": "9612:27:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 968,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "9653:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 969,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "9653:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 955,
														"name": "onUpdate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 513,
														"src": "9499:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256,uint256)"
														}
													},
													"id": 970,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9499:179:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 971,
												"nodeType": "EmitStatement",
												"src": "9494:184:2"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 972,
														"name": "distribute",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1606,
														"src": "9747:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 973,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9747:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 974,
												"nodeType": "ExpressionStatement",
												"src": "9747:12:2"
											}
										]
									},
									"functionSelector": "2e1a7d4d",
									"id": 976,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 855,
											"modifierName": {
												"id": 854,
												"name": "onlyHolders",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 399,
												"src": "8287:11:2",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "8287:11:2"
										}
									],
									"name": "withdraw",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 853,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 852,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 976,
												"src": "8263:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 851,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8263:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8262:17:2"
									},
									"returnParameters": {
										"id": 856,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8299:0:2"
									},
									"scope": 2005,
									"src": "8245:1525:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 992,
										"nodeType": "Block",
										"src": "9898:53:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 988,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 978,
															"src": "9931:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 989,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 980,
															"src": "9936:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 987,
														"name": "_transferTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2004,
														"src": "9915:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) returns (bool)"
														}
													},
													"id": 990,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9915:29:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 986,
												"id": 991,
												"nodeType": "Return",
												"src": "9908:36:2"
											}
										]
									},
									"functionSelector": "a9059cbb",
									"id": 993,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 983,
											"modifierName": {
												"id": 982,
												"name": "onlyHolders",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 399,
												"src": "9871:11:2",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "9871:11:2"
										}
									],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 981,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 978,
												"mutability": "mutable",
												"name": "_to",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "9819:11:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 977,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9819:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 980,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "9840:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 979,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9840:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9809:52:2"
									},
									"returnParameters": {
										"id": 986,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 985,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "9892:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 984,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9892:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9891:6:2"
									},
									"scope": 2005,
									"src": "9792:159:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1044,
										"nodeType": "Block",
										"src": "10214:293:2",
										"statements": [
											{
												"assignments": [
													1001
												],
												"declarations": [
													{
														"constant": false,
														"id": 1001,
														"mutability": "mutable",
														"name": "x",
														"nodeType": "VariableDeclaration",
														"scope": 1044,
														"src": "10224:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1000,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10224:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1003,
												"initialValue": {
													"hexValue": "30",
													"id": 1002,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10236:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10224:13:2"
											},
											{
												"assignments": [
													1005
												],
												"declarations": [
													{
														"constant": false,
														"id": 1005,
														"mutability": "mutable",
														"name": "jpegTest1",
														"nodeType": "VariableDeclaration",
														"scope": 1044,
														"src": "10247:17:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC721_$2199",
															"typeString": "contract IERC721"
														},
														"typeName": {
															"id": 1004,
															"name": "IERC721",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 2199,
															"src": "10247:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721_$2199",
																"typeString": "contract IERC721"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1006,
												"nodeType": "VariableDeclarationStatement",
												"src": "10247:17:2"
											},
											{
												"body": {
													"id": 1033,
													"nodeType": "Block",
													"src": "10310:99:2",
													"statements": [
														{
															"expression": {
																"id": 1024,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1018,
																	"name": "jpegTest1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1005,
																	"src": "10324:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC721_$2199",
																		"typeString": "contract IERC721"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"baseExpression": {
																				"id": 1020,
																				"name": "jpeg",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 348,
																				"src": "10344:4:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_contract$_IERC721_$2199_$dyn_storage",
																					"typeString": "contract IERC721[] storage ref"
																				}
																			},
																			"id": 1022,
																			"indexExpression": {
																				"id": 1021,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1008,
																				"src": "10349:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "10344:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC721_$2199",
																				"typeString": "contract IERC721"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IERC721_$2199",
																				"typeString": "contract IERC721"
																			}
																		],
																		"id": 1019,
																		"name": "IERC721",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2199,
																		"src": "10336:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_IERC721_$2199_$",
																			"typeString": "type(contract IERC721)"
																		}
																	},
																	"id": 1023,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10336:16:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC721_$2199",
																		"typeString": "contract IERC721"
																	}
																},
																"src": "10324:28:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC721_$2199",
																	"typeString": "contract IERC721"
																}
															},
															"id": 1025,
															"nodeType": "ExpressionStatement",
															"src": "10324:28:2"
														},
														{
															"expression": {
																"id": 1031,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1026,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1001,
																	"src": "10367:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1029,
																			"name": "_user",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 995,
																			"src": "10392:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"expression": {
																			"id": 1027,
																			"name": "jpegTest1",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1005,
																			"src": "10372:9:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC721_$2199",
																				"typeString": "contract IERC721"
																			}
																		},
																		"id": 1028,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "balanceOf",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2124,
																		"src": "10372:19:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) view external returns (uint256)"
																		}
																	},
																	"id": 1030,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10372:26:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10367:31:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1032,
															"nodeType": "ExpressionStatement",
															"src": "10367:31:2"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1014,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1011,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1008,
														"src": "10289:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1012,
															"name": "jpeg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 348,
															"src": "10293:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_contract$_IERC721_$2199_$dyn_storage",
																"typeString": "contract IERC721[] storage ref"
															}
														},
														"id": 1013,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "10293:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10289:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1034,
												"initializationExpression": {
													"assignments": [
														1008
													],
													"declarations": [
														{
															"constant": false,
															"id": 1008,
															"mutability": "mutable",
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 1034,
															"src": "10278:6:2",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1007,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "10278:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1010,
													"initialValue": {
														"hexValue": "30",
														"id": 1009,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10286:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "10278:9:2"
												},
												"loopExpression": {
													"expression": {
														"id": 1016,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "10306:3:2",
														"subExpression": {
															"id": 1015,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1008,
															"src": "10306:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1017,
													"nodeType": "ExpressionStatement",
													"src": "10306:3:2"
												},
												"nodeType": "ForStatement",
												"src": "10274:135:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1037,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1035,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1001,
														"src": "10421:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"id": 1036,
														"name": "requiredBalance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 341,
														"src": "10426:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10421:20:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1041,
												"nodeType": "IfStatement",
												"src": "10417:62:2",
												"trueBody": {
													"id": 1040,
													"nodeType": "Block",
													"src": "10443:36:2",
													"statements": [
														{
															"expression": {
																"hexValue": "74727565",
																"id": 1038,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10464:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 999,
															"id": 1039,
															"nodeType": "Return",
															"src": "10457:11:2"
														}
													]
												}
											},
											{
												"expression": {
													"hexValue": "66616c7365",
													"id": 1042,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10495:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "false"
												},
												"functionReturnParameters": 999,
												"id": 1043,
												"nodeType": "Return",
												"src": "10488:12:2"
											}
										]
									},
									"functionSelector": "36599ead",
									"id": 1045,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "checkImmunity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 996,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 995,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 1045,
												"src": "10163:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 994,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10163:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10162:15:2"
									},
									"returnParameters": {
										"id": 999,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 998,
												"mutability": "mutable",
												"name": "isImmune",
												"nodeType": "VariableDeclaration",
												"scope": 1045,
												"src": "10199:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 997,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10199:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10198:15:2"
									},
									"scope": 2005,
									"src": "10140:367:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1055,
										"nodeType": "Block",
										"src": "10563:45:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1051,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "10590:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1052,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "10590:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"id": 1050,
														"name": "balanceOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1079,
														"src": "10580:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1053,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10580:21:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1049,
												"id": 1054,
												"nodeType": "Return",
												"src": "10573:28:2"
											}
										]
									},
									"functionSelector": "949e8acd",
									"id": 1056,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "myTokens",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1046,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10530:2:2"
									},
									"returnParameters": {
										"id": 1049,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1048,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1056,
												"src": "10554:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1047,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10554:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10553:9:2"
									},
									"scope": 2005,
									"src": "10513:95:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1066,
										"nodeType": "Block",
										"src": "10666:47:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1062,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "10695:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1063,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "10695:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"id": 1061,
														"name": "dividendsOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1140,
														"src": "10683:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1064,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10683:23:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1060,
												"id": 1065,
												"nodeType": "Return",
												"src": "10676:30:2"
											}
										]
									},
									"functionSelector": "ffe6bbd8",
									"id": 1067,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "myEarnings",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1057,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10633:2:2"
									},
									"returnParameters": {
										"id": 1060,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1059,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1067,
												"src": "10657:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1058,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10657:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10656:9:2"
									},
									"scope": 2005,
									"src": "10614:99:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1078,
										"nodeType": "Block",
										"src": "10783:41:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 1074,
														"name": "balanceOf_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 449,
														"src": "10800:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1076,
													"indexExpression": {
														"id": 1075,
														"name": "_user",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1069,
														"src": "10811:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "10800:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1073,
												"id": 1077,
												"nodeType": "Return",
												"src": "10793:24:2"
											}
										]
									},
									"functionSelector": "70a08231",
									"id": 1079,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1070,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1069,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 1079,
												"src": "10738:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1068,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10738:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10737:15:2"
									},
									"returnParameters": {
										"id": 1073,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1072,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1079,
												"src": "10774:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1071,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10774:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10773:9:2"
									},
									"scope": 2005,
									"src": "10719:105:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1089,
										"nodeType": "Block",
										"src": "10897:37:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1086,
														"name": "_user",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1081,
														"src": "10914:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1087,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"src": "10914:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1085,
												"id": 1088,
												"nodeType": "Return",
												"src": "10907:20:2"
											}
										]
									},
									"functionSelector": "eedc966a",
									"id": 1090,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tokenBalance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1082,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1081,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 1090,
												"src": "10852:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1080,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10852:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10851:15:2"
									},
									"returnParameters": {
										"id": 1085,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1084,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1090,
												"src": "10888:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1083,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10888:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10887:9:2"
									},
									"scope": 2005,
									"src": "10830:104:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1103,
										"nodeType": "Block",
										"src": "10994:61:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1099,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -28,
																	"src": "11042:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_DiamondSafe_$2005",
																		"typeString": "contract DiamondSafe"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_DiamondSafe_$2005",
																		"typeString": "contract DiamondSafe"
																	}
																],
																"id": 1098,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11034:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1097,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11034:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 1100,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11034:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"expression": {
															"id": 1095,
															"name": "stakingToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 339,
															"src": "11011:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$2083",
																"typeString": "contract IERC20"
															}
														},
														"id": 1096,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2022,
														"src": "11011:22:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 1101,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11011:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1094,
												"id": 1102,
												"nodeType": "Return",
												"src": "11004:44:2"
											}
										]
									},
									"functionSelector": "ad7a672f",
									"id": 1104,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalBalance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1091,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10961:2:2"
									},
									"returnParameters": {
										"id": 1094,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1093,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1104,
												"src": "10985:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1092,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10985:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10984:9:2"
									},
									"scope": 2005,
									"src": "10940:115:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1111,
										"nodeType": "Block",
										"src": "11114:42:2",
										"statements": [
											{
												"expression": {
													"id": 1109,
													"name": "currentTotalStaked",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 386,
													"src": "11131:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1108,
												"id": 1110,
												"nodeType": "Return",
												"src": "11124:25:2"
											}
										]
									},
									"functionSelector": "18160ddd",
									"id": 1112,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11081:2:2"
									},
									"returnParameters": {
										"id": 1108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1107,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "11105:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1106,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11105:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11104:9:2"
									},
									"scope": 2005,
									"src": "11061:95:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1139,
										"nodeType": "Block",
										"src": "11228:174:2",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1137,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1134,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1129,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1125,
																				"name": "profitPerShare_",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 388,
																				"src": "11293:15:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"baseExpression": {
																					"id": 1126,
																					"name": "balanceOf_",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 449,
																					"src": "11311:10:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																						"typeString": "mapping(address => uint256)"
																					}
																				},
																				"id": 1128,
																				"indexExpression": {
																					"id": 1127,
																					"name": "_user",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1114,
																					"src": "11322:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "11311:17:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "11293:35:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"components": [
																			{
																				"id": 1123,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "11285:6:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_int256_$",
																					"typeString": "type(int256)"
																				},
																				"typeName": {
																					"id": 1122,
																					"name": "int256",
																					"nodeType": "ElementaryTypeName",
																					"src": "11285:6:2",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"id": 1124,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "11284:8:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		}
																	},
																	"id": 1130,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "11284:45:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"baseExpression": {
																		"id": 1131,
																		"name": "payoutsOf_",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 445,
																		"src": "11352:10:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_int256_$",
																			"typeString": "mapping(address => int256)"
																		}
																	},
																	"id": 1133,
																	"indexExpression": {
																		"id": 1132,
																		"name": "_user",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1114,
																		"src": "11363:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "11352:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "11284:85:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"components": [
																{
																	"id": 1120,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11258:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1119,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "11258:7:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"id": 1121,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "11257:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															}
														},
														"id": 1135,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11257:126:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 1136,
														"name": "magnitude",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 372,
														"src": "11386:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11257:138:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1118,
												"id": 1138,
												"nodeType": "Return",
												"src": "11238:157:2"
											}
										]
									},
									"functionSelector": "0065318b",
									"id": 1140,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "dividendsOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1114,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 1140,
												"src": "11183:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1113,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11183:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11182:15:2"
									},
									"returnParameters": {
										"id": 1118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1117,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1140,
												"src": "11219:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11219:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11218:9:2"
									},
									"scope": 2005,
									"src": "11162:240:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1171,
										"nodeType": "Block",
										"src": "11460:214:2",
										"statements": [
											{
												"assignments": [
													1146
												],
												"declarations": [
													{
														"constant": false,
														"id": 1146,
														"mutability": "mutable",
														"name": "_tokens",
														"nodeType": "VariableDeclaration",
														"scope": 1171,
														"src": "11470:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1145,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11470:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1148,
												"initialValue": {
													"hexValue": "31653138",
													"id": 1147,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "11488:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_1000000000000000000_by_1",
														"typeString": "int_const 1000000000000000000"
													},
													"value": "1e18"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11470:22:2"
											},
											{
												"assignments": [
													1150
												],
												"declarations": [
													{
														"constant": false,
														"id": 1150,
														"mutability": "mutable",
														"name": "_dividends",
														"nodeType": "VariableDeclaration",
														"scope": 1171,
														"src": "11502:18:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1149,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11502:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1160,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1155,
																	"name": "_tokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1146,
																	"src": "11549:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1156,
																	"name": "divsFee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 367,
																	"src": "11558:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																],
																"expression": {
																	"id": 1153,
																	"name": "SafeMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2964,
																	"src": "11536:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																		"typeString": "type(library SafeMath)"
																	}
																},
																"id": 1154,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mul",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2825,
																"src": "11536:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1157,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11536:30:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "313030",
															"id": 1158,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11568:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															},
															"value": "100"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															}
														],
														"expression": {
															"id": 1151,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2964,
															"src": "11523:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 1152,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2847,
														"src": "11523:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1159,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11523:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11502:70:2"
											},
											{
												"assignments": [
													1162
												],
												"declarations": [
													{
														"constant": false,
														"id": 1162,
														"mutability": "mutable",
														"name": "_taxedTokens",
														"nodeType": "VariableDeclaration",
														"scope": 1171,
														"src": "11582:20:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1161,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11582:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1168,
												"initialValue": {
													"arguments": [
														{
															"id": 1165,
															"name": "_tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1146,
															"src": "11618:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1166,
															"name": "_dividends",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1150,
															"src": "11627:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1163,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2964,
															"src": "11605:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 1164,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2791,
														"src": "11605:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1167,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11605:33:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11582:56:2"
											},
											{
												"expression": {
													"id": 1169,
													"name": "_taxedTokens",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1162,
													"src": "11655:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1144,
												"id": 1170,
												"nodeType": "Return",
												"src": "11648:19:2"
											}
										]
									},
									"functionSelector": "4b750334",
									"id": 1172,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sellPrice",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1141,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11426:2:2"
									},
									"returnParameters": {
										"id": 1144,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1143,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1172,
												"src": "11451:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1142,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11451:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11450:9:2"
									},
									"scope": 2005,
									"src": "11408:266:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1203,
										"nodeType": "Block",
										"src": "11730:214:2",
										"statements": [
											{
												"assignments": [
													1178
												],
												"declarations": [
													{
														"constant": false,
														"id": 1178,
														"mutability": "mutable",
														"name": "_tokens",
														"nodeType": "VariableDeclaration",
														"scope": 1203,
														"src": "11740:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1177,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11740:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1180,
												"initialValue": {
													"hexValue": "31653138",
													"id": 1179,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "11758:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_1000000000000000000_by_1",
														"typeString": "int_const 1000000000000000000"
													},
													"value": "1e18"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11740:22:2"
											},
											{
												"assignments": [
													1182
												],
												"declarations": [
													{
														"constant": false,
														"id": 1182,
														"mutability": "mutable",
														"name": "_dividends",
														"nodeType": "VariableDeclaration",
														"scope": 1203,
														"src": "11772:18:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1181,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11772:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1192,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1187,
																	"name": "_tokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1178,
																	"src": "11819:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1188,
																	"name": "divsFee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 367,
																	"src": "11828:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																],
																"expression": {
																	"id": 1185,
																	"name": "SafeMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2964,
																	"src": "11806:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																		"typeString": "type(library SafeMath)"
																	}
																},
																"id": 1186,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mul",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2825,
																"src": "11806:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1189,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11806:30:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "313030",
															"id": 1190,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11838:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															},
															"value": "100"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															}
														],
														"expression": {
															"id": 1183,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2964,
															"src": "11793:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 1184,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2847,
														"src": "11793:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1191,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11793:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11772:70:2"
											},
											{
												"assignments": [
													1194
												],
												"declarations": [
													{
														"constant": false,
														"id": 1194,
														"mutability": "mutable",
														"name": "_taxedTokens",
														"nodeType": "VariableDeclaration",
														"scope": 1203,
														"src": "11852:20:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1193,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11852:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1200,
												"initialValue": {
													"arguments": [
														{
															"id": 1197,
															"name": "_tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1178,
															"src": "11888:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1198,
															"name": "_dividends",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1182,
															"src": "11897:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1195,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2964,
															"src": "11875:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 1196,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "add",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2769,
														"src": "11875:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1199,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11875:33:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11852:56:2"
											},
											{
												"expression": {
													"id": 1201,
													"name": "_taxedTokens",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1194,
													"src": "11925:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1176,
												"id": 1202,
												"nodeType": "Return",
												"src": "11918:19:2"
											}
										]
									},
									"functionSelector": "8620410b",
									"id": 1204,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "buyPrice",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1173,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11697:2:2"
									},
									"returnParameters": {
										"id": 1176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1175,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1204,
												"src": "11721:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1174,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11721:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11720:9:2"
									},
									"scope": 2005,
									"src": "11680:264:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1237,
										"nodeType": "Block",
										"src": "12044:203:2",
										"statements": [
											{
												"assignments": [
													1212
												],
												"declarations": [
													{
														"constant": false,
														"id": 1212,
														"mutability": "mutable",
														"name": "_divies",
														"nodeType": "VariableDeclaration",
														"scope": 1237,
														"src": "12054:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1211,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12054:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1222,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1217,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1206,
																	"src": "12098:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1218,
																	"name": "divsFee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 367,
																	"src": "12107:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																],
																"expression": {
																	"id": 1215,
																	"name": "SafeMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2964,
																	"src": "12085:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																		"typeString": "type(library SafeMath)"
																	}
																},
																"id": 1216,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mul",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2825,
																"src": "12085:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1219,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12085:30:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "313030",
															"id": 1220,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "12117:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															},
															"value": "100"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															}
														],
														"expression": {
															"id": 1213,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2964,
															"src": "12072:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 1214,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2847,
														"src": "12072:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1221,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12072:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12054:67:2"
											},
											{
												"assignments": [
													1224
												],
												"declarations": [
													{
														"constant": false,
														"id": 1224,
														"mutability": "mutable",
														"name": "_remains",
														"nodeType": "VariableDeclaration",
														"scope": 1237,
														"src": "12131:16:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1223,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12131:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1230,
												"initialValue": {
													"arguments": [
														{
															"id": 1227,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1206,
															"src": "12163:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1228,
															"name": "_divies",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1212,
															"src": "12172:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1225,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2964,
															"src": "12150:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 1226,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2791,
														"src": "12150:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1229,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12150:30:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12131:49:2"
											},
											{
												"assignments": [
													1232
												],
												"declarations": [
													{
														"constant": false,
														"id": 1232,
														"mutability": "mutable",
														"name": "_result",
														"nodeType": "VariableDeclaration",
														"scope": 1237,
														"src": "12190:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1231,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12190:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1234,
												"initialValue": {
													"id": 1233,
													"name": "_remains",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1224,
													"src": "12208:8:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12190:26:2"
											},
											{
												"expression": {
													"id": 1235,
													"name": "_result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1232,
													"src": "12233:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1210,
												"id": 1236,
												"nodeType": "Return",
												"src": "12226:14:2"
											}
										]
									},
									"functionSelector": "e02e1e9c",
									"id": 1238,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateSharesReceived",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1206,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "11992:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1205,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11992:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11982:31:2"
									},
									"returnParameters": {
										"id": 1210,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1209,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "12035:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1208,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12035:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12034:9:2"
									},
									"scope": 2005,
									"src": "11950:297:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1277,
										"nodeType": "Block",
										"src": "12347:251:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1248,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1246,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1240,
																"src": "12365:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1247,
																"name": "currentTotalStaked",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 386,
																"src": "12376:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "12365:29:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1245,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "12357:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1249,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12357:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1250,
												"nodeType": "ExpressionStatement",
												"src": "12357:38:2"
											},
											{
												"assignments": [
													1252
												],
												"declarations": [
													{
														"constant": false,
														"id": 1252,
														"mutability": "mutable",
														"name": "_tokens",
														"nodeType": "VariableDeclaration",
														"scope": 1277,
														"src": "12405:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1251,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12405:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1254,
												"initialValue": {
													"id": 1253,
													"name": "_amount",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1240,
													"src": "12423:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12405:25:2"
											},
											{
												"assignments": [
													1256
												],
												"declarations": [
													{
														"constant": false,
														"id": 1256,
														"mutability": "mutable",
														"name": "_divies",
														"nodeType": "VariableDeclaration",
														"scope": 1277,
														"src": "12440:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1255,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12440:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1266,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1261,
																	"name": "_tokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1252,
																	"src": "12484:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1262,
																	"name": "divsFee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 367,
																	"src": "12493:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																],
																"expression": {
																	"id": 1259,
																	"name": "SafeMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2964,
																	"src": "12471:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																		"typeString": "type(library SafeMath)"
																	}
																},
																"id": 1260,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mul",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2825,
																"src": "12471:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1263,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12471:30:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "313030",
															"id": 1264,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "12503:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															},
															"value": "100"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															}
														],
														"expression": {
															"id": 1257,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2964,
															"src": "12458:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 1258,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2847,
														"src": "12458:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1265,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12458:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12440:67:2"
											},
											{
												"assignments": [
													1268
												],
												"declarations": [
													{
														"constant": false,
														"id": 1268,
														"mutability": "mutable",
														"name": "_remains",
														"nodeType": "VariableDeclaration",
														"scope": 1277,
														"src": "12517:16:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1267,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12517:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1274,
												"initialValue": {
													"arguments": [
														{
															"id": 1271,
															"name": "_tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1252,
															"src": "12549:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1272,
															"name": "_divies",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1256,
															"src": "12558:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1269,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2964,
															"src": "12536:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 1270,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2791,
														"src": "12536:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1273,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12536:30:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12517:49:2"
											},
											{
												"expression": {
													"id": 1275,
													"name": "_remains",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1268,
													"src": "12583:8:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1244,
												"id": 1276,
												"nodeType": "Return",
												"src": "12576:15:2"
											}
										]
									},
									"functionSelector": "10d0ffdd",
									"id": 1278,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateTokensReceived",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1241,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1240,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 1278,
												"src": "12295:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1239,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12295:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12285:31:2"
									},
									"returnParameters": {
										"id": 1244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1243,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1278,
												"src": "12338:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1242,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12338:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12337:9:2"
									},
									"scope": 2005,
									"src": "12253:345:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1331,
										"nodeType": "Block",
										"src": "12679:522:2",
										"statements": [
											{
												"assignments": [
													1288
												],
												"declarations": [
													{
														"constant": false,
														"id": 1288,
														"mutability": "mutable",
														"name": "a",
														"nodeType": "VariableDeclaration",
														"scope": 1331,
														"src": "12689:16:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Account_$441_memory_ptr",
															"typeString": "struct DiamondSafe.Account"
														},
														"typeName": {
															"id": 1287,
															"name": "Account",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 441,
															"src": "12689:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$441_storage_ptr",
																"typeString": "struct DiamondSafe.Account"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1292,
												"initialValue": {
													"baseExpression": {
														"id": 1289,
														"name": "accountOf_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 453,
														"src": "12708:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
															"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
														}
													},
													"id": 1291,
													"indexExpression": {
														"id": 1290,
														"name": "_user",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1280,
														"src": "12719:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "12708:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Account_$441_storage",
														"typeString": "struct DiamondSafe.Account storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12689:36:2"
											},
											{
												"assignments": [
													1298
												],
												"declarations": [
													{
														"constant": false,
														"id": 1298,
														"mutability": "mutable",
														"name": "accountArray",
														"nodeType": "VariableDeclaration",
														"scope": 1331,
														"src": "12735:31:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$14_memory_ptr",
															"typeString": "uint256[14]"
														},
														"typeName": {
															"baseType": {
																"id": 1296,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "12735:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1297,
															"length": {
																"hexValue": "3134",
																"id": 1295,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12743:2:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_14_by_1",
																	"typeString": "int_const 14"
																},
																"value": "14"
															},
															"nodeType": "ArrayTypeName",
															"src": "12735:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$14_storage_ptr",
																"typeString": "uint256[14]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1328,
												"initialValue": {
													"components": [
														{
															"expression": {
																"id": 1299,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1288,
																"src": "12783:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1300,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "deposited",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 412,
															"src": "12783:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1301,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1288,
																"src": "12808:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1302,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "withdrawn",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 416,
															"src": "12808:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1303,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1288,
																"src": "12833:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1304,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "rewarded",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 420,
															"src": "12833:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1305,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1288,
																"src": "12857:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1306,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "compounded",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 418,
															"src": "12857:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1307,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1288,
																"src": "12883:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1308,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "contributed",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 422,
															"src": "12883:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1309,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1288,
																"src": "12910:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1310,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "transferredShares",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 424,
															"src": "12910:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1311,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1288,
																"src": "12943:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1312,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "receivedShares",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 426,
															"src": "12943:16:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1313,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1288,
																"src": "12973:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1314,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "xInvested",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 428,
															"src": "12973:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1315,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1288,
																"src": "12998:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1316,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "xRewarded",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 432,
															"src": "12998:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1317,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1288,
																"src": "13023:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1318,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "xContributed",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 434,
															"src": "13023:14:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1319,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1288,
																"src": "13051:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1320,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "xWithdrawn",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 436,
															"src": "13051:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1321,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1288,
																"src": "13077:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1322,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "xTransferredShares",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 438,
															"src": "13077:20:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1323,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1288,
																"src": "13111:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1324,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "xReceivedShares",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 440,
															"src": "13111:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1325,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1288,
																"src": "13142:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_memory_ptr",
																	"typeString": "struct DiamondSafe.Account memory"
																}
															},
															"id": 1326,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "xCompounded",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 430,
															"src": "13142:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1327,
													"isConstant": false,
													"isInlineArray": true,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "12769:396:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$14_memory_ptr",
														"typeString": "uint256[14] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12735:430:2"
											},
											{
												"expression": {
													"id": 1329,
													"name": "accountArray",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1298,
													"src": "13182:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$14_memory_ptr",
														"typeString": "uint256[14] memory"
													}
												},
												"functionReturnParameters": 1286,
												"id": 1330,
												"nodeType": "Return",
												"src": "13175:19:2"
											}
										]
									},
									"functionSelector": "8086b8ba",
									"id": 1332,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "accountOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1281,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1280,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 1332,
												"src": "12623:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1279,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12623:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12622:15:2"
									},
									"returnParameters": {
										"id": 1286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1285,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1332,
												"src": "12659:18:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$14_memory_ptr",
													"typeString": "uint256[14]"
												},
												"typeName": {
													"baseType": {
														"id": 1282,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "12659:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1284,
													"length": {
														"hexValue": "3134",
														"id": 1283,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12667:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_14_by_1",
															"typeString": "int_const 14"
														},
														"value": "14"
													},
													"nodeType": "ArrayTypeName",
													"src": "12659:11:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$14_storage_ptr",
														"typeString": "uint256[14]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12658:20:2"
									},
									"scope": 2005,
									"src": "12604:597:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1365,
										"nodeType": "Block",
										"src": "13275:215:2",
										"statements": [
											{
												"assignments": [
													1340
												],
												"declarations": [
													{
														"constant": false,
														"id": 1340,
														"mutability": "mutable",
														"name": "share",
														"nodeType": "VariableDeclaration",
														"scope": 1365,
														"src": "13285:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1339,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13285:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1348,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "313030",
															"id": 1346,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13335:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															},
															"value": "100"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1343,
																	"name": "dripRate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 362,
																	"src": "13321:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																],
																"expression": {
																	"id": 1341,
																	"name": "dripPoolBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 360,
																	"src": "13301:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1342,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mul",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2825,
																"src": "13301:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1344,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13301:29:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1345,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2847,
														"src": "13301:33:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1347,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13301:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13285:54:2"
											},
											{
												"expression": {
													"condition": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1351,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1349,
																	"name": "currentTotalStaked",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 386,
																	"src": "13369:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1350,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13390:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "13369:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 1352,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "13368:24:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "30",
														"id": 1362,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "13482:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"id": 1363,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "13368:115:2",
													"trueExpression": {
														"arguments": [
															{
																"id": 1360,
																"name": "currentTotalStaked",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 386,
																"src": "13444:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"baseExpression": {
																			"id": 1355,
																			"name": "balanceOf_",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 449,
																			"src": "13421:10:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																				"typeString": "mapping(address => uint256)"
																			}
																		},
																		"id": 1357,
																		"indexExpression": {
																			"id": 1356,
																			"name": "_user",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1334,
																			"src": "13432:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "13421:17:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1353,
																		"name": "share",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1340,
																		"src": "13411:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1354,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "mul",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2825,
																	"src": "13411:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 1358,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "13411:28:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1359,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "div",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2847,
															"src": "13411:32:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1361,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "13411:52:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1338,
												"id": 1364,
												"nodeType": "Return",
												"src": "13349:134:2"
											}
										]
									},
									"functionSelector": "fbaf1bbd",
									"id": 1366,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "dailyEstimate",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1335,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1334,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 1366,
												"src": "13230:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1333,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13230:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13229:15:2"
									},
									"returnParameters": {
										"id": 1338,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1337,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1366,
												"src": "13266:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1336,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13266:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13265:9:2"
									},
									"scope": 2005,
									"src": "13207:283:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1404,
										"nodeType": "Block",
										"src": "13726:295:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1383,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1380,
																		"name": "_divs",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1370,
																		"src": "13754:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1378,
																		"name": "_pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1368,
																		"src": "13744:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1379,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "add",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2769,
																	"src": "13744:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 1381,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "13744:16:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "33",
																"id": 1382,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13764:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_3_by_1",
																	"typeString": "int_const 3"
																},
																"value": "3"
															},
															"src": "13744:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54454e5f504f5254494f4e535f524551554952455f4449564953494f4e",
															"id": 1384,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13767:31:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4c70c5fa0b5c0d2773598ee22ede93a0b89d086249c68ce8bc880fe634a056ae",
																"typeString": "literal_string \"TEN_PORTIONS_REQUIRE_DIVISION\""
															},
															"value": "TEN_PORTIONS_REQUIRE_DIVISION"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4c70c5fa0b5c0d2773598ee22ede93a0b89d086249c68ce8bc880fe634a056ae",
																"typeString": "literal_string \"TEN_PORTIONS_REQUIRE_DIVISION\""
															}
														],
														"id": 1377,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "13736:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1385,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13736:63:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1386,
												"nodeType": "ExpressionStatement",
												"src": "13736:63:2"
											},
											{
												"expression": {
													"id": 1389,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1387,
														"name": "forPool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 374,
														"src": "13843:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1388,
														"name": "_pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1368,
														"src": "13853:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "13843:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1390,
												"nodeType": "ExpressionStatement",
												"src": "13843:15:2"
											},
											{
												"expression": {
													"id": 1393,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1391,
														"name": "forDivs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 376,
														"src": "13868:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1392,
														"name": "_divs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1370,
														"src": "13878:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "13868:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1394,
												"nodeType": "ExpressionStatement",
												"src": "13868:15:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1396,
															"name": "_pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1368,
															"src": "13963:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1397,
															"name": "_divs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1370,
															"src": "13970:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1398,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "13977:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1399,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "13977:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1395,
														"name": "onSetFeeSplit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 543,
														"src": "13949:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (uint256,uint256,uint256)"
														}
													},
													"id": 1400,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13949:44:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1401,
												"nodeType": "EmitStatement",
												"src": "13944:49:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1402,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "14010:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1376,
												"id": 1403,
												"nodeType": "Return",
												"src": "14003:11:2"
											}
										]
									},
									"functionSelector": "7e6335c7",
									"id": 1405,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1373,
											"modifierName": {
												"id": 1372,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 2258,
												"src": "13692:9:2",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "13692:9:2"
										}
									],
									"name": "setFeeSplit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1368,
												"mutability": "mutable",
												"name": "_pool",
												"nodeType": "VariableDeclaration",
												"scope": 1405,
												"src": "13642:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1367,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13642:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1370,
												"mutability": "mutable",
												"name": "_divs",
												"nodeType": "VariableDeclaration",
												"scope": 1405,
												"src": "13665:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1369,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13665:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13632:52:2"
									},
									"returnParameters": {
										"id": 1376,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1375,
												"mutability": "mutable",
												"name": "_success",
												"nodeType": "VariableDeclaration",
												"scope": 1405,
												"src": "13711:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1374,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "13711:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13710:15:2"
									},
									"scope": 2005,
									"src": "13612:409:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1459,
										"nodeType": "Block",
										"src": "14192:415:2",
										"statements": [
											{
												"body": {
													"id": 1436,
													"nodeType": "Block",
													"src": "14234:130:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30783830616335386364",
																				"id": 1431,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "14327:10:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2158778573_by_1",
																					"typeString": "int_const 2158778573"
																				},
																				"value": "0x80ac58cd"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_2158778573_by_1",
																					"typeString": "int_const 2158778573"
																				}
																			],
																			"expression": {
																				"baseExpression": {
																					"id": 1427,
																					"name": "_contract",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1408,
																					"src": "14296:9:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_contract$_IERC721_$2199_$dyn_memory_ptr",
																						"typeString": "contract IERC721[] memory"
																					}
																				},
																				"id": 1429,
																				"indexExpression": {
																					"id": 1428,
																					"name": "i",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1416,
																					"src": "14306:1:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "14296:12:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IERC721_$2199",
																					"typeString": "contract IERC721"
																				}
																			},
																			"id": 1430,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "supportsInterface",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 2975,
																			"src": "14296:30:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_external_view$_t_bytes4_$returns$_t_bool_$",
																				"typeString": "function (bytes4) view external returns (bool)"
																			}
																		},
																		"id": 1432,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "14296:42:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "4e4f545f455243373231",
																		"id": 1433,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "14340:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_d74553be9cf5182c4eb87cee7703c25a8fb7e946d1fe89483a54f86d57680453",
																			"typeString": "literal_string \"NOT_ERC721\""
																		},
																		"value": "NOT_ERC721"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_d74553be9cf5182c4eb87cee7703c25a8fb7e946d1fe89483a54f86d57680453",
																			"typeString": "literal_string \"NOT_ERC721\""
																		}
																	],
																	"id": 1426,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		-18,
																		-18
																	],
																	"referencedDeclaration": -18,
																	"src": "14288:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1434,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "14288:65:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1435,
															"nodeType": "ExpressionStatement",
															"src": "14288:65:2"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1422,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1419,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1416,
														"src": "14213:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1420,
															"name": "jpeg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 348,
															"src": "14217:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_contract$_IERC721_$2199_$dyn_storage",
																"typeString": "contract IERC721[] storage ref"
															}
														},
														"id": 1421,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "14217:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "14213:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1437,
												"initializationExpression": {
													"assignments": [
														1416
													],
													"declarations": [
														{
															"constant": false,
															"id": 1416,
															"mutability": "mutable",
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 1437,
															"src": "14202:6:2",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1415,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "14202:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1418,
													"initialValue": {
														"hexValue": "30",
														"id": 1417,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "14210:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "14202:9:2"
												},
												"loopExpression": {
													"expression": {
														"id": 1424,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "14230:3:2",
														"subExpression": {
															"id": 1423,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1416,
															"src": "14230:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1425,
													"nodeType": "ExpressionStatement",
													"src": "14230:3:2"
												},
												"nodeType": "ForStatement",
												"src": "14198:166:2"
											},
											{
												"assignments": [
													1441
												],
												"declarations": [
													{
														"constant": false,
														"id": 1441,
														"mutability": "mutable",
														"name": "oldContract",
														"nodeType": "VariableDeclaration",
														"scope": 1459,
														"src": "14373:28:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_contract$_IERC721_$2199_$dyn_memory_ptr",
															"typeString": "contract IERC721[]"
														},
														"typeName": {
															"baseType": {
																"id": 1439,
																"name": "IERC721",
																"nodeType": "UserDefinedTypeName",
																"referencedDeclaration": 2199,
																"src": "14373:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC721_$2199",
																	"typeString": "contract IERC721"
																}
															},
															"id": 1440,
															"nodeType": "ArrayTypeName",
															"src": "14373:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_contract$_IERC721_$2199_$dyn_storage_ptr",
																"typeString": "contract IERC721[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1443,
												"initialValue": {
													"id": 1442,
													"name": "jpeg",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 348,
													"src": "14404:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC721_$2199_$dyn_storage",
														"typeString": "contract IERC721[] storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14373:35:2"
											},
											{
												"expression": {
													"id": 1446,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1444,
														"name": "jpeg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 348,
														"src": "14418:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_contract$_IERC721_$2199_$dyn_storage",
															"typeString": "contract IERC721[] storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1445,
														"name": "_contract",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1408,
														"src": "14425:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_contract$_IERC721_$2199_$dyn_memory_ptr",
															"typeString": "contract IERC721[] memory"
														}
													},
													"src": "14418:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC721_$2199_$dyn_storage",
														"typeString": "contract IERC721[] storage ref"
													}
												},
												"id": 1447,
												"nodeType": "ExpressionStatement",
												"src": "14418:16:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1449,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "14482:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1450,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "14482:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 1451,
															"name": "oldContract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1441,
															"src": "14506:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_contract$_IERC721_$2199_$dyn_memory_ptr",
																"typeString": "contract IERC721[] memory"
															}
														},
														{
															"id": 1452,
															"name": "_contract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1408,
															"src": "14531:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_contract$_IERC721_$2199_$dyn_memory_ptr",
																"typeString": "contract IERC721[] memory"
															}
														},
														{
															"expression": {
																"id": 1453,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "14554:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1454,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "14554:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_array$_t_contract$_IERC721_$2199_$dyn_memory_ptr",
																"typeString": "contract IERC721[] memory"
															},
															{
																"typeIdentifier": "t_array$_t_contract$_IERC721_$2199_$dyn_memory_ptr",
																"typeString": "contract IERC721[] memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1448,
														"name": "onSetImmunityToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 555,
														"src": "14450:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_array$_t_contract$_IERC721_$2199_$dyn_memory_ptr_$_t_array$_t_contract$_IERC721_$2199_$dyn_memory_ptr_$_t_uint256_$returns$__$",
															"typeString": "function (address,contract IERC721[] memory,contract IERC721[] memory,uint256)"
														}
													},
													"id": 1455,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14450:129:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1456,
												"nodeType": "EmitStatement",
												"src": "14445:134:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1457,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "14596:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1414,
												"id": 1458,
												"nodeType": "Return",
												"src": "14589:11:2"
											}
										]
									},
									"functionSelector": "f6db0da0",
									"id": 1460,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1411,
											"modifierName": {
												"id": 1410,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 2258,
												"src": "14158:9:2",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "14158:9:2"
										}
									],
									"name": "setImmunityToken",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1409,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1408,
												"mutability": "mutable",
												"name": "_contract",
												"nodeType": "VariableDeclaration",
												"scope": 1460,
												"src": "14118:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC721_$2199_$dyn_memory_ptr",
													"typeString": "contract IERC721[]"
												},
												"typeName": {
													"baseType": {
														"id": 1406,
														"name": "IERC721",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 2199,
														"src": "14118:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC721_$2199",
															"typeString": "contract IERC721"
														}
													},
													"id": 1407,
													"nodeType": "ArrayTypeName",
													"src": "14118:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC721_$2199_$dyn_storage_ptr",
														"typeString": "contract IERC721[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14108:42:2"
									},
									"returnParameters": {
										"id": 1414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1413,
												"mutability": "mutable",
												"name": "_success",
												"nodeType": "VariableDeclaration",
												"scope": 1460,
												"src": "14177:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1412,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "14177:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14176:15:2"
									},
									"scope": 2005,
									"src": "14083:524:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1518,
										"nodeType": "Block",
										"src": "14817:697:2",
										"statements": [
											{
												"assignments": [
													1466
												],
												"declarations": [
													{
														"constant": false,
														"id": 1466,
														"mutability": "mutable",
														"name": "_onePiece",
														"nodeType": "VariableDeclaration",
														"scope": 1518,
														"src": "14827:17:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1465,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "14827:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1471,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "3130",
															"id": 1469,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "14855:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_10_by_1",
																"typeString": "int_const 10"
															},
															"value": "10"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_10_by_1",
																"typeString": "int_const 10"
															}
														],
														"expression": {
															"id": 1467,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1462,
															"src": "14847:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1468,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2847,
														"src": "14847:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1470,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14847:11:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14827:31:2"
											},
											{
												"assignments": [
													1473
												],
												"declarations": [
													{
														"constant": false,
														"id": 1473,
														"mutability": "mutable",
														"name": "_forPool",
														"nodeType": "VariableDeclaration",
														"scope": 1518,
														"src": "14869:16:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1472,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "14869:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1479,
												"initialValue": {
													"components": [
														{
															"arguments": [
																{
																	"id": 1476,
																	"name": "forPool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 374,
																	"src": "14903:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1474,
																	"name": "_onePiece",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1466,
																	"src": "14889:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1475,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mul",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2825,
																"src": "14889:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1477,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14889:22:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1478,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "14888:24:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14869:43:2"
											},
											{
												"assignments": [
													1481
												],
												"declarations": [
													{
														"constant": false,
														"id": 1481,
														"mutability": "mutable",
														"name": "_forDivs",
														"nodeType": "VariableDeclaration",
														"scope": 1518,
														"src": "14943:16:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1480,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "14943:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1487,
												"initialValue": {
													"components": [
														{
															"arguments": [
																{
																	"id": 1484,
																	"name": "forDivs",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 376,
																	"src": "14977:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1482,
																	"name": "_onePiece",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1466,
																	"src": "14963:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1483,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mul",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2825,
																"src": "14963:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1485,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14963:22:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1486,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "14962:24:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14943:43:2"
											},
											{
												"expression": {
													"id": 1493,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1488,
														"name": "dripPoolBalance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 360,
														"src": "15017:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1491,
																"name": "_forPool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1473,
																"src": "15055:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 1489,
																"name": "dripPoolBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 360,
																"src": "15035:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1490,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2769,
															"src": "15035:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1492,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "15035:29:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "15017:47:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1494,
												"nodeType": "ExpressionStatement",
												"src": "15017:47:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1497,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1495,
														"name": "currentTotalStaked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 386,
														"src": "15143:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1496,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "15164:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "15143:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1516,
													"nodeType": "Block",
													"src": "15384:124:2",
													"statements": [
														{
															"expression": {
																"id": 1514,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1512,
																	"name": "dripPoolBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 360,
																	"src": "15470:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 1513,
																	"name": "_forDivs",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1481,
																	"src": "15489:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "15470:27:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1515,
															"nodeType": "ExpressionStatement",
															"src": "15470:27:2"
														}
													]
												},
												"id": 1517,
												"nodeType": "IfStatement",
												"src": "15139:369:2",
												"trueBody": {
													"id": 1511,
													"nodeType": "Block",
													"src": "15167:211:2",
													"statements": [
														{
															"expression": {
																"id": 1509,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1498,
																	"name": "profitPerShare_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 388,
																	"src": "15229:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1501,
																			"name": "profitPerShare_",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 388,
																			"src": "15277:15:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1507,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1504,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 1502,
																							"name": "_forDivs",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1481,
																							"src": "15311:8:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"id": 1503,
																							"name": "magnitude",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 372,
																							"src": "15322:9:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "15311:20:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 1505,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "15310:22:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "/",
																			"rightExpression": {
																				"id": 1506,
																				"name": "currentTotalStaked",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 386,
																				"src": "15335:18:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "15310:43:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1499,
																			"name": "SafeMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2964,
																			"src": "15247:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																				"typeString": "type(library SafeMath)"
																			}
																		},
																		"id": 1500,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "add",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2769,
																		"src": "15247:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1508,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "15247:120:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "15229:138:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1510,
															"nodeType": "ExpressionStatement",
															"src": "15229:138:2"
														}
													]
												}
											}
										]
									},
									"id": 1519,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allocateFees",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1463,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1462,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 1519,
												"src": "14799:8:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1461,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "14799:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14798:10:2"
									},
									"returnParameters": {
										"id": 1464,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14817:0:2"
									},
									"scope": 2005,
									"src": "14777:737:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1605,
										"nodeType": "Block",
										"src": "15585:1212:2",
										"statements": [
											{
												"assignments": [
													1523
												],
												"declarations": [
													{
														"constant": false,
														"id": 1523,
														"mutability": "mutable",
														"name": "_currentTimestamp",
														"nodeType": "VariableDeclaration",
														"scope": 1605,
														"src": "15595:22:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1522,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "15595:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1527,
												"initialValue": {
													"components": [
														{
															"expression": {
																"id": 1524,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "15621:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1525,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "15621:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1526,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "15620:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "15595:42:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1533,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1530,
																"name": "lastRebaseTime",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 384,
																"src": "15728:14:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 1528,
																"name": "_currentTimestamp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1523,
																"src": "15702:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1529,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "safeSub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2963,
															"src": "15702:25:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1531,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "15702:41:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1532,
														"name": "rebaseFrequency",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 379,
														"src": "15746:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "15702:59:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1545,
												"nodeType": "IfStatement",
												"src": "15698:278:2",
												"trueBody": {
													"id": 1544,
													"nodeType": "Block",
													"src": "15763:213:2",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 1535,
																			"name": "totalBalance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1104,
																			"src": "15826:12:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																				"typeString": "function () view returns (uint256)"
																			}
																		},
																		"id": 1536,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "15826:14:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1537,
																		"name": "_currentTimestamp",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1523,
																		"src": "15842:17:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1534,
																	"name": "onRebase",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 519,
																	"src": "15817:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (uint256,uint256)"
																	}
																},
																"id": 1538,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "15817:43:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1539,
															"nodeType": "EmitStatement",
															"src": "15812:48:2"
														},
														{
															"expression": {
																"id": 1542,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1540,
																	"name": "lastRebaseTime",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 384,
																	"src": "15931:14:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1541,
																	"name": "_currentTimestamp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1523,
																	"src": "15948:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "15931:34:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1543,
															"nodeType": "ExpressionStatement",
															"src": "15931:34:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1556,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1552,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 1548,
																	"name": "_currentTimestamp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1523,
																	"src": "16065:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1549,
																	"name": "lastPayout",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 354,
																	"src": "16084:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1546,
																	"name": "SafeMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2964,
																	"src": "16048:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																		"typeString": "type(library SafeMath)"
																	}
																},
																"id": 1547,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "safeSub",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2963,
																"src": "16048:16:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1550,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "16048:47:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 1551,
															"name": "payoutFrequency",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 382,
															"src": "16098:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "16048:65:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1555,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1553,
															"name": "currentTotalStaked",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 386,
															"src": "16129:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1554,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "16150:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "16129:22:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "16048:103:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1604,
												"nodeType": "IfStatement",
												"src": "16031:760:2",
												"trueBody": {
													"id": 1603,
													"nodeType": "Block",
													"src": "16162:629:2",
													"statements": [
														{
															"assignments": [
																1558
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1558,
																	"mutability": "mutable",
																	"name": "share",
																	"nodeType": "VariableDeclaration",
																	"scope": 1603,
																	"src": "16223:13:2",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1557,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "16223:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1569,
															"initialValue": {
																"arguments": [
																	{
																		"hexValue": "3234",
																		"id": 1567,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "16299:8:2",
																		"subdenomination": "hours",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_86400_by_1",
																			"typeString": "int_const 86400"
																		},
																		"value": "24"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_86400_by_1",
																			"typeString": "int_const 86400"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"hexValue": "313030",
																				"id": 1564,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "16273:3:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_100_by_1",
																					"typeString": "int_const 100"
																				},
																				"value": "100"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_100_by_1",
																					"typeString": "int_const 100"
																				}
																			],
																			"expression": {
																				"arguments": [
																					{
																						"id": 1561,
																						"name": "dripRate",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 362,
																						"src": "16259:8:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					],
																					"expression": {
																						"id": 1559,
																						"name": "dripPoolBalance",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 360,
																						"src": "16239:15:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 1560,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "mul",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2825,
																					"src": "16239:19:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																						"typeString": "function (uint256,uint256) pure returns (uint256)"
																					}
																				},
																				"id": 1562,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "16239:29:2",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1563,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "div",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 2847,
																			"src": "16239:33:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																				"typeString": "function (uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1565,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "16239:38:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1566,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "div",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2847,
																	"src": "16239:42:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 1568,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "16239:82:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "16223:98:2"
														},
														{
															"assignments": [
																1571
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1571,
																	"mutability": "mutable",
																	"name": "profit",
																	"nodeType": "VariableDeclaration",
																	"scope": 1603,
																	"src": "16335:14:2",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1570,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "16335:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1578,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1577,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1572,
																	"name": "share",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1558,
																	"src": "16352:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"arguments": [
																		{
																			"id": 1575,
																			"name": "lastPayout",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 354,
																			"src": "16386:10:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1573,
																			"name": "_currentTimestamp",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1523,
																			"src": "16360:17:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1574,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "safeSub",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2963,
																		"src": "16360:25:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1576,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "16360:37:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "16352:45:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "16335:62:2"
														},
														{
															"expression": {
																"id": 1584,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1579,
																	"name": "dripPoolBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 360,
																	"src": "16488:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1582,
																			"name": "profit",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1571,
																			"src": "16530:6:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1580,
																			"name": "dripPoolBalance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 360,
																			"src": "16506:15:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1581,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "safeSub",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2963,
																		"src": "16506:23:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1583,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "16506:31:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "16488:49:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1585,
															"nodeType": "ExpressionStatement",
															"src": "16488:49:2"
														},
														{
															"expression": {
																"id": 1597,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1586,
																	"name": "profitPerShare_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 388,
																	"src": "16551:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1589,
																			"name": "profitPerShare_",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 388,
																			"src": "16599:15:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1595,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1592,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 1590,
																							"name": "profit",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1571,
																							"src": "16633:6:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"id": 1591,
																							"name": "magnitude",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 372,
																							"src": "16642:9:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "16633:18:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 1593,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "16632:20:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "/",
																			"rightExpression": {
																				"id": 1594,
																				"name": "currentTotalStaked",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 386,
																				"src": "16655:18:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "16632:41:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1587,
																			"name": "SafeMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2964,
																			"src": "16569:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																				"typeString": "type(library SafeMath)"
																			}
																		},
																		"id": 1588,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "add",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2769,
																		"src": "16569:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1596,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "16569:118:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "16551:136:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1598,
															"nodeType": "ExpressionStatement",
															"src": "16551:136:2"
														},
														{
															"expression": {
																"id": 1601,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1599,
																	"name": "lastPayout",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 354,
																	"src": "16750:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1600,
																	"name": "_currentTimestamp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1523,
																	"src": "16763:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "16750:30:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1602,
															"nodeType": "ExpressionStatement",
															"src": "16750:30:2"
														}
													]
												}
											}
										]
									},
									"id": 1606,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "distribute",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1520,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15574:2:2"
									},
									"returnParameters": {
										"id": 1521,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15585:0:2"
									},
									"scope": 2005,
									"src": "15555:1242:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1740,
										"nodeType": "Block",
										"src": "16953:1466:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1627,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1620,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1615,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 453,
																	"src": "17055:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 1617,
																"indexExpression": {
																	"id": 1616,
																	"name": "_recipient",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1608,
																	"src": "17066:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "17055:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 1618,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "deposited",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 412,
															"src": "17055:32:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 1619,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "17091:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "17055:37:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1626,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1621,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 453,
																	"src": "17108:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 1623,
																"indexExpression": {
																	"id": 1622,
																	"name": "_recipient",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1608,
																	"src": "17119:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "17108:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 1624,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "receivedShares",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 426,
															"src": "17108:37:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 1625,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "17149:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "17108:42:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "17055:95:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1633,
												"nodeType": "IfStatement",
												"src": "17038:158:2",
												"trueBody": {
													"id": 1632,
													"nodeType": "Block",
													"src": "17161:35:2",
													"statements": [
														{
															"expression": {
																"id": 1630,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1628,
																	"name": "users",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 350,
																	"src": "17175:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 1629,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "17184:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "17175:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1631,
															"nodeType": "ExpressionStatement",
															"src": "17175:10:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1636,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1634,
														"name": "totalTxs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 352,
														"src": "17234:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1635,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "17246:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "17234:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1637,
												"nodeType": "ExpressionStatement",
												"src": "17234:13:2"
											},
											{
												"assignments": [
													1639
												],
												"declarations": [
													{
														"constant": false,
														"id": 1639,
														"mutability": "mutable",
														"name": "_undividedDividends",
														"nodeType": "VariableDeclaration",
														"scope": 1740,
														"src": "17263:27:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1638,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "17263:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1647,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1646,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1642,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1610,
																"src": "17306:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1643,
																"name": "divsFee",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 367,
																"src": "17315:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															],
															"expression": {
																"id": 1640,
																"name": "SafeMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2964,
																"src": "17293:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																	"typeString": "type(library SafeMath)"
																}
															},
															"id": 1641,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "mul",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2825,
															"src": "17293:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1644,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "17293:30:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "313030",
														"id": 1645,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "17326:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100_by_1",
															"typeString": "int_const 100"
														},
														"value": "100"
													},
													"src": "17293:36:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "17263:66:2"
											},
											{
												"assignments": [
													1649
												],
												"declarations": [
													{
														"constant": false,
														"id": 1649,
														"mutability": "mutable",
														"name": "_tokens",
														"nodeType": "VariableDeclaration",
														"scope": 1740,
														"src": "17341:17:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1648,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "17341:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1655,
												"initialValue": {
													"arguments": [
														{
															"id": 1652,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1610,
															"src": "17374:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1653,
															"name": "_undividedDividends",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1639,
															"src": "17383:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1650,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2964,
															"src": "17361:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 1651,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2791,
														"src": "17361:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1654,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17361:42:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "17341:62:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1657,
															"name": "_recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1608,
															"src": "17468:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1658,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1610,
															"src": "17480:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1659,
															"name": "_tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1649,
															"src": "17489:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1660,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "17498:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1661,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "17498:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1656,
														"name": "onDeposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 463,
														"src": "17458:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256)"
														}
													},
													"id": 1662,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17458:56:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1663,
												"nodeType": "EmitStatement",
												"src": "17453:61:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1675,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1667,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1665,
																	"name": "_tokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1649,
																	"src": "17613:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1666,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "17623:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "17613:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1674,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1670,
																			"name": "_tokens",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1649,
																			"src": "17657:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 1671,
																			"name": "currentTotalStaked",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 386,
																			"src": "17666:18:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1668,
																			"name": "SafeMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2964,
																			"src": "17644:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																				"typeString": "type(library SafeMath)"
																			}
																		},
																		"id": 1669,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "add",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2769,
																		"src": "17644:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1672,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "17644:41:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"id": 1673,
																	"name": "currentTotalStaked",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 386,
																	"src": "17688:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "17644:62:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "17613:93:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1664,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "17592:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1676,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17592:124:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1677,
												"nodeType": "ExpressionStatement",
												"src": "17592:124:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1680,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1678,
														"name": "currentTotalStaked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 386,
														"src": "17730:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1679,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "17751:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "17730:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1690,
													"nodeType": "Block",
													"src": "17814:53:2",
													"statements": [
														{
															"expression": {
																"id": 1688,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1686,
																	"name": "currentTotalStaked",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 386,
																	"src": "17828:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1687,
																	"name": "_tokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1649,
																	"src": "17849:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "17828:28:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1689,
															"nodeType": "ExpressionStatement",
															"src": "17828:28:2"
														}
													]
												},
												"id": 1691,
												"nodeType": "IfStatement",
												"src": "17726:141:2",
												"trueBody": {
													"id": 1685,
													"nodeType": "Block",
													"src": "17754:54:2",
													"statements": [
														{
															"expression": {
																"id": 1683,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1681,
																	"name": "currentTotalStaked",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 386,
																	"src": "17768:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 1682,
																	"name": "_tokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1649,
																	"src": "17790:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "17768:29:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1684,
															"nodeType": "ExpressionStatement",
															"src": "17768:29:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1693,
															"name": "_undividedDividends",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1639,
															"src": "17945:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1692,
														"name": "allocateFees",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1519,
														"src": "17932:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1694,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17932:33:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1695,
												"nodeType": "ExpressionStatement",
												"src": "17932:33:2"
											},
											{
												"expression": {
													"id": 1706,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1696,
															"name": "balanceOf_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 449,
															"src": "17975:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1698,
														"indexExpression": {
															"id": 1697,
															"name": "_recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1608,
															"src": "17986:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "17975:22:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"baseExpression": {
																	"id": 1701,
																	"name": "balanceOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 449,
																	"src": "18013:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1703,
																"indexExpression": {
																	"id": 1702,
																	"name": "_recipient",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1608,
																	"src": "18024:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "18013:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1704,
																"name": "_tokens",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1649,
																"src": "18037:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 1699,
																"name": "SafeMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2964,
																"src": "18000:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																	"typeString": "type(library SafeMath)"
																}
															},
															"id": 1700,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2769,
															"src": "18000:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1705,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "18000:45:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "17975:70:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1707,
												"nodeType": "ExpressionStatement",
												"src": "17975:70:2"
											},
											{
												"assignments": [
													1709
												],
												"declarations": [
													{
														"constant": false,
														"id": 1709,
														"mutability": "mutable",
														"name": "_updatedPayouts",
														"nodeType": "VariableDeclaration",
														"scope": 1740,
														"src": "18086:22:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1708,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "18086:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1717,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1715,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1713,
																"name": "profitPerShare_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 388,
																"src": "18120:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1714,
																"name": "_tokens",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1649,
																"src": "18138:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "18120:25:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"components": [
															{
																"id": 1711,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "18112:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_int256_$",
																	"typeString": "type(int256)"
																},
																"typeName": {
																	"id": 1710,
																	"name": "int256",
																	"nodeType": "ElementaryTypeName",
																	"src": "18112:6:2",
																	"typeDescriptions": {}
																}
															}
														],
														"id": 1712,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "18111:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int256_$",
															"typeString": "type(int256)"
														}
													},
													"id": 1716,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18111:35:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18086:60:2"
											},
											{
												"expression": {
													"id": 1722,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1718,
															"name": "payoutsOf_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 445,
															"src": "18184:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_int256_$",
																"typeString": "mapping(address => int256)"
															}
														},
														"id": 1720,
														"indexExpression": {
															"id": 1719,
															"name": "_recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1608,
															"src": "18195:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "18184:22:2",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1721,
														"name": "_updatedPayouts",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1709,
														"src": "18210:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "18184:41:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"id": 1723,
												"nodeType": "ExpressionStatement",
												"src": "18184:41:2"
											},
											{
												"expression": {
													"id": 1729,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1724,
																"name": "accountOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 453,
																"src": "18235:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																	"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																}
															},
															"id": 1726,
															"indexExpression": {
																"id": 1725,
																"name": "_recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1608,
																"src": "18246:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "18235:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$441_storage",
																"typeString": "struct DiamondSafe.Account storage ref"
															}
														},
														"id": 1727,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "deposited",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 412,
														"src": "18235:32:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1728,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1610,
														"src": "18271:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "18235:43:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1730,
												"nodeType": "ExpressionStatement",
												"src": "18235:43:2"
											},
											{
												"expression": {
													"id": 1736,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1731,
																"name": "accountOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 453,
																"src": "18288:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																	"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																}
															},
															"id": 1733,
															"indexExpression": {
																"id": 1732,
																"name": "_recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1608,
																"src": "18299:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "18288:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$441_storage",
																"typeString": "struct DiamondSafe.Account storage ref"
															}
														},
														"id": 1734,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "xInvested",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 428,
														"src": "18288:32:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1735,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "18324:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "18288:37:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1737,
												"nodeType": "ExpressionStatement",
												"src": "18288:37:2"
											},
											{
												"expression": {
													"id": 1738,
													"name": "_tokens",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1649,
													"src": "18405:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1614,
												"id": 1739,
												"nodeType": "Return",
												"src": "18398:14:2"
											}
										]
									},
									"id": 1741,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_depositTokens",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1608,
												"mutability": "mutable",
												"name": "_recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1741,
												"src": "16876:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1607,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16876:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1610,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 1741,
												"src": "16904:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1609,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16904:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16866:59:2"
									},
									"returnParameters": {
										"id": 1614,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1613,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1741,
												"src": "16944:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1612,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16944:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16943:9:2"
									},
									"scope": 2005,
									"src": "16843:1576:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1828,
										"nodeType": "Block",
										"src": "18513:1124:2",
										"statements": [
											{
												"assignments": [
													1747
												],
												"declarations": [
													{
														"constant": false,
														"id": 1747,
														"mutability": "mutable",
														"name": "_user",
														"nodeType": "VariableDeclaration",
														"scope": 1828,
														"src": "18523:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1746,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "18523:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1750,
												"initialValue": {
													"expression": {
														"id": 1748,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -15,
														"src": "18539:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1749,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "18539:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18523:26:2"
											},
											{
												"assignments": [
													1752
												],
												"declarations": [
													{
														"constant": false,
														"id": 1752,
														"mutability": "mutable",
														"name": "_dividends",
														"nodeType": "VariableDeclaration",
														"scope": 1828,
														"src": "18625:18:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1751,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "18625:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1756,
												"initialValue": {
													"arguments": [
														{
															"id": 1754,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1747,
															"src": "18658:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1753,
														"name": "dividendsOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1140,
														"src": "18646:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1755,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18646:18:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18625:39:2"
											},
											{
												"expression": {
													"id": 1767,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1757,
															"name": "payoutsOf_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 445,
															"src": "18674:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_int256_$",
																"typeString": "mapping(address => int256)"
															}
														},
														"id": 1759,
														"indexExpression": {
															"id": 1758,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1747,
															"src": "18685:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "18674:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1765,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1763,
																	"name": "_dividends",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1752,
																	"src": "18704:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1764,
																	"name": "magnitude",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 372,
																	"src": "18717:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "18704:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"components": [
																{
																	"id": 1761,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "18696:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_int256_$",
																		"typeString": "type(int256)"
																	},
																	"typeName": {
																		"id": 1760,
																		"name": "int256",
																		"nodeType": "ElementaryTypeName",
																		"src": "18696:6:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"id": 1762,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "18695:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int256_$",
																"typeString": "type(int256)"
															}
														},
														"id": 1766,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "18695:32:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "18674:53:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"id": 1768,
												"nodeType": "ExpressionStatement",
												"src": "18674:53:2"
											},
											{
												"assignments": [
													1770
												],
												"declarations": [
													{
														"constant": false,
														"id": 1770,
														"mutability": "mutable",
														"name": "_tokens",
														"nodeType": "VariableDeclaration",
														"scope": 1828,
														"src": "18882:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1769,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "18882:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1776,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 1772,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "18915:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1773,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "18915:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 1774,
															"name": "_dividends",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1752,
															"src": "18927:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1771,
														"name": "_depositTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1741,
														"src": "18900:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (address,uint256) returns (uint256)"
														}
													},
													"id": 1775,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18900:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18882:56:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1778,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1747,
															"src": "18996:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1779,
															"name": "_dividends",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1752,
															"src": "19003:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1780,
															"name": "_tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1770,
															"src": "19015:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1781,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "19024:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1782,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "19024:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1777,
														"name": "onCompound",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 483,
														"src": "18985:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256)"
														}
													},
													"id": 1783,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18985:55:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1784,
												"nodeType": "EmitStatement",
												"src": "18980:60:2"
											},
											{
												"expression": {
													"id": 1797,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1785,
																"name": "accountOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 453,
																"src": "19087:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																	"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																}
															},
															"id": 1787,
															"indexExpression": {
																"id": 1786,
																"name": "_user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1747,
																"src": "19098:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "19087:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$441_storage",
																"typeString": "struct DiamondSafe.Account storage ref"
															}
														},
														"id": 1788,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "compounded",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 418,
														"src": "19087:28:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1791,
																		"name": "accountOf_",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 453,
																		"src": "19144:10:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																			"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																		}
																	},
																	"id": 1793,
																	"indexExpression": {
																		"id": 1792,
																		"name": "_user",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1747,
																		"src": "19155:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19144:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Account_$441_storage",
																		"typeString": "struct DiamondSafe.Account storage ref"
																	}
																},
																"id": 1794,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "compounded",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 418,
																"src": "19144:28:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1795,
																"name": "_dividends",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1752,
																"src": "19186:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 1789,
																"name": "SafeMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2964,
																"src": "19118:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																	"typeString": "type(library SafeMath)"
																}
															},
															"id": 1790,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2769,
															"src": "19118:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1796,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "19118:88:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "19087:119:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1798,
												"nodeType": "ExpressionStatement",
												"src": "19087:119:2"
											},
											{
												"expression": {
													"id": 1804,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1799,
																"name": "accountOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 453,
																"src": "19216:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																	"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																}
															},
															"id": 1801,
															"indexExpression": {
																"id": 1800,
																"name": "_user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1747,
																"src": "19227:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "19216:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$441_storage",
																"typeString": "struct DiamondSafe.Account storage ref"
															}
														},
														"id": 1802,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "xCompounded",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 430,
														"src": "19216:29:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1803,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "19249:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "19216:34:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1805,
												"nodeType": "ExpressionStatement",
												"src": "19216:34:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1807,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1747,
															"src": "19325:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 1808,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 453,
																	"src": "19344:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 1810,
																"indexExpression": {
																	"id": 1809,
																	"name": "_user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1747,
																	"src": "19355:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "19344:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 1811,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "deposited",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 412,
															"src": "19344:27:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"baseExpression": {
																"id": 1812,
																"name": "balanceOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 449,
																"src": "19385:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																	"typeString": "mapping(address => uint256)"
																}
															},
															"id": 1814,
															"indexExpression": {
																"id": 1813,
																"name": "_user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1747,
																"src": "19396:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "19385:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 1815,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 453,
																	"src": "19416:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 1817,
																"indexExpression": {
																	"id": 1816,
																	"name": "_user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1747,
																	"src": "19427:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "19416:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 1818,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "withdrawn",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 416,
															"src": "19416:27:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1819,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "19457:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1820,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "19457:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1806,
														"name": "onUpdate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 513,
														"src": "19303:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256,uint256)"
														}
													},
													"id": 1821,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19303:179:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1822,
												"nodeType": "EmitStatement",
												"src": "19298:184:2"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1823,
														"name": "distribute",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1606,
														"src": "19561:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1824,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19561:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1825,
												"nodeType": "ExpressionStatement",
												"src": "19561:12:2"
											},
											{
												"expression": {
													"id": 1826,
													"name": "_tokens",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1770,
													"src": "19623:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1745,
												"id": 1827,
												"nodeType": "Return",
												"src": "19616:14:2"
											}
										]
									},
									"id": 1829,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_compoundTokens",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1742,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18483:2:2"
									},
									"returnParameters": {
										"id": 1745,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1744,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1829,
												"src": "18504:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1743,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18504:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18503:9:2"
									},
									"scope": 2005,
									"src": "18459:1178:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2003,
										"nodeType": "Block",
										"src": "19801:1852:2",
										"statements": [
											{
												"assignments": [
													1839
												],
												"declarations": [
													{
														"constant": false,
														"id": 1839,
														"mutability": "mutable",
														"name": "_sender",
														"nodeType": "VariableDeclaration",
														"scope": 2003,
														"src": "19811:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1838,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "19811:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1842,
												"initialValue": {
													"expression": {
														"id": 1840,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -15,
														"src": "19829:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1841,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "19829:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "19811:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1848,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1844,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1833,
																"src": "19857:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"baseExpression": {
																	"id": 1845,
																	"name": "balanceOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 449,
																	"src": "19868:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1847,
																"indexExpression": {
																	"id": 1846,
																	"name": "_sender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1839,
																	"src": "19879:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "19868:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "19857:30:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1843,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "19849:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1849,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19849:39:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1850,
												"nodeType": "ExpressionStatement",
												"src": "19849:39:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1854,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1851,
															"name": "myEarnings",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1067,
															"src": "19988:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																"typeString": "function () view returns (uint256)"
															}
														},
														"id": 1852,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "19988:12:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1853,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "20003:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "19988:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1859,
												"nodeType": "IfStatement",
												"src": "19984:56:2",
												"trueBody": {
													"id": 1858,
													"nodeType": "Block",
													"src": "20006:34:2",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1855,
																	"name": "harvest",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 850,
																	"src": "20020:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
																		"typeString": "function ()"
																	}
																},
																"id": 1856,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "20020:9:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1857,
															"nodeType": "ExpressionStatement",
															"src": "20020:9:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1870,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1860,
															"name": "balanceOf_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 449,
															"src": "20082:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1862,
														"indexExpression": {
															"id": 1861,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1839,
															"src": "20093:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "20082:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"baseExpression": {
																	"id": 1865,
																	"name": "balanceOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 449,
																	"src": "20117:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1867,
																"indexExpression": {
																	"id": 1866,
																	"name": "_sender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1839,
																	"src": "20128:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "20117:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1868,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1833,
																"src": "20138:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 1863,
																"name": "SafeMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2964,
																"src": "20104:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																	"typeString": "type(library SafeMath)"
																}
															},
															"id": 1864,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2791,
															"src": "20104:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1869,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "20104:42:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "20082:64:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1871,
												"nodeType": "ExpressionStatement",
												"src": "20082:64:2"
											},
											{
												"expression": {
													"id": 1882,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1872,
															"name": "balanceOf_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 449,
															"src": "20156:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1874,
														"indexExpression": {
															"id": 1873,
															"name": "_recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1831,
															"src": "20167:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "20156:22:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"baseExpression": {
																	"id": 1877,
																	"name": "balanceOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 449,
																	"src": "20194:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1879,
																"indexExpression": {
																	"id": 1878,
																	"name": "_recipient",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1831,
																	"src": "20205:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "20194:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1880,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1833,
																"src": "20218:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 1875,
																"name": "SafeMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2964,
																"src": "20181:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_SafeMath_$2964_$",
																	"typeString": "type(library SafeMath)"
																}
															},
															"id": 1876,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2769,
															"src": "20181:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1881,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "20181:45:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "20156:70:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1883,
												"nodeType": "ExpressionStatement",
												"src": "20156:70:2"
											},
											{
												"expression": {
													"id": 1894,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1884,
															"name": "payoutsOf_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 445,
															"src": "20298:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_int256_$",
																"typeString": "mapping(address => int256)"
															}
														},
														"id": 1886,
														"indexExpression": {
															"id": 1885,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1839,
															"src": "20309:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "20298:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1892,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1890,
																	"name": "profitPerShare_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 388,
																	"src": "20330:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1891,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1833,
																	"src": "20348:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "20330:25:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"components": [
																{
																	"id": 1888,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "20322:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_int256_$",
																		"typeString": "type(int256)"
																	},
																	"typeName": {
																		"id": 1887,
																		"name": "int256",
																		"nodeType": "ElementaryTypeName",
																		"src": "20322:6:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"id": 1889,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "20321:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int256_$",
																"typeString": "type(int256)"
															}
														},
														"id": 1893,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "20321:35:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "20298:58:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"id": 1895,
												"nodeType": "ExpressionStatement",
												"src": "20298:58:2"
											},
											{
												"expression": {
													"id": 1906,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1896,
															"name": "payoutsOf_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 445,
															"src": "20366:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_int256_$",
																"typeString": "mapping(address => int256)"
															}
														},
														"id": 1898,
														"indexExpression": {
															"id": 1897,
															"name": "_recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1831,
															"src": "20377:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "20366:22:2",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1904,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1902,
																	"name": "profitPerShare_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 388,
																	"src": "20401:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1903,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1833,
																	"src": "20419:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "20401:25:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"components": [
																{
																	"id": 1900,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "20393:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_int256_$",
																		"typeString": "type(int256)"
																	},
																	"typeName": {
																		"id": 1899,
																		"name": "int256",
																		"nodeType": "ElementaryTypeName",
																		"src": "20393:6:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"id": 1901,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "20392:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int256_$",
																"typeString": "type(int256)"
															}
														},
														"id": 1905,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "20392:35:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "20366:61:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"id": 1907,
												"nodeType": "ExpressionStatement",
												"src": "20366:61:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1920,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1913,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1908,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 453,
																	"src": "20530:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 1910,
																"indexExpression": {
																	"id": 1909,
																	"name": "_recipient",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1831,
																	"src": "20541:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "20530:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 1911,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "deposited",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 412,
															"src": "20530:32:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 1912,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "20566:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "20530:37:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1919,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1914,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 453,
																	"src": "20583:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 1916,
																"indexExpression": {
																	"id": 1915,
																	"name": "_recipient",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1831,
																	"src": "20594:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "20583:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 1917,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "receivedShares",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 426,
															"src": "20583:37:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 1918,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "20624:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "20583:42:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "20530:95:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1926,
												"nodeType": "IfStatement",
												"src": "20513:158:2",
												"trueBody": {
													"id": 1925,
													"nodeType": "Block",
													"src": "20636:35:2",
													"statements": [
														{
															"expression": {
																"id": 1923,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1921,
																	"name": "users",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 350,
																	"src": "20650:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 1922,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "20659:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "20650:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1924,
															"nodeType": "ExpressionStatement",
															"src": "20650:10:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1932,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1927,
																"name": "accountOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 453,
																"src": "20707:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																	"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																}
															},
															"id": 1929,
															"indexExpression": {
																"id": 1928,
																"name": "_sender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1839,
																"src": "20718:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "20707:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$441_storage",
																"typeString": "struct DiamondSafe.Account storage ref"
															}
														},
														"id": 1930,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "xTransferredShares",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 438,
														"src": "20707:38:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1931,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "20749:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "20707:43:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1933,
												"nodeType": "ExpressionStatement",
												"src": "20707:43:2"
											},
											{
												"expression": {
													"id": 1939,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1934,
																"name": "accountOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 453,
																"src": "20760:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																	"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																}
															},
															"id": 1936,
															"indexExpression": {
																"id": 1935,
																"name": "_sender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1839,
																"src": "20771:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "20760:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$441_storage",
																"typeString": "struct DiamondSafe.Account storage ref"
															}
														},
														"id": 1937,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "transferredShares",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 424,
														"src": "20760:37:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1938,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1833,
														"src": "20801:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "20760:48:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1940,
												"nodeType": "ExpressionStatement",
												"src": "20760:48:2"
											},
											{
												"expression": {
													"id": 1946,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1941,
																"name": "accountOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 453,
																"src": "20818:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																	"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																}
															},
															"id": 1943,
															"indexExpression": {
																"id": 1942,
																"name": "_recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1831,
																"src": "20829:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "20818:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$441_storage",
																"typeString": "struct DiamondSafe.Account storage ref"
															}
														},
														"id": 1944,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "receivedShares",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 426,
														"src": "20818:37:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1945,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1833,
														"src": "20859:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "20818:48:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1947,
												"nodeType": "ExpressionStatement",
												"src": "20818:48:2"
											},
											{
												"expression": {
													"id": 1953,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1948,
																"name": "accountOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 453,
																"src": "20876:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																	"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																}
															},
															"id": 1950,
															"indexExpression": {
																"id": 1949,
																"name": "_recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1831,
																"src": "20887:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "20876:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Account_$441_storage",
																"typeString": "struct DiamondSafe.Account storage ref"
															}
														},
														"id": 1951,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "xReceivedShares",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 440,
														"src": "20876:38:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1952,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "20918:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "20876:43:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1954,
												"nodeType": "ExpressionStatement",
												"src": "20876:43:2"
											},
											{
												"expression": {
													"id": 1957,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1955,
														"name": "totalTxs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 352,
														"src": "20971:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1956,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "20983:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "20971:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1958,
												"nodeType": "ExpressionStatement",
												"src": "20971:13:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1960,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1839,
															"src": "21061:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1961,
															"name": "_recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1831,
															"src": "21070:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1962,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1833,
															"src": "21082:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1963,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "21091:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1964,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "21091:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1959,
														"name": "onTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 501,
														"src": "21050:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1965,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "21050:57:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1966,
												"nodeType": "EmitStatement",
												"src": "21045:62:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1968,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1839,
															"src": "21193:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 1969,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 453,
																	"src": "21214:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 1971,
																"indexExpression": {
																	"id": 1970,
																	"name": "_sender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1839,
																	"src": "21225:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "21214:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 1972,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "deposited",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 412,
															"src": "21214:29:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"baseExpression": {
																"id": 1973,
																"name": "balanceOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 449,
																"src": "21257:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																	"typeString": "mapping(address => uint256)"
																}
															},
															"id": 1975,
															"indexExpression": {
																"id": 1974,
																"name": "_sender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1839,
																"src": "21268:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "21257:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 1976,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 453,
																	"src": "21290:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 1978,
																"indexExpression": {
																	"id": 1977,
																	"name": "_sender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1839,
																	"src": "21301:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "21290:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 1979,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "withdrawn",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 416,
															"src": "21290:29:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1980,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "21333:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1981,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "21333:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1967,
														"name": "onUpdate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 513,
														"src": "21171:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256,uint256)"
														}
													},
													"id": 1982,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "21171:187:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1983,
												"nodeType": "EmitStatement",
												"src": "21166:192:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1985,
															"name": "_recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1831,
															"src": "21447:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 1986,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 453,
																	"src": "21471:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 1988,
																"indexExpression": {
																	"id": 1987,
																	"name": "_recipient",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1831,
																	"src": "21482:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "21471:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 1989,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "deposited",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 412,
															"src": "21471:32:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"baseExpression": {
																"id": 1990,
																"name": "balanceOf_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 449,
																"src": "21517:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																	"typeString": "mapping(address => uint256)"
																}
															},
															"id": 1992,
															"indexExpression": {
																"id": 1991,
																"name": "_recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1831,
																"src": "21528:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "21517:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 1993,
																	"name": "accountOf_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 453,
																	"src": "21553:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Account_$441_storage_$",
																		"typeString": "mapping(address => struct DiamondSafe.Account storage ref)"
																	}
																},
																"id": 1995,
																"indexExpression": {
																	"id": 1994,
																	"name": "_recipient",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1831,
																	"src": "21564:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "21553:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Account_$441_storage",
																	"typeString": "struct DiamondSafe.Account storage ref"
																}
															},
															"id": 1996,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "withdrawn",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 416,
															"src": "21553:32:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1997,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "21599:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1998,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "21599:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1984,
														"name": "onUpdate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 513,
														"src": "21425:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256,uint256)"
														}
													},
													"id": 1999,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "21425:199:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2000,
												"nodeType": "EmitStatement",
												"src": "21420:204:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 2001,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "21642:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1837,
												"id": 2002,
												"nodeType": "Return",
												"src": "21635:11:2"
											}
										]
									},
									"id": 2004,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferTokens",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1834,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1831,
												"mutability": "mutable",
												"name": "_recipient",
												"nodeType": "VariableDeclaration",
												"scope": 2004,
												"src": "19718:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1830,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19718:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1833,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 2004,
												"src": "19746:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1832,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "19746:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19708:59:2"
									},
									"returnParameters": {
										"id": 1837,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1836,
												"mutability": "mutable",
												"name": "_success",
												"nodeType": "VariableDeclaration",
												"scope": 2004,
												"src": "19786:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1835,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "19786:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19785:15:2"
									},
									"scope": 2005,
									"src": "19684:1969:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2006,
							"src": "237:21418:2"
						}
					],
					"src": "32:21624:2"
				},
				"id": 2
			},
			"contracts/IERC20.sol": {
				"ast": {
					"absolutePath": "contracts/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							2083
						]
					},
					"id": 2084,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2007,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2008,
								"nodeType": "StructuredDocumentation",
								"src": "66:70:3",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 2083,
							"linearizedBaseContracts": [
								2083
							],
							"name": "IERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2009,
										"nodeType": "StructuredDocumentation",
										"src": "160:66:3",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 2014,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2010,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "251:2:3"
									},
									"returnParameters": {
										"id": 2013,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2012,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2014,
												"src": "277:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2011,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "277:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "276:9:3"
									},
									"scope": 2083,
									"src": "231:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2015,
										"nodeType": "StructuredDocumentation",
										"src": "292:72:3",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 2022,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2018,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2017,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 2022,
												"src": "388:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2016,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "388:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "387:17:3"
									},
									"returnParameters": {
										"id": 2021,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2020,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2022,
												"src": "428:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2019,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "428:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "427:9:3"
									},
									"scope": 2083,
									"src": "369:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2023,
										"nodeType": "StructuredDocumentation",
										"src": "443:209:3",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 2032,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2028,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2025,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 2032,
												"src": "675:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2024,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "675:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2027,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 2032,
												"src": "694:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2026,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "694:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "674:35:3"
									},
									"returnParameters": {
										"id": 2031,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2030,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2032,
												"src": "728:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2029,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "728:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "727:6:3"
									},
									"scope": 2083,
									"src": "657:77:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2033,
										"nodeType": "StructuredDocumentation",
										"src": "740:264:3",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 2042,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2038,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2035,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 2042,
												"src": "1028:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2034,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1028:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2037,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 2042,
												"src": "1043:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2036,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1043:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1027:32:3"
									},
									"returnParameters": {
										"id": 2041,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2040,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2042,
												"src": "1083:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2039,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1083:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1082:9:3"
									},
									"scope": 2083,
									"src": "1009:83:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2043,
										"nodeType": "StructuredDocumentation",
										"src": "1098:642:3",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 2052,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2048,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2045,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 2052,
												"src": "1762:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2044,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1762:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2047,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 2052,
												"src": "1779:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2046,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1779:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1761:33:3"
									},
									"returnParameters": {
										"id": 2051,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2050,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2052,
												"src": "1813:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2049,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1813:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1812:6:3"
									},
									"scope": 2083,
									"src": "1745:74:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2053,
										"nodeType": "StructuredDocumentation",
										"src": "1825:296:3",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 2064,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2060,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2055,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 2064,
												"src": "2148:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2054,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2148:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2057,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 2064,
												"src": "2164:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2056,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2164:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2059,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 2064,
												"src": "2183:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2058,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2183:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2147:51:3"
									},
									"returnParameters": {
										"id": 2063,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2062,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2064,
												"src": "2217:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2061,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2217:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2216:6:3"
									},
									"scope": 2083,
									"src": "2126:97:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2065,
										"nodeType": "StructuredDocumentation",
										"src": "2229:158:3",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 2073,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2072,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2067,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 2073,
												"src": "2407:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2066,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2407:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2069,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2073,
												"src": "2429:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2068,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2429:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2071,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2073,
												"src": "2449:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2070,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2449:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2406:57:3"
									},
									"src": "2392:72:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2074,
										"nodeType": "StructuredDocumentation",
										"src": "2470:148:3",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 2082,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2081,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2076,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 2082,
												"src": "2638:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2075,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2638:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2078,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 2082,
												"src": "2661:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2077,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2661:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2080,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2082,
												"src": "2686:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2079,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2686:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2637:63:3"
									},
									"src": "2623:78:3"
								}
							],
							"scope": 2084,
							"src": "137:2566:3"
						}
					],
					"src": "33:2670:3"
				},
				"id": 3
			},
			"contracts/IERC721.sol": {
				"ast": {
					"absolutePath": "contracts/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							2976
						],
						"IERC721": [
							2199
						]
					},
					"id": 2200,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2085,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:4"
						},
						{
							"absolutePath": "lib/utils/introspection/IERC165.sol",
							"file": "../lib/utils/introspection/IERC165.sol",
							"id": 2086,
							"nodeType": "ImportDirective",
							"scope": 2200,
							"sourceUnit": 2977,
							"src": "133:48:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2088,
										"name": "IERC165",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2976,
										"src": "272:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC165_$2976",
											"typeString": "contract IERC165"
										}
									},
									"id": 2089,
									"nodeType": "InheritanceSpecifier",
									"src": "272:7:4"
								}
							],
							"contractDependencies": [
								2976
							],
							"contractKind": "interface",
							"documentation": {
								"id": 2087,
								"nodeType": "StructuredDocumentation",
								"src": "183:67:4",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 2199,
							"linearizedBaseContracts": [
								2199,
								2976
							],
							"name": "IERC721",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 2090,
										"nodeType": "StructuredDocumentation",
										"src": "286:88:4",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"id": 2098,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2097,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2092,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 2098,
												"src": "394:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2091,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "394:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2094,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2098,
												"src": "416:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2093,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "416:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2096,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 2098,
												"src": "436:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2095,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "436:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "393:67:4"
									},
									"src": "379:82:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2099,
										"nodeType": "StructuredDocumentation",
										"src": "467:94:4",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"id": 2107,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2106,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2101,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 2107,
												"src": "581:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "581:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2103,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 2107,
												"src": "604:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2102,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "604:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2105,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 2107,
												"src": "630:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2104,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "630:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "580:74:4"
									},
									"src": "566:89:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2108,
										"nodeType": "StructuredDocumentation",
										"src": "661:117:4",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"id": 2116,
									"name": "ApprovalForAll",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2110,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 2116,
												"src": "804:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2109,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "804:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2112,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 2116,
												"src": "827:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2111,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "827:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2114,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 2116,
												"src": "853:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2113,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "853:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "803:64:4"
									},
									"src": "783:85:4"
								},
								{
									"documentation": {
										"id": 2117,
										"nodeType": "StructuredDocumentation",
										"src": "874:76:4",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 2124,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2119,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 2124,
												"src": "974:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2118,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "974:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "973:15:4"
									},
									"returnParameters": {
										"id": 2123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2122,
												"mutability": "mutable",
												"name": "balance",
												"nodeType": "VariableDeclaration",
												"scope": 2124,
												"src": "1012:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1012:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1011:17:4"
									},
									"scope": 2199,
									"src": "955:74:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2125,
										"nodeType": "StructuredDocumentation",
										"src": "1035:131:4",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 2132,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2127,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 2132,
												"src": "1188:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2126,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1188:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1187:17:4"
									},
									"returnParameters": {
										"id": 2131,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2130,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 2132,
												"src": "1228:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2129,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1228:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1227:15:4"
									},
									"scope": 2199,
									"src": "1171:72:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2133,
										"nodeType": "StructuredDocumentation",
										"src": "1249:556:4",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 2144,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2142,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2135,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 2144,
												"src": "1845:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2134,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1845:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2137,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2144,
												"src": "1867:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2136,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1867:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2139,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 2144,
												"src": "1887:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2138,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1887:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2141,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 2144,
												"src": "1912:19:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2140,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1912:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1835:102:4"
									},
									"returnParameters": {
										"id": 2143,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1946:0:4"
									},
									"scope": 2199,
									"src": "1810:137:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2145,
										"nodeType": "StructuredDocumentation",
										"src": "1953:687:4",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 2154,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2147,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 2154,
												"src": "2680:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2146,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2680:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2149,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2154,
												"src": "2702:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2148,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2702:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2151,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 2154,
												"src": "2722:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2150,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2722:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2670:73:4"
									},
									"returnParameters": {
										"id": 2153,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2752:0:4"
									},
									"scope": 2199,
									"src": "2645:108:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2155,
										"nodeType": "StructuredDocumentation",
										"src": "2759:732:4",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 2164,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2157,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 2164,
												"src": "3527:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2156,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3527:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2159,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2164,
												"src": "3549:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2158,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3549:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2161,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 2164,
												"src": "3569:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3569:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3517:73:4"
									},
									"returnParameters": {
										"id": 2163,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3599:0:4"
									},
									"scope": 2199,
									"src": "3496:104:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2165,
										"nodeType": "StructuredDocumentation",
										"src": "3606:452:4",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 2172,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2167,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2172,
												"src": "4080:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2166,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4080:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2169,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 2172,
												"src": "4092:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2168,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4092:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4079:29:4"
									},
									"returnParameters": {
										"id": 2171,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4117:0:4"
									},
									"scope": 2199,
									"src": "4063:55:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2173,
										"nodeType": "StructuredDocumentation",
										"src": "4124:309:4",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 2180,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2175,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 2180,
												"src": "4465:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2174,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4465:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2177,
												"mutability": "mutable",
												"name": "_approved",
												"nodeType": "VariableDeclaration",
												"scope": 2180,
												"src": "4483:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2176,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4483:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4464:34:4"
									},
									"returnParameters": {
										"id": 2179,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4507:0:4"
									},
									"scope": 2199,
									"src": "4438:70:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2181,
										"nodeType": "StructuredDocumentation",
										"src": "4514:139:4",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 2188,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2183,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 2188,
												"src": "4679:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4679:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4678:17:4"
									},
									"returnParameters": {
										"id": 2187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2186,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 2188,
												"src": "4719:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2185,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4719:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4718:18:4"
									},
									"scope": 2199,
									"src": "4658:79:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2189,
										"nodeType": "StructuredDocumentation",
										"src": "4743:138:4",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 2198,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2191,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 2198,
												"src": "4912:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2190,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4912:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2193,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 2198,
												"src": "4927:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2192,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4927:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4911:33:4"
									},
									"returnParameters": {
										"id": 2197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2196,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2198,
												"src": "4968:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2195,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4968:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4967:6:4"
									},
									"scope": 2199,
									"src": "4886:88:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2200,
							"src": "251:4725:4"
						}
					],
					"src": "108:4868:4"
				},
				"id": 4
			},
			"contracts/Ownable.sol": {
				"ast": {
					"absolutePath": "contracts/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							318
						],
						"Ownable": [
							2309
						]
					},
					"id": 2310,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2201,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:5"
						},
						{
							"absolutePath": "contracts/Context.sol",
							"file": "./Context.sol",
							"id": 2202,
							"nodeType": "ImportDirective",
							"scope": 2310,
							"sourceUnit": 319,
							"src": "66:23:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 2204,
										"name": "Context",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 318,
										"src": "614:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Context_$318",
											"typeString": "contract Context"
										}
									},
									"id": 2205,
									"nodeType": "InheritanceSpecifier",
									"src": "614:7:5"
								}
							],
							"contractDependencies": [
								318
							],
							"contractKind": "contract",
							"documentation": {
								"id": 2203,
								"nodeType": "StructuredDocumentation",
								"src": "90:494:5",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 2309,
							"linearizedBaseContracts": [
								2309,
								318
							],
							"name": "Ownable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 2207,
									"mutability": "mutable",
									"name": "_owner",
									"nodeType": "VariableDeclaration",
									"scope": 2309,
									"src": "628:22:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2206,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "628:7:5",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 2213,
									"name": "OwnershipTransferred",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2209,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nodeType": "VariableDeclaration",
												"scope": 2213,
												"src": "684:29:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2208,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "684:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2211,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 2213,
												"src": "715:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2210,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "715:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "683:57:5"
									},
									"src": "657:84:5"
								},
								{
									"body": {
										"id": 2234,
										"nodeType": "Block",
										"src": "867:135:5",
										"statements": [
											{
												"assignments": [
													2218
												],
												"declarations": [
													{
														"constant": false,
														"id": 2218,
														"mutability": "mutable",
														"name": "msgSender",
														"nodeType": "VariableDeclaration",
														"scope": 2234,
														"src": "877:17:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2217,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "877:7:5",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2221,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2219,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 306,
														"src": "897:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
															"typeString": "function () view returns (address payable)"
														}
													},
													"id": 2220,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "897:12:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "877:32:5"
											},
											{
												"expression": {
													"id": 2224,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2222,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2207,
														"src": "919:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2223,
														"name": "msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2218,
														"src": "928:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "919:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2225,
												"nodeType": "ExpressionStatement",
												"src": "919:18:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2229,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "981:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2228,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "973:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2227,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "973:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 2230,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "973:10:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 2231,
															"name": "msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2218,
															"src": "985:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2226,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2213,
														"src": "952:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 2232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "952:43:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2233,
												"nodeType": "EmitStatement",
												"src": "947:48:5"
											}
										]
									},
									"documentation": {
										"id": 2214,
										"nodeType": "StructuredDocumentation",
										"src": "747:91:5",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 2235,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2215,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "855:2:5"
									},
									"returnParameters": {
										"id": 2216,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "867:0:5"
									},
									"scope": 2309,
									"src": "843:159:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2243,
										"nodeType": "Block",
										"src": "1133:30:5",
										"statements": [
											{
												"expression": {
													"id": 2241,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2207,
													"src": "1150:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2240,
												"id": 2242,
												"nodeType": "Return",
												"src": "1143:13:5"
											}
										]
									},
									"documentation": {
										"id": 2236,
										"nodeType": "StructuredDocumentation",
										"src": "1008:65:5",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 2244,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2237,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1092:2:5"
									},
									"returnParameters": {
										"id": 2240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2239,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2244,
												"src": "1124:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2238,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1124:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1123:9:5"
									},
									"scope": 2309,
									"src": "1078:85:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2257,
										"nodeType": "Block",
										"src": "1272:96:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2252,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2248,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2244,
																	"src": "1290:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 2249,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1290:7:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2250,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 306,
																	"src": "1301:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																		"typeString": "function () view returns (address payable)"
																	}
																},
																"id": 2251,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1301:12:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "1290:23:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 2253,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1315:34:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 2247,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1282:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2254,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1282:68:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2255,
												"nodeType": "ExpressionStatement",
												"src": "1282:68:5"
											},
											{
												"id": 2256,
												"nodeType": "PlaceholderStatement",
												"src": "1360:1:5"
											}
										]
									},
									"documentation": {
										"id": 2245,
										"nodeType": "StructuredDocumentation",
										"src": "1169:77:5",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 2258,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 2246,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1269:2:5"
									},
									"src": "1251:117:5",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2279,
										"nodeType": "Block",
										"src": "1764:91:5",
										"statements": [
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2265,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2207,
															"src": "1800:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2268,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1816:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2267,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1808:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2266,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1808:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 2269,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1808:10:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"id": 2264,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2213,
														"src": "1779:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 2270,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1779:40:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2271,
												"nodeType": "EmitStatement",
												"src": "1774:45:5"
											},
											{
												"expression": {
													"id": 2277,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2272,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2207,
														"src": "1829:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 2275,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1846:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 2274,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1838:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2273,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1838:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 2276,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1838:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "1829:19:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2278,
												"nodeType": "ExpressionStatement",
												"src": "1829:19:5"
											}
										]
									},
									"documentation": {
										"id": 2259,
										"nodeType": "StructuredDocumentation",
										"src": "1374:331:5",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 2280,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2262,
											"modifierName": {
												"id": 2261,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 2258,
												"src": "1754:9:5",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "1754:9:5"
										}
									],
									"name": "renounceOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2260,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1736:2:5"
									},
									"returnParameters": {
										"id": 2263,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1764:0:5"
									},
									"scope": 2309,
									"src": "1710:145:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2307,
										"nodeType": "Block",
										"src": "2074:170:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2294,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2289,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2283,
																"src": "2092:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 2292,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2112:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 2291,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2104:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2290,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2104:7:5",
																		"typeDescriptions": {}
																	}
																},
																"id": 2293,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2104:10:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "2092:22:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 2295,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2116:40:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 2288,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2084:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2296,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2084:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2297,
												"nodeType": "ExpressionStatement",
												"src": "2084:73:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2299,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2207,
															"src": "2193:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2300,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2283,
															"src": "2201:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2298,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2213,
														"src": "2172:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 2301,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2172:38:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2302,
												"nodeType": "EmitStatement",
												"src": "2167:43:5"
											},
											{
												"expression": {
													"id": 2305,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2303,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2207,
														"src": "2220:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2304,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2283,
														"src": "2229:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2220:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2306,
												"nodeType": "ExpressionStatement",
												"src": "2220:17:5"
											}
										]
									},
									"documentation": {
										"id": 2281,
										"nodeType": "StructuredDocumentation",
										"src": "1861:138:5",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 2308,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2286,
											"modifierName": {
												"id": 2285,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 2258,
												"src": "2064:9:5",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "2064:9:5"
										}
									],
									"name": "transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2284,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2283,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 2308,
												"src": "2031:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2282,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2031:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2030:18:5"
									},
									"returnParameters": {
										"id": 2287,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2074:0:5"
									},
									"scope": 2309,
									"src": "2004:240:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 2310,
							"src": "585:1661:5"
						}
					],
					"src": "33:2213:5"
				},
				"id": 5
			},
			"contracts/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "contracts/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							2374
						]
					},
					"id": 2375,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2311,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:6"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2312,
								"nodeType": "StructuredDocumentation",
								"src": "137:750:6",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 2374,
							"linearizedBaseContracts": [
								2374
							],
							"name": "ReentrancyGuard",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 2315,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nodeType": "VariableDeclaration",
									"scope": 2374,
									"src": "1676:41:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2313,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1676:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 2314,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1716:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 2318,
									"mutability": "constant",
									"name": "_ENTERED",
									"nodeType": "VariableDeclaration",
									"scope": 2374,
									"src": "1723:37:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2316,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1723:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 2317,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1759:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2320,
									"mutability": "mutable",
									"name": "_status",
									"nodeType": "VariableDeclaration",
									"scope": 2374,
									"src": "1767:23:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2319,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1767:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 2327,
										"nodeType": "Block",
										"src": "1811:39:6",
										"statements": [
											{
												"expression": {
													"id": 2325,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2323,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2320,
														"src": "1821:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2324,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2315,
														"src": "1831:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1821:22:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2326,
												"nodeType": "ExpressionStatement",
												"src": "1821:22:6"
											}
										]
									},
									"id": 2328,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2321,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1808:2:6"
									},
									"returnParameters": {
										"id": 2322,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1811:0:6"
									},
									"scope": 2374,
									"src": "1797:53:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2338,
										"nodeType": "Block",
										"src": "2251:79:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2331,
														"name": "_nonReentrantBefore",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2354,
														"src": "2261:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 2332,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2261:21:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2333,
												"nodeType": "ExpressionStatement",
												"src": "2261:21:6"
											},
											{
												"id": 2334,
												"nodeType": "PlaceholderStatement",
												"src": "2292:1:6"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2335,
														"name": "_nonReentrantAfter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2362,
														"src": "2303:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 2336,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2303:20:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2337,
												"nodeType": "ExpressionStatement",
												"src": "2303:20:6"
											}
										]
									},
									"documentation": {
										"id": 2329,
										"nodeType": "StructuredDocumentation",
										"src": "1856:366:6",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 2339,
									"name": "nonReentrant",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 2330,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2248:2:6"
									},
									"src": "2227:103:6",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2353,
										"nodeType": "Block",
										"src": "2375:248:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2345,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2343,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2320,
																"src": "2468:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 2344,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2318,
																"src": "2479:8:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2468:19:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 2346,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2489:33:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 2342,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2460:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2347,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2460:63:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2348,
												"nodeType": "ExpressionStatement",
												"src": "2460:63:6"
											},
											{
												"expression": {
													"id": 2351,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2349,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2320,
														"src": "2598:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2350,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2318,
														"src": "2608:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2598:18:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2352,
												"nodeType": "ExpressionStatement",
												"src": "2598:18:6"
											}
										]
									},
									"id": 2354,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantBefore",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2340,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2364:2:6"
									},
									"returnParameters": {
										"id": 2341,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2375:0:6"
									},
									"scope": 2374,
									"src": "2336:287:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2361,
										"nodeType": "Block",
										"src": "2667:171:6",
										"statements": [
											{
												"expression": {
													"id": 2359,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2357,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2320,
														"src": "2809:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2358,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2315,
														"src": "2819:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2809:22:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2360,
												"nodeType": "ExpressionStatement",
												"src": "2809:22:6"
											}
										]
									},
									"id": 2362,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantAfter",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2355,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2656:2:6"
									},
									"returnParameters": {
										"id": 2356,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2667:0:6"
									},
									"scope": 2374,
									"src": "2629:209:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2372,
										"nodeType": "Block",
										"src": "3081:43:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2370,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2368,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2320,
														"src": "3098:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 2369,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2318,
														"src": "3109:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3098:19:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2367,
												"id": 2371,
												"nodeType": "Return",
												"src": "3091:26:6"
											}
										]
									},
									"documentation": {
										"id": 2363,
										"nodeType": "StructuredDocumentation",
										"src": "2844:168:6",
										"text": " @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."
									},
									"id": 2373,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_reentrancyGuardEntered",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2364,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3049:2:6"
									},
									"returnParameters": {
										"id": 2367,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2366,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2373,
												"src": "3075:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2365,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3075:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3074:6:6"
									},
									"scope": 2374,
									"src": "3017:107:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2375,
							"src": "888:2238:6"
						}
					],
					"src": "112:3015:6"
				},
				"id": 6
			},
			"contracts/SafeERC20.sol": {
				"ast": {
					"absolutePath": "contracts/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							295
						],
						"IERC20": [
							2083
						],
						"SafeERC20": [
							2587
						],
						"SafeMath": [
							2964
						]
					},
					"id": 2588,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2376,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:7"
						},
						{
							"absolutePath": "contracts/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 2377,
							"nodeType": "ImportDirective",
							"scope": 2588,
							"sourceUnit": 2084,
							"src": "66:22:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/SafeMath.sol",
							"file": "./SafeMath.sol",
							"id": 2378,
							"nodeType": "ImportDirective",
							"scope": 2588,
							"sourceUnit": 2965,
							"src": "89:24:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/Address.sol",
							"file": "./Address.sol",
							"id": 2379,
							"nodeType": "ImportDirective",
							"scope": 2588,
							"sourceUnit": 296,
							"src": "114:23:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2380,
								"nodeType": "StructuredDocumentation",
								"src": "139:457:7",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 2587,
							"linearizedBaseContracts": [
								2587
							],
							"name": "SafeERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 2383,
									"libraryName": {
										"id": 2381,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2964,
										"src": "627:8:7",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$2964",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "621:27:7",
									"typeName": {
										"id": 2382,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "640:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"id": 2386,
									"libraryName": {
										"id": 2384,
										"name": "Address",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 295,
										"src": "659:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Address_$295",
											"typeString": "library Address"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "653:26:7",
									"typeName": {
										"id": 2385,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "671:7:7",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 2407,
										"nodeType": "Block",
										"src": "757:103:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2396,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2388,
															"src": "787:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$2083",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 2399,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2388,
																			"src": "817:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$2083",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 2400,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2032,
																		"src": "817:14:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 2401,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "817:23:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 2402,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2390,
																	"src": "842:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2403,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2392,
																	"src": "846:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2397,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "794:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2398,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "794:22:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2404,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "794:58:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$2083",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2395,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2586,
														"src": "767:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$2083_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 2405,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "767:86:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2406,
												"nodeType": "ExpressionStatement",
												"src": "767:86:7"
											}
										]
									},
									"id": 2408,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2388,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2408,
												"src": "707:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$2083",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2387,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2083,
													"src": "707:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$2083",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2390,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2408,
												"src": "721:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2389,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "721:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2392,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2408,
												"src": "733:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2391,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "733:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "706:41:7"
									},
									"returnParameters": {
										"id": 2394,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "757:0:7"
									},
									"scope": 2587,
									"src": "685:175:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2432,
										"nodeType": "Block",
										"src": "956:113:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2420,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2410,
															"src": "986:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$2083",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 2423,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2410,
																			"src": "1016:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$2083",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 2424,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2064,
																		"src": "1016:18:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 2425,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1016:27:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 2426,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2412,
																	"src": "1045:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2427,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2414,
																	"src": "1051:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2428,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2416,
																	"src": "1055:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2421,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "993:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2422,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "993:22:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2429,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "993:68:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$2083",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2419,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2586,
														"src": "966:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$2083_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 2430,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "966:96:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2431,
												"nodeType": "ExpressionStatement",
												"src": "966:96:7"
											}
										]
									},
									"id": 2433,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2417,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2410,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2433,
												"src": "892:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$2083",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2409,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2083,
													"src": "892:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$2083",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2412,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 2433,
												"src": "906:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2411,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "906:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2414,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2433,
												"src": "920:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2413,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "920:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2416,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2433,
												"src": "932:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2415,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "932:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "891:55:7"
									},
									"returnParameters": {
										"id": 2418,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "956:0:7"
									},
									"scope": 2587,
									"src": "866:203:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2475,
										"nodeType": "Block",
										"src": "1405:537:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2459,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2446,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2444,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2440,
																			"src": "1694:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2445,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1703:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1694:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2447,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1693:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2457,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 2452,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": -28,
																							"src": "1734:4:7",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$2587",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$2587",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 2451,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1726:7:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 2450,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1726:7:7",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 2453,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1726:13:7",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 2454,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2438,
																					"src": "1741:7:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 2448,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2436,
																					"src": "1710:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$2083",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 2449,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2042,
																				"src": "1710:15:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 2455,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1710:39:7",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2456,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1753:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1710:44:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2458,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1709:46:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1693:62:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 2460,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1769:56:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 2443,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1685:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2461,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1685:150:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2462,
												"nodeType": "ExpressionStatement",
												"src": "1685:150:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2464,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2436,
															"src": "1865:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$2083",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 2467,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2436,
																			"src": "1895:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$2083",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 2468,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2052,
																		"src": "1895:13:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 2469,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1895:22:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 2470,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2438,
																	"src": "1919:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2471,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2440,
																	"src": "1928:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2465,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "1872:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2466,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1872:22:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2472,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1872:62:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$2083",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2463,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2586,
														"src": "1845:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$2083_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 2473,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1845:90:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2474,
												"nodeType": "ExpressionStatement",
												"src": "1845:90:7"
											}
										]
									},
									"documentation": {
										"id": 2434,
										"nodeType": "StructuredDocumentation",
										"src": "1075:249:7",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 2476,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2441,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2436,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2476,
												"src": "1350:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$2083",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2435,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2083,
													"src": "1350:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$2083",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2438,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 2476,
												"src": "1364:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2437,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1364:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2440,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2476,
												"src": "1381:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2439,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1381:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1349:46:7"
									},
									"returnParameters": {
										"id": 2442,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1405:0:7"
									},
									"scope": 2587,
									"src": "1329:613:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2511,
										"nodeType": "Block",
										"src": "2034:197:7",
										"statements": [
											{
												"assignments": [
													2486
												],
												"declarations": [
													{
														"constant": false,
														"id": 2486,
														"mutability": "mutable",
														"name": "newAllowance",
														"nodeType": "VariableDeclaration",
														"scope": 2511,
														"src": "2044:20:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2485,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2044:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2498,
												"initialValue": {
													"arguments": [
														{
															"id": 2496,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2482,
															"src": "2111:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2491,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "2091:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$2587",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$2587",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 2490,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2083:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2489,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2083:7:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2492,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2083:13:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2493,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2480,
																	"src": "2098:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 2487,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2478,
																	"src": "2067:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$2083",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 2488,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2042,
																"src": "2067:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 2494,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2067:39:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2495,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "add",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2769,
														"src": "2067:43:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 2497,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2067:50:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2044:73:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2500,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2478,
															"src": "2147:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$2083",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 2503,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2478,
																			"src": "2177:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$2083",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 2504,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2052,
																		"src": "2177:13:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 2505,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2177:22:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 2506,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2480,
																	"src": "2201:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2507,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2486,
																	"src": "2210:12:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2501,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "2154:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2502,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2154:22:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2508,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2154:69:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$2083",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2499,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2586,
														"src": "2127:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$2083_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 2509,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2127:97:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2510,
												"nodeType": "ExpressionStatement",
												"src": "2127:97:7"
											}
										]
									},
									"id": 2512,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2478,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2512,
												"src": "1979:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$2083",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2477,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2083,
													"src": "1979:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$2083",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2480,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 2512,
												"src": "1993:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2479,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1993:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2482,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2512,
												"src": "2010:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2481,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2010:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1978:46:7"
									},
									"returnParameters": {
										"id": 2484,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2034:0:7"
									},
									"scope": 2587,
									"src": "1948:283:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2548,
										"nodeType": "Block",
										"src": "2323:242:7",
										"statements": [
											{
												"assignments": [
													2522
												],
												"declarations": [
													{
														"constant": false,
														"id": 2522,
														"mutability": "mutable",
														"name": "newAllowance",
														"nodeType": "VariableDeclaration",
														"scope": 2548,
														"src": "2333:20:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2521,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2333:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2535,
												"initialValue": {
													"arguments": [
														{
															"id": 2532,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2518,
															"src": "2400:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 2533,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2407:43:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
															},
															"value": "SafeERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2527,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "2380:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$2587",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$2587",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 2526,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2372:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2525,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2372:7:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2528,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2372:13:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2529,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2516,
																	"src": "2387:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 2523,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2514,
																	"src": "2356:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$2083",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 2524,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2042,
																"src": "2356:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 2530,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2356:39:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2531,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2893,
														"src": "2356:43:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 2534,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2356:95:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2333:118:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2537,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2514,
															"src": "2481:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$2083",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 2540,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2514,
																			"src": "2511:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$2083",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 2541,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2052,
																		"src": "2511:13:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 2542,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2511:22:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 2543,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2516,
																	"src": "2535:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2544,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2522,
																	"src": "2544:12:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2538,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "2488:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2539,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2488:22:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2545,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2488:69:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$2083",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2536,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2586,
														"src": "2461:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$2083_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 2546,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2461:97:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2547,
												"nodeType": "ExpressionStatement",
												"src": "2461:97:7"
											}
										]
									},
									"id": 2549,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2519,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2514,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2549,
												"src": "2268:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$2083",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2513,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2083,
													"src": "2268:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$2083",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2516,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 2549,
												"src": "2282:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2515,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2282:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2518,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2549,
												"src": "2299:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2517,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2299:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2267:46:7"
									},
									"returnParameters": {
										"id": 2520,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2323:0:7"
									},
									"scope": 2587,
									"src": "2237:328:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2585,
										"nodeType": "Block",
										"src": "3018:681:7",
										"statements": [
											{
												"assignments": [
													2558
												],
												"declarations": [
													{
														"constant": false,
														"id": 2558,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 2585,
														"src": "3367:23:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2557,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3367:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2567,
												"initialValue": {
													"arguments": [
														{
															"id": 2564,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2554,
															"src": "3421:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 2565,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3427:34:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2561,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2552,
																	"src": "3401:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$2083",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$2083",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 2560,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3393:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2559,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3393:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 2562,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3393:14:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2563,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 90,
														"src": "3393:27:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 2566,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3393:69:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3367:95:7"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2571,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 2568,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2558,
															"src": "3476:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2569,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3476:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2570,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3496:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3476:21:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2584,
												"nodeType": "IfStatement",
												"src": "3472:221:7",
												"trueBody": {
													"id": 2583,
													"nodeType": "Block",
													"src": "3499:194:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 2575,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2558,
																				"src": "3616:10:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 2577,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "3629:4:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 2576,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "3629:4:7",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 2578,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3628:6:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 2573,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": -1,
																				"src": "3605:3:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 2574,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "3605:10:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 2579,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3605:30:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 2580,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3637:44:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 2572,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		-18,
																		-18
																	],
																	"referencedDeclaration": -18,
																	"src": "3597:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 2581,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3597:85:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2582,
															"nodeType": "ExpressionStatement",
															"src": "3597:85:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2550,
										"nodeType": "StructuredDocumentation",
										"src": "2571:372:7",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 2586,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2552,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2586,
												"src": "2977:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$2083",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2551,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2083,
													"src": "2977:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$2083",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2554,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 2586,
												"src": "2991:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2553,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2991:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2976:33:7"
									},
									"returnParameters": {
										"id": 2556,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3018:0:7"
									},
									"scope": 2587,
									"src": "2948:751:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 2588,
							"src": "597:3104:7"
						}
					],
					"src": "33:3668:7"
				},
				"id": 7
			},
			"contracts/SafeMath.sol": {
				"ast": {
					"absolutePath": "contracts/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							2964
						]
					},
					"id": 2965,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2589,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2590,
								"nodeType": "StructuredDocumentation",
								"src": "66:563:8",
								"text": " @dev Wrappers over Solidity's arithmetic operations with added overflow\n checks.\n Arithmetic operations in Solidity wrap on overflow. This can easily result\n in bugs, because programmers usually assume that an overflow raises an\n error, which is the standard behavior in high level programming languages.\n `SafeMath` restores this intuition by reverting the transaction when an\n operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."
							},
							"fullyImplemented": true,
							"id": 2964,
							"linearizedBaseContracts": [
								2964
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2620,
										"nodeType": "Block",
										"src": "865:98:8",
										"statements": [
											{
												"assignments": [
													2603
												],
												"declarations": [
													{
														"constant": false,
														"id": 2603,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 2620,
														"src": "875:9:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2602,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "875:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2607,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2606,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2604,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2593,
														"src": "887:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 2605,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2595,
														"src": "891:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "887:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "875:17:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2610,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2608,
														"name": "c",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2603,
														"src": "906:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 2609,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2593,
														"src": "910:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "906:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2615,
												"nodeType": "IfStatement",
												"src": "902:28:8",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 2611,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "921:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 2612,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "928:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 2613,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "920:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 2601,
													"id": 2614,
													"nodeType": "Return",
													"src": "913:17:8"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 2616,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "948:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"id": 2617,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2603,
															"src": "954:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 2618,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "947:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 2601,
												"id": 2619,
												"nodeType": "Return",
												"src": "940:16:8"
											}
										]
									},
									"documentation": {
										"id": 2591,
										"nodeType": "StructuredDocumentation",
										"src": "653:131:8",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 2621,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2596,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2593,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2621,
												"src": "805:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2592,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "805:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2595,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2621,
												"src": "816:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2594,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "816:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "804:22:8"
									},
									"returnParameters": {
										"id": 2601,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2598,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2621,
												"src": "850:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2597,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "850:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2600,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2621,
												"src": "856:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2599,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "856:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "849:15:8"
									},
									"scope": 2964,
									"src": "789:174:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2647,
										"nodeType": "Block",
										"src": "1185:75:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2635,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2633,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2626,
														"src": "1199:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 2634,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2624,
														"src": "1203:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1199:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2640,
												"nodeType": "IfStatement",
												"src": "1195:28:8",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 2636,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1214:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 2637,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1221:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 2638,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1213:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 2632,
													"id": 2639,
													"nodeType": "Return",
													"src": "1206:17:8"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 2641,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1241:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2644,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2642,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2624,
																"src": "1247:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 2643,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2626,
																"src": "1251:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1247:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 2645,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1240:13:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 2632,
												"id": 2646,
												"nodeType": "Return",
												"src": "1233:20:8"
											}
										]
									},
									"documentation": {
										"id": 2622,
										"nodeType": "StructuredDocumentation",
										"src": "969:135:8",
										"text": " @dev Returns the substraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 2648,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2627,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2624,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2648,
												"src": "1125:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2623,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1125:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2626,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2648,
												"src": "1136:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2625,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1136:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1124:22:8"
									},
									"returnParameters": {
										"id": 2632,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2629,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2648,
												"src": "1170:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2628,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1170:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2631,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2648,
												"src": "1176:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2630,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1176:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1169:15:8"
									},
									"scope": 2964,
									"src": "1109:151:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2688,
										"nodeType": "Block",
										"src": "1484:359:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2662,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2660,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2651,
														"src": "1716:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2661,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1721:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1716:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2667,
												"nodeType": "IfStatement",
												"src": "1712:28:8",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "74727565",
																"id": 2663,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1732:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															{
																"hexValue": "30",
																"id": 2664,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1738:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 2665,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1731:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 2659,
													"id": 2666,
													"nodeType": "Return",
													"src": "1724:16:8"
												}
											},
											{
												"assignments": [
													2669
												],
												"declarations": [
													{
														"constant": false,
														"id": 2669,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 2688,
														"src": "1750:9:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2668,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1750:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2673,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2672,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2670,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2651,
														"src": "1762:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 2671,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2653,
														"src": "1766:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1762:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1750:17:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2678,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2676,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2674,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2669,
															"src": "1781:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"id": 2675,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2651,
															"src": "1785:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1781:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 2677,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2653,
														"src": "1790:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1781:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2683,
												"nodeType": "IfStatement",
												"src": "1777:33:8",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 2679,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1801:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 2680,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1808:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 2681,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1800:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 2659,
													"id": 2682,
													"nodeType": "Return",
													"src": "1793:17:8"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 2684,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1828:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"id": 2685,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2669,
															"src": "1834:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 2686,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1827:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 2659,
												"id": 2687,
												"nodeType": "Return",
												"src": "1820:16:8"
											}
										]
									},
									"documentation": {
										"id": 2649,
										"nodeType": "StructuredDocumentation",
										"src": "1266:137:8",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 2689,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2654,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2651,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2689,
												"src": "1424:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2650,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1424:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2653,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2689,
												"src": "1435:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2652,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1435:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1423:22:8"
									},
									"returnParameters": {
										"id": 2659,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2656,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2689,
												"src": "1469:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2655,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1469:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2658,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2689,
												"src": "1475:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2657,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1475:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1468:15:8"
									},
									"scope": 2964,
									"src": "1408:435:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2715,
										"nodeType": "Block",
										"src": "2068:76:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2703,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2701,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2694,
														"src": "2082:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2702,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2087:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2082:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2708,
												"nodeType": "IfStatement",
												"src": "2078:29:8",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 2704,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2098:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 2705,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2105:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 2706,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2097:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 2700,
													"id": 2707,
													"nodeType": "Return",
													"src": "2090:17:8"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 2709,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2125:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2712,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2710,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2692,
																"src": "2131:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2711,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2694,
																"src": "2135:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2131:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 2713,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2124:13:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 2700,
												"id": 2714,
												"nodeType": "Return",
												"src": "2117:20:8"
											}
										]
									},
									"documentation": {
										"id": 2690,
										"nodeType": "StructuredDocumentation",
										"src": "1849:138:8",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 2716,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2695,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2692,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2716,
												"src": "2008:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2691,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2008:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2694,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2716,
												"src": "2019:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2693,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2019:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2007:22:8"
									},
									"returnParameters": {
										"id": 2700,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2697,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2716,
												"src": "2053:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2696,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2053:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2699,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2716,
												"src": "2059:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2698,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2059:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2052:15:8"
									},
									"scope": 2964,
									"src": "1992:152:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2742,
										"nodeType": "Block",
										"src": "2379:76:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2730,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2728,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2721,
														"src": "2393:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2729,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2398:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2393:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2735,
												"nodeType": "IfStatement",
												"src": "2389:29:8",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 2731,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2409:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 2732,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2416:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 2733,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2408:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 2727,
													"id": 2734,
													"nodeType": "Return",
													"src": "2401:17:8"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 2736,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2436:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2739,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2737,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2719,
																"src": "2442:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 2738,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2721,
																"src": "2446:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2442:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 2740,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2435:13:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 2727,
												"id": 2741,
												"nodeType": "Return",
												"src": "2428:20:8"
											}
										]
									},
									"documentation": {
										"id": 2717,
										"nodeType": "StructuredDocumentation",
										"src": "2150:148:8",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 2743,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2722,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2719,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2743,
												"src": "2319:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2718,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2319:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2721,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2743,
												"src": "2330:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2720,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2330:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2318:22:8"
									},
									"returnParameters": {
										"id": 2727,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2724,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2743,
												"src": "2364:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2723,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2364:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2726,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2743,
												"src": "2370:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2725,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2370:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2363:15:8"
									},
									"scope": 2964,
									"src": "2303:152:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2768,
										"nodeType": "Block",
										"src": "2757:108:8",
										"statements": [
											{
												"assignments": [
													2754
												],
												"declarations": [
													{
														"constant": false,
														"id": 2754,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 2768,
														"src": "2767:9:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2753,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2767:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2758,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2757,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2755,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2746,
														"src": "2779:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 2756,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2748,
														"src": "2783:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2779:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2767:17:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2762,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2760,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2754,
																"src": "2802:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 2761,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2746,
																"src": "2807:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2802:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 2763,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2810:29:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 2759,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2794:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2764,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2794:46:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2765,
												"nodeType": "ExpressionStatement",
												"src": "2794:46:8"
											},
											{
												"expression": {
													"id": 2766,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2754,
													"src": "2857:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2752,
												"id": 2767,
												"nodeType": "Return",
												"src": "2850:8:8"
											}
										]
									},
									"documentation": {
										"id": 2744,
										"nodeType": "StructuredDocumentation",
										"src": "2461:224:8",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 2769,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2749,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2746,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2769,
												"src": "2703:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2745,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2703:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2748,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2769,
												"src": "2714:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2747,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2714:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2702:22:8"
									},
									"returnParameters": {
										"id": 2752,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2751,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2769,
												"src": "2748:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2750,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2748:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2747:9:8"
									},
									"scope": 2964,
									"src": "2690:175:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2790,
										"nodeType": "Block",
										"src": "3203:88:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2782,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2780,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2774,
																"src": "3221:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 2781,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2772,
																"src": "3226:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3221:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 2783,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3229:32:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 2779,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "3213:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2784,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3213:49:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2785,
												"nodeType": "ExpressionStatement",
												"src": "3213:49:8"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2788,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2786,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2772,
														"src": "3279:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 2787,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2774,
														"src": "3283:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3279:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2778,
												"id": 2789,
												"nodeType": "Return",
												"src": "3272:12:8"
											}
										]
									},
									"documentation": {
										"id": 2770,
										"nodeType": "StructuredDocumentation",
										"src": "2871:260:8",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 2791,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2775,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2772,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2791,
												"src": "3149:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2771,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3149:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2774,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2791,
												"src": "3160:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2773,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3160:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3148:22:8"
									},
									"returnParameters": {
										"id": 2778,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2777,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2791,
												"src": "3194:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2776,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3194:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3193:9:8"
									},
									"scope": 2964,
									"src": "3136:155:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2824,
										"nodeType": "Block",
										"src": "3605:148:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2803,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2801,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2794,
														"src": "3619:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2802,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3624:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3619:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2806,
												"nodeType": "IfStatement",
												"src": "3615:20:8",
												"trueBody": {
													"expression": {
														"hexValue": "30",
														"id": 2804,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3634:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"functionReturnParameters": 2800,
													"id": 2805,
													"nodeType": "Return",
													"src": "3627:8:8"
												}
											},
											{
												"assignments": [
													2808
												],
												"declarations": [
													{
														"constant": false,
														"id": 2808,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 2824,
														"src": "3645:9:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2807,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3645:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2812,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2811,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2809,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2794,
														"src": "3657:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 2810,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2796,
														"src": "3661:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3657:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3645:17:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2818,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2816,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2814,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2808,
																	"src": "3680:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2815,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2794,
																	"src": "3684:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3680:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 2817,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2796,
																"src": "3689:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3680:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 2819,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3692:35:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 2813,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "3672:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2820,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3672:56:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2821,
												"nodeType": "ExpressionStatement",
												"src": "3672:56:8"
											},
											{
												"expression": {
													"id": 2822,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2808,
													"src": "3745:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2800,
												"id": 2823,
												"nodeType": "Return",
												"src": "3738:8:8"
											}
										]
									},
									"documentation": {
										"id": 2792,
										"nodeType": "StructuredDocumentation",
										"src": "3297:236:8",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 2825,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2797,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2794,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2825,
												"src": "3551:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2793,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3551:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2796,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2825,
												"src": "3562:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2795,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3562:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3550:22:8"
									},
									"returnParameters": {
										"id": 2800,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2799,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2825,
												"src": "3596:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2798,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3596:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3595:9:8"
									},
									"scope": 2964,
									"src": "3538:215:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2846,
										"nodeType": "Block",
										"src": "4284:83:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2838,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2836,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2830,
																"src": "4302:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2837,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4306:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4302:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 2839,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4309:28:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 2835,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4294:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2840,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4294:44:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2841,
												"nodeType": "ExpressionStatement",
												"src": "4294:44:8"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2844,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2842,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2828,
														"src": "4355:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 2843,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2830,
														"src": "4359:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4355:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2834,
												"id": 2845,
												"nodeType": "Return",
												"src": "4348:12:8"
											}
										]
									},
									"documentation": {
										"id": 2826,
										"nodeType": "StructuredDocumentation",
										"src": "3759:453:8",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2847,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2831,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2828,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2847,
												"src": "4230:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2827,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4230:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2830,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2847,
												"src": "4241:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2829,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4241:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4229:22:8"
									},
									"returnParameters": {
										"id": 2834,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2833,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2847,
												"src": "4275:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2832,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4275:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4274:9:8"
									},
									"scope": 2964,
									"src": "4217:150:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2868,
										"nodeType": "Block",
										"src": "4887:81:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2860,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2858,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2852,
																"src": "4905:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2859,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4909:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4905:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 2861,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4912:26:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 2857,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4897:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2862,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4897:42:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2863,
												"nodeType": "ExpressionStatement",
												"src": "4897:42:8"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2866,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2864,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2850,
														"src": "4956:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 2865,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2852,
														"src": "4960:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4956:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2856,
												"id": 2867,
												"nodeType": "Return",
												"src": "4949:12:8"
											}
										]
									},
									"documentation": {
										"id": 2848,
										"nodeType": "StructuredDocumentation",
										"src": "4373:442:8",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2869,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2853,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2850,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2869,
												"src": "4833:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2849,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4833:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2852,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2869,
												"src": "4844:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2851,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4844:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4832:22:8"
									},
									"returnParameters": {
										"id": 2856,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2855,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2869,
												"src": "4878:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2854,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4878:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4877:9:8"
									},
									"scope": 2964,
									"src": "4820:148:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2892,
										"nodeType": "Block",
										"src": "5527:68:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2884,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2882,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2874,
																"src": "5545:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 2883,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2872,
																"src": "5550:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5545:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2885,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2876,
															"src": "5553:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 2881,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "5537:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2886,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5537:29:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2887,
												"nodeType": "ExpressionStatement",
												"src": "5537:29:8"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2890,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2888,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2872,
														"src": "5583:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 2889,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2874,
														"src": "5587:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5583:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2880,
												"id": 2891,
												"nodeType": "Return",
												"src": "5576:12:8"
											}
										]
									},
									"documentation": {
										"id": 2870,
										"nodeType": "StructuredDocumentation",
										"src": "4974:453:8",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 2893,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2877,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2872,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2893,
												"src": "5445:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2871,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5445:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2874,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2893,
												"src": "5456:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2873,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5456:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2876,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 2893,
												"src": "5467:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2875,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5467:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5444:50:8"
									},
									"returnParameters": {
										"id": 2880,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2879,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2893,
												"src": "5518:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2878,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5518:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5517:9:8"
									},
									"scope": 2964,
									"src": "5432:163:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2916,
										"nodeType": "Block",
										"src": "6347:67:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2908,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2906,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2898,
																"src": "6365:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2907,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6369:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6365:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2909,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2900,
															"src": "6372:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 2905,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "6357:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2910,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6357:28:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2911,
												"nodeType": "ExpressionStatement",
												"src": "6357:28:8"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2914,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2912,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2896,
														"src": "6402:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 2913,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2898,
														"src": "6406:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6402:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2904,
												"id": 2915,
												"nodeType": "Return",
												"src": "6395:12:8"
											}
										]
									},
									"documentation": {
										"id": 2894,
										"nodeType": "StructuredDocumentation",
										"src": "5601:646:8",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryDiv}.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2917,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2901,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2896,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2917,
												"src": "6265:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2895,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6265:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2898,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2917,
												"src": "6276:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2897,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6276:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2900,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 2917,
												"src": "6287:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2899,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6287:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6264:50:8"
									},
									"returnParameters": {
										"id": 2904,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2903,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2917,
												"src": "6338:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2902,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6338:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6337:9:8"
									},
									"scope": 2964,
									"src": "6252:162:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2940,
										"nodeType": "Block",
										"src": "7155:67:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2932,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2930,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2922,
																"src": "7173:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2931,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7177:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "7173:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2933,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2924,
															"src": "7180:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 2929,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "7165:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2934,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7165:28:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2935,
												"nodeType": "ExpressionStatement",
												"src": "7165:28:8"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2938,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2936,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2920,
														"src": "7210:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 2937,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2922,
														"src": "7214:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7210:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2928,
												"id": 2939,
												"nodeType": "Return",
												"src": "7203:12:8"
											}
										]
									},
									"documentation": {
										"id": 2918,
										"nodeType": "StructuredDocumentation",
										"src": "6420:635:8",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2941,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2925,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2920,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2941,
												"src": "7073:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2919,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7073:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2922,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2941,
												"src": "7084:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2921,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7084:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2924,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 2941,
												"src": "7095:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2923,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7095:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7072:50:8"
									},
									"returnParameters": {
										"id": 2928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2927,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2941,
												"src": "7146:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2926,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7146:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7145:9:8"
									},
									"scope": 2964,
									"src": "7060:162:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2962,
										"nodeType": "Block",
										"src": "7350:103:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2952,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2950,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2945,
														"src": "7364:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 2951,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2943,
														"src": "7368:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7364:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2960,
													"nodeType": "Block",
													"src": "7410:37:8",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2958,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2956,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2943,
																	"src": "7431:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 2957,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2945,
																	"src": "7435:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7431:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 2949,
															"id": 2959,
															"nodeType": "Return",
															"src": "7424:12:8"
														}
													]
												},
												"id": 2961,
												"nodeType": "IfStatement",
												"src": "7360:87:8",
												"trueBody": {
													"id": 2955,
													"nodeType": "Block",
													"src": "7371:33:8",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 2953,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7392:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 2949,
															"id": 2954,
															"nodeType": "Return",
															"src": "7385:8:8"
														}
													]
												}
											}
										]
									},
									"id": 2963,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeSub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2946,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2943,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2963,
												"src": "7305:6:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2942,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "7305:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2945,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2963,
												"src": "7313:6:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2944,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "7313:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7304:16:8"
									},
									"returnParameters": {
										"id": 2949,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2948,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2963,
												"src": "7344:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2947,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "7344:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7343:6:8"
									},
									"scope": 2964,
									"src": "7288:165:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2965,
							"src": "630:6825:8"
						}
					],
					"src": "33:7422:8"
				},
				"id": 8
			},
			"lib/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "lib/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							2976
						]
					},
					"id": 2977,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2966,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2967,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:9",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 2976,
							"linearizedBaseContracts": [
								2976
							],
							"name": "IERC165",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2968,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:9",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 2975,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2971,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2970,
												"mutability": "mutable",
												"name": "interfaceId",
												"nodeType": "VariableDeclaration",
												"scope": 2975,
												"src": "801:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 2969,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:9"
									},
									"returnParameters": {
										"id": 2974,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2973,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2975,
												"src": "844:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2972,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:9"
									},
									"scope": 2976,
									"src": "774:76:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2977,
							"src": "405:447:9"
						}
					],
					"src": "100:753:9"
				},
				"id": 9
			}
		}
	}
}