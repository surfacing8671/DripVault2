/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DiamondSafeInterface extends ethers.utils.Interface {
  functions: {
    "accountOf(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bnbReceiver()": FunctionFragment;
    "buyPrice()": FunctionFragment;
    "calculateSharesReceived(uint256)": FunctionFragment;
    "calculateTokensReceived(uint256)": FunctionFragment;
    "checkImmunity(address)": FunctionFragment;
    "compound()": FunctionFragment;
    "dailyEstimate(address)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositTo(address,uint256)": FunctionFragment;
    "dividendsOf(address)": FunctionFragment;
    "donate(uint256)": FunctionFragment;
    "dripPoolBalance()": FunctionFragment;
    "dripRate()": FunctionFragment;
    "forDivs()": FunctionFragment;
    "forPool()": FunctionFragment;
    "harvest()": FunctionFragment;
    "jpeg(uint256)": FunctionFragment;
    "lastPayout()": FunctionFragment;
    "lastRebaseTime()": FunctionFragment;
    "myEarnings()": FunctionFragment;
    "myTokens()": FunctionFragment;
    "owner()": FunctionFragment;
    "payoutFrequency()": FunctionFragment;
    "rebaseFrequency()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requiredBalance()": FunctionFragment;
    "sellPrice()": FunctionFragment;
    "setFeeSplit(uint256,uint256)": FunctionFragment;
    "setImmunityToken(address[])": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "tokenAddress()": FunctionFragment;
    "tokenBalance(address)": FunctionFragment;
    "totalBalance()": FunctionFragment;
    "totalClaims()": FunctionFragment;
    "totalDeposits()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalTxs()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "users()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "accountOf", values: [string]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bnbReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buyPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateSharesReceived",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTokensReceived",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkImmunity",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "compound", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dailyEstimate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dividendsOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dripPoolBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dripRate", values?: undefined): string;
  encodeFunctionData(functionFragment: "forDivs", values?: undefined): string;
  encodeFunctionData(functionFragment: "forPool", values?: undefined): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(functionFragment: "jpeg", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "lastPayout",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRebaseTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "myEarnings",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "myTokens", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payoutFrequency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebaseFrequency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sellPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setFeeSplit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setImmunityToken",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaims",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalTxs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "users", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "accountOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bnbReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateSharesReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTokensReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkImmunity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "compound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dailyEstimate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dividendsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dripPoolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dripRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "forDivs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "forPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jpeg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastPayout", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRebaseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "myEarnings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "myTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payoutFrequency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebaseFrequency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImmunityToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalTxs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "onCompound(address,uint256,uint256,uint256)": EventFragment;
    "onDeposit(address,uint256,uint256,uint256)": EventFragment;
    "onDonate(address,uint256,uint256)": EventFragment;
    "onDonateBNB(address,uint256,uint256)": EventFragment;
    "onRebase(uint256,uint256)": EventFragment;
    "onSetFeeSplit(uint256,uint256,uint256)": EventFragment;
    "onSetImmunityToken(address,address[],address[],uint256)": EventFragment;
    "onTransfer(address,address,uint256,uint256)": EventFragment;
    "onUpdate(address,uint256,uint256,uint256,uint256)": EventFragment;
    "onWithdraw(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "onCompound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "onDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "onDonate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "onDonateBNB"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "onRebase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "onSetFeeSplit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "onSetImmunityToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "onTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "onUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "onWithdraw"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type onCompoundEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    _user: string;
    _compounded: BigNumber;
    tokensMinted: BigNumber;
    timestamp: BigNumber;
  }
>;

export type onDepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    _user: string;
    _deposited: BigNumber;
    tokensMinted: BigNumber;
    timestamp: BigNumber;
  }
>;

export type onDonateEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    from: string;
    _contributed: BigNumber;
    timestamp: BigNumber;
  }
>;

export type onDonateBNBEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    from: string;
    amount: BigNumber;
    timestamp: BigNumber;
  }
>;

export type onRebaseEvent = TypedEvent<
  [BigNumber, BigNumber] & { balance: BigNumber; timestamp: BigNumber }
>;

export type onSetFeeSplitEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    _pool: BigNumber;
    _divs: BigNumber;
    timestamp: BigNumber;
  }
>;

export type onSetImmunityTokenEvent = TypedEvent<
  [string, string[], string[], BigNumber] & {
    _caller: string;
    oldOne: string[];
    newOne: string[];
    timestamp: BigNumber;
  }
>;

export type onTransferEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    from: string;
    to: string;
    tokens: BigNumber;
    timestamp: BigNumber;
  }
>;

export type onUpdateEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    _user: string;
    invested: BigNumber;
    tokens: BigNumber;
    soldTokens: BigNumber;
    timestamp: BigNumber;
  }
>;

export type onWithdraw_address_uint256_uint256_uint256_Event = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    _user: string;
    _liquidated: BigNumber;
    tokensEarned: BigNumber;
    timestamp: BigNumber;
  }
>;

export type onWithdraw_address_uint256_uint256_Event = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _user: string;
    _withdrawn: BigNumber;
    timestamp: BigNumber;
  }
>;

export class DiamondSafe extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DiamondSafeInterface;

  functions: {
    accountOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ]
      ]
    >;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bnbReceiver(overrides?: CallOverrides): Promise<[string]>;

    buyPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateSharesReceived(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateTokensReceived(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkImmunity(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isImmune: boolean }>;

    compound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dailyEstimate(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositTo(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dividendsOf(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    donate(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dripPoolBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    dripRate(overrides?: CallOverrides): Promise<[number]>;

    forDivs(overrides?: CallOverrides): Promise<[BigNumber]>;

    forPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    jpeg(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    lastPayout(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastRebaseTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    myEarnings(overrides?: CallOverrides): Promise<[BigNumber]>;

    myTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payoutFrequency(overrides?: CallOverrides): Promise<[BigNumber]>;

    rebaseFrequency(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requiredBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    setFeeSplit(
      _pool: BigNumberish,
      _divs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setImmunityToken(
      _contract: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    tokenAddress(overrides?: CallOverrides): Promise<[string]>;

    tokenBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalClaims(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalTxs(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    users(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accountOf(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  bnbReceiver(overrides?: CallOverrides): Promise<string>;

  buyPrice(overrides?: CallOverrides): Promise<BigNumber>;

  calculateSharesReceived(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateTokensReceived(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkImmunity(_user: string, overrides?: CallOverrides): Promise<boolean>;

  compound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dailyEstimate(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositTo(
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dividendsOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  donate(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dripPoolBalance(overrides?: CallOverrides): Promise<BigNumber>;

  dripRate(overrides?: CallOverrides): Promise<number>;

  forDivs(overrides?: CallOverrides): Promise<BigNumber>;

  forPool(overrides?: CallOverrides): Promise<BigNumber>;

  harvest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  jpeg(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  lastPayout(overrides?: CallOverrides): Promise<BigNumber>;

  lastRebaseTime(overrides?: CallOverrides): Promise<BigNumber>;

  myEarnings(overrides?: CallOverrides): Promise<BigNumber>;

  myTokens(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  payoutFrequency(overrides?: CallOverrides): Promise<BigNumber>;

  rebaseFrequency(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requiredBalance(overrides?: CallOverrides): Promise<BigNumber>;

  sellPrice(overrides?: CallOverrides): Promise<BigNumber>;

  setFeeSplit(
    _pool: BigNumberish,
    _divs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setImmunityToken(
    _contract: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  tokenAddress(overrides?: CallOverrides): Promise<string>;

  tokenBalance(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  totalClaims(overrides?: CallOverrides): Promise<BigNumber>;

  totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalTxs(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  users(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accountOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    bnbReceiver(overrides?: CallOverrides): Promise<string>;

    buyPrice(overrides?: CallOverrides): Promise<BigNumber>;

    calculateSharesReceived(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTokensReceived(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkImmunity(_user: string, overrides?: CallOverrides): Promise<boolean>;

    compound(overrides?: CallOverrides): Promise<void>;

    dailyEstimate(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositTo(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dividendsOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    donate(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dripPoolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    dripRate(overrides?: CallOverrides): Promise<number>;

    forDivs(overrides?: CallOverrides): Promise<BigNumber>;

    forPool(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(overrides?: CallOverrides): Promise<void>;

    jpeg(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    lastPayout(overrides?: CallOverrides): Promise<BigNumber>;

    lastRebaseTime(overrides?: CallOverrides): Promise<BigNumber>;

    myEarnings(overrides?: CallOverrides): Promise<BigNumber>;

    myTokens(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    payoutFrequency(overrides?: CallOverrides): Promise<BigNumber>;

    rebaseFrequency(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requiredBalance(overrides?: CallOverrides): Promise<BigNumber>;

    sellPrice(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeSplit(
      _pool: BigNumberish,
      _divs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setImmunityToken(
      _contract: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    tokenAddress(overrides?: CallOverrides): Promise<string>;

    tokenBalance(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaims(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalTxs(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    users(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "onCompound(address,uint256,uint256,uint256)"(
      _user?: string | null,
      _compounded?: null,
      tokensMinted?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _user: string;
        _compounded: BigNumber;
        tokensMinted: BigNumber;
        timestamp: BigNumber;
      }
    >;

    onCompound(
      _user?: string | null,
      _compounded?: null,
      tokensMinted?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _user: string;
        _compounded: BigNumber;
        tokensMinted: BigNumber;
        timestamp: BigNumber;
      }
    >;

    "onDeposit(address,uint256,uint256,uint256)"(
      _user?: string | null,
      _deposited?: null,
      tokensMinted?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _user: string;
        _deposited: BigNumber;
        tokensMinted: BigNumber;
        timestamp: BigNumber;
      }
    >;

    onDeposit(
      _user?: string | null,
      _deposited?: null,
      tokensMinted?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _user: string;
        _deposited: BigNumber;
        tokensMinted: BigNumber;
        timestamp: BigNumber;
      }
    >;

    "onDonate(address,uint256,uint256)"(
      from?: string | null,
      _contributed?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { from: string; _contributed: BigNumber; timestamp: BigNumber }
    >;

    onDonate(
      from?: string | null,
      _contributed?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { from: string; _contributed: BigNumber; timestamp: BigNumber }
    >;

    "onDonateBNB(address,uint256,uint256)"(
      from?: string | null,
      amount?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { from: string; amount: BigNumber; timestamp: BigNumber }
    >;

    onDonateBNB(
      from?: string | null,
      amount?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { from: string; amount: BigNumber; timestamp: BigNumber }
    >;

    "onRebase(uint256,uint256)"(
      balance?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { balance: BigNumber; timestamp: BigNumber }
    >;

    onRebase(
      balance?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { balance: BigNumber; timestamp: BigNumber }
    >;

    "onSetFeeSplit(uint256,uint256,uint256)"(
      _pool?: null,
      _divs?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { _pool: BigNumber; _divs: BigNumber; timestamp: BigNumber }
    >;

    onSetFeeSplit(
      _pool?: null,
      _divs?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { _pool: BigNumber; _divs: BigNumber; timestamp: BigNumber }
    >;

    "onSetImmunityToken(address,address[],address[],uint256)"(
      _caller?: string | null,
      oldOne?: null,
      newOne?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string[], string[], BigNumber],
      {
        _caller: string;
        oldOne: string[];
        newOne: string[];
        timestamp: BigNumber;
      }
    >;

    onSetImmunityToken(
      _caller?: string | null,
      oldOne?: null,
      newOne?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string[], string[], BigNumber],
      {
        _caller: string;
        oldOne: string[];
        newOne: string[];
        timestamp: BigNumber;
      }
    >;

    "onTransfer(address,address,uint256,uint256)"(
      from?: string | null,
      to?: string | null,
      tokens?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { from: string; to: string; tokens: BigNumber; timestamp: BigNumber }
    >;

    onTransfer(
      from?: string | null,
      to?: string | null,
      tokens?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { from: string; to: string; tokens: BigNumber; timestamp: BigNumber }
    >;

    "onUpdate(address,uint256,uint256,uint256,uint256)"(
      _user?: string | null,
      invested?: null,
      tokens?: null,
      soldTokens?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        _user: string;
        invested: BigNumber;
        tokens: BigNumber;
        soldTokens: BigNumber;
        timestamp: BigNumber;
      }
    >;

    onUpdate(
      _user?: string | null,
      invested?: null,
      tokens?: null,
      soldTokens?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        _user: string;
        invested: BigNumber;
        tokens: BigNumber;
        soldTokens: BigNumber;
        timestamp: BigNumber;
      }
    >;

    "onWithdraw(address,uint256,uint256,uint256)"(
      _user?: string | null,
      _liquidated?: null,
      tokensEarned?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _user: string;
        _liquidated: BigNumber;
        tokensEarned: BigNumber;
        timestamp: BigNumber;
      }
    >;

    "onWithdraw(address,uint256,uint256)"(
      _user?: string | null,
      _withdrawn?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _user: string; _withdrawn: BigNumber; timestamp: BigNumber }
    >;
  };

  estimateGas: {
    accountOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    bnbReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    buyPrice(overrides?: CallOverrides): Promise<BigNumber>;

    calculateSharesReceived(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTokensReceived(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkImmunity(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    compound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dailyEstimate(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositTo(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dividendsOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    donate(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dripPoolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    dripRate(overrides?: CallOverrides): Promise<BigNumber>;

    forDivs(overrides?: CallOverrides): Promise<BigNumber>;

    forPool(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    jpeg(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    lastPayout(overrides?: CallOverrides): Promise<BigNumber>;

    lastRebaseTime(overrides?: CallOverrides): Promise<BigNumber>;

    myEarnings(overrides?: CallOverrides): Promise<BigNumber>;

    myTokens(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payoutFrequency(overrides?: CallOverrides): Promise<BigNumber>;

    rebaseFrequency(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requiredBalance(overrides?: CallOverrides): Promise<BigNumber>;

    sellPrice(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeSplit(
      _pool: BigNumberish,
      _divs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setImmunityToken(
      _contract: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBalance(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaims(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalTxs(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    users(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bnbReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateSharesReceived(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTokensReceived(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkImmunity(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dailyEstimate(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositTo(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dividendsOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donate(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dripPoolBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dripRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forDivs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    jpeg(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastPayout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRebaseTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    myEarnings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    myTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payoutFrequency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebaseFrequency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requiredBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFeeSplit(
      _pool: BigNumberish,
      _divs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setImmunityToken(
      _contract: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalClaims(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalTxs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    users(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
